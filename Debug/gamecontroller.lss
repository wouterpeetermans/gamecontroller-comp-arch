
gamecontroller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007fa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00802000  000007fa  0000088e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  0080200e  0080200e  0000089c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000089c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000008cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000188  00000000  00000000  0000090c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f1d  00000000  00000000  00000a94  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000625  00000000  00000000  000019b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001915  00000000  00000000  00001fd6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000364  00000000  00000000  000038ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00011d3c  00000000  00000000  00003c50  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000054b  00000000  00000000  0001598c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  00015ed7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000058d5  00000000  00000000  00015fcf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__ctors_end>
   4:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
   8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
   c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  10:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  14:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  18:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  1c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  20:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  24:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  28:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  2c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  30:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  34:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  38:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  3c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  40:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  44:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  48:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  4c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  50:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  54:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  58:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  5c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  60:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  64:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  68:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  6c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  70:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  74:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  78:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  7c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  80:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  84:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  88:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  8c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  90:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  94:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  98:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  9c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  a0:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  a4:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  a8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  ac:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  b0:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  b4:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  b8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  bc:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  c0:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  c4:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  c8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  cc:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  d0:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  d4:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  d8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  dc:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  e0:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  e4:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  e8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  ec:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  f0:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  f4:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  f8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  fc:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 100:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 104:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 108:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 10c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 110:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 114:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 118:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 11c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 120:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 124:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 128:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 12c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 130:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 134:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 138:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 13c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 140:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 144:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 148:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 14c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 150:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 154:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 158:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 15c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 160:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 164:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 168:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>

0000016c <__ctors_end>:
 16c:	11 24       	eor	r1, r1
 16e:	1f be       	out	0x3f, r1	; 63
 170:	cf ef       	ldi	r28, 0xFF	; 255
 172:	cd bf       	out	0x3d, r28	; 61
 174:	d7 e2       	ldi	r29, 0x27	; 39
 176:	de bf       	out	0x3e, r29	; 62

00000178 <__do_copy_data>:
 178:	10 e2       	ldi	r17, 0x20	; 32
 17a:	a0 e0       	ldi	r26, 0x00	; 0
 17c:	b0 e2       	ldi	r27, 0x20	; 32
 17e:	ea ef       	ldi	r30, 0xFA	; 250
 180:	f7 e0       	ldi	r31, 0x07	; 7
 182:	02 c0       	rjmp	.+4      	; 0x188 <__do_copy_data+0x10>
 184:	05 90       	lpm	r0, Z+
 186:	0d 92       	st	X+, r0
 188:	ae 30       	cpi	r26, 0x0E	; 14
 18a:	b1 07       	cpc	r27, r17
 18c:	d9 f7       	brne	.-10     	; 0x184 <__do_copy_data+0xc>

0000018e <__do_clear_bss>:
 18e:	20 e2       	ldi	r18, 0x20	; 32
 190:	ae e0       	ldi	r26, 0x0E	; 14
 192:	b0 e2       	ldi	r27, 0x20	; 32
 194:	01 c0       	rjmp	.+2      	; 0x198 <.do_clear_bss_start>

00000196 <.do_clear_bss_loop>:
 196:	1d 92       	st	X+, r1

00000198 <.do_clear_bss_start>:
 198:	a4 31       	cpi	r26, 0x14	; 20
 19a:	b2 07       	cpc	r27, r18
 19c:	e1 f7       	brne	.-8      	; 0x196 <.do_clear_bss_loop>
 19e:	0e 94 fd 00 	call	0x1fa	; 0x1fa <main>
 1a2:	0c 94 fb 03 	jmp	0x7f6	; 0x7f6 <_exit>

000001a6 <__bad_interrupt>:
 1a6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001aa <AccInit>:
#include "acc.h"



void AccInit(void)
{
 1aa:	cf 93       	push	r28
 1ac:	df 93       	push	r29
 1ae:	cd b7       	in	r28, 0x3d	; 61
 1b0:	de b7       	in	r29, 0x3e	; 62

	
}
 1b2:	00 00       	nop
 1b4:	df 91       	pop	r29
 1b6:	cf 91       	pop	r28
 1b8:	08 95       	ret

000001ba <AnalogInit>:
 1ba:	cf 93       	push	r28
 1bc:	df 93       	push	r29
 1be:	cd b7       	in	r28, 0x3d	; 61
 1c0:	de b7       	in	r29, 0x3e	; 62
 1c2:	00 00       	nop
 1c4:	df 91       	pop	r29
 1c6:	cf 91       	pop	r28
 1c8:	08 95       	ret

000001ca <ClockInit>:
 1ca:	8b ec       	ldi	r24, 0xCB	; 203
 1cc:	80 93 52 00 	sts	0x0052, r24	; 0x800052 <__TEXT_REGION_LENGTH__+0x700052>
 1d0:	88 e0       	ldi	r24, 0x08	; 8
 1d2:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
 1d6:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
 1da:	83 ff       	sbrs	r24, 3
 1dc:	fc cf       	rjmp	.-8      	; 0x1d6 <ClockInit+0xc>
 1de:	88 ed       	ldi	r24, 0xD8	; 216
 1e0:	84 bf       	out	0x34, r24	; 52
 1e2:	83 e0       	ldi	r24, 0x03	; 3
 1e4:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
 1e8:	08 95       	ret

000001ea <EncoderInit>:
 1ea:	cf 93       	push	r28
 1ec:	df 93       	push	r29
 1ee:	cd b7       	in	r28, 0x3d	; 61
 1f0:	de b7       	in	r29, 0x3e	; 62
 1f2:	00 00       	nop
 1f4:	df 91       	pop	r29
 1f6:	cf 91       	pop	r28
 1f8:	08 95       	ret

000001fa <main>:
char a;

void SimpleFunction(void);	//A simple function: print a counter (0 to 9) to the terminal

int main(void)
{	
 1fa:	cf 93       	push	r28
 1fc:	df 93       	push	r29
 1fe:	cd b7       	in	r28, 0x3d	; 61
 200:	de b7       	in	r29, 0x3e	; 62
 202:	6e 97       	sbiw	r28, 0x1e	; 30
 204:	cd bf       	out	0x3d, r28	; 61
 206:	de bf       	out	0x3e, r29	; 62

	
	//###1###
	 
	//Initialize subsystems
	ClockInit();			//Initialize system clock (16 MHz)
 208:	0e 94 e5 00 	call	0x1ca	; 0x1ca <ClockInit>
	USARTInit();			//Initialize USART and bind to stdout,stdin
 20c:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <USARTInit>
	AnalogInit();			//Initialize ADC
 210:	0e 94 dd 00 	call	0x1ba	; 0x1ba <AnalogInit>
	AccInit();				//Initialize accelerometer system
 214:	0e 94 d5 00 	call	0x1aa	; 0x1aa <AccInit>
	LEDInit();				//Initialize LEDs
 218:	0e 94 22 02 	call	0x444	; 0x444 <LEDInit>
	SwitchInit();			//Initialize switches
 21c:	0e 94 63 02 	call	0x4c6	; 0x4c6 <SwitchInit>
	EncoderInit();			//Initialize encoder
 220:	0e 94 f5 00 	call	0x1ea	; 0x1ea <EncoderInit>
	SpeakerInit();			//Initialize speaker system
 224:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <SpeakerInit>
	
	//Enable interrupts
	PMIC.CTRL|=0b00000111;  //Enable low, medium, high priority interrupts
 228:	80 ea       	ldi	r24, 0xA0	; 160
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	20 ea       	ldi	r18, 0xA0	; 160
 22e:	30 e0       	ldi	r19, 0x00	; 0
 230:	f9 01       	movw	r30, r18
 232:	22 81       	ldd	r18, Z+2	; 0x02
 234:	27 60       	ori	r18, 0x07	; 7
 236:	fc 01       	movw	r30, r24
 238:	22 83       	std	Z+2, r18	; 0x02
	SREG|=0b10000000;		//Globale interrupt enable
 23a:	8f e3       	ldi	r24, 0x3F	; 63
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	2f e3       	ldi	r18, 0x3F	; 63
 240:	30 e0       	ldi	r19, 0x00	; 0
 242:	f9 01       	movw	r30, r18
 244:	20 81       	ld	r18, Z
 246:	20 68       	ori	r18, 0x80	; 128
 248:	fc 01       	movw	r30, r24
 24a:	20 83       	st	Z, r18
 24c:	80 e0       	ldi	r24, 0x00	; 0
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	aa ef       	ldi	r26, 0xFA	; 250
 252:	b3 e4       	ldi	r27, 0x43	; 67
 254:	8f 83       	std	Y+7, r24	; 0x07
 256:	98 87       	std	Y+8, r25	; 0x08
 258:	a9 87       	std	Y+9, r26	; 0x09
 25a:	ba 87       	std	Y+10, r27	; 0x0a

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 25c:	20 e0       	ldi	r18, 0x00	; 0
 25e:	30 e0       	ldi	r19, 0x00	; 0
 260:	4a e7       	ldi	r20, 0x7A	; 122
 262:	55 e4       	ldi	r21, 0x45	; 69
 264:	6f 81       	ldd	r22, Y+7	; 0x07
 266:	78 85       	ldd	r23, Y+8	; 0x08
 268:	89 85       	ldd	r24, Y+9	; 0x09
 26a:	9a 85       	ldd	r25, Y+10	; 0x0a
 26c:	0e 94 66 03 	call	0x6cc	; 0x6cc <__mulsf3>
 270:	dc 01       	movw	r26, r24
 272:	cb 01       	movw	r24, r22
 274:	8b 87       	std	Y+11, r24	; 0x0b
 276:	9c 87       	std	Y+12, r25	; 0x0c
 278:	ad 87       	std	Y+13, r26	; 0x0d
 27a:	be 87       	std	Y+14, r27	; 0x0e
	if (__tmp < 1.0)
 27c:	20 e0       	ldi	r18, 0x00	; 0
 27e:	30 e0       	ldi	r19, 0x00	; 0
 280:	40 e8       	ldi	r20, 0x80	; 128
 282:	5f e3       	ldi	r21, 0x3F	; 63
 284:	6b 85       	ldd	r22, Y+11	; 0x0b
 286:	7c 85       	ldd	r23, Y+12	; 0x0c
 288:	8d 85       	ldd	r24, Y+13	; 0x0d
 28a:	9e 85       	ldd	r25, Y+14	; 0x0e
 28c:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <__cmpsf2>
 290:	88 23       	and	r24, r24
 292:	2c f4       	brge	.+10     	; 0x29e <main+0xa4>
		__ticks = 1;
 294:	81 e0       	ldi	r24, 0x01	; 1
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	8f 87       	std	Y+15, r24	; 0x0f
 29a:	98 8b       	std	Y+16, r25	; 0x10
 29c:	3f c0       	rjmp	.+126    	; 0x31c <main+0x122>
	else if (__tmp > 65535)
 29e:	20 e0       	ldi	r18, 0x00	; 0
 2a0:	3f ef       	ldi	r19, 0xFF	; 255
 2a2:	4f e7       	ldi	r20, 0x7F	; 127
 2a4:	57 e4       	ldi	r21, 0x47	; 71
 2a6:	6b 85       	ldd	r22, Y+11	; 0x0b
 2a8:	7c 85       	ldd	r23, Y+12	; 0x0c
 2aa:	8d 85       	ldd	r24, Y+13	; 0x0d
 2ac:	9e 85       	ldd	r25, Y+14	; 0x0e
 2ae:	0e 94 61 03 	call	0x6c2	; 0x6c2 <__gesf2>
 2b2:	18 16       	cp	r1, r24
 2b4:	4c f5       	brge	.+82     	; 0x308 <main+0x10e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 2b6:	20 e0       	ldi	r18, 0x00	; 0
 2b8:	30 e0       	ldi	r19, 0x00	; 0
 2ba:	40 e2       	ldi	r20, 0x20	; 32
 2bc:	51 e4       	ldi	r21, 0x41	; 65
 2be:	6f 81       	ldd	r22, Y+7	; 0x07
 2c0:	78 85       	ldd	r23, Y+8	; 0x08
 2c2:	89 85       	ldd	r24, Y+9	; 0x09
 2c4:	9a 85       	ldd	r25, Y+10	; 0x0a
 2c6:	0e 94 66 03 	call	0x6cc	; 0x6cc <__mulsf3>
 2ca:	dc 01       	movw	r26, r24
 2cc:	cb 01       	movw	r24, r22
 2ce:	bc 01       	movw	r22, r24
 2d0:	cd 01       	movw	r24, r26
 2d2:	0e 94 e5 02 	call	0x5ca	; 0x5ca <__fixunssfsi>
 2d6:	dc 01       	movw	r26, r24
 2d8:	cb 01       	movw	r24, r22
 2da:	8f 87       	std	Y+15, r24	; 0x0f
 2dc:	98 8b       	std	Y+16, r25	; 0x10
 2de:	0f c0       	rjmp	.+30     	; 0x2fe <main+0x104>
 2e0:	80 e9       	ldi	r24, 0x90	; 144
 2e2:	91 e0       	ldi	r25, 0x01	; 1
 2e4:	89 8b       	std	Y+17, r24	; 0x11
 2e6:	9a 8b       	std	Y+18, r25	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 2e8:	89 89       	ldd	r24, Y+17	; 0x11
 2ea:	9a 89       	ldd	r25, Y+18	; 0x12
 2ec:	01 97       	sbiw	r24, 0x01	; 1
 2ee:	f1 f7       	brne	.-4      	; 0x2ec <main+0xf2>
 2f0:	89 8b       	std	Y+17, r24	; 0x11
 2f2:	9a 8b       	std	Y+18, r25	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2f4:	8f 85       	ldd	r24, Y+15	; 0x0f
 2f6:	98 89       	ldd	r25, Y+16	; 0x10
 2f8:	01 97       	sbiw	r24, 0x01	; 1
 2fa:	8f 87       	std	Y+15, r24	; 0x0f
 2fc:	98 8b       	std	Y+16, r25	; 0x10
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2fe:	8f 85       	ldd	r24, Y+15	; 0x0f
 300:	98 89       	ldd	r25, Y+16	; 0x10
 302:	89 2b       	or	r24, r25
 304:	69 f7       	brne	.-38     	; 0x2e0 <main+0xe6>
 306:	14 c0       	rjmp	.+40     	; 0x330 <main+0x136>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 308:	6b 85       	ldd	r22, Y+11	; 0x0b
 30a:	7c 85       	ldd	r23, Y+12	; 0x0c
 30c:	8d 85       	ldd	r24, Y+13	; 0x0d
 30e:	9e 85       	ldd	r25, Y+14	; 0x0e
 310:	0e 94 e5 02 	call	0x5ca	; 0x5ca <__fixunssfsi>
 314:	dc 01       	movw	r26, r24
 316:	cb 01       	movw	r24, r22
 318:	8f 87       	std	Y+15, r24	; 0x0f
 31a:	98 8b       	std	Y+16, r25	; 0x10
 31c:	8f 85       	ldd	r24, Y+15	; 0x0f
 31e:	98 89       	ldd	r25, Y+16	; 0x10
 320:	8b 8b       	std	Y+19, r24	; 0x13
 322:	9c 8b       	std	Y+20, r25	; 0x14
 324:	8b 89       	ldd	r24, Y+19	; 0x13
 326:	9c 89       	ldd	r25, Y+20	; 0x14
 328:	01 97       	sbiw	r24, 0x01	; 1
 32a:	f1 f7       	brne	.-4      	; 0x328 <main+0x12e>
 32c:	8b 8b       	std	Y+19, r24	; 0x13
 32e:	9c 8b       	std	Y+20, r25	; 0x14
	_delay_ms(500);
	
	
	
	while (1){
		for (int i = 0; i<4; i++)
 330:	19 82       	std	Y+1, r1	; 0x01
 332:	1a 82       	std	Y+2, r1	; 0x02
 334:	81 c0       	rjmp	.+258    	; 0x438 <__FUSE_REGION_LENGTH__+0x38>
		{
			LEDSet(0b00000001 << i);
 336:	81 e0       	ldi	r24, 0x01	; 1
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	09 80       	ldd	r0, Y+1	; 0x01
 33c:	02 c0       	rjmp	.+4      	; 0x342 <main+0x148>
 33e:	88 0f       	add	r24, r24
 340:	99 1f       	adc	r25, r25
 342:	0a 94       	dec	r0
 344:	e2 f7       	brpl	.-8      	; 0x33e <main+0x144>
 346:	0e 94 43 02 	call	0x486	; 0x486 <LEDSet>
 34a:	80 e0       	ldi	r24, 0x00	; 0
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	aa ef       	ldi	r26, 0xFA	; 250
 350:	b3 e4       	ldi	r27, 0x43	; 67
 352:	8b 83       	std	Y+3, r24	; 0x03
 354:	9c 83       	std	Y+4, r25	; 0x04
 356:	ad 83       	std	Y+5, r26	; 0x05
 358:	be 83       	std	Y+6, r27	; 0x06

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 35a:	20 e0       	ldi	r18, 0x00	; 0
 35c:	30 e0       	ldi	r19, 0x00	; 0
 35e:	4a e7       	ldi	r20, 0x7A	; 122
 360:	55 e4       	ldi	r21, 0x45	; 69
 362:	6b 81       	ldd	r22, Y+3	; 0x03
 364:	7c 81       	ldd	r23, Y+4	; 0x04
 366:	8d 81       	ldd	r24, Y+5	; 0x05
 368:	9e 81       	ldd	r25, Y+6	; 0x06
 36a:	0e 94 66 03 	call	0x6cc	; 0x6cc <__mulsf3>
 36e:	dc 01       	movw	r26, r24
 370:	cb 01       	movw	r24, r22
 372:	8d 8b       	std	Y+21, r24	; 0x15
 374:	9e 8b       	std	Y+22, r25	; 0x16
 376:	af 8b       	std	Y+23, r26	; 0x17
 378:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
 37a:	20 e0       	ldi	r18, 0x00	; 0
 37c:	30 e0       	ldi	r19, 0x00	; 0
 37e:	40 e8       	ldi	r20, 0x80	; 128
 380:	5f e3       	ldi	r21, 0x3F	; 63
 382:	6d 89       	ldd	r22, Y+21	; 0x15
 384:	7e 89       	ldd	r23, Y+22	; 0x16
 386:	8f 89       	ldd	r24, Y+23	; 0x17
 388:	98 8d       	ldd	r25, Y+24	; 0x18
 38a:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <__cmpsf2>
 38e:	88 23       	and	r24, r24
 390:	2c f4       	brge	.+10     	; 0x39c <main+0x1a2>
		__ticks = 1;
 392:	81 e0       	ldi	r24, 0x01	; 1
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	89 8f       	std	Y+25, r24	; 0x19
 398:	9a 8f       	std	Y+26, r25	; 0x1a
 39a:	3f c0       	rjmp	.+126    	; 0x41a <__FUSE_REGION_LENGTH__+0x1a>
	else if (__tmp > 65535)
 39c:	20 e0       	ldi	r18, 0x00	; 0
 39e:	3f ef       	ldi	r19, 0xFF	; 255
 3a0:	4f e7       	ldi	r20, 0x7F	; 127
 3a2:	57 e4       	ldi	r21, 0x47	; 71
 3a4:	6d 89       	ldd	r22, Y+21	; 0x15
 3a6:	7e 89       	ldd	r23, Y+22	; 0x16
 3a8:	8f 89       	ldd	r24, Y+23	; 0x17
 3aa:	98 8d       	ldd	r25, Y+24	; 0x18
 3ac:	0e 94 61 03 	call	0x6c2	; 0x6c2 <__gesf2>
 3b0:	18 16       	cp	r1, r24
 3b2:	4c f5       	brge	.+82     	; 0x406 <__FUSE_REGION_LENGTH__+0x6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 3b4:	20 e0       	ldi	r18, 0x00	; 0
 3b6:	30 e0       	ldi	r19, 0x00	; 0
 3b8:	40 e2       	ldi	r20, 0x20	; 32
 3ba:	51 e4       	ldi	r21, 0x41	; 65
 3bc:	6b 81       	ldd	r22, Y+3	; 0x03
 3be:	7c 81       	ldd	r23, Y+4	; 0x04
 3c0:	8d 81       	ldd	r24, Y+5	; 0x05
 3c2:	9e 81       	ldd	r25, Y+6	; 0x06
 3c4:	0e 94 66 03 	call	0x6cc	; 0x6cc <__mulsf3>
 3c8:	dc 01       	movw	r26, r24
 3ca:	cb 01       	movw	r24, r22
 3cc:	bc 01       	movw	r22, r24
 3ce:	cd 01       	movw	r24, r26
 3d0:	0e 94 e5 02 	call	0x5ca	; 0x5ca <__fixunssfsi>
 3d4:	dc 01       	movw	r26, r24
 3d6:	cb 01       	movw	r24, r22
 3d8:	89 8f       	std	Y+25, r24	; 0x19
 3da:	9a 8f       	std	Y+26, r25	; 0x1a
 3dc:	0f c0       	rjmp	.+30     	; 0x3fc <main+0x202>
 3de:	80 e9       	ldi	r24, 0x90	; 144
 3e0:	91 e0       	ldi	r25, 0x01	; 1
 3e2:	8b 8f       	std	Y+27, r24	; 0x1b
 3e4:	9c 8f       	std	Y+28, r25	; 0x1c
 3e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
 3e8:	9c 8d       	ldd	r25, Y+28	; 0x1c
 3ea:	01 97       	sbiw	r24, 0x01	; 1
 3ec:	f1 f7       	brne	.-4      	; 0x3ea <main+0x1f0>
 3ee:	8b 8f       	std	Y+27, r24	; 0x1b
 3f0:	9c 8f       	std	Y+28, r25	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 3f2:	89 8d       	ldd	r24, Y+25	; 0x19
 3f4:	9a 8d       	ldd	r25, Y+26	; 0x1a
 3f6:	01 97       	sbiw	r24, 0x01	; 1
 3f8:	89 8f       	std	Y+25, r24	; 0x19
 3fa:	9a 8f       	std	Y+26, r25	; 0x1a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 3fc:	89 8d       	ldd	r24, Y+25	; 0x19
 3fe:	9a 8d       	ldd	r25, Y+26	; 0x1a
 400:	89 2b       	or	r24, r25
 402:	69 f7       	brne	.-38     	; 0x3de <main+0x1e4>
 404:	14 c0       	rjmp	.+40     	; 0x42e <__FUSE_REGION_LENGTH__+0x2e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 406:	6d 89       	ldd	r22, Y+21	; 0x15
 408:	7e 89       	ldd	r23, Y+22	; 0x16
 40a:	8f 89       	ldd	r24, Y+23	; 0x17
 40c:	98 8d       	ldd	r25, Y+24	; 0x18
 40e:	0e 94 e5 02 	call	0x5ca	; 0x5ca <__fixunssfsi>
 412:	dc 01       	movw	r26, r24
 414:	cb 01       	movw	r24, r22
 416:	89 8f       	std	Y+25, r24	; 0x19
 418:	9a 8f       	std	Y+26, r25	; 0x1a
 41a:	89 8d       	ldd	r24, Y+25	; 0x19
 41c:	9a 8d       	ldd	r25, Y+26	; 0x1a
 41e:	8d 8f       	std	Y+29, r24	; 0x1d
 420:	9e 8f       	std	Y+30, r25	; 0x1e
 422:	8d 8d       	ldd	r24, Y+29	; 0x1d
 424:	9e 8d       	ldd	r25, Y+30	; 0x1e
 426:	01 97       	sbiw	r24, 0x01	; 1
 428:	f1 f7       	brne	.-4      	; 0x426 <__FUSE_REGION_LENGTH__+0x26>
 42a:	8d 8f       	std	Y+29, r24	; 0x1d
 42c:	9e 8f       	std	Y+30, r25	; 0x1e
	_delay_ms(500);
	
	
	
	while (1){
		for (int i = 0; i<4; i++)
 42e:	89 81       	ldd	r24, Y+1	; 0x01
 430:	9a 81       	ldd	r25, Y+2	; 0x02
 432:	01 96       	adiw	r24, 0x01	; 1
 434:	89 83       	std	Y+1, r24	; 0x01
 436:	9a 83       	std	Y+2, r25	; 0x02
 438:	89 81       	ldd	r24, Y+1	; 0x01
 43a:	9a 81       	ldd	r25, Y+2	; 0x02
 43c:	04 97       	sbiw	r24, 0x04	; 4
 43e:	0c f4       	brge	.+2      	; 0x442 <__FUSE_REGION_LENGTH__+0x42>
 440:	7a cf       	rjmp	.-268    	; 0x336 <main+0x13c>
		{
			LEDSet(0b00000001 << i);
			_delay_ms(500);
		}
		
	}
 442:	76 cf       	rjmp	.-276    	; 0x330 <main+0x136>

00000444 <LEDInit>:
#include "LED.h"
#include <avr/io.h>

void LEDInit(void)
{
 444:	cf 93       	push	r28
 446:	df 93       	push	r29
 448:	cd b7       	in	r28, 0x3d	; 61
 44a:	de b7       	in	r29, 0x3e	; 62
	PORTE.DIRSET=0b00001111;
 44c:	80 e8       	ldi	r24, 0x80	; 128
 44e:	96 e0       	ldi	r25, 0x06	; 6
 450:	2f e0       	ldi	r18, 0x0F	; 15
 452:	fc 01       	movw	r30, r24
 454:	21 83       	std	Z+1, r18	; 0x01
	PORTE.PIN0CTRL=0b01011000;
 456:	80 e8       	ldi	r24, 0x80	; 128
 458:	96 e0       	ldi	r25, 0x06	; 6
 45a:	28 e5       	ldi	r18, 0x58	; 88
 45c:	fc 01       	movw	r30, r24
 45e:	20 8b       	std	Z+16, r18	; 0x10
	PORTE.PIN1CTRL=0b01011000;
 460:	80 e8       	ldi	r24, 0x80	; 128
 462:	96 e0       	ldi	r25, 0x06	; 6
 464:	28 e5       	ldi	r18, 0x58	; 88
 466:	fc 01       	movw	r30, r24
 468:	21 8b       	std	Z+17, r18	; 0x11
	PORTE.PIN2CTRL=0b01011000;
 46a:	80 e8       	ldi	r24, 0x80	; 128
 46c:	96 e0       	ldi	r25, 0x06	; 6
 46e:	28 e5       	ldi	r18, 0x58	; 88
 470:	fc 01       	movw	r30, r24
 472:	22 8b       	std	Z+18, r18	; 0x12
	PORTE.PIN3CTRL=0b01011000;
 474:	80 e8       	ldi	r24, 0x80	; 128
 476:	96 e0       	ldi	r25, 0x06	; 6
 478:	28 e5       	ldi	r18, 0x58	; 88
 47a:	fc 01       	movw	r30, r24
 47c:	23 8b       	std	Z+19, r18	; 0x13
	
}
 47e:	00 00       	nop
 480:	df 91       	pop	r29
 482:	cf 91       	pop	r28
 484:	08 95       	ret

00000486 <LEDSet>:
void LEDSet(char bitmask)
{
 486:	cf 93       	push	r28
 488:	df 93       	push	r29
 48a:	1f 92       	push	r1
 48c:	cd b7       	in	r28, 0x3d	; 61
 48e:	de b7       	in	r29, 0x3e	; 62
 490:	89 83       	std	Y+1, r24	; 0x01
	PORTE.OUT= (bitmask & 0b00001111)|(PORTE.OUT & 0b11110000);
 492:	80 e8       	ldi	r24, 0x80	; 128
 494:	96 e0       	ldi	r25, 0x06	; 6
 496:	29 81       	ldd	r18, Y+1	; 0x01
 498:	42 2f       	mov	r20, r18
 49a:	4f 70       	andi	r20, 0x0F	; 15
 49c:	20 e8       	ldi	r18, 0x80	; 128
 49e:	36 e0       	ldi	r19, 0x06	; 6
 4a0:	f9 01       	movw	r30, r18
 4a2:	24 81       	ldd	r18, Z+4	; 0x04
 4a4:	20 7f       	andi	r18, 0xF0	; 240
 4a6:	24 2b       	or	r18, r20
 4a8:	fc 01       	movw	r30, r24
 4aa:	24 83       	std	Z+4, r18	; 0x04
 4ac:	00 00       	nop
 4ae:	0f 90       	pop	r0
 4b0:	df 91       	pop	r29
 4b2:	cf 91       	pop	r28
 4b4:	08 95       	ret

000004b6 <SpeakerInit>:
 4b6:	cf 93       	push	r28
 4b8:	df 93       	push	r29
 4ba:	cd b7       	in	r28, 0x3d	; 61
 4bc:	de b7       	in	r29, 0x3e	; 62
 4be:	00 00       	nop
 4c0:	df 91       	pop	r29
 4c2:	cf 91       	pop	r28
 4c4:	08 95       	ret

000004c6 <SwitchInit>:
 4c6:	cf 93       	push	r28
 4c8:	df 93       	push	r29
 4ca:	cd b7       	in	r28, 0x3d	; 61
 4cc:	de b7       	in	r29, 0x3e	; 62
 4ce:	00 00       	nop
 4d0:	df 91       	pop	r29
 4d2:	cf 91       	pop	r28
 4d4:	08 95       	ret

000004d6 <USARTInit>:
 4d6:	cf 93       	push	r28
 4d8:	df 93       	push	r29
 4da:	cd b7       	in	r28, 0x3d	; 61
 4dc:	de b7       	in	r29, 0x3e	; 62
 4de:	80 e6       	ldi	r24, 0x60	; 96
 4e0:	96 e0       	ldi	r25, 0x06	; 6
 4e2:	28 e0       	ldi	r18, 0x08	; 8
 4e4:	fc 01       	movw	r30, r24
 4e6:	21 83       	std	Z+1, r18	; 0x01
 4e8:	80 e6       	ldi	r24, 0x60	; 96
 4ea:	96 e0       	ldi	r25, 0x06	; 6
 4ec:	24 e0       	ldi	r18, 0x04	; 4
 4ee:	fc 01       	movw	r30, r24
 4f0:	22 83       	std	Z+2, r18	; 0x02
 4f2:	80 ea       	ldi	r24, 0xA0	; 160
 4f4:	99 e0       	ldi	r25, 0x09	; 9
 4f6:	fc 01       	movw	r30, r24
 4f8:	13 82       	std	Z+3, r1	; 0x03
 4fa:	80 ea       	ldi	r24, 0xA0	; 160
 4fc:	99 e0       	ldi	r25, 0x09	; 9
 4fe:	28 e1       	ldi	r18, 0x18	; 24
 500:	fc 01       	movw	r30, r24
 502:	24 83       	std	Z+4, r18	; 0x04
 504:	80 ea       	ldi	r24, 0xA0	; 160
 506:	99 e0       	ldi	r25, 0x09	; 9
 508:	23 e0       	ldi	r18, 0x03	; 3
 50a:	fc 01       	movw	r30, r24
 50c:	25 83       	std	Z+5, r18	; 0x05
 50e:	80 ea       	ldi	r24, 0xA0	; 160
 510:	99 e0       	ldi	r25, 0x09	; 9
 512:	25 ee       	ldi	r18, 0xE5	; 229
 514:	fc 01       	movw	r30, r24
 516:	26 83       	std	Z+6, r18	; 0x06
 518:	80 ea       	ldi	r24, 0xA0	; 160
 51a:	99 e0       	ldi	r25, 0x09	; 9
 51c:	2c eb       	ldi	r18, 0xBC	; 188
 51e:	fc 01       	movw	r30, r24
 520:	27 83       	std	Z+7, r18	; 0x07
 522:	80 e0       	ldi	r24, 0x00	; 0
 524:	90 e2       	ldi	r25, 0x20	; 32
 526:	80 93 10 20 	sts	0x2010, r24	; 0x802010 <__data_end+0x2>
 52a:	90 93 11 20 	sts	0x2011, r25	; 0x802011 <__data_end+0x3>
 52e:	80 e0       	ldi	r24, 0x00	; 0
 530:	90 e2       	ldi	r25, 0x20	; 32
 532:	80 93 0e 20 	sts	0x200E, r24	; 0x80200e <__data_end>
 536:	90 93 0f 20 	sts	0x200F, r25	; 0x80200f <__data_end+0x1>
 53a:	00 00       	nop
 53c:	df 91       	pop	r29
 53e:	cf 91       	pop	r28
 540:	08 95       	ret

00000542 <stdio_putchar>:
 542:	cf 93       	push	r28
 544:	df 93       	push	r29
 546:	00 d0       	rcall	.+0      	; 0x548 <stdio_putchar+0x6>
 548:	1f 92       	push	r1
 54a:	cd b7       	in	r28, 0x3d	; 61
 54c:	de b7       	in	r29, 0x3e	; 62
 54e:	89 83       	std	Y+1, r24	; 0x01
 550:	6a 83       	std	Y+2, r22	; 0x02
 552:	7b 83       	std	Y+3, r23	; 0x03
 554:	80 ea       	ldi	r24, 0xA0	; 160
 556:	99 e0       	ldi	r25, 0x09	; 9
 558:	29 81       	ldd	r18, Y+1	; 0x01
 55a:	fc 01       	movw	r30, r24
 55c:	20 83       	st	Z, r18
 55e:	00 00       	nop
 560:	80 ea       	ldi	r24, 0xA0	; 160
 562:	99 e0       	ldi	r25, 0x09	; 9
 564:	fc 01       	movw	r30, r24
 566:	81 81       	ldd	r24, Z+1	; 0x01
 568:	88 2f       	mov	r24, r24
 56a:	90 e0       	ldi	r25, 0x00	; 0
 56c:	80 74       	andi	r24, 0x40	; 64
 56e:	99 27       	eor	r25, r25
 570:	89 2b       	or	r24, r25
 572:	b1 f3       	breq	.-20     	; 0x560 <stdio_putchar+0x1e>
 574:	80 ea       	ldi	r24, 0xA0	; 160
 576:	99 e0       	ldi	r25, 0x09	; 9
 578:	20 e4       	ldi	r18, 0x40	; 64
 57a:	fc 01       	movw	r30, r24
 57c:	21 83       	std	Z+1, r18	; 0x01
 57e:	80 e0       	ldi	r24, 0x00	; 0
 580:	90 e0       	ldi	r25, 0x00	; 0
 582:	23 96       	adiw	r28, 0x03	; 3
 584:	cd bf       	out	0x3d, r28	; 61
 586:	de bf       	out	0x3e, r29	; 62
 588:	df 91       	pop	r29
 58a:	cf 91       	pop	r28
 58c:	08 95       	ret

0000058e <stdio_getchar>:
 58e:	cf 93       	push	r28
 590:	df 93       	push	r29
 592:	00 d0       	rcall	.+0      	; 0x594 <stdio_getchar+0x6>
 594:	cd b7       	in	r28, 0x3d	; 61
 596:	de b7       	in	r29, 0x3e	; 62
 598:	89 83       	std	Y+1, r24	; 0x01
 59a:	9a 83       	std	Y+2, r25	; 0x02
 59c:	00 00       	nop
 59e:	80 ea       	ldi	r24, 0xA0	; 160
 5a0:	99 e0       	ldi	r25, 0x09	; 9
 5a2:	fc 01       	movw	r30, r24
 5a4:	81 81       	ldd	r24, Z+1	; 0x01
 5a6:	88 23       	and	r24, r24
 5a8:	d4 f7       	brge	.-12     	; 0x59e <stdio_getchar+0x10>
 5aa:	80 ea       	ldi	r24, 0xA0	; 160
 5ac:	99 e0       	ldi	r25, 0x09	; 9
 5ae:	fc 01       	movw	r30, r24
 5b0:	80 81       	ld	r24, Z
 5b2:	88 2f       	mov	r24, r24
 5b4:	90 e0       	ldi	r25, 0x00	; 0
 5b6:	0f 90       	pop	r0
 5b8:	0f 90       	pop	r0
 5ba:	df 91       	pop	r29
 5bc:	cf 91       	pop	r28
 5be:	08 95       	ret

000005c0 <__cmpsf2>:
 5c0:	0e 94 14 03 	call	0x628	; 0x628 <__fp_cmp>
 5c4:	08 f4       	brcc	.+2      	; 0x5c8 <__cmpsf2+0x8>
 5c6:	81 e0       	ldi	r24, 0x01	; 1
 5c8:	08 95       	ret

000005ca <__fixunssfsi>:
 5ca:	0e 94 40 03 	call	0x680	; 0x680 <__fp_splitA>
 5ce:	88 f0       	brcs	.+34     	; 0x5f2 <__fixunssfsi+0x28>
 5d0:	9f 57       	subi	r25, 0x7F	; 127
 5d2:	98 f0       	brcs	.+38     	; 0x5fa <__fixunssfsi+0x30>
 5d4:	b9 2f       	mov	r27, r25
 5d6:	99 27       	eor	r25, r25
 5d8:	b7 51       	subi	r27, 0x17	; 23
 5da:	b0 f0       	brcs	.+44     	; 0x608 <__fixunssfsi+0x3e>
 5dc:	e1 f0       	breq	.+56     	; 0x616 <__fixunssfsi+0x4c>
 5de:	66 0f       	add	r22, r22
 5e0:	77 1f       	adc	r23, r23
 5e2:	88 1f       	adc	r24, r24
 5e4:	99 1f       	adc	r25, r25
 5e6:	1a f0       	brmi	.+6      	; 0x5ee <__fixunssfsi+0x24>
 5e8:	ba 95       	dec	r27
 5ea:	c9 f7       	brne	.-14     	; 0x5de <__fixunssfsi+0x14>
 5ec:	14 c0       	rjmp	.+40     	; 0x616 <__fixunssfsi+0x4c>
 5ee:	b1 30       	cpi	r27, 0x01	; 1
 5f0:	91 f0       	breq	.+36     	; 0x616 <__fixunssfsi+0x4c>
 5f2:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <__fp_zero>
 5f6:	b1 e0       	ldi	r27, 0x01	; 1
 5f8:	08 95       	ret
 5fa:	0c 94 5a 03 	jmp	0x6b4	; 0x6b4 <__fp_zero>
 5fe:	67 2f       	mov	r22, r23
 600:	78 2f       	mov	r23, r24
 602:	88 27       	eor	r24, r24
 604:	b8 5f       	subi	r27, 0xF8	; 248
 606:	39 f0       	breq	.+14     	; 0x616 <__fixunssfsi+0x4c>
 608:	b9 3f       	cpi	r27, 0xF9	; 249
 60a:	cc f3       	brlt	.-14     	; 0x5fe <__fixunssfsi+0x34>
 60c:	86 95       	lsr	r24
 60e:	77 95       	ror	r23
 610:	67 95       	ror	r22
 612:	b3 95       	inc	r27
 614:	d9 f7       	brne	.-10     	; 0x60c <__fixunssfsi+0x42>
 616:	3e f4       	brtc	.+14     	; 0x626 <__fixunssfsi+0x5c>
 618:	90 95       	com	r25
 61a:	80 95       	com	r24
 61c:	70 95       	com	r23
 61e:	61 95       	neg	r22
 620:	7f 4f       	sbci	r23, 0xFF	; 255
 622:	8f 4f       	sbci	r24, 0xFF	; 255
 624:	9f 4f       	sbci	r25, 0xFF	; 255
 626:	08 95       	ret

00000628 <__fp_cmp>:
 628:	99 0f       	add	r25, r25
 62a:	00 08       	sbc	r0, r0
 62c:	55 0f       	add	r21, r21
 62e:	aa 0b       	sbc	r26, r26
 630:	e0 e8       	ldi	r30, 0x80	; 128
 632:	fe ef       	ldi	r31, 0xFE	; 254
 634:	16 16       	cp	r1, r22
 636:	17 06       	cpc	r1, r23
 638:	e8 07       	cpc	r30, r24
 63a:	f9 07       	cpc	r31, r25
 63c:	c0 f0       	brcs	.+48     	; 0x66e <__fp_cmp+0x46>
 63e:	12 16       	cp	r1, r18
 640:	13 06       	cpc	r1, r19
 642:	e4 07       	cpc	r30, r20
 644:	f5 07       	cpc	r31, r21
 646:	98 f0       	brcs	.+38     	; 0x66e <__fp_cmp+0x46>
 648:	62 1b       	sub	r22, r18
 64a:	73 0b       	sbc	r23, r19
 64c:	84 0b       	sbc	r24, r20
 64e:	95 0b       	sbc	r25, r21
 650:	39 f4       	brne	.+14     	; 0x660 <__fp_cmp+0x38>
 652:	0a 26       	eor	r0, r26
 654:	61 f0       	breq	.+24     	; 0x66e <__fp_cmp+0x46>
 656:	23 2b       	or	r18, r19
 658:	24 2b       	or	r18, r20
 65a:	25 2b       	or	r18, r21
 65c:	21 f4       	brne	.+8      	; 0x666 <__fp_cmp+0x3e>
 65e:	08 95       	ret
 660:	0a 26       	eor	r0, r26
 662:	09 f4       	brne	.+2      	; 0x666 <__fp_cmp+0x3e>
 664:	a1 40       	sbci	r26, 0x01	; 1
 666:	a6 95       	lsr	r26
 668:	8f ef       	ldi	r24, 0xFF	; 255
 66a:	81 1d       	adc	r24, r1
 66c:	81 1d       	adc	r24, r1
 66e:	08 95       	ret

00000670 <__fp_split3>:
 670:	57 fd       	sbrc	r21, 7
 672:	90 58       	subi	r25, 0x80	; 128
 674:	44 0f       	add	r20, r20
 676:	55 1f       	adc	r21, r21
 678:	59 f0       	breq	.+22     	; 0x690 <__fp_splitA+0x10>
 67a:	5f 3f       	cpi	r21, 0xFF	; 255
 67c:	71 f0       	breq	.+28     	; 0x69a <__fp_splitA+0x1a>
 67e:	47 95       	ror	r20

00000680 <__fp_splitA>:
 680:	88 0f       	add	r24, r24
 682:	97 fb       	bst	r25, 7
 684:	99 1f       	adc	r25, r25
 686:	61 f0       	breq	.+24     	; 0x6a0 <__fp_splitA+0x20>
 688:	9f 3f       	cpi	r25, 0xFF	; 255
 68a:	79 f0       	breq	.+30     	; 0x6aa <__fp_splitA+0x2a>
 68c:	87 95       	ror	r24
 68e:	08 95       	ret
 690:	12 16       	cp	r1, r18
 692:	13 06       	cpc	r1, r19
 694:	14 06       	cpc	r1, r20
 696:	55 1f       	adc	r21, r21
 698:	f2 cf       	rjmp	.-28     	; 0x67e <__fp_split3+0xe>
 69a:	46 95       	lsr	r20
 69c:	f1 df       	rcall	.-30     	; 0x680 <__fp_splitA>
 69e:	08 c0       	rjmp	.+16     	; 0x6b0 <__fp_splitA+0x30>
 6a0:	16 16       	cp	r1, r22
 6a2:	17 06       	cpc	r1, r23
 6a4:	18 06       	cpc	r1, r24
 6a6:	99 1f       	adc	r25, r25
 6a8:	f1 cf       	rjmp	.-30     	; 0x68c <__fp_splitA+0xc>
 6aa:	86 95       	lsr	r24
 6ac:	71 05       	cpc	r23, r1
 6ae:	61 05       	cpc	r22, r1
 6b0:	08 94       	sec
 6b2:	08 95       	ret

000006b4 <__fp_zero>:
 6b4:	e8 94       	clt

000006b6 <__fp_szero>:
 6b6:	bb 27       	eor	r27, r27
 6b8:	66 27       	eor	r22, r22
 6ba:	77 27       	eor	r23, r23
 6bc:	cb 01       	movw	r24, r22
 6be:	97 f9       	bld	r25, 7
 6c0:	08 95       	ret

000006c2 <__gesf2>:
 6c2:	0e 94 14 03 	call	0x628	; 0x628 <__fp_cmp>
 6c6:	08 f4       	brcc	.+2      	; 0x6ca <__gesf2+0x8>
 6c8:	8f ef       	ldi	r24, 0xFF	; 255
 6ca:	08 95       	ret

000006cc <__mulsf3>:
 6cc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__mulsf3x>
 6d0:	0c 94 ea 03 	jmp	0x7d4	; 0x7d4 <__fp_round>
 6d4:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <__fp_pscA>
 6d8:	38 f0       	brcs	.+14     	; 0x6e8 <__mulsf3+0x1c>
 6da:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <__fp_pscB>
 6de:	20 f0       	brcs	.+8      	; 0x6e8 <__mulsf3+0x1c>
 6e0:	95 23       	and	r25, r21
 6e2:	11 f0       	breq	.+4      	; 0x6e8 <__mulsf3+0x1c>
 6e4:	0c 94 d3 03 	jmp	0x7a6	; 0x7a6 <__fp_inf>
 6e8:	0c 94 d9 03 	jmp	0x7b2	; 0x7b2 <__fp_nan>
 6ec:	11 24       	eor	r1, r1
 6ee:	0c 94 5b 03 	jmp	0x6b6	; 0x6b6 <__fp_szero>

000006f2 <__mulsf3x>:
 6f2:	0e 94 38 03 	call	0x670	; 0x670 <__fp_split3>
 6f6:	70 f3       	brcs	.-36     	; 0x6d4 <__mulsf3+0x8>

000006f8 <__mulsf3_pse>:
 6f8:	95 9f       	mul	r25, r21
 6fa:	c1 f3       	breq	.-16     	; 0x6ec <__mulsf3+0x20>
 6fc:	95 0f       	add	r25, r21
 6fe:	50 e0       	ldi	r21, 0x00	; 0
 700:	55 1f       	adc	r21, r21
 702:	62 9f       	mul	r22, r18
 704:	f0 01       	movw	r30, r0
 706:	72 9f       	mul	r23, r18
 708:	bb 27       	eor	r27, r27
 70a:	f0 0d       	add	r31, r0
 70c:	b1 1d       	adc	r27, r1
 70e:	63 9f       	mul	r22, r19
 710:	aa 27       	eor	r26, r26
 712:	f0 0d       	add	r31, r0
 714:	b1 1d       	adc	r27, r1
 716:	aa 1f       	adc	r26, r26
 718:	64 9f       	mul	r22, r20
 71a:	66 27       	eor	r22, r22
 71c:	b0 0d       	add	r27, r0
 71e:	a1 1d       	adc	r26, r1
 720:	66 1f       	adc	r22, r22
 722:	82 9f       	mul	r24, r18
 724:	22 27       	eor	r18, r18
 726:	b0 0d       	add	r27, r0
 728:	a1 1d       	adc	r26, r1
 72a:	62 1f       	adc	r22, r18
 72c:	73 9f       	mul	r23, r19
 72e:	b0 0d       	add	r27, r0
 730:	a1 1d       	adc	r26, r1
 732:	62 1f       	adc	r22, r18
 734:	83 9f       	mul	r24, r19
 736:	a0 0d       	add	r26, r0
 738:	61 1d       	adc	r22, r1
 73a:	22 1f       	adc	r18, r18
 73c:	74 9f       	mul	r23, r20
 73e:	33 27       	eor	r19, r19
 740:	a0 0d       	add	r26, r0
 742:	61 1d       	adc	r22, r1
 744:	23 1f       	adc	r18, r19
 746:	84 9f       	mul	r24, r20
 748:	60 0d       	add	r22, r0
 74a:	21 1d       	adc	r18, r1
 74c:	82 2f       	mov	r24, r18
 74e:	76 2f       	mov	r23, r22
 750:	6a 2f       	mov	r22, r26
 752:	11 24       	eor	r1, r1
 754:	9f 57       	subi	r25, 0x7F	; 127
 756:	50 40       	sbci	r21, 0x00	; 0
 758:	9a f0       	brmi	.+38     	; 0x780 <__mulsf3_pse+0x88>
 75a:	f1 f0       	breq	.+60     	; 0x798 <__mulsf3_pse+0xa0>
 75c:	88 23       	and	r24, r24
 75e:	4a f0       	brmi	.+18     	; 0x772 <__mulsf3_pse+0x7a>
 760:	ee 0f       	add	r30, r30
 762:	ff 1f       	adc	r31, r31
 764:	bb 1f       	adc	r27, r27
 766:	66 1f       	adc	r22, r22
 768:	77 1f       	adc	r23, r23
 76a:	88 1f       	adc	r24, r24
 76c:	91 50       	subi	r25, 0x01	; 1
 76e:	50 40       	sbci	r21, 0x00	; 0
 770:	a9 f7       	brne	.-22     	; 0x75c <__mulsf3_pse+0x64>
 772:	9e 3f       	cpi	r25, 0xFE	; 254
 774:	51 05       	cpc	r21, r1
 776:	80 f0       	brcs	.+32     	; 0x798 <__mulsf3_pse+0xa0>
 778:	0c 94 d3 03 	jmp	0x7a6	; 0x7a6 <__fp_inf>
 77c:	0c 94 5b 03 	jmp	0x6b6	; 0x6b6 <__fp_szero>
 780:	5f 3f       	cpi	r21, 0xFF	; 255
 782:	e4 f3       	brlt	.-8      	; 0x77c <__mulsf3_pse+0x84>
 784:	98 3e       	cpi	r25, 0xE8	; 232
 786:	d4 f3       	brlt	.-12     	; 0x77c <__mulsf3_pse+0x84>
 788:	86 95       	lsr	r24
 78a:	77 95       	ror	r23
 78c:	67 95       	ror	r22
 78e:	b7 95       	ror	r27
 790:	f7 95       	ror	r31
 792:	e7 95       	ror	r30
 794:	9f 5f       	subi	r25, 0xFF	; 255
 796:	c1 f7       	brne	.-16     	; 0x788 <__mulsf3_pse+0x90>
 798:	fe 2b       	or	r31, r30
 79a:	88 0f       	add	r24, r24
 79c:	91 1d       	adc	r25, r1
 79e:	96 95       	lsr	r25
 7a0:	87 95       	ror	r24
 7a2:	97 f9       	bld	r25, 7
 7a4:	08 95       	ret

000007a6 <__fp_inf>:
 7a6:	97 f9       	bld	r25, 7
 7a8:	9f 67       	ori	r25, 0x7F	; 127
 7aa:	80 e8       	ldi	r24, 0x80	; 128
 7ac:	70 e0       	ldi	r23, 0x00	; 0
 7ae:	60 e0       	ldi	r22, 0x00	; 0
 7b0:	08 95       	ret

000007b2 <__fp_nan>:
 7b2:	9f ef       	ldi	r25, 0xFF	; 255
 7b4:	80 ec       	ldi	r24, 0xC0	; 192
 7b6:	08 95       	ret

000007b8 <__fp_pscA>:
 7b8:	00 24       	eor	r0, r0
 7ba:	0a 94       	dec	r0
 7bc:	16 16       	cp	r1, r22
 7be:	17 06       	cpc	r1, r23
 7c0:	18 06       	cpc	r1, r24
 7c2:	09 06       	cpc	r0, r25
 7c4:	08 95       	ret

000007c6 <__fp_pscB>:
 7c6:	00 24       	eor	r0, r0
 7c8:	0a 94       	dec	r0
 7ca:	12 16       	cp	r1, r18
 7cc:	13 06       	cpc	r1, r19
 7ce:	14 06       	cpc	r1, r20
 7d0:	05 06       	cpc	r0, r21
 7d2:	08 95       	ret

000007d4 <__fp_round>:
 7d4:	09 2e       	mov	r0, r25
 7d6:	03 94       	inc	r0
 7d8:	00 0c       	add	r0, r0
 7da:	11 f4       	brne	.+4      	; 0x7e0 <__fp_round+0xc>
 7dc:	88 23       	and	r24, r24
 7de:	52 f0       	brmi	.+20     	; 0x7f4 <__fp_round+0x20>
 7e0:	bb 0f       	add	r27, r27
 7e2:	40 f4       	brcc	.+16     	; 0x7f4 <__fp_round+0x20>
 7e4:	bf 2b       	or	r27, r31
 7e6:	11 f4       	brne	.+4      	; 0x7ec <__fp_round+0x18>
 7e8:	60 ff       	sbrs	r22, 0
 7ea:	04 c0       	rjmp	.+8      	; 0x7f4 <__fp_round+0x20>
 7ec:	6f 5f       	subi	r22, 0xFF	; 255
 7ee:	7f 4f       	sbci	r23, 0xFF	; 255
 7f0:	8f 4f       	sbci	r24, 0xFF	; 255
 7f2:	9f 4f       	sbci	r25, 0xFF	; 255
 7f4:	08 95       	ret

000007f6 <_exit>:
 7f6:	f8 94       	cli

000007f8 <__stop_program>:
 7f8:	ff cf       	rjmp	.-2      	; 0x7f8 <__stop_program>
