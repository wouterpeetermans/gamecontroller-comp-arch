
gamecontroller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001436  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00802000  00001436  000014ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001a  0080201c  0080201c  000014e6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000014e6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001544  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b0  00000000  00000000  00001584  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000021eb  00000000  00000000  00001734  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000937  00000000  00000000  0000391f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001bea  00000000  00000000  00004256  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004a0  00000000  00000000  00005e40  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00014ce0  00000000  00000000  000062e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000837  00000000  00000000  0001afc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000120  00000000  00000000  0001b7f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00005fc8  00000000  00000000  0001b917  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__ctors_end>
       4:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
       8:	0c 94 b8 01 	jmp	0x370	; 0x370 <__vector_2>
       c:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__vector_3>
      10:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      14:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      18:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      1c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      20:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      24:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      28:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      2c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      30:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      34:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      38:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      3c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      40:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      44:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      48:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      4c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      50:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      54:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      58:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      5c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      60:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      64:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      68:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      6c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      70:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      74:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      78:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      7c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      80:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      84:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      88:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      8c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      90:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      94:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      98:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      9c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      a0:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      a4:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      a8:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      ac:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      b0:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      b4:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      b8:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      bc:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      c0:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      c4:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      c8:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      cc:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      d0:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      d4:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      d8:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      dc:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      e0:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      e4:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      e8:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      ec:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      f0:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      f4:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      f8:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      fc:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     100:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     104:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     108:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     10c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     110:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     114:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     118:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     11c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     120:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     124:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     128:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     12c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     130:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     134:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     138:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     13c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     140:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     144:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     148:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     14c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     150:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     154:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     158:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     15c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     160:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     164:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     168:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     16c:	73 02       	muls	r23, r19
     16e:	5b 02       	muls	r21, r27
     170:	61 02       	muls	r22, r17
     172:	67 02       	muls	r22, r23
     174:	61 02       	muls	r22, r17
     176:	73 02       	muls	r23, r19
     178:	6d 02       	muls	r22, r29
     17a:	5b 02       	muls	r21, r27
     17c:	5b 02       	muls	r21, r27
     17e:	6d 02       	muls	r22, r29
     180:	73 02       	muls	r23, r19
     182:	61 02       	muls	r22, r17
     184:	67 02       	muls	r22, r23
     186:	61 02       	muls	r22, r17
     188:	5b 02       	muls	r21, r27
     18a:	73 02       	muls	r23, r19

0000018c <__ctors_end>:
     18c:	11 24       	eor	r1, r1
     18e:	1f be       	out	0x3f, r1	; 63
     190:	cf ef       	ldi	r28, 0xFF	; 255
     192:	cd bf       	out	0x3d, r28	; 61
     194:	d7 e2       	ldi	r29, 0x27	; 39
     196:	de bf       	out	0x3e, r29	; 62

00000198 <__do_copy_data>:
     198:	10 e2       	ldi	r17, 0x20	; 32
     19a:	a0 e0       	ldi	r26, 0x00	; 0
     19c:	b0 e2       	ldi	r27, 0x20	; 32
     19e:	e6 e3       	ldi	r30, 0x36	; 54
     1a0:	f4 e1       	ldi	r31, 0x14	; 20
     1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <__do_copy_data+0x10>
     1a4:	05 90       	lpm	r0, Z+
     1a6:	0d 92       	st	X+, r0
     1a8:	ac 31       	cpi	r26, 0x1C	; 28
     1aa:	b1 07       	cpc	r27, r17
     1ac:	d9 f7       	brne	.-10     	; 0x1a4 <__do_copy_data+0xc>

000001ae <__do_clear_bss>:
     1ae:	20 e2       	ldi	r18, 0x20	; 32
     1b0:	ac e1       	ldi	r26, 0x1C	; 28
     1b2:	b0 e2       	ldi	r27, 0x20	; 32
     1b4:	01 c0       	rjmp	.+2      	; 0x1b8 <.do_clear_bss_start>

000001b6 <.do_clear_bss_loop>:
     1b6:	1d 92       	st	X+, r1

000001b8 <.do_clear_bss_start>:
     1b8:	a6 33       	cpi	r26, 0x36	; 54
     1ba:	b2 07       	cpc	r27, r18
     1bc:	e1 f7       	brne	.-8      	; 0x1b6 <.do_clear_bss_loop>
     1be:	0e 94 80 02 	call	0x500	; 0x500 <main>
     1c2:	0c 94 19 0a 	jmp	0x1432	; 0x1432 <_exit>

000001c6 <__bad_interrupt>:
     1c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001ca <AccInit>:
#include "acc.h"



void AccInit(void)
{
     1ca:	cf 93       	push	r28
     1cc:	df 93       	push	r29
     1ce:	cd b7       	in	r28, 0x3d	; 61
     1d0:	de b7       	in	r29, 0x3e	; 62

	
}
     1d2:	00 00       	nop
     1d4:	df 91       	pop	r29
     1d6:	cf 91       	pop	r28
     1d8:	08 95       	ret

000001da <AnalogInit>:
#include <inttypes.h>



void AnalogInit(void)
{
     1da:	0f 93       	push	r16
     1dc:	1f 93       	push	r17
     1de:	cf 93       	push	r28
     1e0:	df 93       	push	r29
     1e2:	cd b7       	in	r28, 0x3d	; 61
     1e4:	de b7       	in	r29, 0x3e	; 62
//	PR.PRPB &= ~0x02; // Clear ADC bit in Power Reduction Port B Register
	
	// Calibration values are stored at production time
	// Load stored bytes into the calibration registers
	// First NVM read is junk and must be thrown away
 	ADCA.CALL = ReadCalibrationByte( offsetof(NVM_PROD_SIGNATURES_t, ADCBCAL0) );
     1e6:	00 e0       	ldi	r16, 0x00	; 0
     1e8:	12 e0       	ldi	r17, 0x02	; 2
     1ea:	84 e2       	ldi	r24, 0x24	; 36
     1ec:	0e 94 41 01 	call	0x282	; 0x282 <ReadCalibrationByte>
     1f0:	f8 01       	movw	r30, r16
     1f2:	84 87       	std	Z+12, r24	; 0x0c
 	ADCA.CALH = ReadCalibrationByte( offsetof(NVM_PROD_SIGNATURES_t, ADCBCAL1) );
     1f4:	00 e0       	ldi	r16, 0x00	; 0
     1f6:	12 e0       	ldi	r17, 0x02	; 2
     1f8:	85 e2       	ldi	r24, 0x25	; 37
     1fa:	0e 94 41 01 	call	0x282	; 0x282 <ReadCalibrationByte>
     1fe:	f8 01       	movw	r30, r16
     200:	85 87       	std	Z+13, r24	; 0x0d
 	ADCA.CALL = ReadCalibrationByte( offsetof(NVM_PROD_SIGNATURES_t, ADCBCAL0) );
     202:	00 e0       	ldi	r16, 0x00	; 0
     204:	12 e0       	ldi	r17, 0x02	; 2
     206:	84 e2       	ldi	r24, 0x24	; 36
     208:	0e 94 41 01 	call	0x282	; 0x282 <ReadCalibrationByte>
     20c:	f8 01       	movw	r30, r16
     20e:	84 87       	std	Z+12, r24	; 0x0c
 	ADCA.CALH = ReadCalibrationByte( offsetof(NVM_PROD_SIGNATURES_t, ADCBCAL1) );
     210:	00 e0       	ldi	r16, 0x00	; 0
     212:	12 e0       	ldi	r17, 0x02	; 2
     214:	85 e2       	ldi	r24, 0x25	; 37
     216:	0e 94 41 01 	call	0x282	; 0x282 <ReadCalibrationByte>
     21a:	f8 01       	movw	r30, r16
     21c:	85 87       	std	Z+13, r24	; 0x0d
	//     7        6       5        4        3        2       1       0
	// | START  |   -   |   -   |         GAIN[2:0]        | INPUTMODE[1:0] |
	//     0        0       0        0        0        0       0       0
	// Place ADC channel in single-ended mode
	// Gain set to 1
	ADCA.CH0.CTRL = ADC_CH_INPUTMODE0_bm; // 0x01
     21e:	80 e0       	ldi	r24, 0x00	; 0
     220:	92 e0       	ldi	r25, 0x02	; 2
     222:	21 e0       	ldi	r18, 0x01	; 1
     224:	fc 01       	movw	r30, r24
     226:	20 a3       	std	Z+32, r18	; 0x20
	//     7        6       5        4        3        2       1       0
	// |   -    |           MUXPOS[3:0]             |     MUXNEG[2:0]     |
	//     0        0       0        0        0        0       0       0
	// Connect potentiometer (PB1) to positive input
	// MUXNEG bits are ignored in single-ended mode
	ADCA.CH0.MUXCTRL = ADC_CH_MUXINT0_bm; // 0x08
     228:	80 e0       	ldi	r24, 0x00	; 0
     22a:	92 e0       	ldi	r25, 0x02	; 2
     22c:	28 e0       	ldi	r18, 0x08	; 8
     22e:	fc 01       	movw	r30, r24
     230:	21 a3       	std	Z+33, r18	; 0x21
	//     0        0       0         0         0         0       0        0
	// Apply no limit to ADC sample rate
	// Put ADC in signed mode
	// Disable Free-run mode (single conversion upon trigger)
	// Resolution set to 12-bit, right justified (11-bit effective in signed mode)
	ADCA.CTRLB = ADC_CONMODE_bm; // 0x10
     232:	80 e0       	ldi	r24, 0x00	; 0
     234:	92 e0       	ldi	r25, 0x02	; 2
     236:	20 e1       	ldi	r18, 0x10	; 16
     238:	fc 01       	movw	r30, r24
     23a:	21 83       	std	Z+1, r18	; 0x01
	// The ADC runs off of the CPU_per clock
	// In sys_clk_init() the internal 2MHz RC osc was used to source a 16 MHz PLL
	// The PLL is then divided using Prescalers A, B, and C setting CPU_per to 8 MHz
	// According to AVR1300, the ADC clock should run in the range 100 kHz ~ approx 1.4 MHz
	// Set ADC clock to 125kHz:  CPU_per/64    =>    8MHz/64 = 125kHz
	ADCA.PRESCALER = ADC_PRESCALER2_bm; // 0x04
     23c:	80 e0       	ldi	r24, 0x00	; 0
     23e:	92 e0       	ldi	r25, 0x02	; 2
     240:	24 e0       	ldi	r18, 0x04	; 4
     242:	fc 01       	movw	r30, r24
     244:	24 83       	std	Z+4, r18	; 0x04
	// |   -   |      REFSEL[2:0]      |   -   |   -   | BANDGAP | TEMPREF |
	//     0       0       0       0       0       0        0         0
	// Set Vref to Vcc/1.6.  This gives 3.3/1.6 = approx 2.06V
	// With effectively 11-bit resolution, this means each LSB
	// will represent approximately 1 mV.
	ADCA.REFCTRL = ADC_REFSEL0_bm; // 0x10
     246:	80 e0       	ldi	r24, 0x00	; 0
     248:	92 e0       	ldi	r25, 0x02	; 2
     24a:	20 e1       	ldi	r18, 0x10	; 16
     24c:	fc 01       	movw	r30, r24
     24e:	22 83       	std	Z+2, r18	; 0x02
	//ADCB.EVCTRL
	//     7       6       5       4       3       2       1       0
	// |   -   |   -   |   -   |   EVSEL[1:0]  |      EVACT[2:0]       |
	//     0       0       0       0       0       0       0       0
	// Not implementing Event System so ensure EVCTRL is reading zeros
	ADCA.EVCTRL = 0x00;
     250:	80 e0       	ldi	r24, 0x00	; 0
     252:	92 e0       	ldi	r25, 0x02	; 2
     254:	fc 01       	movw	r30, r24
     256:	13 82       	std	Z+3, r1	; 0x03
	//ADCB.INTFLAGS
	//     7       6       5       4       3       2       1       0
	// |   -   |   -   |   -   |   -   |   -   |   -   |   -   | CH0IF |
	//     0       0       0       0       0       0       0       0
	// Ensure the ADC complete flag is cleared (by writing a '1' to it)
	ADCA.INTFLAGS = ADC_CH0IF_bm; // 0x01
     258:	80 e0       	ldi	r24, 0x00	; 0
     25a:	92 e0       	ldi	r25, 0x02	; 2
     25c:	21 e0       	ldi	r18, 0x01	; 1
     25e:	fc 01       	movw	r30, r24
     260:	26 83       	std	Z+6, r18	; 0x06
	//ADCB.CH0.INTCTRL
	//     7       6       5       4        3       2       1       0
	// |   -   |   -   |   -   |   -   |  INTMODE[1:0]  |  INTLVL[1:0]  |
	//     0       0       0       0        0       0       0       0
	// Configure interrupt on conversion complete with high priority
	ADCA.CH0.INTCTRL = ADC_CH_INTLVL1_bm | ADC_CH_INTLVL0_bm; // 0x03
     262:	80 e0       	ldi	r24, 0x00	; 0
     264:	92 e0       	ldi	r25, 0x02	; 2
     266:	23 e0       	ldi	r18, 0x03	; 3
     268:	fc 01       	movw	r30, r24
     26a:	22 a3       	std	Z+34, r18	; 0x22
	//ADCB.CTRLA
	//     7       6       5       4       3         2        1        0
	// |   -   |   -   |   -   |   -   |   -   | CH0START | FLUSH | ENABLE |
	//     0       0       0       0       0         0        0        0
	// Enable ADC, module B
	ADCA.CTRLA = ADC_ENABLE_bm; // 0x01
     26c:	80 e0       	ldi	r24, 0x00	; 0
     26e:	92 e0       	ldi	r25, 0x02	; 2
     270:	21 e0       	ldi	r18, 0x01	; 1
     272:	fc 01       	movw	r30, r24
     274:	20 83       	st	Z, r18
	//////////////////////////////////////////////////////////////////////
}
     276:	00 00       	nop
     278:	df 91       	pop	r29
     27a:	cf 91       	pop	r28
     27c:	1f 91       	pop	r17
     27e:	0f 91       	pop	r16
     280:	08 95       	ret

00000282 <ReadCalibrationByte>:


uint8_t ReadCalibrationByte(uint8_t index) {
     282:	cf 93       	push	r28
     284:	df 93       	push	r29
     286:	cd b7       	in	r28, 0x3d	; 61
     288:	de b7       	in	r29, 0x3e	; 62
     28a:	25 97       	sbiw	r28, 0x05	; 5
     28c:	cd bf       	out	0x3d, r28	; 61
     28e:	de bf       	out	0x3e, r29	; 62
     290:	8d 83       	std	Y+5, r24	; 0x05
	
	uint8_t result;
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
     292:	8a ec       	ldi	r24, 0xCA	; 202
     294:	91 e0       	ldi	r25, 0x01	; 1
     296:	22 e0       	ldi	r18, 0x02	; 2
     298:	fc 01       	movw	r30, r24
     29a:	20 83       	st	Z, r18
	result = pgm_read_byte(index);
     29c:	8d 81       	ldd	r24, Y+5	; 0x05
     29e:	88 2f       	mov	r24, r24
     2a0:	90 e0       	ldi	r25, 0x00	; 0
     2a2:	89 83       	std	Y+1, r24	; 0x01
     2a4:	9a 83       	std	Y+2, r25	; 0x02
     2a6:	89 81       	ldd	r24, Y+1	; 0x01
     2a8:	9a 81       	ldd	r25, Y+2	; 0x02
     2aa:	fc 01       	movw	r30, r24
     2ac:	84 91       	lpm	r24, Z
     2ae:	8b 83       	std	Y+3, r24	; 0x03
     2b0:	8b 81       	ldd	r24, Y+3	; 0x03
     2b2:	8c 83       	std	Y+4, r24	; 0x04
	
	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
     2b4:	8a ec       	ldi	r24, 0xCA	; 202
     2b6:	91 e0       	ldi	r25, 0x01	; 1
     2b8:	fc 01       	movw	r30, r24
     2ba:	10 82       	st	Z, r1
	
	return result;
     2bc:	8c 81       	ldd	r24, Y+4	; 0x04
}
     2be:	25 96       	adiw	r28, 0x05	; 5
     2c0:	cd bf       	out	0x3d, r28	; 61
     2c2:	de bf       	out	0x3e, r29	; 62
     2c4:	df 91       	pop	r29
     2c6:	cf 91       	pop	r28
     2c8:	08 95       	ret

000002ca <ClockInit>:
#pragma GCC push_options
#pragma GCC optimize ("O2") //This function must be optimized to avoid too long time interval betwee CCP write and CLK.CTRL write (4 CLK CYC max)

void ClockInit(void)
{
	OSC.XOSCCTRL=0b11001011; //Clock<=16MHz	
     2ca:	8b ec       	ldi	r24, 0xCB	; 203
     2cc:	80 93 52 00 	sts	0x0052, r24	; 0x800052 <__TEXT_REGION_LENGTH__+0x700052>
	OSC.CTRL=0b01000; //Enable oscillator	
     2d0:	88 e0       	ldi	r24, 0x08	; 8
     2d2:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
	while (!(OSC.STATUS&0b1000)); //Wait until XTAL osc is ready
     2d6:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
     2da:	83 ff       	sbrs	r24, 3
     2dc:	fc cf       	rjmp	.-8      	; 0x2d6 <ClockInit+0xc>
	
	//Select XTAL osc as system CLK source
	CCP=0xd8;
     2de:	88 ed       	ldi	r24, 0xD8	; 216
     2e0:	84 bf       	out	0x34, r24	; 52
    CLK.CTRL=0b0011;
     2e2:	83 e0       	ldi	r24, 0x03	; 3
     2e4:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
     2e8:	08 95       	ret

000002ea <EncoderInit>:
volatile int encoderPos = 0;
volatile uint8_t prevpos;
volatile uint8_t currentPos;

void EncoderInit(void)
{
     2ea:	cf 93       	push	r28
     2ec:	df 93       	push	r29
     2ee:	cd b7       	in	r28, 0x3d	; 61
     2f0:	de b7       	in	r29, 0x3e	; 62
	PORTC.DIR = (PORTC.DIR & 0b11001111);
     2f2:	80 e4       	ldi	r24, 0x40	; 64
     2f4:	96 e0       	ldi	r25, 0x06	; 6
     2f6:	20 e4       	ldi	r18, 0x40	; 64
     2f8:	36 e0       	ldi	r19, 0x06	; 6
     2fa:	f9 01       	movw	r30, r18
     2fc:	20 81       	ld	r18, Z
     2fe:	2f 7c       	andi	r18, 0xCF	; 207
     300:	fc 01       	movw	r30, r24
     302:	20 83       	st	Z, r18
	PORTC.PIN4CTRL = 0b00011000;
     304:	80 e4       	ldi	r24, 0x40	; 64
     306:	96 e0       	ldi	r25, 0x06	; 6
     308:	28 e1       	ldi	r18, 0x18	; 24
     30a:	fc 01       	movw	r30, r24
     30c:	24 8b       	std	Z+20, r18	; 0x14
	PORTC.PIN5CTRL = 0b00011000;
     30e:	80 e4       	ldi	r24, 0x40	; 64
     310:	96 e0       	ldi	r25, 0x06	; 6
     312:	28 e1       	ldi	r18, 0x18	; 24
     314:	fc 01       	movw	r30, r24
     316:	25 8b       	std	Z+21, r18	; 0x15
	PORTC.INTCTRL = 0b00001111;
     318:	80 e4       	ldi	r24, 0x40	; 64
     31a:	96 e0       	ldi	r25, 0x06	; 6
     31c:	2f e0       	ldi	r18, 0x0F	; 15
     31e:	fc 01       	movw	r30, r24
     320:	21 87       	std	Z+9, r18	; 0x09
	PORTC.INT0MASK = 0b00010000;
     322:	80 e4       	ldi	r24, 0x40	; 64
     324:	96 e0       	ldi	r25, 0x06	; 6
     326:	20 e1       	ldi	r18, 0x10	; 16
     328:	fc 01       	movw	r30, r24
     32a:	22 87       	std	Z+10, r18	; 0x0a
	PORTC.INT1MASK = 0b00100000;
     32c:	80 e4       	ldi	r24, 0x40	; 64
     32e:	96 e0       	ldi	r25, 0x06	; 6
     330:	20 e2       	ldi	r18, 0x20	; 32
     332:	fc 01       	movw	r30, r24
     334:	23 87       	std	Z+11, r18	; 0x0b
	SREG = (SREG | 0b10000000);
     336:	8f e3       	ldi	r24, 0x3F	; 63
     338:	90 e0       	ldi	r25, 0x00	; 0
     33a:	2f e3       	ldi	r18, 0x3F	; 63
     33c:	30 e0       	ldi	r19, 0x00	; 0
     33e:	f9 01       	movw	r30, r18
     340:	20 81       	ld	r18, Z
     342:	20 68       	ori	r18, 0x80	; 128
     344:	fc 01       	movw	r30, r24
     346:	20 83       	st	Z, r18
	PMIC.CTRL = 0b00000100;
     348:	80 ea       	ldi	r24, 0xA0	; 160
     34a:	90 e0       	ldi	r25, 0x00	; 0
     34c:	24 e0       	ldi	r18, 0x04	; 4
     34e:	fc 01       	movw	r30, r24
     350:	22 83       	std	Z+2, r18	; 0x02
	
	
	
}
     352:	00 00       	nop
     354:	df 91       	pop	r29
     356:	cf 91       	pop	r28
     358:	08 95       	ret

0000035a <EncoderGetPos>:
int EncoderGetPos(void)
{
     35a:	cf 93       	push	r28
     35c:	df 93       	push	r29
     35e:	cd b7       	in	r28, 0x3d	; 61
     360:	de b7       	in	r29, 0x3e	; 62
	return encoderPos;
     362:	80 91 1c 20 	lds	r24, 0x201C	; 0x80201c <__data_end>
     366:	90 91 1d 20 	lds	r25, 0x201D	; 0x80201d <__data_end+0x1>
}
     36a:	df 91       	pop	r29
     36c:	cf 91       	pop	r28
     36e:	08 95       	ret

00000370 <__vector_2>:

ISR(PORTC_INT0_vect){
     370:	1f 92       	push	r1
     372:	0f 92       	push	r0
     374:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     378:	0f 92       	push	r0
     37a:	11 24       	eor	r1, r1
     37c:	2f 93       	push	r18
     37e:	3f 93       	push	r19
     380:	4f 93       	push	r20
     382:	5f 93       	push	r21
     384:	6f 93       	push	r22
     386:	7f 93       	push	r23
     388:	8f 93       	push	r24
     38a:	9f 93       	push	r25
     38c:	af 93       	push	r26
     38e:	bf 93       	push	r27
     390:	ef 93       	push	r30
     392:	ff 93       	push	r31
     394:	cf 93       	push	r28
     396:	df 93       	push	r29
     398:	cd b7       	in	r28, 0x3d	; 61
     39a:	de b7       	in	r29, 0x3e	; 62
	encoderPos += readEncoder();
     39c:	0e 94 28 02 	call	0x450	; 0x450 <readEncoder>
     3a0:	9c 01       	movw	r18, r24
     3a2:	80 91 1c 20 	lds	r24, 0x201C	; 0x80201c <__data_end>
     3a6:	90 91 1d 20 	lds	r25, 0x201D	; 0x80201d <__data_end+0x1>
     3aa:	82 0f       	add	r24, r18
     3ac:	93 1f       	adc	r25, r19
     3ae:	80 93 1c 20 	sts	0x201C, r24	; 0x80201c <__data_end>
     3b2:	90 93 1d 20 	sts	0x201D, r25	; 0x80201d <__data_end+0x1>
}
     3b6:	00 00       	nop
     3b8:	df 91       	pop	r29
     3ba:	cf 91       	pop	r28
     3bc:	ff 91       	pop	r31
     3be:	ef 91       	pop	r30
     3c0:	bf 91       	pop	r27
     3c2:	af 91       	pop	r26
     3c4:	9f 91       	pop	r25
     3c6:	8f 91       	pop	r24
     3c8:	7f 91       	pop	r23
     3ca:	6f 91       	pop	r22
     3cc:	5f 91       	pop	r21
     3ce:	4f 91       	pop	r20
     3d0:	3f 91       	pop	r19
     3d2:	2f 91       	pop	r18
     3d4:	0f 90       	pop	r0
     3d6:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     3da:	0f 90       	pop	r0
     3dc:	1f 90       	pop	r1
     3de:	18 95       	reti

000003e0 <__vector_3>:

ISR(PORTC_INT1_vect){
     3e0:	1f 92       	push	r1
     3e2:	0f 92       	push	r0
     3e4:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     3e8:	0f 92       	push	r0
     3ea:	11 24       	eor	r1, r1
     3ec:	2f 93       	push	r18
     3ee:	3f 93       	push	r19
     3f0:	4f 93       	push	r20
     3f2:	5f 93       	push	r21
     3f4:	6f 93       	push	r22
     3f6:	7f 93       	push	r23
     3f8:	8f 93       	push	r24
     3fa:	9f 93       	push	r25
     3fc:	af 93       	push	r26
     3fe:	bf 93       	push	r27
     400:	ef 93       	push	r30
     402:	ff 93       	push	r31
     404:	cf 93       	push	r28
     406:	df 93       	push	r29
     408:	cd b7       	in	r28, 0x3d	; 61
     40a:	de b7       	in	r29, 0x3e	; 62
	encoderPos += readEncoder();
     40c:	0e 94 28 02 	call	0x450	; 0x450 <readEncoder>
     410:	9c 01       	movw	r18, r24
     412:	80 91 1c 20 	lds	r24, 0x201C	; 0x80201c <__data_end>
     416:	90 91 1d 20 	lds	r25, 0x201D	; 0x80201d <__data_end+0x1>
     41a:	82 0f       	add	r24, r18
     41c:	93 1f       	adc	r25, r19
     41e:	80 93 1c 20 	sts	0x201C, r24	; 0x80201c <__data_end>
     422:	90 93 1d 20 	sts	0x201D, r25	; 0x80201d <__data_end+0x1>
}
     426:	00 00       	nop
     428:	df 91       	pop	r29
     42a:	cf 91       	pop	r28
     42c:	ff 91       	pop	r31
     42e:	ef 91       	pop	r30
     430:	bf 91       	pop	r27
     432:	af 91       	pop	r26
     434:	9f 91       	pop	r25
     436:	8f 91       	pop	r24
     438:	7f 91       	pop	r23
     43a:	6f 91       	pop	r22
     43c:	5f 91       	pop	r21
     43e:	4f 91       	pop	r20
     440:	3f 91       	pop	r19
     442:	2f 91       	pop	r18
     444:	0f 90       	pop	r0
     446:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     44a:	0f 90       	pop	r0
     44c:	1f 90       	pop	r1
     44e:	18 95       	reti

00000450 <readEncoder>:
		}
		state = (s >> 2);
	}
*/

int readEncoder(){
     450:	cf 93       	push	r28
     452:	df 93       	push	r29
     454:	00 d0       	rcall	.+0      	; 0x456 <readEncoder+0x6>
     456:	1f 92       	push	r1
     458:	cd b7       	in	r28, 0x3d	; 61
     45a:	de b7       	in	r29, 0x3e	; 62
	currentPos = (PORTC.IN >> 4) & 3;
     45c:	80 e4       	ldi	r24, 0x40	; 64
     45e:	96 e0       	ldi	r25, 0x06	; 6
     460:	fc 01       	movw	r30, r24
     462:	80 85       	ldd	r24, Z+8	; 0x08
     464:	82 95       	swap	r24
     466:	8f 70       	andi	r24, 0x0F	; 15
     468:	83 70       	andi	r24, 0x03	; 3
     46a:	80 93 1e 20 	sts	0x201E, r24	; 0x80201e <currentPos>
	uint8_t s = (currentPos << 2) | prevpos;
     46e:	80 91 1e 20 	lds	r24, 0x201E	; 0x80201e <currentPos>
     472:	88 2f       	mov	r24, r24
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	88 0f       	add	r24, r24
     478:	99 1f       	adc	r25, r25
     47a:	88 0f       	add	r24, r24
     47c:	99 1f       	adc	r25, r25
     47e:	98 2f       	mov	r25, r24
     480:	80 91 1f 20 	lds	r24, 0x201F	; 0x80201f <prevpos>
     484:	89 2b       	or	r24, r25
     486:	8b 83       	std	Y+3, r24	; 0x03
	int position = 0;
     488:	19 82       	std	Y+1, r1	; 0x01
     48a:	1a 82       	std	Y+2, r1	; 0x02
	switch (s) {
     48c:	8b 81       	ldd	r24, Y+3	; 0x03
     48e:	88 2f       	mov	r24, r24
     490:	90 e0       	ldi	r25, 0x00	; 0
     492:	09 2e       	mov	r0, r25
     494:	00 0c       	add	r0, r0
     496:	aa 0b       	sbc	r26, r26
     498:	bb 0b       	sbc	r27, r27
     49a:	40 e0       	ldi	r20, 0x00	; 0
     49c:	50 e0       	ldi	r21, 0x00	; 0
     49e:	2f e0       	ldi	r18, 0x0F	; 15
     4a0:	30 e0       	ldi	r19, 0x00	; 0
     4a2:	84 1b       	sub	r24, r20
     4a4:	95 0b       	sbc	r25, r21
     4a6:	28 17       	cp	r18, r24
     4a8:	39 07       	cpc	r19, r25
     4aa:	b8 f0       	brcs	.+46     	; 0x4da <readEncoder+0x8a>
     4ac:	8a 54       	subi	r24, 0x4A	; 74
     4ae:	9f 4f       	sbci	r25, 0xFF	; 255
     4b0:	fc 01       	movw	r30, r24
     4b2:	0c 94 dd 06 	jmp	0xdba	; 0xdba <__tablejump2__>
		case 0: case 5: case 10: case 15:
		break;
		case 1: case 7: case 8: case 14:
		position++; break;
     4b6:	89 81       	ldd	r24, Y+1	; 0x01
     4b8:	9a 81       	ldd	r25, Y+2	; 0x02
     4ba:	01 96       	adiw	r24, 0x01	; 1
     4bc:	89 83       	std	Y+1, r24	; 0x01
     4be:	9a 83       	std	Y+2, r25	; 0x02
     4c0:	13 c0       	rjmp	.+38     	; 0x4e8 <readEncoder+0x98>
		case 2: case 4: case 11: case 13:
		position--; break;
     4c2:	89 81       	ldd	r24, Y+1	; 0x01
     4c4:	9a 81       	ldd	r25, Y+2	; 0x02
     4c6:	01 97       	sbiw	r24, 0x01	; 1
     4c8:	89 83       	std	Y+1, r24	; 0x01
     4ca:	9a 83       	std	Y+2, r25	; 0x02
     4cc:	0d c0       	rjmp	.+26     	; 0x4e8 <readEncoder+0x98>
		case 3: case 12:
		position += 2; break;
     4ce:	89 81       	ldd	r24, Y+1	; 0x01
     4d0:	9a 81       	ldd	r25, Y+2	; 0x02
     4d2:	02 96       	adiw	r24, 0x02	; 2
     4d4:	89 83       	std	Y+1, r24	; 0x01
     4d6:	9a 83       	std	Y+2, r25	; 0x02
     4d8:	07 c0       	rjmp	.+14     	; 0x4e8 <readEncoder+0x98>
		default:
		position -= 2; break;
     4da:	89 81       	ldd	r24, Y+1	; 0x01
     4dc:	9a 81       	ldd	r25, Y+2	; 0x02
     4de:	02 97       	sbiw	r24, 0x02	; 2
     4e0:	89 83       	std	Y+1, r24	; 0x01
     4e2:	9a 83       	std	Y+2, r25	; 0x02
     4e4:	01 c0       	rjmp	.+2      	; 0x4e8 <readEncoder+0x98>
	currentPos = (PORTC.IN >> 4) & 3;
	uint8_t s = (currentPos << 2) | prevpos;
	int position = 0;
	switch (s) {
		case 0: case 5: case 10: case 15:
		break;
     4e6:	00 00       	nop
		case 3: case 12:
		position += 2; break;
		default:
		position -= 2; break;
	}
	prevpos = currentPos;
     4e8:	80 91 1e 20 	lds	r24, 0x201E	; 0x80201e <currentPos>
     4ec:	80 93 1f 20 	sts	0x201F, r24	; 0x80201f <prevpos>
	return position;
     4f0:	89 81       	ldd	r24, Y+1	; 0x01
     4f2:	9a 81       	ldd	r25, Y+2	; 0x02
}
     4f4:	23 96       	adiw	r28, 0x03	; 3
     4f6:	cd bf       	out	0x3d, r28	; 61
     4f8:	de bf       	out	0x3e, r29	; 62
     4fa:	df 91       	pop	r29
     4fc:	cf 91       	pop	r28
     4fe:	08 95       	ret

00000500 <main>:
char a;

void SimpleFunction(void);	//A simple function: print a counter (0 to 9) to the terminal

int main(void)
{	
     500:	cf 93       	push	r28
     502:	df 93       	push	r29
     504:	cd b7       	in	r28, 0x3d	; 61
     506:	de b7       	in	r29, 0x3e	; 62
     508:	6e 97       	sbiw	r28, 0x1e	; 30
     50a:	cd bf       	out	0x3d, r28	; 61
     50c:	de bf       	out	0x3e, r29	; 62
	//###1###
	 
	//Initialize subsystems
	ClockInit();			//Initialize system clock (16 MHz)
     50e:	0e 94 65 01 	call	0x2ca	; 0x2ca <ClockInit>
	USARTInit();			//Initialize USART and bind to stdout,stdin
     512:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <USARTInit>
	AnalogInit();			//Initialize ADC
     516:	0e 94 ed 00 	call	0x1da	; 0x1da <AnalogInit>
	AccInit();				//Initialize accelerometer system
     51a:	0e 94 e5 00 	call	0x1ca	; 0x1ca <AccInit>
	LEDInit();				//Initialize LEDs
     51e:	0e 94 cb 03 	call	0x796	; 0x796 <LEDInit>
	SwitchInit();			//Initialize switches
     522:	0e 94 cb 04 	call	0x996	; 0x996 <SwitchInit>
	EncoderInit();			//Initialize encoder
     526:	0e 94 75 01 	call	0x2ea	; 0x2ea <EncoderInit>
	SpeakerInit();			//Initialize speaker system
     52a:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <SpeakerInit>
	
	//Enable interrupts
	PMIC.CTRL|=0b00000111;  //Enable low, medium, high priority interrupts
     52e:	80 ea       	ldi	r24, 0xA0	; 160
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	20 ea       	ldi	r18, 0xA0	; 160
     534:	30 e0       	ldi	r19, 0x00	; 0
     536:	f9 01       	movw	r30, r18
     538:	22 81       	ldd	r18, Z+2	; 0x02
     53a:	27 60       	ori	r18, 0x07	; 7
     53c:	fc 01       	movw	r30, r24
     53e:	22 83       	std	Z+2, r18	; 0x02
	SREG|=0b10000000;		//Global interrupt enable
     540:	8f e3       	ldi	r24, 0x3F	; 63
     542:	90 e0       	ldi	r25, 0x00	; 0
     544:	2f e3       	ldi	r18, 0x3F	; 63
     546:	30 e0       	ldi	r19, 0x00	; 0
     548:	f9 01       	movw	r30, r18
     54a:	20 81       	ld	r18, Z
     54c:	20 68       	ori	r18, 0x80	; 128
     54e:	fc 01       	movw	r30, r24
     550:	20 83       	st	Z, r18
     552:	80 e0       	ldi	r24, 0x00	; 0
     554:	90 e0       	ldi	r25, 0x00	; 0
     556:	aa ef       	ldi	r26, 0xFA	; 250
     558:	b3 e4       	ldi	r27, 0x43	; 67
     55a:	8f 83       	std	Y+7, r24	; 0x07
     55c:	98 87       	std	Y+8, r25	; 0x08
     55e:	a9 87       	std	Y+9, r26	; 0x09
     560:	ba 87       	std	Y+10, r27	; 0x0a

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     562:	20 e0       	ldi	r18, 0x00	; 0
     564:	30 e0       	ldi	r19, 0x00	; 0
     566:	4a e7       	ldi	r20, 0x7A	; 122
     568:	55 e4       	ldi	r21, 0x45	; 69
     56a:	6f 81       	ldd	r22, Y+7	; 0x07
     56c:	78 85       	ldd	r23, Y+8	; 0x08
     56e:	89 85       	ldd	r24, Y+9	; 0x09
     570:	9a 85       	ldd	r25, Y+10	; 0x0a
     572:	0e 94 29 06 	call	0xc52	; 0xc52 <__mulsf3>
     576:	dc 01       	movw	r26, r24
     578:	cb 01       	movw	r24, r22
     57a:	8b 87       	std	Y+11, r24	; 0x0b
     57c:	9c 87       	std	Y+12, r25	; 0x0c
     57e:	ad 87       	std	Y+13, r26	; 0x0d
     580:	be 87       	std	Y+14, r27	; 0x0e
	if (__tmp < 1.0)
     582:	20 e0       	ldi	r18, 0x00	; 0
     584:	30 e0       	ldi	r19, 0x00	; 0
     586:	40 e8       	ldi	r20, 0x80	; 128
     588:	5f e3       	ldi	r21, 0x3F	; 63
     58a:	6b 85       	ldd	r22, Y+11	; 0x0b
     58c:	7c 85       	ldd	r23, Y+12	; 0x0c
     58e:	8d 85       	ldd	r24, Y+13	; 0x0d
     590:	9e 85       	ldd	r25, Y+14	; 0x0e
     592:	0e 94 66 05 	call	0xacc	; 0xacc <__cmpsf2>
     596:	88 23       	and	r24, r24
     598:	2c f4       	brge	.+10     	; 0x5a4 <main+0xa4>
		__ticks = 1;
     59a:	81 e0       	ldi	r24, 0x01	; 1
     59c:	90 e0       	ldi	r25, 0x00	; 0
     59e:	8f 87       	std	Y+15, r24	; 0x0f
     5a0:	98 8b       	std	Y+16, r25	; 0x10
     5a2:	3f c0       	rjmp	.+126    	; 0x622 <main+0x122>
	else if (__tmp > 65535)
     5a4:	20 e0       	ldi	r18, 0x00	; 0
     5a6:	3f ef       	ldi	r19, 0xFF	; 255
     5a8:	4f e7       	ldi	r20, 0x7F	; 127
     5aa:	57 e4       	ldi	r21, 0x47	; 71
     5ac:	6b 85       	ldd	r22, Y+11	; 0x0b
     5ae:	7c 85       	ldd	r23, Y+12	; 0x0c
     5b0:	8d 85       	ldd	r24, Y+13	; 0x0d
     5b2:	9e 85       	ldd	r25, Y+14	; 0x0e
     5b4:	0e 94 24 06 	call	0xc48	; 0xc48 <__gesf2>
     5b8:	18 16       	cp	r1, r24
     5ba:	4c f5       	brge	.+82     	; 0x60e <main+0x10e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     5bc:	20 e0       	ldi	r18, 0x00	; 0
     5be:	30 e0       	ldi	r19, 0x00	; 0
     5c0:	40 e2       	ldi	r20, 0x20	; 32
     5c2:	51 e4       	ldi	r21, 0x41	; 65
     5c4:	6f 81       	ldd	r22, Y+7	; 0x07
     5c6:	78 85       	ldd	r23, Y+8	; 0x08
     5c8:	89 85       	ldd	r24, Y+9	; 0x09
     5ca:	9a 85       	ldd	r25, Y+10	; 0x0a
     5cc:	0e 94 29 06 	call	0xc52	; 0xc52 <__mulsf3>
     5d0:	dc 01       	movw	r26, r24
     5d2:	cb 01       	movw	r24, r22
     5d4:	bc 01       	movw	r22, r24
     5d6:	cd 01       	movw	r24, r26
     5d8:	0e 94 6b 05 	call	0xad6	; 0xad6 <__fixunssfsi>
     5dc:	dc 01       	movw	r26, r24
     5de:	cb 01       	movw	r24, r22
     5e0:	8f 87       	std	Y+15, r24	; 0x0f
     5e2:	98 8b       	std	Y+16, r25	; 0x10
     5e4:	0f c0       	rjmp	.+30     	; 0x604 <main+0x104>
     5e6:	80 e9       	ldi	r24, 0x90	; 144
     5e8:	91 e0       	ldi	r25, 0x01	; 1
     5ea:	89 8b       	std	Y+17, r24	; 0x11
     5ec:	9a 8b       	std	Y+18, r25	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     5ee:	89 89       	ldd	r24, Y+17	; 0x11
     5f0:	9a 89       	ldd	r25, Y+18	; 0x12
     5f2:	01 97       	sbiw	r24, 0x01	; 1
     5f4:	f1 f7       	brne	.-4      	; 0x5f2 <main+0xf2>
     5f6:	89 8b       	std	Y+17, r24	; 0x11
     5f8:	9a 8b       	std	Y+18, r25	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5fa:	8f 85       	ldd	r24, Y+15	; 0x0f
     5fc:	98 89       	ldd	r25, Y+16	; 0x10
     5fe:	01 97       	sbiw	r24, 0x01	; 1
     600:	8f 87       	std	Y+15, r24	; 0x0f
     602:	98 8b       	std	Y+16, r25	; 0x10
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     604:	8f 85       	ldd	r24, Y+15	; 0x0f
     606:	98 89       	ldd	r25, Y+16	; 0x10
     608:	89 2b       	or	r24, r25
     60a:	69 f7       	brne	.-38     	; 0x5e6 <main+0xe6>
     60c:	14 c0       	rjmp	.+40     	; 0x636 <main+0x136>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     60e:	6b 85       	ldd	r22, Y+11	; 0x0b
     610:	7c 85       	ldd	r23, Y+12	; 0x0c
     612:	8d 85       	ldd	r24, Y+13	; 0x0d
     614:	9e 85       	ldd	r25, Y+14	; 0x0e
     616:	0e 94 6b 05 	call	0xad6	; 0xad6 <__fixunssfsi>
     61a:	dc 01       	movw	r26, r24
     61c:	cb 01       	movw	r24, r22
     61e:	8f 87       	std	Y+15, r24	; 0x0f
     620:	98 8b       	std	Y+16, r25	; 0x10
     622:	8f 85       	ldd	r24, Y+15	; 0x0f
     624:	98 89       	ldd	r25, Y+16	; 0x10
     626:	8b 8b       	std	Y+19, r24	; 0x13
     628:	9c 8b       	std	Y+20, r25	; 0x14
     62a:	8b 89       	ldd	r24, Y+19	; 0x13
     62c:	9c 89       	ldd	r25, Y+20	; 0x14
     62e:	01 97       	sbiw	r24, 0x01	; 1
     630:	f1 f7       	brne	.-4      	; 0x62e <main+0x12e>
     632:	8b 8b       	std	Y+19, r24	; 0x13
     634:	9c 8b       	std	Y+20, r25	; 0x14
	
	
	while (1){
		// Start ADC conversion
		//ADCA.CH0.CTRL |= 0x80;
		sprintf(text, "encoder: %d\r",EncoderGetPos());
     636:	0e 94 ad 01 	call	0x35a	; 0x35a <EncoderGetPos>
     63a:	29 2f       	mov	r18, r25
     63c:	2f 93       	push	r18
     63e:	8f 93       	push	r24
     640:	8e e0       	ldi	r24, 0x0E	; 14
     642:	90 e2       	ldi	r25, 0x20	; 32
     644:	89 2f       	mov	r24, r25
     646:	8f 93       	push	r24
     648:	8e e0       	ldi	r24, 0x0E	; 14
     64a:	90 e2       	ldi	r25, 0x20	; 32
     64c:	8f 93       	push	r24
     64e:	80 e2       	ldi	r24, 0x20	; 32
     650:	90 e2       	ldi	r25, 0x20	; 32
     652:	89 2f       	mov	r24, r25
     654:	8f 93       	push	r24
     656:	80 e2       	ldi	r24, 0x20	; 32
     658:	90 e2       	ldi	r25, 0x20	; 32
     65a:	8f 93       	push	r24
     65c:	0e 94 35 07 	call	0xe6a	; 0xe6a <sprintf>
     660:	0f 90       	pop	r0
     662:	0f 90       	pop	r0
     664:	0f 90       	pop	r0
     666:	0f 90       	pop	r0
     668:	0f 90       	pop	r0
     66a:	0f 90       	pop	r0
		puts(text);
     66c:	80 e2       	ldi	r24, 0x20	; 32
     66e:	90 e2       	ldi	r25, 0x20	; 32
     670:	0e 94 05 07 	call	0xe0a	; 0xe0a <puts>
		
		
		for (int i = 1; i<4; i++)
     674:	81 e0       	ldi	r24, 0x01	; 1
     676:	90 e0       	ldi	r25, 0x00	; 0
     678:	89 83       	std	Y+1, r24	; 0x01
     67a:	9a 83       	std	Y+2, r25	; 0x02
     67c:	15 c0       	rjmp	.+42     	; 0x6a8 <main+0x1a8>
		{
			SpeakerBeep(i*500,1000);
     67e:	29 81       	ldd	r18, Y+1	; 0x01
     680:	3a 81       	ldd	r19, Y+2	; 0x02
     682:	84 ef       	ldi	r24, 0xF4	; 244
     684:	91 e0       	ldi	r25, 0x01	; 1
     686:	28 9f       	mul	r18, r24
     688:	a0 01       	movw	r20, r0
     68a:	29 9f       	mul	r18, r25
     68c:	50 0d       	add	r21, r0
     68e:	38 9f       	mul	r19, r24
     690:	50 0d       	add	r21, r0
     692:	11 24       	eor	r1, r1
     694:	68 ee       	ldi	r22, 0xE8	; 232
     696:	73 e0       	ldi	r23, 0x03	; 3
     698:	ca 01       	movw	r24, r20
     69a:	0e 94 10 04 	call	0x820	; 0x820 <SpeakerBeep>
		//ADCA.CH0.CTRL |= 0x80;
		sprintf(text, "encoder: %d\r",EncoderGetPos());
		puts(text);
		
		
		for (int i = 1; i<4; i++)
     69e:	89 81       	ldd	r24, Y+1	; 0x01
     6a0:	9a 81       	ldd	r25, Y+2	; 0x02
     6a2:	01 96       	adiw	r24, 0x01	; 1
     6a4:	89 83       	std	Y+1, r24	; 0x01
     6a6:	9a 83       	std	Y+2, r25	; 0x02
     6a8:	89 81       	ldd	r24, Y+1	; 0x01
     6aa:	9a 81       	ldd	r25, Y+2	; 0x02
     6ac:	04 97       	sbiw	r24, 0x04	; 4
     6ae:	3c f3       	brlt	.-50     	; 0x67e <main+0x17e>
     6b0:	80 e0       	ldi	r24, 0x00	; 0
     6b2:	90 e0       	ldi	r25, 0x00	; 0
     6b4:	aa e7       	ldi	r26, 0x7A	; 122
     6b6:	b4 e4       	ldi	r27, 0x44	; 68
     6b8:	8b 83       	std	Y+3, r24	; 0x03
     6ba:	9c 83       	std	Y+4, r25	; 0x04
     6bc:	ad 83       	std	Y+5, r26	; 0x05
     6be:	be 83       	std	Y+6, r27	; 0x06

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     6c0:	20 e0       	ldi	r18, 0x00	; 0
     6c2:	30 e0       	ldi	r19, 0x00	; 0
     6c4:	4a e7       	ldi	r20, 0x7A	; 122
     6c6:	55 e4       	ldi	r21, 0x45	; 69
     6c8:	6b 81       	ldd	r22, Y+3	; 0x03
     6ca:	7c 81       	ldd	r23, Y+4	; 0x04
     6cc:	8d 81       	ldd	r24, Y+5	; 0x05
     6ce:	9e 81       	ldd	r25, Y+6	; 0x06
     6d0:	0e 94 29 06 	call	0xc52	; 0xc52 <__mulsf3>
     6d4:	dc 01       	movw	r26, r24
     6d6:	cb 01       	movw	r24, r22
     6d8:	8d 8b       	std	Y+21, r24	; 0x15
     6da:	9e 8b       	std	Y+22, r25	; 0x16
     6dc:	af 8b       	std	Y+23, r26	; 0x17
     6de:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     6e0:	20 e0       	ldi	r18, 0x00	; 0
     6e2:	30 e0       	ldi	r19, 0x00	; 0
     6e4:	40 e8       	ldi	r20, 0x80	; 128
     6e6:	5f e3       	ldi	r21, 0x3F	; 63
     6e8:	6d 89       	ldd	r22, Y+21	; 0x15
     6ea:	7e 89       	ldd	r23, Y+22	; 0x16
     6ec:	8f 89       	ldd	r24, Y+23	; 0x17
     6ee:	98 8d       	ldd	r25, Y+24	; 0x18
     6f0:	0e 94 66 05 	call	0xacc	; 0xacc <__cmpsf2>
     6f4:	88 23       	and	r24, r24
     6f6:	2c f4       	brge	.+10     	; 0x702 <main+0x202>
		__ticks = 1;
     6f8:	81 e0       	ldi	r24, 0x01	; 1
     6fa:	90 e0       	ldi	r25, 0x00	; 0
     6fc:	89 8f       	std	Y+25, r24	; 0x19
     6fe:	9a 8f       	std	Y+26, r25	; 0x1a
     700:	3f c0       	rjmp	.+126    	; 0x780 <main+0x280>
	else if (__tmp > 65535)
     702:	20 e0       	ldi	r18, 0x00	; 0
     704:	3f ef       	ldi	r19, 0xFF	; 255
     706:	4f e7       	ldi	r20, 0x7F	; 127
     708:	57 e4       	ldi	r21, 0x47	; 71
     70a:	6d 89       	ldd	r22, Y+21	; 0x15
     70c:	7e 89       	ldd	r23, Y+22	; 0x16
     70e:	8f 89       	ldd	r24, Y+23	; 0x17
     710:	98 8d       	ldd	r25, Y+24	; 0x18
     712:	0e 94 24 06 	call	0xc48	; 0xc48 <__gesf2>
     716:	18 16       	cp	r1, r24
     718:	4c f5       	brge	.+82     	; 0x76c <main+0x26c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     71a:	20 e0       	ldi	r18, 0x00	; 0
     71c:	30 e0       	ldi	r19, 0x00	; 0
     71e:	40 e2       	ldi	r20, 0x20	; 32
     720:	51 e4       	ldi	r21, 0x41	; 65
     722:	6b 81       	ldd	r22, Y+3	; 0x03
     724:	7c 81       	ldd	r23, Y+4	; 0x04
     726:	8d 81       	ldd	r24, Y+5	; 0x05
     728:	9e 81       	ldd	r25, Y+6	; 0x06
     72a:	0e 94 29 06 	call	0xc52	; 0xc52 <__mulsf3>
     72e:	dc 01       	movw	r26, r24
     730:	cb 01       	movw	r24, r22
     732:	bc 01       	movw	r22, r24
     734:	cd 01       	movw	r24, r26
     736:	0e 94 6b 05 	call	0xad6	; 0xad6 <__fixunssfsi>
     73a:	dc 01       	movw	r26, r24
     73c:	cb 01       	movw	r24, r22
     73e:	89 8f       	std	Y+25, r24	; 0x19
     740:	9a 8f       	std	Y+26, r25	; 0x1a
     742:	0f c0       	rjmp	.+30     	; 0x762 <main+0x262>
     744:	80 e9       	ldi	r24, 0x90	; 144
     746:	91 e0       	ldi	r25, 0x01	; 1
     748:	8b 8f       	std	Y+27, r24	; 0x1b
     74a:	9c 8f       	std	Y+28, r25	; 0x1c
     74c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     74e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     750:	01 97       	sbiw	r24, 0x01	; 1
     752:	f1 f7       	brne	.-4      	; 0x750 <main+0x250>
     754:	8b 8f       	std	Y+27, r24	; 0x1b
     756:	9c 8f       	std	Y+28, r25	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     758:	89 8d       	ldd	r24, Y+25	; 0x19
     75a:	9a 8d       	ldd	r25, Y+26	; 0x1a
     75c:	01 97       	sbiw	r24, 0x01	; 1
     75e:	89 8f       	std	Y+25, r24	; 0x19
     760:	9a 8f       	std	Y+26, r25	; 0x1a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     762:	89 8d       	ldd	r24, Y+25	; 0x19
     764:	9a 8d       	ldd	r25, Y+26	; 0x1a
     766:	89 2b       	or	r24, r25
     768:	69 f7       	brne	.-38     	; 0x744 <main+0x244>
     76a:	14 c0       	rjmp	.+40     	; 0x794 <main+0x294>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     76c:	6d 89       	ldd	r22, Y+21	; 0x15
     76e:	7e 89       	ldd	r23, Y+22	; 0x16
     770:	8f 89       	ldd	r24, Y+23	; 0x17
     772:	98 8d       	ldd	r25, Y+24	; 0x18
     774:	0e 94 6b 05 	call	0xad6	; 0xad6 <__fixunssfsi>
     778:	dc 01       	movw	r26, r24
     77a:	cb 01       	movw	r24, r22
     77c:	89 8f       	std	Y+25, r24	; 0x19
     77e:	9a 8f       	std	Y+26, r25	; 0x1a
     780:	89 8d       	ldd	r24, Y+25	; 0x19
     782:	9a 8d       	ldd	r25, Y+26	; 0x1a
     784:	8d 8f       	std	Y+29, r24	; 0x1d
     786:	9e 8f       	std	Y+30, r25	; 0x1e
     788:	8d 8d       	ldd	r24, Y+29	; 0x1d
     78a:	9e 8d       	ldd	r25, Y+30	; 0x1e
     78c:	01 97       	sbiw	r24, 0x01	; 1
     78e:	f1 f7       	brne	.-4      	; 0x78c <main+0x28c>
     790:	8d 8f       	std	Y+29, r24	; 0x1d
     792:	9e 8f       	std	Y+30, r25	; 0x1e
		_delay_ms(1000);
		
		
		
		//putchar('U');
	}
     794:	50 cf       	rjmp	.-352    	; 0x636 <main+0x136>

00000796 <LEDInit>:
#include "LED.h"
#include <avr/io.h>

void LEDInit(void)
{
     796:	cf 93       	push	r28
     798:	df 93       	push	r29
     79a:	cd b7       	in	r28, 0x3d	; 61
     79c:	de b7       	in	r29, 0x3e	; 62
	PORTE.DIRSET=0b00001111;
     79e:	80 e8       	ldi	r24, 0x80	; 128
     7a0:	96 e0       	ldi	r25, 0x06	; 6
     7a2:	2f e0       	ldi	r18, 0x0F	; 15
     7a4:	fc 01       	movw	r30, r24
     7a6:	21 83       	std	Z+1, r18	; 0x01
	PORTE.PIN0CTRL=0b01000000;
     7a8:	80 e8       	ldi	r24, 0x80	; 128
     7aa:	96 e0       	ldi	r25, 0x06	; 6
     7ac:	20 e4       	ldi	r18, 0x40	; 64
     7ae:	fc 01       	movw	r30, r24
     7b0:	20 8b       	std	Z+16, r18	; 0x10
	PORTE.PIN1CTRL=0b01000000;
     7b2:	80 e8       	ldi	r24, 0x80	; 128
     7b4:	96 e0       	ldi	r25, 0x06	; 6
     7b6:	20 e4       	ldi	r18, 0x40	; 64
     7b8:	fc 01       	movw	r30, r24
     7ba:	21 8b       	std	Z+17, r18	; 0x11
	PORTE.PIN2CTRL=0b01000000;
     7bc:	80 e8       	ldi	r24, 0x80	; 128
     7be:	96 e0       	ldi	r25, 0x06	; 6
     7c0:	20 e4       	ldi	r18, 0x40	; 64
     7c2:	fc 01       	movw	r30, r24
     7c4:	22 8b       	std	Z+18, r18	; 0x12
	PORTE.PIN3CTRL=0b01000000;
     7c6:	80 e8       	ldi	r24, 0x80	; 128
     7c8:	96 e0       	ldi	r25, 0x06	; 6
     7ca:	20 e4       	ldi	r18, 0x40	; 64
     7cc:	fc 01       	movw	r30, r24
     7ce:	23 8b       	std	Z+19, r18	; 0x13
	
}
     7d0:	00 00       	nop
     7d2:	df 91       	pop	r29
     7d4:	cf 91       	pop	r28
     7d6:	08 95       	ret

000007d8 <SpeakerInit>:
#include <avr/interrupt.h>
#include <util/delay.h>
#include "speaker.h"

void SpeakerInit(void)
{
     7d8:	cf 93       	push	r28
     7da:	df 93       	push	r29
     7dc:	cd b7       	in	r28, 0x3d	; 61
     7de:	de b7       	in	r29, 0x3e	; 62
		//Setup IO
		PORTC.DIRCLR= 0b00000001;
     7e0:	80 e4       	ldi	r24, 0x40	; 64
     7e2:	96 e0       	ldi	r25, 0x06	; 6
     7e4:	21 e0       	ldi	r18, 0x01	; 1
     7e6:	fc 01       	movw	r30, r24
     7e8:	22 83       	std	Z+2, r18	; 0x02
		PORTC.PIN0CTRL = 0b00010000;
     7ea:	80 e4       	ldi	r24, 0x40	; 64
     7ec:	96 e0       	ldi	r25, 0x06	; 6
     7ee:	20 e1       	ldi	r18, 0x10	; 16
     7f0:	fc 01       	movw	r30, r24
     7f2:	20 8b       	std	Z+16, r18	; 0x10
		
		//Setup TC for frequency generation
		TCC0.CTRLA= 0b00000110;
     7f4:	80 e0       	ldi	r24, 0x00	; 0
     7f6:	98 e0       	ldi	r25, 0x08	; 8
     7f8:	26 e0       	ldi	r18, 0x06	; 6
     7fa:	fc 01       	movw	r30, r24
     7fc:	20 83       	st	Z, r18
		TCC0.CTRLB= 0b00010011;
     7fe:	80 e0       	ldi	r24, 0x00	; 0
     800:	98 e0       	ldi	r25, 0x08	; 8
     802:	23 e1       	ldi	r18, 0x13	; 19
     804:	fc 01       	movw	r30, r24
     806:	21 83       	std	Z+1, r18	; 0x01
		//TCC0.CTRLC= 
		TCC0.CTRLD= 0;
     808:	80 e0       	ldi	r24, 0x00	; 0
     80a:	98 e0       	ldi	r25, 0x08	; 8
     80c:	fc 01       	movw	r30, r24
     80e:	13 82       	std	Z+3, r1	; 0x03
		TCC0.CTRLE= 0;
     810:	80 e0       	ldi	r24, 0x00	; 0
     812:	98 e0       	ldi	r25, 0x08	; 8
     814:	fc 01       	movw	r30, r24
     816:	14 82       	std	Z+4, r1	; 0x04
		//TCC1.CTRLB=
		//TCC1.CTRLC=
		//TCC1.CTRLD=
		//TCC1.CTRLE=
		
}
     818:	00 00       	nop
     81a:	df 91       	pop	r29
     81c:	cf 91       	pop	r28
     81e:	08 95       	ret

00000820 <SpeakerBeep>:
void SpeakerBeep(int Frequency,int Length)
{
     820:	0f 93       	push	r16
     822:	1f 93       	push	r17
     824:	cf 93       	push	r28
     826:	df 93       	push	r29
     828:	cd b7       	in	r28, 0x3d	; 61
     82a:	de b7       	in	r29, 0x3e	; 62
     82c:	62 97       	sbiw	r28, 0x12	; 18
     82e:	cd bf       	out	0x3d, r28	; 61
     830:	de bf       	out	0x3e, r29	; 62
     832:	8f 87       	std	Y+15, r24	; 0x0f
     834:	98 8b       	std	Y+16, r25	; 0x10
     836:	69 8b       	std	Y+17, r22	; 0x11
     838:	7a 8b       	std	Y+18, r23	; 0x12
	TCC0.PER = 125000/Frequency;
     83a:	00 e0       	ldi	r16, 0x00	; 0
     83c:	18 e0       	ldi	r17, 0x08	; 8
     83e:	8f 85       	ldd	r24, Y+15	; 0x0f
     840:	98 89       	ldd	r25, Y+16	; 0x10
     842:	9c 01       	movw	r18, r24
     844:	99 0f       	add	r25, r25
     846:	44 0b       	sbc	r20, r20
     848:	55 0b       	sbc	r21, r21
     84a:	88 e4       	ldi	r24, 0x48	; 72
     84c:	98 ee       	ldi	r25, 0xE8	; 232
     84e:	a1 e0       	ldi	r26, 0x01	; 1
     850:	b0 e0       	ldi	r27, 0x00	; 0
     852:	bc 01       	movw	r22, r24
     854:	cd 01       	movw	r24, r26
     856:	0e 94 be 06 	call	0xd7c	; 0xd7c <__divmodsi4>
     85a:	da 01       	movw	r26, r20
     85c:	c9 01       	movw	r24, r18
     85e:	f8 01       	movw	r30, r16
     860:	86 a3       	std	Z+38, r24	; 0x26
     862:	97 a3       	std	Z+39, r25	; 0x27
	TCC0.CCA = TCC0.PER / 2;
     864:	80 e0       	ldi	r24, 0x00	; 0
     866:	98 e0       	ldi	r25, 0x08	; 8
     868:	20 e0       	ldi	r18, 0x00	; 0
     86a:	38 e0       	ldi	r19, 0x08	; 8
     86c:	f9 01       	movw	r30, r18
     86e:	26 a1       	ldd	r18, Z+38	; 0x26
     870:	37 a1       	ldd	r19, Z+39	; 0x27
     872:	36 95       	lsr	r19
     874:	27 95       	ror	r18
     876:	fc 01       	movw	r30, r24
     878:	20 a7       	std	Z+40, r18	; 0x28
     87a:	31 a7       	std	Z+41, r19	; 0x29
	PORTC.DIRSET = 0b00000001;
     87c:	80 e4       	ldi	r24, 0x40	; 64
     87e:	96 e0       	ldi	r25, 0x06	; 6
     880:	21 e0       	ldi	r18, 0x01	; 1
     882:	fc 01       	movw	r30, r24
     884:	21 83       	std	Z+1, r18	; 0x01
	_delay_ms(Length);
     886:	89 89       	ldd	r24, Y+17	; 0x11
     888:	9a 89       	ldd	r25, Y+18	; 0x12
     88a:	09 2e       	mov	r0, r25
     88c:	00 0c       	add	r0, r0
     88e:	aa 0b       	sbc	r26, r26
     890:	bb 0b       	sbc	r27, r27
     892:	bc 01       	movw	r22, r24
     894:	cd 01       	movw	r24, r26
     896:	0e 94 9c 05 	call	0xb38	; 0xb38 <__floatsisf>
     89a:	dc 01       	movw	r26, r24
     89c:	cb 01       	movw	r24, r22
     89e:	89 83       	std	Y+1, r24	; 0x01
     8a0:	9a 83       	std	Y+2, r25	; 0x02
     8a2:	ab 83       	std	Y+3, r26	; 0x03
     8a4:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     8a6:	20 e0       	ldi	r18, 0x00	; 0
     8a8:	30 e0       	ldi	r19, 0x00	; 0
     8aa:	4a e7       	ldi	r20, 0x7A	; 122
     8ac:	53 e4       	ldi	r21, 0x43	; 67
     8ae:	69 81       	ldd	r22, Y+1	; 0x01
     8b0:	7a 81       	ldd	r23, Y+2	; 0x02
     8b2:	8b 81       	ldd	r24, Y+3	; 0x03
     8b4:	9c 81       	ldd	r25, Y+4	; 0x04
     8b6:	0e 94 29 06 	call	0xc52	; 0xc52 <__mulsf3>
     8ba:	dc 01       	movw	r26, r24
     8bc:	cb 01       	movw	r24, r22
     8be:	8d 83       	std	Y+5, r24	; 0x05
     8c0:	9e 83       	std	Y+6, r25	; 0x06
     8c2:	af 83       	std	Y+7, r26	; 0x07
     8c4:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     8c6:	20 e0       	ldi	r18, 0x00	; 0
     8c8:	30 e0       	ldi	r19, 0x00	; 0
     8ca:	40 e8       	ldi	r20, 0x80	; 128
     8cc:	5f e3       	ldi	r21, 0x3F	; 63
     8ce:	6d 81       	ldd	r22, Y+5	; 0x05
     8d0:	7e 81       	ldd	r23, Y+6	; 0x06
     8d2:	8f 81       	ldd	r24, Y+7	; 0x07
     8d4:	98 85       	ldd	r25, Y+8	; 0x08
     8d6:	0e 94 66 05 	call	0xacc	; 0xacc <__cmpsf2>
     8da:	88 23       	and	r24, r24
     8dc:	2c f4       	brge	.+10     	; 0x8e8 <SpeakerBeep+0xc8>
		__ticks = 1;
     8de:	81 e0       	ldi	r24, 0x01	; 1
     8e0:	90 e0       	ldi	r25, 0x00	; 0
     8e2:	89 87       	std	Y+9, r24	; 0x09
     8e4:	9a 87       	std	Y+10, r25	; 0x0a
     8e6:	3f c0       	rjmp	.+126    	; 0x966 <SpeakerBeep+0x146>
	else if (__tmp > 65535)
     8e8:	20 e0       	ldi	r18, 0x00	; 0
     8ea:	3f ef       	ldi	r19, 0xFF	; 255
     8ec:	4f e7       	ldi	r20, 0x7F	; 127
     8ee:	57 e4       	ldi	r21, 0x47	; 71
     8f0:	6d 81       	ldd	r22, Y+5	; 0x05
     8f2:	7e 81       	ldd	r23, Y+6	; 0x06
     8f4:	8f 81       	ldd	r24, Y+7	; 0x07
     8f6:	98 85       	ldd	r25, Y+8	; 0x08
     8f8:	0e 94 24 06 	call	0xc48	; 0xc48 <__gesf2>
     8fc:	18 16       	cp	r1, r24
     8fe:	4c f5       	brge	.+82     	; 0x952 <SpeakerBeep+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     900:	20 e0       	ldi	r18, 0x00	; 0
     902:	30 e0       	ldi	r19, 0x00	; 0
     904:	40 e2       	ldi	r20, 0x20	; 32
     906:	51 e4       	ldi	r21, 0x41	; 65
     908:	69 81       	ldd	r22, Y+1	; 0x01
     90a:	7a 81       	ldd	r23, Y+2	; 0x02
     90c:	8b 81       	ldd	r24, Y+3	; 0x03
     90e:	9c 81       	ldd	r25, Y+4	; 0x04
     910:	0e 94 29 06 	call	0xc52	; 0xc52 <__mulsf3>
     914:	dc 01       	movw	r26, r24
     916:	cb 01       	movw	r24, r22
     918:	bc 01       	movw	r22, r24
     91a:	cd 01       	movw	r24, r26
     91c:	0e 94 6b 05 	call	0xad6	; 0xad6 <__fixunssfsi>
     920:	dc 01       	movw	r26, r24
     922:	cb 01       	movw	r24, r22
     924:	89 87       	std	Y+9, r24	; 0x09
     926:	9a 87       	std	Y+10, r25	; 0x0a
     928:	0f c0       	rjmp	.+30     	; 0x948 <SpeakerBeep+0x128>
     92a:	89 e1       	ldi	r24, 0x19	; 25
     92c:	90 e0       	ldi	r25, 0x00	; 0
     92e:	8b 87       	std	Y+11, r24	; 0x0b
     930:	9c 87       	std	Y+12, r25	; 0x0c
     932:	8b 85       	ldd	r24, Y+11	; 0x0b
     934:	9c 85       	ldd	r25, Y+12	; 0x0c
     936:	01 97       	sbiw	r24, 0x01	; 1
     938:	f1 f7       	brne	.-4      	; 0x936 <SpeakerBeep+0x116>
     93a:	8b 87       	std	Y+11, r24	; 0x0b
     93c:	9c 87       	std	Y+12, r25	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     93e:	89 85       	ldd	r24, Y+9	; 0x09
     940:	9a 85       	ldd	r25, Y+10	; 0x0a
     942:	01 97       	sbiw	r24, 0x01	; 1
     944:	89 87       	std	Y+9, r24	; 0x09
     946:	9a 87       	std	Y+10, r25	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     948:	89 85       	ldd	r24, Y+9	; 0x09
     94a:	9a 85       	ldd	r25, Y+10	; 0x0a
     94c:	89 2b       	or	r24, r25
     94e:	69 f7       	brne	.-38     	; 0x92a <SpeakerBeep+0x10a>
     950:	14 c0       	rjmp	.+40     	; 0x97a <SpeakerBeep+0x15a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     952:	6d 81       	ldd	r22, Y+5	; 0x05
     954:	7e 81       	ldd	r23, Y+6	; 0x06
     956:	8f 81       	ldd	r24, Y+7	; 0x07
     958:	98 85       	ldd	r25, Y+8	; 0x08
     95a:	0e 94 6b 05 	call	0xad6	; 0xad6 <__fixunssfsi>
     95e:	dc 01       	movw	r26, r24
     960:	cb 01       	movw	r24, r22
     962:	89 87       	std	Y+9, r24	; 0x09
     964:	9a 87       	std	Y+10, r25	; 0x0a
     966:	89 85       	ldd	r24, Y+9	; 0x09
     968:	9a 85       	ldd	r25, Y+10	; 0x0a
     96a:	8d 87       	std	Y+13, r24	; 0x0d
     96c:	9e 87       	std	Y+14, r25	; 0x0e
     96e:	8d 85       	ldd	r24, Y+13	; 0x0d
     970:	9e 85       	ldd	r25, Y+14	; 0x0e
     972:	01 97       	sbiw	r24, 0x01	; 1
     974:	f1 f7       	brne	.-4      	; 0x972 <SpeakerBeep+0x152>
     976:	8d 87       	std	Y+13, r24	; 0x0d
     978:	9e 87       	std	Y+14, r25	; 0x0e
	PORTC.DIRCLR = 0b00000001;
     97a:	80 e4       	ldi	r24, 0x40	; 64
     97c:	96 e0       	ldi	r25, 0x06	; 6
     97e:	21 e0       	ldi	r18, 0x01	; 1
     980:	fc 01       	movw	r30, r24
     982:	22 83       	std	Z+2, r18	; 0x02
}
     984:	00 00       	nop
     986:	62 96       	adiw	r28, 0x12	; 18
     988:	cd bf       	out	0x3d, r28	; 61
     98a:	de bf       	out	0x3e, r29	; 62
     98c:	df 91       	pop	r29
     98e:	cf 91       	pop	r28
     990:	1f 91       	pop	r17
     992:	0f 91       	pop	r16
     994:	08 95       	ret

00000996 <SwitchInit>:
#include "switch.h"
#include <avr/io.h>

void SwitchInit(void)
{
     996:	cf 93       	push	r28
     998:	df 93       	push	r29
     99a:	cd b7       	in	r28, 0x3d	; 61
     99c:	de b7       	in	r29, 0x3e	; 62
	PORTD.DIRCLR=0b11110001;
     99e:	80 e6       	ldi	r24, 0x60	; 96
     9a0:	96 e0       	ldi	r25, 0x06	; 6
     9a2:	21 ef       	ldi	r18, 0xF1	; 241
     9a4:	fc 01       	movw	r30, r24
     9a6:	22 83       	std	Z+2, r18	; 0x02
	PORTD.PIN0CTRL=0b01011000;
     9a8:	80 e6       	ldi	r24, 0x60	; 96
     9aa:	96 e0       	ldi	r25, 0x06	; 6
     9ac:	28 e5       	ldi	r18, 0x58	; 88
     9ae:	fc 01       	movw	r30, r24
     9b0:	20 8b       	std	Z+16, r18	; 0x10
	PORTD.PIN4CTRL=0b01011000;
     9b2:	80 e6       	ldi	r24, 0x60	; 96
     9b4:	96 e0       	ldi	r25, 0x06	; 6
     9b6:	28 e5       	ldi	r18, 0x58	; 88
     9b8:	fc 01       	movw	r30, r24
     9ba:	24 8b       	std	Z+20, r18	; 0x14
	PORTD.PIN5CTRL=0b01011000;
     9bc:	80 e6       	ldi	r24, 0x60	; 96
     9be:	96 e0       	ldi	r25, 0x06	; 6
     9c0:	28 e5       	ldi	r18, 0x58	; 88
     9c2:	fc 01       	movw	r30, r24
     9c4:	25 8b       	std	Z+21, r18	; 0x15
	PORTD.PIN6CTRL=0b01011000;
     9c6:	80 e6       	ldi	r24, 0x60	; 96
     9c8:	96 e0       	ldi	r25, 0x06	; 6
     9ca:	28 e5       	ldi	r18, 0x58	; 88
     9cc:	fc 01       	movw	r30, r24
     9ce:	26 8b       	std	Z+22, r18	; 0x16
	PORTD.PIN7CTRL=0b01011000;
     9d0:	80 e6       	ldi	r24, 0x60	; 96
     9d2:	96 e0       	ldi	r25, 0x06	; 6
     9d4:	28 e5       	ldi	r18, 0x58	; 88
     9d6:	fc 01       	movw	r30, r24
     9d8:	27 8b       	std	Z+23, r18	; 0x17
}
     9da:	00 00       	nop
     9dc:	df 91       	pop	r29
     9de:	cf 91       	pop	r28
     9e0:	08 95       	ret

000009e2 <USARTInit>:
 int stdio_putchar(char c, FILE * stream);
 int stdio_getchar(FILE *stream);
static FILE UsartStdio = FDEV_SETUP_STREAM(stdio_putchar, stdio_getchar,_FDEV_SETUP_WRITE);

void USARTInit(void)
{
     9e2:	cf 93       	push	r28
     9e4:	df 93       	push	r29
     9e6:	cd b7       	in	r28, 0x3d	; 61
     9e8:	de b7       	in	r29, 0x3e	; 62
	USART_PORT.DIRSET=0b00001000;	
     9ea:	80 e6       	ldi	r24, 0x60	; 96
     9ec:	96 e0       	ldi	r25, 0x06	; 6
     9ee:	28 e0       	ldi	r18, 0x08	; 8
     9f0:	fc 01       	movw	r30, r24
     9f2:	21 83       	std	Z+1, r18	; 0x01
	USART_PORT.DIRCLR=0b00000100;
     9f4:	80 e6       	ldi	r24, 0x60	; 96
     9f6:	96 e0       	ldi	r25, 0x06	; 6
     9f8:	24 e0       	ldi	r18, 0x04	; 4
     9fa:	fc 01       	movw	r30, r24
     9fc:	22 83       	std	Z+2, r18	; 0x02
	
	USART.CTRLA=0b00000000;
     9fe:	80 ea       	ldi	r24, 0xA0	; 160
     a00:	99 e0       	ldi	r25, 0x09	; 9
     a02:	fc 01       	movw	r30, r24
     a04:	13 82       	std	Z+3, r1	; 0x03
	USART.CTRLB=0b00011000;
     a06:	80 ea       	ldi	r24, 0xA0	; 160
     a08:	99 e0       	ldi	r25, 0x09	; 9
     a0a:	28 e1       	ldi	r18, 0x18	; 24
     a0c:	fc 01       	movw	r30, r24
     a0e:	24 83       	std	Z+4, r18	; 0x04
	USART.CTRLC=0b00000011;
     a10:	80 ea       	ldi	r24, 0xA0	; 160
     a12:	99 e0       	ldi	r25, 0x09	; 9
     a14:	23 e0       	ldi	r18, 0x03	; 3
     a16:	fc 01       	movw	r30, r24
     a18:	25 83       	std	Z+5, r18	; 0x05
	
	USART.BAUDCTRLA=0xD7; //BSEL=3301, BSCALE=-5 9600 baud
     a1a:	80 ea       	ldi	r24, 0xA0	; 160
     a1c:	99 e0       	ldi	r25, 0x09	; 9
     a1e:	27 ed       	ldi	r18, 0xD7	; 215
     a20:	fc 01       	movw	r30, r24
     a22:	26 83       	std	Z+6, r18	; 0x06
	USART.BAUDCTRLB=0x93; 
     a24:	80 ea       	ldi	r24, 0xA0	; 160
     a26:	99 e0       	ldi	r25, 0x09	; 9
     a28:	23 e9       	ldi	r18, 0x93	; 147
     a2a:	fc 01       	movw	r30, r24
     a2c:	27 83       	std	Z+7, r18	; 0x07
	
	stdout=&UsartStdio;
     a2e:	80 e0       	ldi	r24, 0x00	; 0
     a30:	90 e2       	ldi	r25, 0x20	; 32
     a32:	80 93 32 20 	sts	0x2032, r24	; 0x802032 <__iob+0x2>
     a36:	90 93 33 20 	sts	0x2033, r25	; 0x802033 <__iob+0x3>
	stdin=&UsartStdio;
     a3a:	80 e0       	ldi	r24, 0x00	; 0
     a3c:	90 e2       	ldi	r25, 0x20	; 32
     a3e:	80 93 30 20 	sts	0x2030, r24	; 0x802030 <__iob>
     a42:	90 93 31 20 	sts	0x2031, r25	; 0x802031 <__iob+0x1>
}
     a46:	00 00       	nop
     a48:	df 91       	pop	r29
     a4a:	cf 91       	pop	r28
     a4c:	08 95       	ret

00000a4e <stdio_putchar>:


int stdio_putchar(char c, FILE * stream)
{
     a4e:	cf 93       	push	r28
     a50:	df 93       	push	r29
     a52:	00 d0       	rcall	.+0      	; 0xa54 <stdio_putchar+0x6>
     a54:	1f 92       	push	r1
     a56:	cd b7       	in	r28, 0x3d	; 61
     a58:	de b7       	in	r29, 0x3e	; 62
     a5a:	89 83       	std	Y+1, r24	; 0x01
     a5c:	6a 83       	std	Y+2, r22	; 0x02
     a5e:	7b 83       	std	Y+3, r23	; 0x03
	USART.DATA = c;
     a60:	80 ea       	ldi	r24, 0xA0	; 160
     a62:	99 e0       	ldi	r25, 0x09	; 9
     a64:	29 81       	ldd	r18, Y+1	; 0x01
     a66:	fc 01       	movw	r30, r24
     a68:	20 83       	st	Z, r18
	while (!(USART.STATUS & 0b01000000));
     a6a:	00 00       	nop
     a6c:	80 ea       	ldi	r24, 0xA0	; 160
     a6e:	99 e0       	ldi	r25, 0x09	; 9
     a70:	fc 01       	movw	r30, r24
     a72:	81 81       	ldd	r24, Z+1	; 0x01
     a74:	88 2f       	mov	r24, r24
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	80 74       	andi	r24, 0x40	; 64
     a7a:	99 27       	eor	r25, r25
     a7c:	89 2b       	or	r24, r25
     a7e:	b1 f3       	breq	.-20     	; 0xa6c <stdio_putchar+0x1e>
	USART.STATUS=0b01000000;
     a80:	80 ea       	ldi	r24, 0xA0	; 160
     a82:	99 e0       	ldi	r25, 0x09	; 9
     a84:	20 e4       	ldi	r18, 0x40	; 64
     a86:	fc 01       	movw	r30, r24
     a88:	21 83       	std	Z+1, r18	; 0x01
	return 0;
     a8a:	80 e0       	ldi	r24, 0x00	; 0
     a8c:	90 e0       	ldi	r25, 0x00	; 0
}
     a8e:	23 96       	adiw	r28, 0x03	; 3
     a90:	cd bf       	out	0x3d, r28	; 61
     a92:	de bf       	out	0x3e, r29	; 62
     a94:	df 91       	pop	r29
     a96:	cf 91       	pop	r28
     a98:	08 95       	ret

00000a9a <stdio_getchar>:
	
int stdio_getchar(FILE *stream)
{
     a9a:	cf 93       	push	r28
     a9c:	df 93       	push	r29
     a9e:	00 d0       	rcall	.+0      	; 0xaa0 <stdio_getchar+0x6>
     aa0:	cd b7       	in	r28, 0x3d	; 61
     aa2:	de b7       	in	r29, 0x3e	; 62
     aa4:	89 83       	std	Y+1, r24	; 0x01
     aa6:	9a 83       	std	Y+2, r25	; 0x02
	while (!(USART.STATUS & 0b10000000));
     aa8:	00 00       	nop
     aaa:	80 ea       	ldi	r24, 0xA0	; 160
     aac:	99 e0       	ldi	r25, 0x09	; 9
     aae:	fc 01       	movw	r30, r24
     ab0:	81 81       	ldd	r24, Z+1	; 0x01
     ab2:	88 23       	and	r24, r24
     ab4:	d4 f7       	brge	.-12     	; 0xaaa <stdio_getchar+0x10>
	return USART.DATA;
     ab6:	80 ea       	ldi	r24, 0xA0	; 160
     ab8:	99 e0       	ldi	r25, 0x09	; 9
     aba:	fc 01       	movw	r30, r24
     abc:	80 81       	ld	r24, Z
     abe:	88 2f       	mov	r24, r24
     ac0:	90 e0       	ldi	r25, 0x00	; 0
}
     ac2:	0f 90       	pop	r0
     ac4:	0f 90       	pop	r0
     ac6:	df 91       	pop	r29
     ac8:	cf 91       	pop	r28
     aca:	08 95       	ret

00000acc <__cmpsf2>:
     acc:	0e 94 d7 05 	call	0xbae	; 0xbae <__fp_cmp>
     ad0:	08 f4       	brcc	.+2      	; 0xad4 <__cmpsf2+0x8>
     ad2:	81 e0       	ldi	r24, 0x01	; 1
     ad4:	08 95       	ret

00000ad6 <__fixunssfsi>:
     ad6:	0e 94 03 06 	call	0xc06	; 0xc06 <__fp_splitA>
     ada:	88 f0       	brcs	.+34     	; 0xafe <__fixunssfsi+0x28>
     adc:	9f 57       	subi	r25, 0x7F	; 127
     ade:	98 f0       	brcs	.+38     	; 0xb06 <__fixunssfsi+0x30>
     ae0:	b9 2f       	mov	r27, r25
     ae2:	99 27       	eor	r25, r25
     ae4:	b7 51       	subi	r27, 0x17	; 23
     ae6:	b0 f0       	brcs	.+44     	; 0xb14 <__fixunssfsi+0x3e>
     ae8:	e1 f0       	breq	.+56     	; 0xb22 <__fixunssfsi+0x4c>
     aea:	66 0f       	add	r22, r22
     aec:	77 1f       	adc	r23, r23
     aee:	88 1f       	adc	r24, r24
     af0:	99 1f       	adc	r25, r25
     af2:	1a f0       	brmi	.+6      	; 0xafa <__fixunssfsi+0x24>
     af4:	ba 95       	dec	r27
     af6:	c9 f7       	brne	.-14     	; 0xaea <__fixunssfsi+0x14>
     af8:	14 c0       	rjmp	.+40     	; 0xb22 <__fixunssfsi+0x4c>
     afa:	b1 30       	cpi	r27, 0x01	; 1
     afc:	91 f0       	breq	.+36     	; 0xb22 <__fixunssfsi+0x4c>
     afe:	0e 94 1d 06 	call	0xc3a	; 0xc3a <__fp_zero>
     b02:	b1 e0       	ldi	r27, 0x01	; 1
     b04:	08 95       	ret
     b06:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__fp_zero>
     b0a:	67 2f       	mov	r22, r23
     b0c:	78 2f       	mov	r23, r24
     b0e:	88 27       	eor	r24, r24
     b10:	b8 5f       	subi	r27, 0xF8	; 248
     b12:	39 f0       	breq	.+14     	; 0xb22 <__fixunssfsi+0x4c>
     b14:	b9 3f       	cpi	r27, 0xF9	; 249
     b16:	cc f3       	brlt	.-14     	; 0xb0a <__fixunssfsi+0x34>
     b18:	86 95       	lsr	r24
     b1a:	77 95       	ror	r23
     b1c:	67 95       	ror	r22
     b1e:	b3 95       	inc	r27
     b20:	d9 f7       	brne	.-10     	; 0xb18 <__fixunssfsi+0x42>
     b22:	3e f4       	brtc	.+14     	; 0xb32 <__fixunssfsi+0x5c>
     b24:	90 95       	com	r25
     b26:	80 95       	com	r24
     b28:	70 95       	com	r23
     b2a:	61 95       	neg	r22
     b2c:	7f 4f       	sbci	r23, 0xFF	; 255
     b2e:	8f 4f       	sbci	r24, 0xFF	; 255
     b30:	9f 4f       	sbci	r25, 0xFF	; 255
     b32:	08 95       	ret

00000b34 <__floatunsisf>:
     b34:	e8 94       	clt
     b36:	09 c0       	rjmp	.+18     	; 0xb4a <__floatsisf+0x12>

00000b38 <__floatsisf>:
     b38:	97 fb       	bst	r25, 7
     b3a:	3e f4       	brtc	.+14     	; 0xb4a <__floatsisf+0x12>
     b3c:	90 95       	com	r25
     b3e:	80 95       	com	r24
     b40:	70 95       	com	r23
     b42:	61 95       	neg	r22
     b44:	7f 4f       	sbci	r23, 0xFF	; 255
     b46:	8f 4f       	sbci	r24, 0xFF	; 255
     b48:	9f 4f       	sbci	r25, 0xFF	; 255
     b4a:	99 23       	and	r25, r25
     b4c:	a9 f0       	breq	.+42     	; 0xb78 <__floatsisf+0x40>
     b4e:	f9 2f       	mov	r31, r25
     b50:	96 e9       	ldi	r25, 0x96	; 150
     b52:	bb 27       	eor	r27, r27
     b54:	93 95       	inc	r25
     b56:	f6 95       	lsr	r31
     b58:	87 95       	ror	r24
     b5a:	77 95       	ror	r23
     b5c:	67 95       	ror	r22
     b5e:	b7 95       	ror	r27
     b60:	f1 11       	cpse	r31, r1
     b62:	f8 cf       	rjmp	.-16     	; 0xb54 <__floatsisf+0x1c>
     b64:	fa f4       	brpl	.+62     	; 0xba4 <__floatsisf+0x6c>
     b66:	bb 0f       	add	r27, r27
     b68:	11 f4       	brne	.+4      	; 0xb6e <__floatsisf+0x36>
     b6a:	60 ff       	sbrs	r22, 0
     b6c:	1b c0       	rjmp	.+54     	; 0xba4 <__floatsisf+0x6c>
     b6e:	6f 5f       	subi	r22, 0xFF	; 255
     b70:	7f 4f       	sbci	r23, 0xFF	; 255
     b72:	8f 4f       	sbci	r24, 0xFF	; 255
     b74:	9f 4f       	sbci	r25, 0xFF	; 255
     b76:	16 c0       	rjmp	.+44     	; 0xba4 <__floatsisf+0x6c>
     b78:	88 23       	and	r24, r24
     b7a:	11 f0       	breq	.+4      	; 0xb80 <__floatsisf+0x48>
     b7c:	96 e9       	ldi	r25, 0x96	; 150
     b7e:	11 c0       	rjmp	.+34     	; 0xba2 <__floatsisf+0x6a>
     b80:	77 23       	and	r23, r23
     b82:	21 f0       	breq	.+8      	; 0xb8c <__floatsisf+0x54>
     b84:	9e e8       	ldi	r25, 0x8E	; 142
     b86:	87 2f       	mov	r24, r23
     b88:	76 2f       	mov	r23, r22
     b8a:	05 c0       	rjmp	.+10     	; 0xb96 <__floatsisf+0x5e>
     b8c:	66 23       	and	r22, r22
     b8e:	71 f0       	breq	.+28     	; 0xbac <__floatsisf+0x74>
     b90:	96 e8       	ldi	r25, 0x86	; 134
     b92:	86 2f       	mov	r24, r22
     b94:	70 e0       	ldi	r23, 0x00	; 0
     b96:	60 e0       	ldi	r22, 0x00	; 0
     b98:	2a f0       	brmi	.+10     	; 0xba4 <__floatsisf+0x6c>
     b9a:	9a 95       	dec	r25
     b9c:	66 0f       	add	r22, r22
     b9e:	77 1f       	adc	r23, r23
     ba0:	88 1f       	adc	r24, r24
     ba2:	da f7       	brpl	.-10     	; 0xb9a <__floatsisf+0x62>
     ba4:	88 0f       	add	r24, r24
     ba6:	96 95       	lsr	r25
     ba8:	87 95       	ror	r24
     baa:	97 f9       	bld	r25, 7
     bac:	08 95       	ret

00000bae <__fp_cmp>:
     bae:	99 0f       	add	r25, r25
     bb0:	00 08       	sbc	r0, r0
     bb2:	55 0f       	add	r21, r21
     bb4:	aa 0b       	sbc	r26, r26
     bb6:	e0 e8       	ldi	r30, 0x80	; 128
     bb8:	fe ef       	ldi	r31, 0xFE	; 254
     bba:	16 16       	cp	r1, r22
     bbc:	17 06       	cpc	r1, r23
     bbe:	e8 07       	cpc	r30, r24
     bc0:	f9 07       	cpc	r31, r25
     bc2:	c0 f0       	brcs	.+48     	; 0xbf4 <__fp_cmp+0x46>
     bc4:	12 16       	cp	r1, r18
     bc6:	13 06       	cpc	r1, r19
     bc8:	e4 07       	cpc	r30, r20
     bca:	f5 07       	cpc	r31, r21
     bcc:	98 f0       	brcs	.+38     	; 0xbf4 <__fp_cmp+0x46>
     bce:	62 1b       	sub	r22, r18
     bd0:	73 0b       	sbc	r23, r19
     bd2:	84 0b       	sbc	r24, r20
     bd4:	95 0b       	sbc	r25, r21
     bd6:	39 f4       	brne	.+14     	; 0xbe6 <__fp_cmp+0x38>
     bd8:	0a 26       	eor	r0, r26
     bda:	61 f0       	breq	.+24     	; 0xbf4 <__fp_cmp+0x46>
     bdc:	23 2b       	or	r18, r19
     bde:	24 2b       	or	r18, r20
     be0:	25 2b       	or	r18, r21
     be2:	21 f4       	brne	.+8      	; 0xbec <__fp_cmp+0x3e>
     be4:	08 95       	ret
     be6:	0a 26       	eor	r0, r26
     be8:	09 f4       	brne	.+2      	; 0xbec <__fp_cmp+0x3e>
     bea:	a1 40       	sbci	r26, 0x01	; 1
     bec:	a6 95       	lsr	r26
     bee:	8f ef       	ldi	r24, 0xFF	; 255
     bf0:	81 1d       	adc	r24, r1
     bf2:	81 1d       	adc	r24, r1
     bf4:	08 95       	ret

00000bf6 <__fp_split3>:
     bf6:	57 fd       	sbrc	r21, 7
     bf8:	90 58       	subi	r25, 0x80	; 128
     bfa:	44 0f       	add	r20, r20
     bfc:	55 1f       	adc	r21, r21
     bfe:	59 f0       	breq	.+22     	; 0xc16 <__fp_splitA+0x10>
     c00:	5f 3f       	cpi	r21, 0xFF	; 255
     c02:	71 f0       	breq	.+28     	; 0xc20 <__fp_splitA+0x1a>
     c04:	47 95       	ror	r20

00000c06 <__fp_splitA>:
     c06:	88 0f       	add	r24, r24
     c08:	97 fb       	bst	r25, 7
     c0a:	99 1f       	adc	r25, r25
     c0c:	61 f0       	breq	.+24     	; 0xc26 <__fp_splitA+0x20>
     c0e:	9f 3f       	cpi	r25, 0xFF	; 255
     c10:	79 f0       	breq	.+30     	; 0xc30 <__fp_splitA+0x2a>
     c12:	87 95       	ror	r24
     c14:	08 95       	ret
     c16:	12 16       	cp	r1, r18
     c18:	13 06       	cpc	r1, r19
     c1a:	14 06       	cpc	r1, r20
     c1c:	55 1f       	adc	r21, r21
     c1e:	f2 cf       	rjmp	.-28     	; 0xc04 <__fp_split3+0xe>
     c20:	46 95       	lsr	r20
     c22:	f1 df       	rcall	.-30     	; 0xc06 <__fp_splitA>
     c24:	08 c0       	rjmp	.+16     	; 0xc36 <__fp_splitA+0x30>
     c26:	16 16       	cp	r1, r22
     c28:	17 06       	cpc	r1, r23
     c2a:	18 06       	cpc	r1, r24
     c2c:	99 1f       	adc	r25, r25
     c2e:	f1 cf       	rjmp	.-30     	; 0xc12 <__fp_splitA+0xc>
     c30:	86 95       	lsr	r24
     c32:	71 05       	cpc	r23, r1
     c34:	61 05       	cpc	r22, r1
     c36:	08 94       	sec
     c38:	08 95       	ret

00000c3a <__fp_zero>:
     c3a:	e8 94       	clt

00000c3c <__fp_szero>:
     c3c:	bb 27       	eor	r27, r27
     c3e:	66 27       	eor	r22, r22
     c40:	77 27       	eor	r23, r23
     c42:	cb 01       	movw	r24, r22
     c44:	97 f9       	bld	r25, 7
     c46:	08 95       	ret

00000c48 <__gesf2>:
     c48:	0e 94 d7 05 	call	0xbae	; 0xbae <__fp_cmp>
     c4c:	08 f4       	brcc	.+2      	; 0xc50 <__gesf2+0x8>
     c4e:	8f ef       	ldi	r24, 0xFF	; 255
     c50:	08 95       	ret

00000c52 <__mulsf3>:
     c52:	0e 94 3c 06 	call	0xc78	; 0xc78 <__mulsf3x>
     c56:	0c 94 ad 06 	jmp	0xd5a	; 0xd5a <__fp_round>
     c5a:	0e 94 9f 06 	call	0xd3e	; 0xd3e <__fp_pscA>
     c5e:	38 f0       	brcs	.+14     	; 0xc6e <__mulsf3+0x1c>
     c60:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__fp_pscB>
     c64:	20 f0       	brcs	.+8      	; 0xc6e <__mulsf3+0x1c>
     c66:	95 23       	and	r25, r21
     c68:	11 f0       	breq	.+4      	; 0xc6e <__mulsf3+0x1c>
     c6a:	0c 94 96 06 	jmp	0xd2c	; 0xd2c <__fp_inf>
     c6e:	0c 94 9c 06 	jmp	0xd38	; 0xd38 <__fp_nan>
     c72:	11 24       	eor	r1, r1
     c74:	0c 94 1e 06 	jmp	0xc3c	; 0xc3c <__fp_szero>

00000c78 <__mulsf3x>:
     c78:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <__fp_split3>
     c7c:	70 f3       	brcs	.-36     	; 0xc5a <__mulsf3+0x8>

00000c7e <__mulsf3_pse>:
     c7e:	95 9f       	mul	r25, r21
     c80:	c1 f3       	breq	.-16     	; 0xc72 <__mulsf3+0x20>
     c82:	95 0f       	add	r25, r21
     c84:	50 e0       	ldi	r21, 0x00	; 0
     c86:	55 1f       	adc	r21, r21
     c88:	62 9f       	mul	r22, r18
     c8a:	f0 01       	movw	r30, r0
     c8c:	72 9f       	mul	r23, r18
     c8e:	bb 27       	eor	r27, r27
     c90:	f0 0d       	add	r31, r0
     c92:	b1 1d       	adc	r27, r1
     c94:	63 9f       	mul	r22, r19
     c96:	aa 27       	eor	r26, r26
     c98:	f0 0d       	add	r31, r0
     c9a:	b1 1d       	adc	r27, r1
     c9c:	aa 1f       	adc	r26, r26
     c9e:	64 9f       	mul	r22, r20
     ca0:	66 27       	eor	r22, r22
     ca2:	b0 0d       	add	r27, r0
     ca4:	a1 1d       	adc	r26, r1
     ca6:	66 1f       	adc	r22, r22
     ca8:	82 9f       	mul	r24, r18
     caa:	22 27       	eor	r18, r18
     cac:	b0 0d       	add	r27, r0
     cae:	a1 1d       	adc	r26, r1
     cb0:	62 1f       	adc	r22, r18
     cb2:	73 9f       	mul	r23, r19
     cb4:	b0 0d       	add	r27, r0
     cb6:	a1 1d       	adc	r26, r1
     cb8:	62 1f       	adc	r22, r18
     cba:	83 9f       	mul	r24, r19
     cbc:	a0 0d       	add	r26, r0
     cbe:	61 1d       	adc	r22, r1
     cc0:	22 1f       	adc	r18, r18
     cc2:	74 9f       	mul	r23, r20
     cc4:	33 27       	eor	r19, r19
     cc6:	a0 0d       	add	r26, r0
     cc8:	61 1d       	adc	r22, r1
     cca:	23 1f       	adc	r18, r19
     ccc:	84 9f       	mul	r24, r20
     cce:	60 0d       	add	r22, r0
     cd0:	21 1d       	adc	r18, r1
     cd2:	82 2f       	mov	r24, r18
     cd4:	76 2f       	mov	r23, r22
     cd6:	6a 2f       	mov	r22, r26
     cd8:	11 24       	eor	r1, r1
     cda:	9f 57       	subi	r25, 0x7F	; 127
     cdc:	50 40       	sbci	r21, 0x00	; 0
     cde:	9a f0       	brmi	.+38     	; 0xd06 <__mulsf3_pse+0x88>
     ce0:	f1 f0       	breq	.+60     	; 0xd1e <__mulsf3_pse+0xa0>
     ce2:	88 23       	and	r24, r24
     ce4:	4a f0       	brmi	.+18     	; 0xcf8 <__mulsf3_pse+0x7a>
     ce6:	ee 0f       	add	r30, r30
     ce8:	ff 1f       	adc	r31, r31
     cea:	bb 1f       	adc	r27, r27
     cec:	66 1f       	adc	r22, r22
     cee:	77 1f       	adc	r23, r23
     cf0:	88 1f       	adc	r24, r24
     cf2:	91 50       	subi	r25, 0x01	; 1
     cf4:	50 40       	sbci	r21, 0x00	; 0
     cf6:	a9 f7       	brne	.-22     	; 0xce2 <__mulsf3_pse+0x64>
     cf8:	9e 3f       	cpi	r25, 0xFE	; 254
     cfa:	51 05       	cpc	r21, r1
     cfc:	80 f0       	brcs	.+32     	; 0xd1e <__mulsf3_pse+0xa0>
     cfe:	0c 94 96 06 	jmp	0xd2c	; 0xd2c <__fp_inf>
     d02:	0c 94 1e 06 	jmp	0xc3c	; 0xc3c <__fp_szero>
     d06:	5f 3f       	cpi	r21, 0xFF	; 255
     d08:	e4 f3       	brlt	.-8      	; 0xd02 <__mulsf3_pse+0x84>
     d0a:	98 3e       	cpi	r25, 0xE8	; 232
     d0c:	d4 f3       	brlt	.-12     	; 0xd02 <__mulsf3_pse+0x84>
     d0e:	86 95       	lsr	r24
     d10:	77 95       	ror	r23
     d12:	67 95       	ror	r22
     d14:	b7 95       	ror	r27
     d16:	f7 95       	ror	r31
     d18:	e7 95       	ror	r30
     d1a:	9f 5f       	subi	r25, 0xFF	; 255
     d1c:	c1 f7       	brne	.-16     	; 0xd0e <__mulsf3_pse+0x90>
     d1e:	fe 2b       	or	r31, r30
     d20:	88 0f       	add	r24, r24
     d22:	91 1d       	adc	r25, r1
     d24:	96 95       	lsr	r25
     d26:	87 95       	ror	r24
     d28:	97 f9       	bld	r25, 7
     d2a:	08 95       	ret

00000d2c <__fp_inf>:
     d2c:	97 f9       	bld	r25, 7
     d2e:	9f 67       	ori	r25, 0x7F	; 127
     d30:	80 e8       	ldi	r24, 0x80	; 128
     d32:	70 e0       	ldi	r23, 0x00	; 0
     d34:	60 e0       	ldi	r22, 0x00	; 0
     d36:	08 95       	ret

00000d38 <__fp_nan>:
     d38:	9f ef       	ldi	r25, 0xFF	; 255
     d3a:	80 ec       	ldi	r24, 0xC0	; 192
     d3c:	08 95       	ret

00000d3e <__fp_pscA>:
     d3e:	00 24       	eor	r0, r0
     d40:	0a 94       	dec	r0
     d42:	16 16       	cp	r1, r22
     d44:	17 06       	cpc	r1, r23
     d46:	18 06       	cpc	r1, r24
     d48:	09 06       	cpc	r0, r25
     d4a:	08 95       	ret

00000d4c <__fp_pscB>:
     d4c:	00 24       	eor	r0, r0
     d4e:	0a 94       	dec	r0
     d50:	12 16       	cp	r1, r18
     d52:	13 06       	cpc	r1, r19
     d54:	14 06       	cpc	r1, r20
     d56:	05 06       	cpc	r0, r21
     d58:	08 95       	ret

00000d5a <__fp_round>:
     d5a:	09 2e       	mov	r0, r25
     d5c:	03 94       	inc	r0
     d5e:	00 0c       	add	r0, r0
     d60:	11 f4       	brne	.+4      	; 0xd66 <__fp_round+0xc>
     d62:	88 23       	and	r24, r24
     d64:	52 f0       	brmi	.+20     	; 0xd7a <__fp_round+0x20>
     d66:	bb 0f       	add	r27, r27
     d68:	40 f4       	brcc	.+16     	; 0xd7a <__fp_round+0x20>
     d6a:	bf 2b       	or	r27, r31
     d6c:	11 f4       	brne	.+4      	; 0xd72 <__fp_round+0x18>
     d6e:	60 ff       	sbrs	r22, 0
     d70:	04 c0       	rjmp	.+8      	; 0xd7a <__fp_round+0x20>
     d72:	6f 5f       	subi	r22, 0xFF	; 255
     d74:	7f 4f       	sbci	r23, 0xFF	; 255
     d76:	8f 4f       	sbci	r24, 0xFF	; 255
     d78:	9f 4f       	sbci	r25, 0xFF	; 255
     d7a:	08 95       	ret

00000d7c <__divmodsi4>:
     d7c:	05 2e       	mov	r0, r21
     d7e:	97 fb       	bst	r25, 7
     d80:	1e f4       	brtc	.+6      	; 0xd88 <__divmodsi4+0xc>
     d82:	00 94       	com	r0
     d84:	0e 94 d5 06 	call	0xdaa	; 0xdaa <__negsi2>
     d88:	57 fd       	sbrc	r21, 7
     d8a:	07 d0       	rcall	.+14     	; 0xd9a <__divmodsi4_neg2>
     d8c:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__udivmodsi4>
     d90:	07 fc       	sbrc	r0, 7
     d92:	03 d0       	rcall	.+6      	; 0xd9a <__divmodsi4_neg2>
     d94:	4e f4       	brtc	.+18     	; 0xda8 <__divmodsi4_exit>
     d96:	0c 94 d5 06 	jmp	0xdaa	; 0xdaa <__negsi2>

00000d9a <__divmodsi4_neg2>:
     d9a:	50 95       	com	r21
     d9c:	40 95       	com	r20
     d9e:	30 95       	com	r19
     da0:	21 95       	neg	r18
     da2:	3f 4f       	sbci	r19, 0xFF	; 255
     da4:	4f 4f       	sbci	r20, 0xFF	; 255
     da6:	5f 4f       	sbci	r21, 0xFF	; 255

00000da8 <__divmodsi4_exit>:
     da8:	08 95       	ret

00000daa <__negsi2>:
     daa:	90 95       	com	r25
     dac:	80 95       	com	r24
     dae:	70 95       	com	r23
     db0:	61 95       	neg	r22
     db2:	7f 4f       	sbci	r23, 0xFF	; 255
     db4:	8f 4f       	sbci	r24, 0xFF	; 255
     db6:	9f 4f       	sbci	r25, 0xFF	; 255
     db8:	08 95       	ret

00000dba <__tablejump2__>:
     dba:	ee 0f       	add	r30, r30
     dbc:	ff 1f       	adc	r31, r31
     dbe:	05 90       	lpm	r0, Z+
     dc0:	f4 91       	lpm	r31, Z
     dc2:	e0 2d       	mov	r30, r0
     dc4:	09 94       	ijmp

00000dc6 <__udivmodsi4>:
     dc6:	a1 e2       	ldi	r26, 0x21	; 33
     dc8:	1a 2e       	mov	r1, r26
     dca:	aa 1b       	sub	r26, r26
     dcc:	bb 1b       	sub	r27, r27
     dce:	fd 01       	movw	r30, r26
     dd0:	0d c0       	rjmp	.+26     	; 0xdec <__udivmodsi4_ep>

00000dd2 <__udivmodsi4_loop>:
     dd2:	aa 1f       	adc	r26, r26
     dd4:	bb 1f       	adc	r27, r27
     dd6:	ee 1f       	adc	r30, r30
     dd8:	ff 1f       	adc	r31, r31
     dda:	a2 17       	cp	r26, r18
     ddc:	b3 07       	cpc	r27, r19
     dde:	e4 07       	cpc	r30, r20
     de0:	f5 07       	cpc	r31, r21
     de2:	20 f0       	brcs	.+8      	; 0xdec <__udivmodsi4_ep>
     de4:	a2 1b       	sub	r26, r18
     de6:	b3 0b       	sbc	r27, r19
     de8:	e4 0b       	sbc	r30, r20
     dea:	f5 0b       	sbc	r31, r21

00000dec <__udivmodsi4_ep>:
     dec:	66 1f       	adc	r22, r22
     dee:	77 1f       	adc	r23, r23
     df0:	88 1f       	adc	r24, r24
     df2:	99 1f       	adc	r25, r25
     df4:	1a 94       	dec	r1
     df6:	69 f7       	brne	.-38     	; 0xdd2 <__udivmodsi4_loop>
     df8:	60 95       	com	r22
     dfa:	70 95       	com	r23
     dfc:	80 95       	com	r24
     dfe:	90 95       	com	r25
     e00:	9b 01       	movw	r18, r22
     e02:	ac 01       	movw	r20, r24
     e04:	bd 01       	movw	r22, r26
     e06:	cf 01       	movw	r24, r30
     e08:	08 95       	ret

00000e0a <puts>:
     e0a:	0f 93       	push	r16
     e0c:	1f 93       	push	r17
     e0e:	cf 93       	push	r28
     e10:	df 93       	push	r29
     e12:	e0 91 32 20 	lds	r30, 0x2032	; 0x802032 <__iob+0x2>
     e16:	f0 91 33 20 	lds	r31, 0x2033	; 0x802033 <__iob+0x3>
     e1a:	23 81       	ldd	r18, Z+3	; 0x03
     e1c:	21 ff       	sbrs	r18, 1
     e1e:	1b c0       	rjmp	.+54     	; 0xe56 <puts+0x4c>
     e20:	8c 01       	movw	r16, r24
     e22:	d0 e0       	ldi	r29, 0x00	; 0
     e24:	c0 e0       	ldi	r28, 0x00	; 0
     e26:	f8 01       	movw	r30, r16
     e28:	81 91       	ld	r24, Z+
     e2a:	8f 01       	movw	r16, r30
     e2c:	60 91 32 20 	lds	r22, 0x2032	; 0x802032 <__iob+0x2>
     e30:	70 91 33 20 	lds	r23, 0x2033	; 0x802033 <__iob+0x3>
     e34:	db 01       	movw	r26, r22
     e36:	18 96       	adiw	r26, 0x08	; 8
     e38:	ed 91       	ld	r30, X+
     e3a:	fc 91       	ld	r31, X
     e3c:	19 97       	sbiw	r26, 0x09	; 9
     e3e:	88 23       	and	r24, r24
     e40:	31 f0       	breq	.+12     	; 0xe4e <puts+0x44>
     e42:	09 95       	icall
     e44:	89 2b       	or	r24, r25
     e46:	79 f3       	breq	.-34     	; 0xe26 <puts+0x1c>
     e48:	df ef       	ldi	r29, 0xFF	; 255
     e4a:	cf ef       	ldi	r28, 0xFF	; 255
     e4c:	ec cf       	rjmp	.-40     	; 0xe26 <puts+0x1c>
     e4e:	8a e0       	ldi	r24, 0x0A	; 10
     e50:	09 95       	icall
     e52:	89 2b       	or	r24, r25
     e54:	19 f0       	breq	.+6      	; 0xe5c <puts+0x52>
     e56:	8f ef       	ldi	r24, 0xFF	; 255
     e58:	9f ef       	ldi	r25, 0xFF	; 255
     e5a:	02 c0       	rjmp	.+4      	; 0xe60 <puts+0x56>
     e5c:	8d 2f       	mov	r24, r29
     e5e:	9c 2f       	mov	r25, r28
     e60:	df 91       	pop	r29
     e62:	cf 91       	pop	r28
     e64:	1f 91       	pop	r17
     e66:	0f 91       	pop	r16
     e68:	08 95       	ret

00000e6a <sprintf>:
     e6a:	ae e0       	ldi	r26, 0x0E	; 14
     e6c:	b0 e0       	ldi	r27, 0x00	; 0
     e6e:	eb e3       	ldi	r30, 0x3B	; 59
     e70:	f7 e0       	ldi	r31, 0x07	; 7
     e72:	0c 94 f6 09 	jmp	0x13ec	; 0x13ec <__prologue_saves__+0x1c>
     e76:	0d 89       	ldd	r16, Y+21	; 0x15
     e78:	1e 89       	ldd	r17, Y+22	; 0x16
     e7a:	86 e0       	ldi	r24, 0x06	; 6
     e7c:	8c 83       	std	Y+4, r24	; 0x04
     e7e:	09 83       	std	Y+1, r16	; 0x01
     e80:	1a 83       	std	Y+2, r17	; 0x02
     e82:	8f ef       	ldi	r24, 0xFF	; 255
     e84:	9f e7       	ldi	r25, 0x7F	; 127
     e86:	8d 83       	std	Y+5, r24	; 0x05
     e88:	9e 83       	std	Y+6, r25	; 0x06
     e8a:	ae 01       	movw	r20, r28
     e8c:	47 5e       	subi	r20, 0xE7	; 231
     e8e:	5f 4f       	sbci	r21, 0xFF	; 255
     e90:	6f 89       	ldd	r22, Y+23	; 0x17
     e92:	78 8d       	ldd	r23, Y+24	; 0x18
     e94:	ce 01       	movw	r24, r28
     e96:	01 96       	adiw	r24, 0x01	; 1
     e98:	0e 94 57 07 	call	0xeae	; 0xeae <vfprintf>
     e9c:	ef 81       	ldd	r30, Y+7	; 0x07
     e9e:	f8 85       	ldd	r31, Y+8	; 0x08
     ea0:	e0 0f       	add	r30, r16
     ea2:	f1 1f       	adc	r31, r17
     ea4:	10 82       	st	Z, r1
     ea6:	2e 96       	adiw	r28, 0x0e	; 14
     ea8:	e4 e0       	ldi	r30, 0x04	; 4
     eaa:	0c 94 0f 0a 	jmp	0x141e	; 0x141e <__epilogue_restores__+0x1c>

00000eae <vfprintf>:
     eae:	ab e0       	ldi	r26, 0x0B	; 11
     eb0:	b0 e0       	ldi	r27, 0x00	; 0
     eb2:	ed e5       	ldi	r30, 0x5D	; 93
     eb4:	f7 e0       	ldi	r31, 0x07	; 7
     eb6:	0c 94 e8 09 	jmp	0x13d0	; 0x13d0 <__prologue_saves__>
     eba:	6c 01       	movw	r12, r24
     ebc:	7b 01       	movw	r14, r22
     ebe:	8a 01       	movw	r16, r20
     ec0:	fc 01       	movw	r30, r24
     ec2:	16 82       	std	Z+6, r1	; 0x06
     ec4:	17 82       	std	Z+7, r1	; 0x07
     ec6:	83 81       	ldd	r24, Z+3	; 0x03
     ec8:	81 ff       	sbrs	r24, 1
     eca:	cc c1       	rjmp	.+920    	; 0x1264 <vfprintf+0x3b6>
     ecc:	ce 01       	movw	r24, r28
     ece:	01 96       	adiw	r24, 0x01	; 1
     ed0:	3c 01       	movw	r6, r24
     ed2:	f6 01       	movw	r30, r12
     ed4:	93 81       	ldd	r25, Z+3	; 0x03
     ed6:	f7 01       	movw	r30, r14
     ed8:	93 fd       	sbrc	r25, 3
     eda:	85 91       	lpm	r24, Z+
     edc:	93 ff       	sbrs	r25, 3
     ede:	81 91       	ld	r24, Z+
     ee0:	7f 01       	movw	r14, r30
     ee2:	88 23       	and	r24, r24
     ee4:	09 f4       	brne	.+2      	; 0xee8 <vfprintf+0x3a>
     ee6:	ba c1       	rjmp	.+884    	; 0x125c <vfprintf+0x3ae>
     ee8:	85 32       	cpi	r24, 0x25	; 37
     eea:	39 f4       	brne	.+14     	; 0xefa <vfprintf+0x4c>
     eec:	93 fd       	sbrc	r25, 3
     eee:	85 91       	lpm	r24, Z+
     ef0:	93 ff       	sbrs	r25, 3
     ef2:	81 91       	ld	r24, Z+
     ef4:	7f 01       	movw	r14, r30
     ef6:	85 32       	cpi	r24, 0x25	; 37
     ef8:	29 f4       	brne	.+10     	; 0xf04 <vfprintf+0x56>
     efa:	b6 01       	movw	r22, r12
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	0e 94 4e 09 	call	0x129c	; 0x129c <fputc>
     f02:	e7 cf       	rjmp	.-50     	; 0xed2 <vfprintf+0x24>
     f04:	91 2c       	mov	r9, r1
     f06:	21 2c       	mov	r2, r1
     f08:	31 2c       	mov	r3, r1
     f0a:	ff e1       	ldi	r31, 0x1F	; 31
     f0c:	f3 15       	cp	r31, r3
     f0e:	d8 f0       	brcs	.+54     	; 0xf46 <vfprintf+0x98>
     f10:	8b 32       	cpi	r24, 0x2B	; 43
     f12:	79 f0       	breq	.+30     	; 0xf32 <vfprintf+0x84>
     f14:	38 f4       	brcc	.+14     	; 0xf24 <vfprintf+0x76>
     f16:	80 32       	cpi	r24, 0x20	; 32
     f18:	79 f0       	breq	.+30     	; 0xf38 <vfprintf+0x8a>
     f1a:	83 32       	cpi	r24, 0x23	; 35
     f1c:	a1 f4       	brne	.+40     	; 0xf46 <vfprintf+0x98>
     f1e:	23 2d       	mov	r18, r3
     f20:	20 61       	ori	r18, 0x10	; 16
     f22:	1d c0       	rjmp	.+58     	; 0xf5e <vfprintf+0xb0>
     f24:	8d 32       	cpi	r24, 0x2D	; 45
     f26:	61 f0       	breq	.+24     	; 0xf40 <vfprintf+0x92>
     f28:	80 33       	cpi	r24, 0x30	; 48
     f2a:	69 f4       	brne	.+26     	; 0xf46 <vfprintf+0x98>
     f2c:	23 2d       	mov	r18, r3
     f2e:	21 60       	ori	r18, 0x01	; 1
     f30:	16 c0       	rjmp	.+44     	; 0xf5e <vfprintf+0xb0>
     f32:	83 2d       	mov	r24, r3
     f34:	82 60       	ori	r24, 0x02	; 2
     f36:	38 2e       	mov	r3, r24
     f38:	e3 2d       	mov	r30, r3
     f3a:	e4 60       	ori	r30, 0x04	; 4
     f3c:	3e 2e       	mov	r3, r30
     f3e:	2a c0       	rjmp	.+84     	; 0xf94 <vfprintf+0xe6>
     f40:	f3 2d       	mov	r31, r3
     f42:	f8 60       	ori	r31, 0x08	; 8
     f44:	1d c0       	rjmp	.+58     	; 0xf80 <vfprintf+0xd2>
     f46:	37 fc       	sbrc	r3, 7
     f48:	2d c0       	rjmp	.+90     	; 0xfa4 <vfprintf+0xf6>
     f4a:	20 ed       	ldi	r18, 0xD0	; 208
     f4c:	28 0f       	add	r18, r24
     f4e:	2a 30       	cpi	r18, 0x0A	; 10
     f50:	40 f0       	brcs	.+16     	; 0xf62 <vfprintf+0xb4>
     f52:	8e 32       	cpi	r24, 0x2E	; 46
     f54:	b9 f4       	brne	.+46     	; 0xf84 <vfprintf+0xd6>
     f56:	36 fc       	sbrc	r3, 6
     f58:	81 c1       	rjmp	.+770    	; 0x125c <vfprintf+0x3ae>
     f5a:	23 2d       	mov	r18, r3
     f5c:	20 64       	ori	r18, 0x40	; 64
     f5e:	32 2e       	mov	r3, r18
     f60:	19 c0       	rjmp	.+50     	; 0xf94 <vfprintf+0xe6>
     f62:	36 fe       	sbrs	r3, 6
     f64:	06 c0       	rjmp	.+12     	; 0xf72 <vfprintf+0xc4>
     f66:	8a e0       	ldi	r24, 0x0A	; 10
     f68:	98 9e       	mul	r9, r24
     f6a:	20 0d       	add	r18, r0
     f6c:	11 24       	eor	r1, r1
     f6e:	92 2e       	mov	r9, r18
     f70:	11 c0       	rjmp	.+34     	; 0xf94 <vfprintf+0xe6>
     f72:	ea e0       	ldi	r30, 0x0A	; 10
     f74:	2e 9e       	mul	r2, r30
     f76:	20 0d       	add	r18, r0
     f78:	11 24       	eor	r1, r1
     f7a:	22 2e       	mov	r2, r18
     f7c:	f3 2d       	mov	r31, r3
     f7e:	f0 62       	ori	r31, 0x20	; 32
     f80:	3f 2e       	mov	r3, r31
     f82:	08 c0       	rjmp	.+16     	; 0xf94 <vfprintf+0xe6>
     f84:	8c 36       	cpi	r24, 0x6C	; 108
     f86:	21 f4       	brne	.+8      	; 0xf90 <vfprintf+0xe2>
     f88:	83 2d       	mov	r24, r3
     f8a:	80 68       	ori	r24, 0x80	; 128
     f8c:	38 2e       	mov	r3, r24
     f8e:	02 c0       	rjmp	.+4      	; 0xf94 <vfprintf+0xe6>
     f90:	88 36       	cpi	r24, 0x68	; 104
     f92:	41 f4       	brne	.+16     	; 0xfa4 <vfprintf+0xf6>
     f94:	f7 01       	movw	r30, r14
     f96:	93 fd       	sbrc	r25, 3
     f98:	85 91       	lpm	r24, Z+
     f9a:	93 ff       	sbrs	r25, 3
     f9c:	81 91       	ld	r24, Z+
     f9e:	7f 01       	movw	r14, r30
     fa0:	81 11       	cpse	r24, r1
     fa2:	b3 cf       	rjmp	.-154    	; 0xf0a <vfprintf+0x5c>
     fa4:	98 2f       	mov	r25, r24
     fa6:	9f 7d       	andi	r25, 0xDF	; 223
     fa8:	95 54       	subi	r25, 0x45	; 69
     faa:	93 30       	cpi	r25, 0x03	; 3
     fac:	28 f4       	brcc	.+10     	; 0xfb8 <vfprintf+0x10a>
     fae:	0c 5f       	subi	r16, 0xFC	; 252
     fb0:	1f 4f       	sbci	r17, 0xFF	; 255
     fb2:	9f e3       	ldi	r25, 0x3F	; 63
     fb4:	99 83       	std	Y+1, r25	; 0x01
     fb6:	0d c0       	rjmp	.+26     	; 0xfd2 <vfprintf+0x124>
     fb8:	83 36       	cpi	r24, 0x63	; 99
     fba:	31 f0       	breq	.+12     	; 0xfc8 <vfprintf+0x11a>
     fbc:	83 37       	cpi	r24, 0x73	; 115
     fbe:	71 f0       	breq	.+28     	; 0xfdc <vfprintf+0x12e>
     fc0:	83 35       	cpi	r24, 0x53	; 83
     fc2:	09 f0       	breq	.+2      	; 0xfc6 <vfprintf+0x118>
     fc4:	59 c0       	rjmp	.+178    	; 0x1078 <vfprintf+0x1ca>
     fc6:	21 c0       	rjmp	.+66     	; 0x100a <vfprintf+0x15c>
     fc8:	f8 01       	movw	r30, r16
     fca:	80 81       	ld	r24, Z
     fcc:	89 83       	std	Y+1, r24	; 0x01
     fce:	0e 5f       	subi	r16, 0xFE	; 254
     fd0:	1f 4f       	sbci	r17, 0xFF	; 255
     fd2:	88 24       	eor	r8, r8
     fd4:	83 94       	inc	r8
     fd6:	91 2c       	mov	r9, r1
     fd8:	53 01       	movw	r10, r6
     fda:	13 c0       	rjmp	.+38     	; 0x1002 <vfprintf+0x154>
     fdc:	28 01       	movw	r4, r16
     fde:	f2 e0       	ldi	r31, 0x02	; 2
     fe0:	4f 0e       	add	r4, r31
     fe2:	51 1c       	adc	r5, r1
     fe4:	f8 01       	movw	r30, r16
     fe6:	a0 80       	ld	r10, Z
     fe8:	b1 80       	ldd	r11, Z+1	; 0x01
     fea:	36 fe       	sbrs	r3, 6
     fec:	03 c0       	rjmp	.+6      	; 0xff4 <vfprintf+0x146>
     fee:	69 2d       	mov	r22, r9
     ff0:	70 e0       	ldi	r23, 0x00	; 0
     ff2:	02 c0       	rjmp	.+4      	; 0xff8 <vfprintf+0x14a>
     ff4:	6f ef       	ldi	r22, 0xFF	; 255
     ff6:	7f ef       	ldi	r23, 0xFF	; 255
     ff8:	c5 01       	movw	r24, r10
     ffa:	0e 94 43 09 	call	0x1286	; 0x1286 <strnlen>
     ffe:	4c 01       	movw	r8, r24
    1000:	82 01       	movw	r16, r4
    1002:	f3 2d       	mov	r31, r3
    1004:	ff 77       	andi	r31, 0x7F	; 127
    1006:	3f 2e       	mov	r3, r31
    1008:	16 c0       	rjmp	.+44     	; 0x1036 <vfprintf+0x188>
    100a:	28 01       	movw	r4, r16
    100c:	22 e0       	ldi	r18, 0x02	; 2
    100e:	42 0e       	add	r4, r18
    1010:	51 1c       	adc	r5, r1
    1012:	f8 01       	movw	r30, r16
    1014:	a0 80       	ld	r10, Z
    1016:	b1 80       	ldd	r11, Z+1	; 0x01
    1018:	36 fe       	sbrs	r3, 6
    101a:	03 c0       	rjmp	.+6      	; 0x1022 <vfprintf+0x174>
    101c:	69 2d       	mov	r22, r9
    101e:	70 e0       	ldi	r23, 0x00	; 0
    1020:	02 c0       	rjmp	.+4      	; 0x1026 <vfprintf+0x178>
    1022:	6f ef       	ldi	r22, 0xFF	; 255
    1024:	7f ef       	ldi	r23, 0xFF	; 255
    1026:	c5 01       	movw	r24, r10
    1028:	0e 94 38 09 	call	0x1270	; 0x1270 <strnlen_P>
    102c:	4c 01       	movw	r8, r24
    102e:	f3 2d       	mov	r31, r3
    1030:	f0 68       	ori	r31, 0x80	; 128
    1032:	3f 2e       	mov	r3, r31
    1034:	82 01       	movw	r16, r4
    1036:	33 fc       	sbrc	r3, 3
    1038:	1b c0       	rjmp	.+54     	; 0x1070 <vfprintf+0x1c2>
    103a:	82 2d       	mov	r24, r2
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	88 16       	cp	r8, r24
    1040:	99 06       	cpc	r9, r25
    1042:	b0 f4       	brcc	.+44     	; 0x1070 <vfprintf+0x1c2>
    1044:	b6 01       	movw	r22, r12
    1046:	80 e2       	ldi	r24, 0x20	; 32
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	0e 94 4e 09 	call	0x129c	; 0x129c <fputc>
    104e:	2a 94       	dec	r2
    1050:	f4 cf       	rjmp	.-24     	; 0x103a <vfprintf+0x18c>
    1052:	f5 01       	movw	r30, r10
    1054:	37 fc       	sbrc	r3, 7
    1056:	85 91       	lpm	r24, Z+
    1058:	37 fe       	sbrs	r3, 7
    105a:	81 91       	ld	r24, Z+
    105c:	5f 01       	movw	r10, r30
    105e:	b6 01       	movw	r22, r12
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	0e 94 4e 09 	call	0x129c	; 0x129c <fputc>
    1066:	21 10       	cpse	r2, r1
    1068:	2a 94       	dec	r2
    106a:	21 e0       	ldi	r18, 0x01	; 1
    106c:	82 1a       	sub	r8, r18
    106e:	91 08       	sbc	r9, r1
    1070:	81 14       	cp	r8, r1
    1072:	91 04       	cpc	r9, r1
    1074:	71 f7       	brne	.-36     	; 0x1052 <vfprintf+0x1a4>
    1076:	e8 c0       	rjmp	.+464    	; 0x1248 <vfprintf+0x39a>
    1078:	84 36       	cpi	r24, 0x64	; 100
    107a:	11 f0       	breq	.+4      	; 0x1080 <vfprintf+0x1d2>
    107c:	89 36       	cpi	r24, 0x69	; 105
    107e:	41 f5       	brne	.+80     	; 0x10d0 <vfprintf+0x222>
    1080:	f8 01       	movw	r30, r16
    1082:	37 fe       	sbrs	r3, 7
    1084:	07 c0       	rjmp	.+14     	; 0x1094 <vfprintf+0x1e6>
    1086:	60 81       	ld	r22, Z
    1088:	71 81       	ldd	r23, Z+1	; 0x01
    108a:	82 81       	ldd	r24, Z+2	; 0x02
    108c:	93 81       	ldd	r25, Z+3	; 0x03
    108e:	0c 5f       	subi	r16, 0xFC	; 252
    1090:	1f 4f       	sbci	r17, 0xFF	; 255
    1092:	08 c0       	rjmp	.+16     	; 0x10a4 <vfprintf+0x1f6>
    1094:	60 81       	ld	r22, Z
    1096:	71 81       	ldd	r23, Z+1	; 0x01
    1098:	07 2e       	mov	r0, r23
    109a:	00 0c       	add	r0, r0
    109c:	88 0b       	sbc	r24, r24
    109e:	99 0b       	sbc	r25, r25
    10a0:	0e 5f       	subi	r16, 0xFE	; 254
    10a2:	1f 4f       	sbci	r17, 0xFF	; 255
    10a4:	f3 2d       	mov	r31, r3
    10a6:	ff 76       	andi	r31, 0x6F	; 111
    10a8:	3f 2e       	mov	r3, r31
    10aa:	97 ff       	sbrs	r25, 7
    10ac:	09 c0       	rjmp	.+18     	; 0x10c0 <vfprintf+0x212>
    10ae:	90 95       	com	r25
    10b0:	80 95       	com	r24
    10b2:	70 95       	com	r23
    10b4:	61 95       	neg	r22
    10b6:	7f 4f       	sbci	r23, 0xFF	; 255
    10b8:	8f 4f       	sbci	r24, 0xFF	; 255
    10ba:	9f 4f       	sbci	r25, 0xFF	; 255
    10bc:	f0 68       	ori	r31, 0x80	; 128
    10be:	3f 2e       	mov	r3, r31
    10c0:	2a e0       	ldi	r18, 0x0A	; 10
    10c2:	30 e0       	ldi	r19, 0x00	; 0
    10c4:	a3 01       	movw	r20, r6
    10c6:	0e 94 8a 09 	call	0x1314	; 0x1314 <__ultoa_invert>
    10ca:	88 2e       	mov	r8, r24
    10cc:	86 18       	sub	r8, r6
    10ce:	45 c0       	rjmp	.+138    	; 0x115a <vfprintf+0x2ac>
    10d0:	85 37       	cpi	r24, 0x75	; 117
    10d2:	31 f4       	brne	.+12     	; 0x10e0 <vfprintf+0x232>
    10d4:	23 2d       	mov	r18, r3
    10d6:	2f 7e       	andi	r18, 0xEF	; 239
    10d8:	b2 2e       	mov	r11, r18
    10da:	2a e0       	ldi	r18, 0x0A	; 10
    10dc:	30 e0       	ldi	r19, 0x00	; 0
    10de:	25 c0       	rjmp	.+74     	; 0x112a <vfprintf+0x27c>
    10e0:	93 2d       	mov	r25, r3
    10e2:	99 7f       	andi	r25, 0xF9	; 249
    10e4:	b9 2e       	mov	r11, r25
    10e6:	8f 36       	cpi	r24, 0x6F	; 111
    10e8:	c1 f0       	breq	.+48     	; 0x111a <vfprintf+0x26c>
    10ea:	18 f4       	brcc	.+6      	; 0x10f2 <vfprintf+0x244>
    10ec:	88 35       	cpi	r24, 0x58	; 88
    10ee:	79 f0       	breq	.+30     	; 0x110e <vfprintf+0x260>
    10f0:	b5 c0       	rjmp	.+362    	; 0x125c <vfprintf+0x3ae>
    10f2:	80 37       	cpi	r24, 0x70	; 112
    10f4:	19 f0       	breq	.+6      	; 0x10fc <vfprintf+0x24e>
    10f6:	88 37       	cpi	r24, 0x78	; 120
    10f8:	21 f0       	breq	.+8      	; 0x1102 <vfprintf+0x254>
    10fa:	b0 c0       	rjmp	.+352    	; 0x125c <vfprintf+0x3ae>
    10fc:	e9 2f       	mov	r30, r25
    10fe:	e0 61       	ori	r30, 0x10	; 16
    1100:	be 2e       	mov	r11, r30
    1102:	b4 fe       	sbrs	r11, 4
    1104:	0d c0       	rjmp	.+26     	; 0x1120 <vfprintf+0x272>
    1106:	fb 2d       	mov	r31, r11
    1108:	f4 60       	ori	r31, 0x04	; 4
    110a:	bf 2e       	mov	r11, r31
    110c:	09 c0       	rjmp	.+18     	; 0x1120 <vfprintf+0x272>
    110e:	34 fe       	sbrs	r3, 4
    1110:	0a c0       	rjmp	.+20     	; 0x1126 <vfprintf+0x278>
    1112:	29 2f       	mov	r18, r25
    1114:	26 60       	ori	r18, 0x06	; 6
    1116:	b2 2e       	mov	r11, r18
    1118:	06 c0       	rjmp	.+12     	; 0x1126 <vfprintf+0x278>
    111a:	28 e0       	ldi	r18, 0x08	; 8
    111c:	30 e0       	ldi	r19, 0x00	; 0
    111e:	05 c0       	rjmp	.+10     	; 0x112a <vfprintf+0x27c>
    1120:	20 e1       	ldi	r18, 0x10	; 16
    1122:	30 e0       	ldi	r19, 0x00	; 0
    1124:	02 c0       	rjmp	.+4      	; 0x112a <vfprintf+0x27c>
    1126:	20 e1       	ldi	r18, 0x10	; 16
    1128:	32 e0       	ldi	r19, 0x02	; 2
    112a:	f8 01       	movw	r30, r16
    112c:	b7 fe       	sbrs	r11, 7
    112e:	07 c0       	rjmp	.+14     	; 0x113e <vfprintf+0x290>
    1130:	60 81       	ld	r22, Z
    1132:	71 81       	ldd	r23, Z+1	; 0x01
    1134:	82 81       	ldd	r24, Z+2	; 0x02
    1136:	93 81       	ldd	r25, Z+3	; 0x03
    1138:	0c 5f       	subi	r16, 0xFC	; 252
    113a:	1f 4f       	sbci	r17, 0xFF	; 255
    113c:	06 c0       	rjmp	.+12     	; 0x114a <vfprintf+0x29c>
    113e:	60 81       	ld	r22, Z
    1140:	71 81       	ldd	r23, Z+1	; 0x01
    1142:	80 e0       	ldi	r24, 0x00	; 0
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	0e 5f       	subi	r16, 0xFE	; 254
    1148:	1f 4f       	sbci	r17, 0xFF	; 255
    114a:	a3 01       	movw	r20, r6
    114c:	0e 94 8a 09 	call	0x1314	; 0x1314 <__ultoa_invert>
    1150:	88 2e       	mov	r8, r24
    1152:	86 18       	sub	r8, r6
    1154:	fb 2d       	mov	r31, r11
    1156:	ff 77       	andi	r31, 0x7F	; 127
    1158:	3f 2e       	mov	r3, r31
    115a:	36 fe       	sbrs	r3, 6
    115c:	0d c0       	rjmp	.+26     	; 0x1178 <vfprintf+0x2ca>
    115e:	23 2d       	mov	r18, r3
    1160:	2e 7f       	andi	r18, 0xFE	; 254
    1162:	a2 2e       	mov	r10, r18
    1164:	89 14       	cp	r8, r9
    1166:	58 f4       	brcc	.+22     	; 0x117e <vfprintf+0x2d0>
    1168:	34 fe       	sbrs	r3, 4
    116a:	0b c0       	rjmp	.+22     	; 0x1182 <vfprintf+0x2d4>
    116c:	32 fc       	sbrc	r3, 2
    116e:	09 c0       	rjmp	.+18     	; 0x1182 <vfprintf+0x2d4>
    1170:	83 2d       	mov	r24, r3
    1172:	8e 7e       	andi	r24, 0xEE	; 238
    1174:	a8 2e       	mov	r10, r24
    1176:	05 c0       	rjmp	.+10     	; 0x1182 <vfprintf+0x2d4>
    1178:	b8 2c       	mov	r11, r8
    117a:	a3 2c       	mov	r10, r3
    117c:	03 c0       	rjmp	.+6      	; 0x1184 <vfprintf+0x2d6>
    117e:	b8 2c       	mov	r11, r8
    1180:	01 c0       	rjmp	.+2      	; 0x1184 <vfprintf+0x2d6>
    1182:	b9 2c       	mov	r11, r9
    1184:	a4 fe       	sbrs	r10, 4
    1186:	0f c0       	rjmp	.+30     	; 0x11a6 <vfprintf+0x2f8>
    1188:	fe 01       	movw	r30, r28
    118a:	e8 0d       	add	r30, r8
    118c:	f1 1d       	adc	r31, r1
    118e:	80 81       	ld	r24, Z
    1190:	80 33       	cpi	r24, 0x30	; 48
    1192:	21 f4       	brne	.+8      	; 0x119c <vfprintf+0x2ee>
    1194:	9a 2d       	mov	r25, r10
    1196:	99 7e       	andi	r25, 0xE9	; 233
    1198:	a9 2e       	mov	r10, r25
    119a:	09 c0       	rjmp	.+18     	; 0x11ae <vfprintf+0x300>
    119c:	a2 fe       	sbrs	r10, 2
    119e:	06 c0       	rjmp	.+12     	; 0x11ac <vfprintf+0x2fe>
    11a0:	b3 94       	inc	r11
    11a2:	b3 94       	inc	r11
    11a4:	04 c0       	rjmp	.+8      	; 0x11ae <vfprintf+0x300>
    11a6:	8a 2d       	mov	r24, r10
    11a8:	86 78       	andi	r24, 0x86	; 134
    11aa:	09 f0       	breq	.+2      	; 0x11ae <vfprintf+0x300>
    11ac:	b3 94       	inc	r11
    11ae:	a3 fc       	sbrc	r10, 3
    11b0:	11 c0       	rjmp	.+34     	; 0x11d4 <vfprintf+0x326>
    11b2:	a0 fe       	sbrs	r10, 0
    11b4:	06 c0       	rjmp	.+12     	; 0x11c2 <vfprintf+0x314>
    11b6:	b2 14       	cp	r11, r2
    11b8:	88 f4       	brcc	.+34     	; 0x11dc <vfprintf+0x32e>
    11ba:	28 0c       	add	r2, r8
    11bc:	92 2c       	mov	r9, r2
    11be:	9b 18       	sub	r9, r11
    11c0:	0e c0       	rjmp	.+28     	; 0x11de <vfprintf+0x330>
    11c2:	b2 14       	cp	r11, r2
    11c4:	60 f4       	brcc	.+24     	; 0x11de <vfprintf+0x330>
    11c6:	b6 01       	movw	r22, r12
    11c8:	80 e2       	ldi	r24, 0x20	; 32
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	0e 94 4e 09 	call	0x129c	; 0x129c <fputc>
    11d0:	b3 94       	inc	r11
    11d2:	f7 cf       	rjmp	.-18     	; 0x11c2 <vfprintf+0x314>
    11d4:	b2 14       	cp	r11, r2
    11d6:	18 f4       	brcc	.+6      	; 0x11de <vfprintf+0x330>
    11d8:	2b 18       	sub	r2, r11
    11da:	02 c0       	rjmp	.+4      	; 0x11e0 <vfprintf+0x332>
    11dc:	98 2c       	mov	r9, r8
    11de:	21 2c       	mov	r2, r1
    11e0:	a4 fe       	sbrs	r10, 4
    11e2:	10 c0       	rjmp	.+32     	; 0x1204 <vfprintf+0x356>
    11e4:	b6 01       	movw	r22, r12
    11e6:	80 e3       	ldi	r24, 0x30	; 48
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	0e 94 4e 09 	call	0x129c	; 0x129c <fputc>
    11ee:	a2 fe       	sbrs	r10, 2
    11f0:	17 c0       	rjmp	.+46     	; 0x1220 <vfprintf+0x372>
    11f2:	a1 fc       	sbrc	r10, 1
    11f4:	03 c0       	rjmp	.+6      	; 0x11fc <vfprintf+0x34e>
    11f6:	88 e7       	ldi	r24, 0x78	; 120
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	02 c0       	rjmp	.+4      	; 0x1200 <vfprintf+0x352>
    11fc:	88 e5       	ldi	r24, 0x58	; 88
    11fe:	90 e0       	ldi	r25, 0x00	; 0
    1200:	b6 01       	movw	r22, r12
    1202:	0c c0       	rjmp	.+24     	; 0x121c <vfprintf+0x36e>
    1204:	8a 2d       	mov	r24, r10
    1206:	86 78       	andi	r24, 0x86	; 134
    1208:	59 f0       	breq	.+22     	; 0x1220 <vfprintf+0x372>
    120a:	a1 fe       	sbrs	r10, 1
    120c:	02 c0       	rjmp	.+4      	; 0x1212 <vfprintf+0x364>
    120e:	8b e2       	ldi	r24, 0x2B	; 43
    1210:	01 c0       	rjmp	.+2      	; 0x1214 <vfprintf+0x366>
    1212:	80 e2       	ldi	r24, 0x20	; 32
    1214:	a7 fc       	sbrc	r10, 7
    1216:	8d e2       	ldi	r24, 0x2D	; 45
    1218:	b6 01       	movw	r22, r12
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	0e 94 4e 09 	call	0x129c	; 0x129c <fputc>
    1220:	89 14       	cp	r8, r9
    1222:	38 f4       	brcc	.+14     	; 0x1232 <vfprintf+0x384>
    1224:	b6 01       	movw	r22, r12
    1226:	80 e3       	ldi	r24, 0x30	; 48
    1228:	90 e0       	ldi	r25, 0x00	; 0
    122a:	0e 94 4e 09 	call	0x129c	; 0x129c <fputc>
    122e:	9a 94       	dec	r9
    1230:	f7 cf       	rjmp	.-18     	; 0x1220 <vfprintf+0x372>
    1232:	8a 94       	dec	r8
    1234:	f3 01       	movw	r30, r6
    1236:	e8 0d       	add	r30, r8
    1238:	f1 1d       	adc	r31, r1
    123a:	80 81       	ld	r24, Z
    123c:	b6 01       	movw	r22, r12
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	0e 94 4e 09 	call	0x129c	; 0x129c <fputc>
    1244:	81 10       	cpse	r8, r1
    1246:	f5 cf       	rjmp	.-22     	; 0x1232 <vfprintf+0x384>
    1248:	22 20       	and	r2, r2
    124a:	09 f4       	brne	.+2      	; 0x124e <vfprintf+0x3a0>
    124c:	42 ce       	rjmp	.-892    	; 0xed2 <vfprintf+0x24>
    124e:	b6 01       	movw	r22, r12
    1250:	80 e2       	ldi	r24, 0x20	; 32
    1252:	90 e0       	ldi	r25, 0x00	; 0
    1254:	0e 94 4e 09 	call	0x129c	; 0x129c <fputc>
    1258:	2a 94       	dec	r2
    125a:	f6 cf       	rjmp	.-20     	; 0x1248 <vfprintf+0x39a>
    125c:	f6 01       	movw	r30, r12
    125e:	86 81       	ldd	r24, Z+6	; 0x06
    1260:	97 81       	ldd	r25, Z+7	; 0x07
    1262:	02 c0       	rjmp	.+4      	; 0x1268 <vfprintf+0x3ba>
    1264:	8f ef       	ldi	r24, 0xFF	; 255
    1266:	9f ef       	ldi	r25, 0xFF	; 255
    1268:	2b 96       	adiw	r28, 0x0b	; 11
    126a:	e2 e1       	ldi	r30, 0x12	; 18
    126c:	0c 94 01 0a 	jmp	0x1402	; 0x1402 <__epilogue_restores__>

00001270 <strnlen_P>:
    1270:	fc 01       	movw	r30, r24
    1272:	05 90       	lpm	r0, Z+
    1274:	61 50       	subi	r22, 0x01	; 1
    1276:	70 40       	sbci	r23, 0x00	; 0
    1278:	01 10       	cpse	r0, r1
    127a:	d8 f7       	brcc	.-10     	; 0x1272 <strnlen_P+0x2>
    127c:	80 95       	com	r24
    127e:	90 95       	com	r25
    1280:	8e 0f       	add	r24, r30
    1282:	9f 1f       	adc	r25, r31
    1284:	08 95       	ret

00001286 <strnlen>:
    1286:	fc 01       	movw	r30, r24
    1288:	61 50       	subi	r22, 0x01	; 1
    128a:	70 40       	sbci	r23, 0x00	; 0
    128c:	01 90       	ld	r0, Z+
    128e:	01 10       	cpse	r0, r1
    1290:	d8 f7       	brcc	.-10     	; 0x1288 <strnlen+0x2>
    1292:	80 95       	com	r24
    1294:	90 95       	com	r25
    1296:	8e 0f       	add	r24, r30
    1298:	9f 1f       	adc	r25, r31
    129a:	08 95       	ret

0000129c <fputc>:
    129c:	0f 93       	push	r16
    129e:	1f 93       	push	r17
    12a0:	cf 93       	push	r28
    12a2:	df 93       	push	r29
    12a4:	fb 01       	movw	r30, r22
    12a6:	23 81       	ldd	r18, Z+3	; 0x03
    12a8:	21 fd       	sbrc	r18, 1
    12aa:	03 c0       	rjmp	.+6      	; 0x12b2 <fputc+0x16>
    12ac:	8f ef       	ldi	r24, 0xFF	; 255
    12ae:	9f ef       	ldi	r25, 0xFF	; 255
    12b0:	2c c0       	rjmp	.+88     	; 0x130a <fputc+0x6e>
    12b2:	22 ff       	sbrs	r18, 2
    12b4:	16 c0       	rjmp	.+44     	; 0x12e2 <fputc+0x46>
    12b6:	46 81       	ldd	r20, Z+6	; 0x06
    12b8:	57 81       	ldd	r21, Z+7	; 0x07
    12ba:	24 81       	ldd	r18, Z+4	; 0x04
    12bc:	35 81       	ldd	r19, Z+5	; 0x05
    12be:	42 17       	cp	r20, r18
    12c0:	53 07       	cpc	r21, r19
    12c2:	44 f4       	brge	.+16     	; 0x12d4 <fputc+0x38>
    12c4:	a0 81       	ld	r26, Z
    12c6:	b1 81       	ldd	r27, Z+1	; 0x01
    12c8:	9d 01       	movw	r18, r26
    12ca:	2f 5f       	subi	r18, 0xFF	; 255
    12cc:	3f 4f       	sbci	r19, 0xFF	; 255
    12ce:	20 83       	st	Z, r18
    12d0:	31 83       	std	Z+1, r19	; 0x01
    12d2:	8c 93       	st	X, r24
    12d4:	26 81       	ldd	r18, Z+6	; 0x06
    12d6:	37 81       	ldd	r19, Z+7	; 0x07
    12d8:	2f 5f       	subi	r18, 0xFF	; 255
    12da:	3f 4f       	sbci	r19, 0xFF	; 255
    12dc:	26 83       	std	Z+6, r18	; 0x06
    12de:	37 83       	std	Z+7, r19	; 0x07
    12e0:	14 c0       	rjmp	.+40     	; 0x130a <fputc+0x6e>
    12e2:	8b 01       	movw	r16, r22
    12e4:	ec 01       	movw	r28, r24
    12e6:	fb 01       	movw	r30, r22
    12e8:	00 84       	ldd	r0, Z+8	; 0x08
    12ea:	f1 85       	ldd	r31, Z+9	; 0x09
    12ec:	e0 2d       	mov	r30, r0
    12ee:	09 95       	icall
    12f0:	89 2b       	or	r24, r25
    12f2:	e1 f6       	brne	.-72     	; 0x12ac <fputc+0x10>
    12f4:	d8 01       	movw	r26, r16
    12f6:	16 96       	adiw	r26, 0x06	; 6
    12f8:	8d 91       	ld	r24, X+
    12fa:	9c 91       	ld	r25, X
    12fc:	17 97       	sbiw	r26, 0x07	; 7
    12fe:	01 96       	adiw	r24, 0x01	; 1
    1300:	16 96       	adiw	r26, 0x06	; 6
    1302:	8d 93       	st	X+, r24
    1304:	9c 93       	st	X, r25
    1306:	17 97       	sbiw	r26, 0x07	; 7
    1308:	ce 01       	movw	r24, r28
    130a:	df 91       	pop	r29
    130c:	cf 91       	pop	r28
    130e:	1f 91       	pop	r17
    1310:	0f 91       	pop	r16
    1312:	08 95       	ret

00001314 <__ultoa_invert>:
    1314:	fa 01       	movw	r30, r20
    1316:	aa 27       	eor	r26, r26
    1318:	28 30       	cpi	r18, 0x08	; 8
    131a:	51 f1       	breq	.+84     	; 0x1370 <__ultoa_invert+0x5c>
    131c:	20 31       	cpi	r18, 0x10	; 16
    131e:	81 f1       	breq	.+96     	; 0x1380 <__ultoa_invert+0x6c>
    1320:	e8 94       	clt
    1322:	6f 93       	push	r22
    1324:	6e 7f       	andi	r22, 0xFE	; 254
    1326:	6e 5f       	subi	r22, 0xFE	; 254
    1328:	7f 4f       	sbci	r23, 0xFF	; 255
    132a:	8f 4f       	sbci	r24, 0xFF	; 255
    132c:	9f 4f       	sbci	r25, 0xFF	; 255
    132e:	af 4f       	sbci	r26, 0xFF	; 255
    1330:	b1 e0       	ldi	r27, 0x01	; 1
    1332:	3e d0       	rcall	.+124    	; 0x13b0 <__ultoa_invert+0x9c>
    1334:	b4 e0       	ldi	r27, 0x04	; 4
    1336:	3c d0       	rcall	.+120    	; 0x13b0 <__ultoa_invert+0x9c>
    1338:	67 0f       	add	r22, r23
    133a:	78 1f       	adc	r23, r24
    133c:	89 1f       	adc	r24, r25
    133e:	9a 1f       	adc	r25, r26
    1340:	a1 1d       	adc	r26, r1
    1342:	68 0f       	add	r22, r24
    1344:	79 1f       	adc	r23, r25
    1346:	8a 1f       	adc	r24, r26
    1348:	91 1d       	adc	r25, r1
    134a:	a1 1d       	adc	r26, r1
    134c:	6a 0f       	add	r22, r26
    134e:	71 1d       	adc	r23, r1
    1350:	81 1d       	adc	r24, r1
    1352:	91 1d       	adc	r25, r1
    1354:	a1 1d       	adc	r26, r1
    1356:	20 d0       	rcall	.+64     	; 0x1398 <__ultoa_invert+0x84>
    1358:	09 f4       	brne	.+2      	; 0x135c <__ultoa_invert+0x48>
    135a:	68 94       	set
    135c:	3f 91       	pop	r19
    135e:	2a e0       	ldi	r18, 0x0A	; 10
    1360:	26 9f       	mul	r18, r22
    1362:	11 24       	eor	r1, r1
    1364:	30 19       	sub	r19, r0
    1366:	30 5d       	subi	r19, 0xD0	; 208
    1368:	31 93       	st	Z+, r19
    136a:	de f6       	brtc	.-74     	; 0x1322 <__ultoa_invert+0xe>
    136c:	cf 01       	movw	r24, r30
    136e:	08 95       	ret
    1370:	46 2f       	mov	r20, r22
    1372:	47 70       	andi	r20, 0x07	; 7
    1374:	40 5d       	subi	r20, 0xD0	; 208
    1376:	41 93       	st	Z+, r20
    1378:	b3 e0       	ldi	r27, 0x03	; 3
    137a:	0f d0       	rcall	.+30     	; 0x139a <__ultoa_invert+0x86>
    137c:	c9 f7       	brne	.-14     	; 0x1370 <__ultoa_invert+0x5c>
    137e:	f6 cf       	rjmp	.-20     	; 0x136c <__ultoa_invert+0x58>
    1380:	46 2f       	mov	r20, r22
    1382:	4f 70       	andi	r20, 0x0F	; 15
    1384:	40 5d       	subi	r20, 0xD0	; 208
    1386:	4a 33       	cpi	r20, 0x3A	; 58
    1388:	18 f0       	brcs	.+6      	; 0x1390 <__ultoa_invert+0x7c>
    138a:	49 5d       	subi	r20, 0xD9	; 217
    138c:	31 fd       	sbrc	r19, 1
    138e:	40 52       	subi	r20, 0x20	; 32
    1390:	41 93       	st	Z+, r20
    1392:	02 d0       	rcall	.+4      	; 0x1398 <__ultoa_invert+0x84>
    1394:	a9 f7       	brne	.-22     	; 0x1380 <__ultoa_invert+0x6c>
    1396:	ea cf       	rjmp	.-44     	; 0x136c <__ultoa_invert+0x58>
    1398:	b4 e0       	ldi	r27, 0x04	; 4
    139a:	a6 95       	lsr	r26
    139c:	97 95       	ror	r25
    139e:	87 95       	ror	r24
    13a0:	77 95       	ror	r23
    13a2:	67 95       	ror	r22
    13a4:	ba 95       	dec	r27
    13a6:	c9 f7       	brne	.-14     	; 0x139a <__ultoa_invert+0x86>
    13a8:	00 97       	sbiw	r24, 0x00	; 0
    13aa:	61 05       	cpc	r22, r1
    13ac:	71 05       	cpc	r23, r1
    13ae:	08 95       	ret
    13b0:	9b 01       	movw	r18, r22
    13b2:	ac 01       	movw	r20, r24
    13b4:	0a 2e       	mov	r0, r26
    13b6:	06 94       	lsr	r0
    13b8:	57 95       	ror	r21
    13ba:	47 95       	ror	r20
    13bc:	37 95       	ror	r19
    13be:	27 95       	ror	r18
    13c0:	ba 95       	dec	r27
    13c2:	c9 f7       	brne	.-14     	; 0x13b6 <__ultoa_invert+0xa2>
    13c4:	62 0f       	add	r22, r18
    13c6:	73 1f       	adc	r23, r19
    13c8:	84 1f       	adc	r24, r20
    13ca:	95 1f       	adc	r25, r21
    13cc:	a0 1d       	adc	r26, r0
    13ce:	08 95       	ret

000013d0 <__prologue_saves__>:
    13d0:	2f 92       	push	r2
    13d2:	3f 92       	push	r3
    13d4:	4f 92       	push	r4
    13d6:	5f 92       	push	r5
    13d8:	6f 92       	push	r6
    13da:	7f 92       	push	r7
    13dc:	8f 92       	push	r8
    13de:	9f 92       	push	r9
    13e0:	af 92       	push	r10
    13e2:	bf 92       	push	r11
    13e4:	cf 92       	push	r12
    13e6:	df 92       	push	r13
    13e8:	ef 92       	push	r14
    13ea:	ff 92       	push	r15
    13ec:	0f 93       	push	r16
    13ee:	1f 93       	push	r17
    13f0:	cf 93       	push	r28
    13f2:	df 93       	push	r29
    13f4:	cd b7       	in	r28, 0x3d	; 61
    13f6:	de b7       	in	r29, 0x3e	; 62
    13f8:	ca 1b       	sub	r28, r26
    13fa:	db 0b       	sbc	r29, r27
    13fc:	cd bf       	out	0x3d, r28	; 61
    13fe:	de bf       	out	0x3e, r29	; 62
    1400:	09 94       	ijmp

00001402 <__epilogue_restores__>:
    1402:	2a 88       	ldd	r2, Y+18	; 0x12
    1404:	39 88       	ldd	r3, Y+17	; 0x11
    1406:	48 88       	ldd	r4, Y+16	; 0x10
    1408:	5f 84       	ldd	r5, Y+15	; 0x0f
    140a:	6e 84       	ldd	r6, Y+14	; 0x0e
    140c:	7d 84       	ldd	r7, Y+13	; 0x0d
    140e:	8c 84       	ldd	r8, Y+12	; 0x0c
    1410:	9b 84       	ldd	r9, Y+11	; 0x0b
    1412:	aa 84       	ldd	r10, Y+10	; 0x0a
    1414:	b9 84       	ldd	r11, Y+9	; 0x09
    1416:	c8 84       	ldd	r12, Y+8	; 0x08
    1418:	df 80       	ldd	r13, Y+7	; 0x07
    141a:	ee 80       	ldd	r14, Y+6	; 0x06
    141c:	fd 80       	ldd	r15, Y+5	; 0x05
    141e:	0c 81       	ldd	r16, Y+4	; 0x04
    1420:	1b 81       	ldd	r17, Y+3	; 0x03
    1422:	aa 81       	ldd	r26, Y+2	; 0x02
    1424:	b9 81       	ldd	r27, Y+1	; 0x01
    1426:	ce 0f       	add	r28, r30
    1428:	d1 1d       	adc	r29, r1
    142a:	cd bf       	out	0x3d, r28	; 61
    142c:	de bf       	out	0x3e, r29	; 62
    142e:	ed 01       	movw	r28, r26
    1430:	08 95       	ret

00001432 <_exit>:
    1432:	f8 94       	cli

00001434 <__stop_program>:
    1434:	ff cf       	rjmp	.-2      	; 0x1434 <__stop_program>
