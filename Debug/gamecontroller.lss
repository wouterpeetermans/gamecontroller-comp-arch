
gamecontroller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000788  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00802000  00000788  0000081c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  0080200e  0080200e  0000082a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000082a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000085c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000190  00000000  00000000  0000089c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000157e  00000000  00000000  00000a2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000793  00000000  00000000  00001faa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001919  00000000  00000000  0000273d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000384  00000000  00000000  00004058  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00011e28  00000000  00000000  000043dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000593  00000000  00000000  00016204  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  00016797  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000597a  00000000  00000000  00016897  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__ctors_end>
   4:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
   8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
   c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  10:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  14:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  18:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  1c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  20:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  24:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  28:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  2c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  30:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  34:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  38:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  3c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  40:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  44:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  48:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  4c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  50:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  54:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  58:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  5c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  60:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  64:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  68:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  6c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  70:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  74:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  78:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  7c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  80:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  84:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  88:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  8c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  90:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  94:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  98:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  9c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  a0:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  a4:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  a8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  ac:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  b0:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  b4:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  b8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  bc:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  c0:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  c4:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  c8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  cc:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  d0:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  d4:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  d8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  dc:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  e0:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  e4:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  e8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  ec:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  f0:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  f4:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  f8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  fc:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 100:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 104:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 108:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 10c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 110:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 114:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 118:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 11c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 120:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 124:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 128:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 12c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 130:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 134:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 138:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 13c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 140:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 144:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 148:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 14c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 150:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 154:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 158:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 15c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 160:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 164:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 168:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>

0000016c <__ctors_end>:
 16c:	11 24       	eor	r1, r1
 16e:	1f be       	out	0x3f, r1	; 63
 170:	cf ef       	ldi	r28, 0xFF	; 255
 172:	cd bf       	out	0x3d, r28	; 61
 174:	d7 e2       	ldi	r29, 0x27	; 39
 176:	de bf       	out	0x3e, r29	; 62

00000178 <__do_copy_data>:
 178:	10 e2       	ldi	r17, 0x20	; 32
 17a:	a0 e0       	ldi	r26, 0x00	; 0
 17c:	b0 e2       	ldi	r27, 0x20	; 32
 17e:	e8 e8       	ldi	r30, 0x88	; 136
 180:	f7 e0       	ldi	r31, 0x07	; 7
 182:	02 c0       	rjmp	.+4      	; 0x188 <__do_copy_data+0x10>
 184:	05 90       	lpm	r0, Z+
 186:	0d 92       	st	X+, r0
 188:	ae 30       	cpi	r26, 0x0E	; 14
 18a:	b1 07       	cpc	r27, r17
 18c:	d9 f7       	brne	.-10     	; 0x184 <__do_copy_data+0xc>

0000018e <__do_clear_bss>:
 18e:	20 e2       	ldi	r18, 0x20	; 32
 190:	ae e0       	ldi	r26, 0x0E	; 14
 192:	b0 e2       	ldi	r27, 0x20	; 32
 194:	01 c0       	rjmp	.+2      	; 0x198 <.do_clear_bss_start>

00000196 <.do_clear_bss_loop>:
 196:	1d 92       	st	X+, r1

00000198 <.do_clear_bss_start>:
 198:	a4 31       	cpi	r26, 0x14	; 20
 19a:	b2 07       	cpc	r27, r18
 19c:	e1 f7       	brne	.-8      	; 0x196 <.do_clear_bss_loop>
 19e:	0e 94 02 01 	call	0x204	; 0x204 <main>
 1a2:	0c 94 c2 03 	jmp	0x784	; 0x784 <_exit>

000001a6 <__bad_interrupt>:
 1a6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001aa <AccInit>:
#include "acc.h"



void AccInit(void)
{
 1aa:	cf 93       	push	r28
 1ac:	df 93       	push	r29
 1ae:	cd b7       	in	r28, 0x3d	; 61
 1b0:	de b7       	in	r29, 0x3e	; 62

	
}
 1b2:	00 00       	nop
 1b4:	df 91       	pop	r29
 1b6:	cf 91       	pop	r28
 1b8:	08 95       	ret

000001ba <AnalogInit>:
#include "Analog.h"
#include <avr/io.h>


void AnalogInit(void)
{
 1ba:	cf 93       	push	r28
 1bc:	df 93       	push	r29
 1be:	cd b7       	in	r28, 0x3d	; 61
 1c0:	de b7       	in	r29, 0x3e	; 62
	ADCA.CTRLA=0b00000111;
 1c2:	80 e0       	ldi	r24, 0x00	; 0
 1c4:	92 e0       	ldi	r25, 0x02	; 2
 1c6:	27 e0       	ldi	r18, 0x07	; 7
 1c8:	fc 01       	movw	r30, r24
 1ca:	20 83       	st	Z, r18

}
 1cc:	00 00       	nop
 1ce:	df 91       	pop	r29
 1d0:	cf 91       	pop	r28
 1d2:	08 95       	ret

000001d4 <ClockInit>:
#pragma GCC push_options
#pragma GCC optimize ("O2") //This function must be optimized to avoid too long time interval betwee CCP write and CLK.CTRL write (4 CLK CYC max)

void ClockInit(void)
{
	OSC.XOSCCTRL=0b11001011; //Clock<=16MHz	
 1d4:	8b ec       	ldi	r24, 0xCB	; 203
 1d6:	80 93 52 00 	sts	0x0052, r24	; 0x800052 <__TEXT_REGION_LENGTH__+0x700052>
	OSC.CTRL=0b01000; //Enable oscillator	
 1da:	88 e0       	ldi	r24, 0x08	; 8
 1dc:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
	while (!(OSC.STATUS&0b1000)); //Wait until XTAL osc is ready
 1e0:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
 1e4:	83 ff       	sbrs	r24, 3
 1e6:	fc cf       	rjmp	.-8      	; 0x1e0 <ClockInit+0xc>
	
	//Select XTAL osc as system CLK source
	CCP=0xd8;
 1e8:	88 ed       	ldi	r24, 0xD8	; 216
 1ea:	84 bf       	out	0x34, r24	; 52
    CLK.CTRL=0b0011;
 1ec:	83 e0       	ldi	r24, 0x03	; 3
 1ee:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
 1f2:	08 95       	ret

000001f4 <EncoderInit>:
#include <util/delay.h>
#include <stdio.h>
#include "encoder.h"

void EncoderInit(void)
{
 1f4:	cf 93       	push	r28
 1f6:	df 93       	push	r29
 1f8:	cd b7       	in	r28, 0x3d	; 61
 1fa:	de b7       	in	r29, 0x3e	; 62

}
 1fc:	00 00       	nop
 1fe:	df 91       	pop	r29
 200:	cf 91       	pop	r28
 202:	08 95       	ret

00000204 <main>:
char a;

void SimpleFunction(void);	//A simple function: print a counter (0 to 9) to the terminal

int main(void)
{	
 204:	cf 93       	push	r28
 206:	df 93       	push	r29
 208:	cd b7       	in	r28, 0x3d	; 61
 20a:	de b7       	in	r29, 0x3e	; 62
 20c:	2e 97       	sbiw	r28, 0x0e	; 14
 20e:	cd bf       	out	0x3d, r28	; 61
 210:	de bf       	out	0x3e, r29	; 62
	//###1###
	 
	//Initialize subsystems
	ClockInit();			//Initialize system clock (16 MHz)
 212:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <ClockInit>
	USARTInit();			//Initialize USART and bind to stdout,stdin
 216:	0e 94 f6 01 	call	0x3ec	; 0x3ec <USARTInit>
	AnalogInit();			//Initialize ADC
 21a:	0e 94 dd 00 	call	0x1ba	; 0x1ba <AnalogInit>
	AccInit();				//Initialize accelerometer system
 21e:	0e 94 d5 00 	call	0x1aa	; 0x1aa <AccInit>
	LEDInit();				//Initialize LEDs
 222:	0e 94 a7 01 	call	0x34e	; 0x34e <LEDInit>
	SwitchInit();			//Initialize switches
 226:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <SwitchInit>
	EncoderInit();			//Initialize encoder
 22a:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <EncoderInit>
	SpeakerInit();			//Initialize speaker system
 22e:	0e 94 c8 01 	call	0x390	; 0x390 <SpeakerInit>
	
	//Enable interrupts
	PMIC.CTRL|=0b00000111;  //Enable low, medium, high priority interrupts
 232:	80 ea       	ldi	r24, 0xA0	; 160
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	20 ea       	ldi	r18, 0xA0	; 160
 238:	30 e0       	ldi	r19, 0x00	; 0
 23a:	f9 01       	movw	r30, r18
 23c:	22 81       	ldd	r18, Z+2	; 0x02
 23e:	27 60       	ori	r18, 0x07	; 7
 240:	fc 01       	movw	r30, r24
 242:	22 83       	std	Z+2, r18	; 0x02
	SREG|=0b10000000;		//Global interrupt enable
 244:	8f e3       	ldi	r24, 0x3F	; 63
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	2f e3       	ldi	r18, 0x3F	; 63
 24a:	30 e0       	ldi	r19, 0x00	; 0
 24c:	f9 01       	movw	r30, r18
 24e:	20 81       	ld	r18, Z
 250:	20 68       	ori	r18, 0x80	; 128
 252:	fc 01       	movw	r30, r24
 254:	20 83       	st	Z, r18
 256:	80 e0       	ldi	r24, 0x00	; 0
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	aa ef       	ldi	r26, 0xFA	; 250
 25c:	b3 e4       	ldi	r27, 0x43	; 67
 25e:	89 83       	std	Y+1, r24	; 0x01
 260:	9a 83       	std	Y+2, r25	; 0x02
 262:	ab 83       	std	Y+3, r26	; 0x03
 264:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 266:	20 e0       	ldi	r18, 0x00	; 0
 268:	30 e0       	ldi	r19, 0x00	; 0
 26a:	4a e7       	ldi	r20, 0x7A	; 122
 26c:	55 e4       	ldi	r21, 0x45	; 69
 26e:	69 81       	ldd	r22, Y+1	; 0x01
 270:	7a 81       	ldd	r23, Y+2	; 0x02
 272:	8b 81       	ldd	r24, Y+3	; 0x03
 274:	9c 81       	ldd	r25, Y+4	; 0x04
 276:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <__mulsf3>
 27a:	dc 01       	movw	r26, r24
 27c:	cb 01       	movw	r24, r22
 27e:	8d 83       	std	Y+5, r24	; 0x05
 280:	9e 83       	std	Y+6, r25	; 0x06
 282:	af 83       	std	Y+7, r26	; 0x07
 284:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
 286:	20 e0       	ldi	r18, 0x00	; 0
 288:	30 e0       	ldi	r19, 0x00	; 0
 28a:	40 e8       	ldi	r20, 0x80	; 128
 28c:	5f e3       	ldi	r21, 0x3F	; 63
 28e:	6d 81       	ldd	r22, Y+5	; 0x05
 290:	7e 81       	ldd	r23, Y+6	; 0x06
 292:	8f 81       	ldd	r24, Y+7	; 0x07
 294:	98 85       	ldd	r25, Y+8	; 0x08
 296:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <__cmpsf2>
 29a:	88 23       	and	r24, r24
 29c:	2c f4       	brge	.+10     	; 0x2a8 <main+0xa4>
		__ticks = 1;
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	89 87       	std	Y+9, r24	; 0x09
 2a4:	9a 87       	std	Y+10, r25	; 0x0a
 2a6:	3f c0       	rjmp	.+126    	; 0x326 <main+0x122>
	else if (__tmp > 65535)
 2a8:	20 e0       	ldi	r18, 0x00	; 0
 2aa:	3f ef       	ldi	r19, 0xFF	; 255
 2ac:	4f e7       	ldi	r20, 0x7F	; 127
 2ae:	57 e4       	ldi	r21, 0x47	; 71
 2b0:	6d 81       	ldd	r22, Y+5	; 0x05
 2b2:	7e 81       	ldd	r23, Y+6	; 0x06
 2b4:	8f 81       	ldd	r24, Y+7	; 0x07
 2b6:	98 85       	ldd	r25, Y+8	; 0x08
 2b8:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <__gesf2>
 2bc:	18 16       	cp	r1, r24
 2be:	4c f5       	brge	.+82     	; 0x312 <main+0x10e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 2c0:	20 e0       	ldi	r18, 0x00	; 0
 2c2:	30 e0       	ldi	r19, 0x00	; 0
 2c4:	40 e2       	ldi	r20, 0x20	; 32
 2c6:	51 e4       	ldi	r21, 0x41	; 65
 2c8:	69 81       	ldd	r22, Y+1	; 0x01
 2ca:	7a 81       	ldd	r23, Y+2	; 0x02
 2cc:	8b 81       	ldd	r24, Y+3	; 0x03
 2ce:	9c 81       	ldd	r25, Y+4	; 0x04
 2d0:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <__mulsf3>
 2d4:	dc 01       	movw	r26, r24
 2d6:	cb 01       	movw	r24, r22
 2d8:	bc 01       	movw	r22, r24
 2da:	cd 01       	movw	r24, r26
 2dc:	0e 94 70 02 	call	0x4e0	; 0x4e0 <__fixunssfsi>
 2e0:	dc 01       	movw	r26, r24
 2e2:	cb 01       	movw	r24, r22
 2e4:	89 87       	std	Y+9, r24	; 0x09
 2e6:	9a 87       	std	Y+10, r25	; 0x0a
 2e8:	0f c0       	rjmp	.+30     	; 0x308 <main+0x104>
 2ea:	80 e9       	ldi	r24, 0x90	; 144
 2ec:	91 e0       	ldi	r25, 0x01	; 1
 2ee:	8b 87       	std	Y+11, r24	; 0x0b
 2f0:	9c 87       	std	Y+12, r25	; 0x0c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 2f2:	8b 85       	ldd	r24, Y+11	; 0x0b
 2f4:	9c 85       	ldd	r25, Y+12	; 0x0c
 2f6:	01 97       	sbiw	r24, 0x01	; 1
 2f8:	f1 f7       	brne	.-4      	; 0x2f6 <main+0xf2>
 2fa:	8b 87       	std	Y+11, r24	; 0x0b
 2fc:	9c 87       	std	Y+12, r25	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2fe:	89 85       	ldd	r24, Y+9	; 0x09
 300:	9a 85       	ldd	r25, Y+10	; 0x0a
 302:	01 97       	sbiw	r24, 0x01	; 1
 304:	89 87       	std	Y+9, r24	; 0x09
 306:	9a 87       	std	Y+10, r25	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 308:	89 85       	ldd	r24, Y+9	; 0x09
 30a:	9a 85       	ldd	r25, Y+10	; 0x0a
 30c:	89 2b       	or	r24, r25
 30e:	69 f7       	brne	.-38     	; 0x2ea <main+0xe6>
 310:	14 c0       	rjmp	.+40     	; 0x33a <main+0x136>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 312:	6d 81       	ldd	r22, Y+5	; 0x05
 314:	7e 81       	ldd	r23, Y+6	; 0x06
 316:	8f 81       	ldd	r24, Y+7	; 0x07
 318:	98 85       	ldd	r25, Y+8	; 0x08
 31a:	0e 94 70 02 	call	0x4e0	; 0x4e0 <__fixunssfsi>
 31e:	dc 01       	movw	r26, r24
 320:	cb 01       	movw	r24, r22
 322:	89 87       	std	Y+9, r24	; 0x09
 324:	9a 87       	std	Y+10, r25	; 0x0a
 326:	89 85       	ldd	r24, Y+9	; 0x09
 328:	9a 85       	ldd	r25, Y+10	; 0x0a
 32a:	8d 87       	std	Y+13, r24	; 0x0d
 32c:	9e 87       	std	Y+14, r25	; 0x0e
 32e:	8d 85       	ldd	r24, Y+13	; 0x0d
 330:	9e 85       	ldd	r25, Y+14	; 0x0e
 332:	01 97       	sbiw	r24, 0x01	; 1
 334:	f1 f7       	brne	.-4      	; 0x332 <main+0x12e>
 336:	8d 87       	std	Y+13, r24	; 0x0d
 338:	9e 87       	std	Y+14, r25	; 0x0e
	_delay_ms(500);
	
	
	
	while (1){
		putchar('U');
 33a:	80 91 10 20 	lds	r24, 0x2010	; 0x802010 <__data_end+0x2>
 33e:	90 91 11 20 	lds	r25, 0x2011	; 0x802011 <__data_end+0x3>
 342:	bc 01       	movw	r22, r24
 344:	85 e5       	ldi	r24, 0x55	; 85
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	0e 94 86 03 	call	0x70c	; 0x70c <fputc>
	}
 34c:	f6 cf       	rjmp	.-20     	; 0x33a <main+0x136>

0000034e <LEDInit>:
#include "LED.h"
#include <avr/io.h>

void LEDInit(void)
{
 34e:	cf 93       	push	r28
 350:	df 93       	push	r29
 352:	cd b7       	in	r28, 0x3d	; 61
 354:	de b7       	in	r29, 0x3e	; 62
	PORTE.DIRSET=0b00001111;
 356:	80 e8       	ldi	r24, 0x80	; 128
 358:	96 e0       	ldi	r25, 0x06	; 6
 35a:	2f e0       	ldi	r18, 0x0F	; 15
 35c:	fc 01       	movw	r30, r24
 35e:	21 83       	std	Z+1, r18	; 0x01
	PORTE.PIN0CTRL=0b01000000;
 360:	80 e8       	ldi	r24, 0x80	; 128
 362:	96 e0       	ldi	r25, 0x06	; 6
 364:	20 e4       	ldi	r18, 0x40	; 64
 366:	fc 01       	movw	r30, r24
 368:	20 8b       	std	Z+16, r18	; 0x10
	PORTE.PIN1CTRL=0b01000000;
 36a:	80 e8       	ldi	r24, 0x80	; 128
 36c:	96 e0       	ldi	r25, 0x06	; 6
 36e:	20 e4       	ldi	r18, 0x40	; 64
 370:	fc 01       	movw	r30, r24
 372:	21 8b       	std	Z+17, r18	; 0x11
	PORTE.PIN2CTRL=0b01000000;
 374:	80 e8       	ldi	r24, 0x80	; 128
 376:	96 e0       	ldi	r25, 0x06	; 6
 378:	20 e4       	ldi	r18, 0x40	; 64
 37a:	fc 01       	movw	r30, r24
 37c:	22 8b       	std	Z+18, r18	; 0x12
	PORTE.PIN3CTRL=0b01000000;
 37e:	80 e8       	ldi	r24, 0x80	; 128
 380:	96 e0       	ldi	r25, 0x06	; 6
 382:	20 e4       	ldi	r18, 0x40	; 64
 384:	fc 01       	movw	r30, r24
 386:	23 8b       	std	Z+19, r18	; 0x13
	
}
 388:	00 00       	nop
 38a:	df 91       	pop	r29
 38c:	cf 91       	pop	r28
 38e:	08 95       	ret

00000390 <SpeakerInit>:
#include <avr/io.h>
#include <avr/interrupt.h>
#include "speaker.h"

void SpeakerInit(void)
{
 390:	cf 93       	push	r28
 392:	df 93       	push	r29
 394:	cd b7       	in	r28, 0x3d	; 61
 396:	de b7       	in	r29, 0x3e	; 62
		//TCC1.CTRLB=
		//TCC1.CTRLC=
		//TCC1.CTRLD=
		//TCC1.CTRLE=
		
}
 398:	00 00       	nop
 39a:	df 91       	pop	r29
 39c:	cf 91       	pop	r28
 39e:	08 95       	ret

000003a0 <SwitchInit>:
#include "switch.h"
#include <avr/io.h>

void SwitchInit(void)
{
 3a0:	cf 93       	push	r28
 3a2:	df 93       	push	r29
 3a4:	cd b7       	in	r28, 0x3d	; 61
 3a6:	de b7       	in	r29, 0x3e	; 62
	PORTD.DIRCLR=0b11110001;
 3a8:	80 e6       	ldi	r24, 0x60	; 96
 3aa:	96 e0       	ldi	r25, 0x06	; 6
 3ac:	21 ef       	ldi	r18, 0xF1	; 241
 3ae:	fc 01       	movw	r30, r24
 3b0:	22 83       	std	Z+2, r18	; 0x02
	PORTD.PIN0CTRL=0b01011000;
 3b2:	80 e6       	ldi	r24, 0x60	; 96
 3b4:	96 e0       	ldi	r25, 0x06	; 6
 3b6:	28 e5       	ldi	r18, 0x58	; 88
 3b8:	fc 01       	movw	r30, r24
 3ba:	20 8b       	std	Z+16, r18	; 0x10
	PORTD.PIN4CTRL=0b01011000;
 3bc:	80 e6       	ldi	r24, 0x60	; 96
 3be:	96 e0       	ldi	r25, 0x06	; 6
 3c0:	28 e5       	ldi	r18, 0x58	; 88
 3c2:	fc 01       	movw	r30, r24
 3c4:	24 8b       	std	Z+20, r18	; 0x14
	PORTD.PIN5CTRL=0b01011000;
 3c6:	80 e6       	ldi	r24, 0x60	; 96
 3c8:	96 e0       	ldi	r25, 0x06	; 6
 3ca:	28 e5       	ldi	r18, 0x58	; 88
 3cc:	fc 01       	movw	r30, r24
 3ce:	25 8b       	std	Z+21, r18	; 0x15
	PORTD.PIN6CTRL=0b01011000;
 3d0:	80 e6       	ldi	r24, 0x60	; 96
 3d2:	96 e0       	ldi	r25, 0x06	; 6
 3d4:	28 e5       	ldi	r18, 0x58	; 88
 3d6:	fc 01       	movw	r30, r24
 3d8:	26 8b       	std	Z+22, r18	; 0x16
	PORTD.PIN7CTRL=0b01011000;
 3da:	80 e6       	ldi	r24, 0x60	; 96
 3dc:	96 e0       	ldi	r25, 0x06	; 6
 3de:	28 e5       	ldi	r18, 0x58	; 88
 3e0:	fc 01       	movw	r30, r24
 3e2:	27 8b       	std	Z+23, r18	; 0x17
}
 3e4:	00 00       	nop
 3e6:	df 91       	pop	r29
 3e8:	cf 91       	pop	r28
 3ea:	08 95       	ret

000003ec <USARTInit>:
 int stdio_putchar(char c, FILE * stream);
 int stdio_getchar(FILE *stream);
static FILE UsartStdio = FDEV_SETUP_STREAM(stdio_putchar, stdio_getchar,_FDEV_SETUP_WRITE);

void USARTInit(void)
{
 3ec:	cf 93       	push	r28
 3ee:	df 93       	push	r29
 3f0:	cd b7       	in	r28, 0x3d	; 61
 3f2:	de b7       	in	r29, 0x3e	; 62
	USART_PORT.DIRSET=0b00001000;	
 3f4:	80 e4       	ldi	r24, 0x40	; 64
 3f6:	96 e0       	ldi	r25, 0x06	; 6
 3f8:	28 e0       	ldi	r18, 0x08	; 8
 3fa:	fc 01       	movw	r30, r24
 3fc:	21 83       	std	Z+1, r18	; 0x01
	USART_PORT.DIRCLR=0b00000100;
 3fe:	80 e4       	ldi	r24, 0x40	; 64
 400:	96 e0       	ldi	r25, 0x06	; 6
 402:	24 e0       	ldi	r18, 0x04	; 4
 404:	fc 01       	movw	r30, r24
 406:	22 83       	std	Z+2, r18	; 0x02
	
	USART.CTRLA=0b00000000;
 408:	80 ea       	ldi	r24, 0xA0	; 160
 40a:	98 e0       	ldi	r25, 0x08	; 8
 40c:	fc 01       	movw	r30, r24
 40e:	13 82       	std	Z+3, r1	; 0x03
	USART.CTRLB=0b00011000;
 410:	80 ea       	ldi	r24, 0xA0	; 160
 412:	98 e0       	ldi	r25, 0x08	; 8
 414:	28 e1       	ldi	r18, 0x18	; 24
 416:	fc 01       	movw	r30, r24
 418:	24 83       	std	Z+4, r18	; 0x04
	USART.CTRLC=0b00000011;
 41a:	80 ea       	ldi	r24, 0xA0	; 160
 41c:	98 e0       	ldi	r25, 0x08	; 8
 41e:	23 e0       	ldi	r18, 0x03	; 3
 420:	fc 01       	movw	r30, r24
 422:	25 83       	std	Z+5, r18	; 0x05
	
	USART.BAUDCTRLA=0xD7; //BSEL=3301, BSCALE=-5 9600 baud
 424:	80 ea       	ldi	r24, 0xA0	; 160
 426:	98 e0       	ldi	r25, 0x08	; 8
 428:	27 ed       	ldi	r18, 0xD7	; 215
 42a:	fc 01       	movw	r30, r24
 42c:	26 83       	std	Z+6, r18	; 0x06
	USART.BAUDCTRLB=0x93; 
 42e:	80 ea       	ldi	r24, 0xA0	; 160
 430:	98 e0       	ldi	r25, 0x08	; 8
 432:	23 e9       	ldi	r18, 0x93	; 147
 434:	fc 01       	movw	r30, r24
 436:	27 83       	std	Z+7, r18	; 0x07
	
	stdout=&UsartStdio;
 438:	80 e0       	ldi	r24, 0x00	; 0
 43a:	90 e2       	ldi	r25, 0x20	; 32
 43c:	80 93 10 20 	sts	0x2010, r24	; 0x802010 <__data_end+0x2>
 440:	90 93 11 20 	sts	0x2011, r25	; 0x802011 <__data_end+0x3>
	stdin=&UsartStdio;
 444:	80 e0       	ldi	r24, 0x00	; 0
 446:	90 e2       	ldi	r25, 0x20	; 32
 448:	80 93 0e 20 	sts	0x200E, r24	; 0x80200e <__data_end>
 44c:	90 93 0f 20 	sts	0x200F, r25	; 0x80200f <__data_end+0x1>
}
 450:	00 00       	nop
 452:	df 91       	pop	r29
 454:	cf 91       	pop	r28
 456:	08 95       	ret

00000458 <stdio_putchar>:


int stdio_putchar(char c, FILE * stream)
{
 458:	cf 93       	push	r28
 45a:	df 93       	push	r29
 45c:	00 d0       	rcall	.+0      	; 0x45e <stdio_putchar+0x6>
 45e:	1f 92       	push	r1
 460:	cd b7       	in	r28, 0x3d	; 61
 462:	de b7       	in	r29, 0x3e	; 62
 464:	89 83       	std	Y+1, r24	; 0x01
 466:	6a 83       	std	Y+2, r22	; 0x02
 468:	7b 83       	std	Y+3, r23	; 0x03
	USART.DATA = c;
 46a:	80 ea       	ldi	r24, 0xA0	; 160
 46c:	98 e0       	ldi	r25, 0x08	; 8
 46e:	29 81       	ldd	r18, Y+1	; 0x01
 470:	fc 01       	movw	r30, r24
 472:	20 83       	st	Z, r18
	while (!(USART.STATUS & 0b01000000));
 474:	00 00       	nop
 476:	80 ea       	ldi	r24, 0xA0	; 160
 478:	98 e0       	ldi	r25, 0x08	; 8
 47a:	fc 01       	movw	r30, r24
 47c:	81 81       	ldd	r24, Z+1	; 0x01
 47e:	88 2f       	mov	r24, r24
 480:	90 e0       	ldi	r25, 0x00	; 0
 482:	80 74       	andi	r24, 0x40	; 64
 484:	99 27       	eor	r25, r25
 486:	89 2b       	or	r24, r25
 488:	b1 f3       	breq	.-20     	; 0x476 <stdio_putchar+0x1e>
	USART.STATUS=0b01000000;
 48a:	80 ea       	ldi	r24, 0xA0	; 160
 48c:	98 e0       	ldi	r25, 0x08	; 8
 48e:	20 e4       	ldi	r18, 0x40	; 64
 490:	fc 01       	movw	r30, r24
 492:	21 83       	std	Z+1, r18	; 0x01
	return 0;
 494:	80 e0       	ldi	r24, 0x00	; 0
 496:	90 e0       	ldi	r25, 0x00	; 0
}
 498:	23 96       	adiw	r28, 0x03	; 3
 49a:	cd bf       	out	0x3d, r28	; 61
 49c:	de bf       	out	0x3e, r29	; 62
 49e:	df 91       	pop	r29
 4a0:	cf 91       	pop	r28
 4a2:	08 95       	ret

000004a4 <stdio_getchar>:
	
int stdio_getchar(FILE *stream)
{
 4a4:	cf 93       	push	r28
 4a6:	df 93       	push	r29
 4a8:	00 d0       	rcall	.+0      	; 0x4aa <stdio_getchar+0x6>
 4aa:	cd b7       	in	r28, 0x3d	; 61
 4ac:	de b7       	in	r29, 0x3e	; 62
 4ae:	89 83       	std	Y+1, r24	; 0x01
 4b0:	9a 83       	std	Y+2, r25	; 0x02
	while (!(USART.STATUS & 0b10000000));
 4b2:	00 00       	nop
 4b4:	80 ea       	ldi	r24, 0xA0	; 160
 4b6:	98 e0       	ldi	r25, 0x08	; 8
 4b8:	fc 01       	movw	r30, r24
 4ba:	81 81       	ldd	r24, Z+1	; 0x01
 4bc:	88 23       	and	r24, r24
 4be:	d4 f7       	brge	.-12     	; 0x4b4 <stdio_getchar+0x10>
	return USART.DATA;
 4c0:	80 ea       	ldi	r24, 0xA0	; 160
 4c2:	98 e0       	ldi	r25, 0x08	; 8
 4c4:	fc 01       	movw	r30, r24
 4c6:	80 81       	ld	r24, Z
 4c8:	88 2f       	mov	r24, r24
 4ca:	90 e0       	ldi	r25, 0x00	; 0
}
 4cc:	0f 90       	pop	r0
 4ce:	0f 90       	pop	r0
 4d0:	df 91       	pop	r29
 4d2:	cf 91       	pop	r28
 4d4:	08 95       	ret

000004d6 <__cmpsf2>:
 4d6:	0e 94 9f 02 	call	0x53e	; 0x53e <__fp_cmp>
 4da:	08 f4       	brcc	.+2      	; 0x4de <__cmpsf2+0x8>
 4dc:	81 e0       	ldi	r24, 0x01	; 1
 4de:	08 95       	ret

000004e0 <__fixunssfsi>:
 4e0:	0e 94 cb 02 	call	0x596	; 0x596 <__fp_splitA>
 4e4:	88 f0       	brcs	.+34     	; 0x508 <__fixunssfsi+0x28>
 4e6:	9f 57       	subi	r25, 0x7F	; 127
 4e8:	98 f0       	brcs	.+38     	; 0x510 <__fixunssfsi+0x30>
 4ea:	b9 2f       	mov	r27, r25
 4ec:	99 27       	eor	r25, r25
 4ee:	b7 51       	subi	r27, 0x17	; 23
 4f0:	b0 f0       	brcs	.+44     	; 0x51e <__fixunssfsi+0x3e>
 4f2:	e1 f0       	breq	.+56     	; 0x52c <__fixunssfsi+0x4c>
 4f4:	66 0f       	add	r22, r22
 4f6:	77 1f       	adc	r23, r23
 4f8:	88 1f       	adc	r24, r24
 4fa:	99 1f       	adc	r25, r25
 4fc:	1a f0       	brmi	.+6      	; 0x504 <__fixunssfsi+0x24>
 4fe:	ba 95       	dec	r27
 500:	c9 f7       	brne	.-14     	; 0x4f4 <__fixunssfsi+0x14>
 502:	14 c0       	rjmp	.+40     	; 0x52c <__fixunssfsi+0x4c>
 504:	b1 30       	cpi	r27, 0x01	; 1
 506:	91 f0       	breq	.+36     	; 0x52c <__fixunssfsi+0x4c>
 508:	0e 94 e5 02 	call	0x5ca	; 0x5ca <__fp_zero>
 50c:	b1 e0       	ldi	r27, 0x01	; 1
 50e:	08 95       	ret
 510:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <__fp_zero>
 514:	67 2f       	mov	r22, r23
 516:	78 2f       	mov	r23, r24
 518:	88 27       	eor	r24, r24
 51a:	b8 5f       	subi	r27, 0xF8	; 248
 51c:	39 f0       	breq	.+14     	; 0x52c <__fixunssfsi+0x4c>
 51e:	b9 3f       	cpi	r27, 0xF9	; 249
 520:	cc f3       	brlt	.-14     	; 0x514 <__fixunssfsi+0x34>
 522:	86 95       	lsr	r24
 524:	77 95       	ror	r23
 526:	67 95       	ror	r22
 528:	b3 95       	inc	r27
 52a:	d9 f7       	brne	.-10     	; 0x522 <__fixunssfsi+0x42>
 52c:	3e f4       	brtc	.+14     	; 0x53c <__fixunssfsi+0x5c>
 52e:	90 95       	com	r25
 530:	80 95       	com	r24
 532:	70 95       	com	r23
 534:	61 95       	neg	r22
 536:	7f 4f       	sbci	r23, 0xFF	; 255
 538:	8f 4f       	sbci	r24, 0xFF	; 255
 53a:	9f 4f       	sbci	r25, 0xFF	; 255
 53c:	08 95       	ret

0000053e <__fp_cmp>:
 53e:	99 0f       	add	r25, r25
 540:	00 08       	sbc	r0, r0
 542:	55 0f       	add	r21, r21
 544:	aa 0b       	sbc	r26, r26
 546:	e0 e8       	ldi	r30, 0x80	; 128
 548:	fe ef       	ldi	r31, 0xFE	; 254
 54a:	16 16       	cp	r1, r22
 54c:	17 06       	cpc	r1, r23
 54e:	e8 07       	cpc	r30, r24
 550:	f9 07       	cpc	r31, r25
 552:	c0 f0       	brcs	.+48     	; 0x584 <__fp_cmp+0x46>
 554:	12 16       	cp	r1, r18
 556:	13 06       	cpc	r1, r19
 558:	e4 07       	cpc	r30, r20
 55a:	f5 07       	cpc	r31, r21
 55c:	98 f0       	brcs	.+38     	; 0x584 <__fp_cmp+0x46>
 55e:	62 1b       	sub	r22, r18
 560:	73 0b       	sbc	r23, r19
 562:	84 0b       	sbc	r24, r20
 564:	95 0b       	sbc	r25, r21
 566:	39 f4       	brne	.+14     	; 0x576 <__fp_cmp+0x38>
 568:	0a 26       	eor	r0, r26
 56a:	61 f0       	breq	.+24     	; 0x584 <__fp_cmp+0x46>
 56c:	23 2b       	or	r18, r19
 56e:	24 2b       	or	r18, r20
 570:	25 2b       	or	r18, r21
 572:	21 f4       	brne	.+8      	; 0x57c <__fp_cmp+0x3e>
 574:	08 95       	ret
 576:	0a 26       	eor	r0, r26
 578:	09 f4       	brne	.+2      	; 0x57c <__fp_cmp+0x3e>
 57a:	a1 40       	sbci	r26, 0x01	; 1
 57c:	a6 95       	lsr	r26
 57e:	8f ef       	ldi	r24, 0xFF	; 255
 580:	81 1d       	adc	r24, r1
 582:	81 1d       	adc	r24, r1
 584:	08 95       	ret

00000586 <__fp_split3>:
 586:	57 fd       	sbrc	r21, 7
 588:	90 58       	subi	r25, 0x80	; 128
 58a:	44 0f       	add	r20, r20
 58c:	55 1f       	adc	r21, r21
 58e:	59 f0       	breq	.+22     	; 0x5a6 <__fp_splitA+0x10>
 590:	5f 3f       	cpi	r21, 0xFF	; 255
 592:	71 f0       	breq	.+28     	; 0x5b0 <__fp_splitA+0x1a>
 594:	47 95       	ror	r20

00000596 <__fp_splitA>:
 596:	88 0f       	add	r24, r24
 598:	97 fb       	bst	r25, 7
 59a:	99 1f       	adc	r25, r25
 59c:	61 f0       	breq	.+24     	; 0x5b6 <__fp_splitA+0x20>
 59e:	9f 3f       	cpi	r25, 0xFF	; 255
 5a0:	79 f0       	breq	.+30     	; 0x5c0 <__fp_splitA+0x2a>
 5a2:	87 95       	ror	r24
 5a4:	08 95       	ret
 5a6:	12 16       	cp	r1, r18
 5a8:	13 06       	cpc	r1, r19
 5aa:	14 06       	cpc	r1, r20
 5ac:	55 1f       	adc	r21, r21
 5ae:	f2 cf       	rjmp	.-28     	; 0x594 <__fp_split3+0xe>
 5b0:	46 95       	lsr	r20
 5b2:	f1 df       	rcall	.-30     	; 0x596 <__fp_splitA>
 5b4:	08 c0       	rjmp	.+16     	; 0x5c6 <__fp_splitA+0x30>
 5b6:	16 16       	cp	r1, r22
 5b8:	17 06       	cpc	r1, r23
 5ba:	18 06       	cpc	r1, r24
 5bc:	99 1f       	adc	r25, r25
 5be:	f1 cf       	rjmp	.-30     	; 0x5a2 <__fp_splitA+0xc>
 5c0:	86 95       	lsr	r24
 5c2:	71 05       	cpc	r23, r1
 5c4:	61 05       	cpc	r22, r1
 5c6:	08 94       	sec
 5c8:	08 95       	ret

000005ca <__fp_zero>:
 5ca:	e8 94       	clt

000005cc <__fp_szero>:
 5cc:	bb 27       	eor	r27, r27
 5ce:	66 27       	eor	r22, r22
 5d0:	77 27       	eor	r23, r23
 5d2:	cb 01       	movw	r24, r22
 5d4:	97 f9       	bld	r25, 7
 5d6:	08 95       	ret

000005d8 <__gesf2>:
 5d8:	0e 94 9f 02 	call	0x53e	; 0x53e <__fp_cmp>
 5dc:	08 f4       	brcc	.+2      	; 0x5e0 <__gesf2+0x8>
 5de:	8f ef       	ldi	r24, 0xFF	; 255
 5e0:	08 95       	ret

000005e2 <__mulsf3>:
 5e2:	0e 94 04 03 	call	0x608	; 0x608 <__mulsf3x>
 5e6:	0c 94 75 03 	jmp	0x6ea	; 0x6ea <__fp_round>
 5ea:	0e 94 67 03 	call	0x6ce	; 0x6ce <__fp_pscA>
 5ee:	38 f0       	brcs	.+14     	; 0x5fe <__mulsf3+0x1c>
 5f0:	0e 94 6e 03 	call	0x6dc	; 0x6dc <__fp_pscB>
 5f4:	20 f0       	brcs	.+8      	; 0x5fe <__mulsf3+0x1c>
 5f6:	95 23       	and	r25, r21
 5f8:	11 f0       	breq	.+4      	; 0x5fe <__mulsf3+0x1c>
 5fa:	0c 94 5e 03 	jmp	0x6bc	; 0x6bc <__fp_inf>
 5fe:	0c 94 64 03 	jmp	0x6c8	; 0x6c8 <__fp_nan>
 602:	11 24       	eor	r1, r1
 604:	0c 94 e6 02 	jmp	0x5cc	; 0x5cc <__fp_szero>

00000608 <__mulsf3x>:
 608:	0e 94 c3 02 	call	0x586	; 0x586 <__fp_split3>
 60c:	70 f3       	brcs	.-36     	; 0x5ea <__mulsf3+0x8>

0000060e <__mulsf3_pse>:
 60e:	95 9f       	mul	r25, r21
 610:	c1 f3       	breq	.-16     	; 0x602 <__mulsf3+0x20>
 612:	95 0f       	add	r25, r21
 614:	50 e0       	ldi	r21, 0x00	; 0
 616:	55 1f       	adc	r21, r21
 618:	62 9f       	mul	r22, r18
 61a:	f0 01       	movw	r30, r0
 61c:	72 9f       	mul	r23, r18
 61e:	bb 27       	eor	r27, r27
 620:	f0 0d       	add	r31, r0
 622:	b1 1d       	adc	r27, r1
 624:	63 9f       	mul	r22, r19
 626:	aa 27       	eor	r26, r26
 628:	f0 0d       	add	r31, r0
 62a:	b1 1d       	adc	r27, r1
 62c:	aa 1f       	adc	r26, r26
 62e:	64 9f       	mul	r22, r20
 630:	66 27       	eor	r22, r22
 632:	b0 0d       	add	r27, r0
 634:	a1 1d       	adc	r26, r1
 636:	66 1f       	adc	r22, r22
 638:	82 9f       	mul	r24, r18
 63a:	22 27       	eor	r18, r18
 63c:	b0 0d       	add	r27, r0
 63e:	a1 1d       	adc	r26, r1
 640:	62 1f       	adc	r22, r18
 642:	73 9f       	mul	r23, r19
 644:	b0 0d       	add	r27, r0
 646:	a1 1d       	adc	r26, r1
 648:	62 1f       	adc	r22, r18
 64a:	83 9f       	mul	r24, r19
 64c:	a0 0d       	add	r26, r0
 64e:	61 1d       	adc	r22, r1
 650:	22 1f       	adc	r18, r18
 652:	74 9f       	mul	r23, r20
 654:	33 27       	eor	r19, r19
 656:	a0 0d       	add	r26, r0
 658:	61 1d       	adc	r22, r1
 65a:	23 1f       	adc	r18, r19
 65c:	84 9f       	mul	r24, r20
 65e:	60 0d       	add	r22, r0
 660:	21 1d       	adc	r18, r1
 662:	82 2f       	mov	r24, r18
 664:	76 2f       	mov	r23, r22
 666:	6a 2f       	mov	r22, r26
 668:	11 24       	eor	r1, r1
 66a:	9f 57       	subi	r25, 0x7F	; 127
 66c:	50 40       	sbci	r21, 0x00	; 0
 66e:	9a f0       	brmi	.+38     	; 0x696 <__mulsf3_pse+0x88>
 670:	f1 f0       	breq	.+60     	; 0x6ae <__mulsf3_pse+0xa0>
 672:	88 23       	and	r24, r24
 674:	4a f0       	brmi	.+18     	; 0x688 <__mulsf3_pse+0x7a>
 676:	ee 0f       	add	r30, r30
 678:	ff 1f       	adc	r31, r31
 67a:	bb 1f       	adc	r27, r27
 67c:	66 1f       	adc	r22, r22
 67e:	77 1f       	adc	r23, r23
 680:	88 1f       	adc	r24, r24
 682:	91 50       	subi	r25, 0x01	; 1
 684:	50 40       	sbci	r21, 0x00	; 0
 686:	a9 f7       	brne	.-22     	; 0x672 <__mulsf3_pse+0x64>
 688:	9e 3f       	cpi	r25, 0xFE	; 254
 68a:	51 05       	cpc	r21, r1
 68c:	80 f0       	brcs	.+32     	; 0x6ae <__mulsf3_pse+0xa0>
 68e:	0c 94 5e 03 	jmp	0x6bc	; 0x6bc <__fp_inf>
 692:	0c 94 e6 02 	jmp	0x5cc	; 0x5cc <__fp_szero>
 696:	5f 3f       	cpi	r21, 0xFF	; 255
 698:	e4 f3       	brlt	.-8      	; 0x692 <__mulsf3_pse+0x84>
 69a:	98 3e       	cpi	r25, 0xE8	; 232
 69c:	d4 f3       	brlt	.-12     	; 0x692 <__mulsf3_pse+0x84>
 69e:	86 95       	lsr	r24
 6a0:	77 95       	ror	r23
 6a2:	67 95       	ror	r22
 6a4:	b7 95       	ror	r27
 6a6:	f7 95       	ror	r31
 6a8:	e7 95       	ror	r30
 6aa:	9f 5f       	subi	r25, 0xFF	; 255
 6ac:	c1 f7       	brne	.-16     	; 0x69e <__mulsf3_pse+0x90>
 6ae:	fe 2b       	or	r31, r30
 6b0:	88 0f       	add	r24, r24
 6b2:	91 1d       	adc	r25, r1
 6b4:	96 95       	lsr	r25
 6b6:	87 95       	ror	r24
 6b8:	97 f9       	bld	r25, 7
 6ba:	08 95       	ret

000006bc <__fp_inf>:
 6bc:	97 f9       	bld	r25, 7
 6be:	9f 67       	ori	r25, 0x7F	; 127
 6c0:	80 e8       	ldi	r24, 0x80	; 128
 6c2:	70 e0       	ldi	r23, 0x00	; 0
 6c4:	60 e0       	ldi	r22, 0x00	; 0
 6c6:	08 95       	ret

000006c8 <__fp_nan>:
 6c8:	9f ef       	ldi	r25, 0xFF	; 255
 6ca:	80 ec       	ldi	r24, 0xC0	; 192
 6cc:	08 95       	ret

000006ce <__fp_pscA>:
 6ce:	00 24       	eor	r0, r0
 6d0:	0a 94       	dec	r0
 6d2:	16 16       	cp	r1, r22
 6d4:	17 06       	cpc	r1, r23
 6d6:	18 06       	cpc	r1, r24
 6d8:	09 06       	cpc	r0, r25
 6da:	08 95       	ret

000006dc <__fp_pscB>:
 6dc:	00 24       	eor	r0, r0
 6de:	0a 94       	dec	r0
 6e0:	12 16       	cp	r1, r18
 6e2:	13 06       	cpc	r1, r19
 6e4:	14 06       	cpc	r1, r20
 6e6:	05 06       	cpc	r0, r21
 6e8:	08 95       	ret

000006ea <__fp_round>:
 6ea:	09 2e       	mov	r0, r25
 6ec:	03 94       	inc	r0
 6ee:	00 0c       	add	r0, r0
 6f0:	11 f4       	brne	.+4      	; 0x6f6 <__fp_round+0xc>
 6f2:	88 23       	and	r24, r24
 6f4:	52 f0       	brmi	.+20     	; 0x70a <__fp_round+0x20>
 6f6:	bb 0f       	add	r27, r27
 6f8:	40 f4       	brcc	.+16     	; 0x70a <__fp_round+0x20>
 6fa:	bf 2b       	or	r27, r31
 6fc:	11 f4       	brne	.+4      	; 0x702 <__fp_round+0x18>
 6fe:	60 ff       	sbrs	r22, 0
 700:	04 c0       	rjmp	.+8      	; 0x70a <__fp_round+0x20>
 702:	6f 5f       	subi	r22, 0xFF	; 255
 704:	7f 4f       	sbci	r23, 0xFF	; 255
 706:	8f 4f       	sbci	r24, 0xFF	; 255
 708:	9f 4f       	sbci	r25, 0xFF	; 255
 70a:	08 95       	ret

0000070c <fputc>:
 70c:	0f 93       	push	r16
 70e:	1f 93       	push	r17
 710:	cf 93       	push	r28
 712:	df 93       	push	r29
 714:	fb 01       	movw	r30, r22
 716:	23 81       	ldd	r18, Z+3	; 0x03
 718:	21 fd       	sbrc	r18, 1
 71a:	03 c0       	rjmp	.+6      	; 0x722 <fputc+0x16>
 71c:	8f ef       	ldi	r24, 0xFF	; 255
 71e:	9f ef       	ldi	r25, 0xFF	; 255
 720:	2c c0       	rjmp	.+88     	; 0x77a <fputc+0x6e>
 722:	22 ff       	sbrs	r18, 2
 724:	16 c0       	rjmp	.+44     	; 0x752 <fputc+0x46>
 726:	46 81       	ldd	r20, Z+6	; 0x06
 728:	57 81       	ldd	r21, Z+7	; 0x07
 72a:	24 81       	ldd	r18, Z+4	; 0x04
 72c:	35 81       	ldd	r19, Z+5	; 0x05
 72e:	42 17       	cp	r20, r18
 730:	53 07       	cpc	r21, r19
 732:	44 f4       	brge	.+16     	; 0x744 <fputc+0x38>
 734:	a0 81       	ld	r26, Z
 736:	b1 81       	ldd	r27, Z+1	; 0x01
 738:	9d 01       	movw	r18, r26
 73a:	2f 5f       	subi	r18, 0xFF	; 255
 73c:	3f 4f       	sbci	r19, 0xFF	; 255
 73e:	20 83       	st	Z, r18
 740:	31 83       	std	Z+1, r19	; 0x01
 742:	8c 93       	st	X, r24
 744:	26 81       	ldd	r18, Z+6	; 0x06
 746:	37 81       	ldd	r19, Z+7	; 0x07
 748:	2f 5f       	subi	r18, 0xFF	; 255
 74a:	3f 4f       	sbci	r19, 0xFF	; 255
 74c:	26 83       	std	Z+6, r18	; 0x06
 74e:	37 83       	std	Z+7, r19	; 0x07
 750:	14 c0       	rjmp	.+40     	; 0x77a <fputc+0x6e>
 752:	8b 01       	movw	r16, r22
 754:	ec 01       	movw	r28, r24
 756:	fb 01       	movw	r30, r22
 758:	00 84       	ldd	r0, Z+8	; 0x08
 75a:	f1 85       	ldd	r31, Z+9	; 0x09
 75c:	e0 2d       	mov	r30, r0
 75e:	09 95       	icall
 760:	89 2b       	or	r24, r25
 762:	e1 f6       	brne	.-72     	; 0x71c <fputc+0x10>
 764:	d8 01       	movw	r26, r16
 766:	16 96       	adiw	r26, 0x06	; 6
 768:	8d 91       	ld	r24, X+
 76a:	9c 91       	ld	r25, X
 76c:	17 97       	sbiw	r26, 0x07	; 7
 76e:	01 96       	adiw	r24, 0x01	; 1
 770:	16 96       	adiw	r26, 0x06	; 6
 772:	8d 93       	st	X+, r24
 774:	9c 93       	st	X, r25
 776:	17 97       	sbiw	r26, 0x07	; 7
 778:	ce 01       	movw	r24, r28
 77a:	df 91       	pop	r29
 77c:	cf 91       	pop	r28
 77e:	1f 91       	pop	r17
 780:	0f 91       	pop	r16
 782:	08 95       	ret

00000784 <_exit>:
 784:	f8 94       	cli

00000786 <__stop_program>:
 786:	ff cf       	rjmp	.-2      	; 0x786 <__stop_program>
