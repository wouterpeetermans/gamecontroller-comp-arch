
gamecontroller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000012f0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00802000  000012f0  00001384  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000006f  0080201c  0080201c  000013a0  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000013a0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000013fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b8  00000000  00000000  0000143c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000027e8  00000000  00000000  000015f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008e2  00000000  00000000  00003ddc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001c04  00000000  00000000  000046be  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004d8  00000000  00000000  000062c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00014db3  00000000  00000000  0000679c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008b3  00000000  00000000  0001b54f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  0001be02  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00005fd0  00000000  00000000  0001bf2a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__ctors_end>
       4:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
       8:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__vector_2>
       c:	0c 94 9b 01 	jmp	0x336	; 0x336 <__vector_3>
      10:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      14:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      18:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      1c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      20:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      24:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      28:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      2c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      30:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      34:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      38:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      3c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      40:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      44:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      48:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      4c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      50:	0c 94 3b 04 	jmp	0x876	; 0x876 <__vector_20>
      54:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      58:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      5c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      60:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      64:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      68:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      6c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      70:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      74:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      78:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      7c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      80:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      84:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      88:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      8c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      90:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      94:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      98:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      9c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      a0:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      a4:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      a8:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      ac:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      b0:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      b4:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      b8:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      bc:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      c0:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      c4:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      c8:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      cc:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      d0:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      d4:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      d8:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      dc:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      e0:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      e4:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      e8:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      ec:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      f0:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      f4:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      f8:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      fc:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     100:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     104:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     108:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     10c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     110:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     114:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     118:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     11c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     120:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     124:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     128:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     12c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     130:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     134:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     138:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     13c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     140:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     144:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     148:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     14c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     150:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     154:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     158:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     15c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     160:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     164:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     168:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     16c:	1e 02       	muls	r17, r30
     16e:	06 02       	muls	r16, r22
     170:	0c 02       	muls	r16, r28
     172:	12 02       	muls	r17, r18
     174:	0c 02       	muls	r16, r28
     176:	1e 02       	muls	r17, r30
     178:	18 02       	muls	r17, r24
     17a:	06 02       	muls	r16, r22
     17c:	06 02       	muls	r16, r22
     17e:	18 02       	muls	r17, r24
     180:	1e 02       	muls	r17, r30
     182:	0c 02       	muls	r16, r28
     184:	12 02       	muls	r17, r18
     186:	0c 02       	muls	r16, r28
     188:	06 02       	muls	r16, r22
     18a:	1e 02       	muls	r17, r30

0000018c <__ctors_end>:
     18c:	11 24       	eor	r1, r1
     18e:	1f be       	out	0x3f, r1	; 63
     190:	cf ef       	ldi	r28, 0xFF	; 255
     192:	cd bf       	out	0x3d, r28	; 61
     194:	d7 e2       	ldi	r29, 0x27	; 39
     196:	de bf       	out	0x3e, r29	; 62

00000198 <__do_copy_data>:
     198:	10 e2       	ldi	r17, 0x20	; 32
     19a:	a0 e0       	ldi	r26, 0x00	; 0
     19c:	b0 e2       	ldi	r27, 0x20	; 32
     19e:	e0 ef       	ldi	r30, 0xF0	; 240
     1a0:	f2 e1       	ldi	r31, 0x12	; 18
     1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <__do_copy_data+0x10>
     1a4:	05 90       	lpm	r0, Z+
     1a6:	0d 92       	st	X+, r0
     1a8:	ac 31       	cpi	r26, 0x1C	; 28
     1aa:	b1 07       	cpc	r27, r17
     1ac:	d9 f7       	brne	.-10     	; 0x1a4 <__do_copy_data+0xc>

000001ae <__do_clear_bss>:
     1ae:	20 e2       	ldi	r18, 0x20	; 32
     1b0:	ac e1       	ldi	r26, 0x1C	; 28
     1b2:	b0 e2       	ldi	r27, 0x20	; 32
     1b4:	01 c0       	rjmp	.+2      	; 0x1b8 <.do_clear_bss_start>

000001b6 <.do_clear_bss_loop>:
     1b6:	1d 92       	st	X+, r1

000001b8 <.do_clear_bss_start>:
     1b8:	ab 38       	cpi	r26, 0x8B	; 139
     1ba:	b2 07       	cpc	r27, r18
     1bc:	e1 f7       	brne	.-8      	; 0x1b6 <.do_clear_bss_loop>
     1be:	0e 94 2b 02 	call	0x456	; 0x456 <main>
     1c2:	0c 94 76 09 	jmp	0x12ec	; 0x12ec <_exit>

000001c6 <__bad_interrupt>:
     1c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001ca <AccInit>:
#include "acc.h"



void AccInit(void)
{
     1ca:	cf 93       	push	r28
     1cc:	df 93       	push	r29
     1ce:	cd b7       	in	r28, 0x3d	; 61
     1d0:	de b7       	in	r29, 0x3e	; 62

	
}
     1d2:	00 00       	nop
     1d4:	df 91       	pop	r29
     1d6:	cf 91       	pop	r28
     1d8:	08 95       	ret

000001da <AnalogInit>:
#include <inttypes.h>



void AnalogInit(void)
{
     1da:	cf 93       	push	r28
     1dc:	df 93       	push	r29
     1de:	cd b7       	in	r28, 0x3d	; 61
     1e0:	de b7       	in	r29, 0x3e	; 62
	//     7        6       5        4        3        2       1       0
	// |   -    |           MUXPOS[3:0]             |     MUXNEG[2:0]     |
	//     0        0       0        0        0        0       0       0
	// Connect potentiometer (PB1) to positive input
	// MUXNEG bits are ignored in single-ended mode
	ADCA.CH0.MUXCTRL = ADC_CH_MUXINT0_bm; // 0x08
     1e2:	80 e0       	ldi	r24, 0x00	; 0
     1e4:	92 e0       	ldi	r25, 0x02	; 2
     1e6:	28 e0       	ldi	r18, 0x08	; 8
     1e8:	fc 01       	movw	r30, r24
     1ea:	21 a3       	std	Z+33, r18	; 0x21
	//     0        0       0         0         0         0       0        0
	// Apply no limit to ADC sample rate
	// Put ADC in signed mode
	// Disable Free-run mode (single conversion upon trigger)
	// Resolution set to 12-bit, right justified (11-bit effective in signed mode)
	ADCA.CTRLB = ADC_CONMODE_bm; // 0x10
     1ec:	80 e0       	ldi	r24, 0x00	; 0
     1ee:	92 e0       	ldi	r25, 0x02	; 2
     1f0:	20 e1       	ldi	r18, 0x10	; 16
     1f2:	fc 01       	movw	r30, r24
     1f4:	21 83       	std	Z+1, r18	; 0x01
	// The ADC runs off of the CPU_per clock
	// In sys_clk_init() the internal 2MHz RC osc was used to source a 16 MHz PLL
	// The PLL is then divided using Prescalers A, B, and C setting CPU_per to 8 MHz
	// According to AVR1300, the ADC clock should run in the range 100 kHz ~ approx 1.4 MHz
	// Set ADC clock to 125kHz:  CPU_per/64    =>    8MHz/64 = 125kHz
	ADCA.PRESCALER = ADC_PRESCALER2_bm; // 0x04
     1f6:	80 e0       	ldi	r24, 0x00	; 0
     1f8:	92 e0       	ldi	r25, 0x02	; 2
     1fa:	24 e0       	ldi	r18, 0x04	; 4
     1fc:	fc 01       	movw	r30, r24
     1fe:	24 83       	std	Z+4, r18	; 0x04
	//ADCB.REFCTRL
	//     7       6       5       4       3       2        1         0
	// |   -   |      REFSEL[2:0]      |   -   |   -   | BANDGAP | TEMPREF |
	//     0       0       0       0       0       0        0         0
	// Set internal 1V.  
	ADCA.REFCTRL = ADC_REFSEL_INT1V_gc; // 0x10
     200:	80 e0       	ldi	r24, 0x00	; 0
     202:	92 e0       	ldi	r25, 0x02	; 2
     204:	fc 01       	movw	r30, r24
     206:	12 82       	std	Z+2, r1	; 0x02
	//ADCB.EVCTRL
	//     7       6       5       4       3       2       1       0
	// |   -   |   -   |   -   |   EVSEL[1:0]  |      EVACT[2:0]       |
	//     0       0       0       0       0       0       0       0
	// Not implementing Event System so ensure EVCTRL is reading zeros
	ADCA.EVCTRL = 0x00;
     208:	80 e0       	ldi	r24, 0x00	; 0
     20a:	92 e0       	ldi	r25, 0x02	; 2
     20c:	fc 01       	movw	r30, r24
     20e:	13 82       	std	Z+3, r1	; 0x03
	//ADCB.INTFLAGS
	//     7       6       5       4       3       2       1       0
	// |   -   |   -   |   -   |   -   |   -   |   -   |   -   | CH0IF |
	//     0       0       0       0       0       0       0       0
	// Ensure the ADC complete flag is cleared (by writing a '1' to it)
	ADCA.INTFLAGS = ADC_CH0IF_bm; // 0x01
     210:	80 e0       	ldi	r24, 0x00	; 0
     212:	92 e0       	ldi	r25, 0x02	; 2
     214:	21 e0       	ldi	r18, 0x01	; 1
     216:	fc 01       	movw	r30, r24
     218:	26 83       	std	Z+6, r18	; 0x06
	//ADCB.CH0.INTCTRL
	//     7       6       5       4        3       2       1       0
	// |   -   |   -   |   -   |   -   |  INTMODE[1:0]  |  INTLVL[1:0]  |
	//     0       0       0       0        0       0       0       0
	// Configure interrupt on conversion complete with high priority
	ADCA.CH0.INTCTRL = ADC_CH_INTLVL1_bm | ADC_CH_INTLVL0_bm; // 0x03
     21a:	80 e0       	ldi	r24, 0x00	; 0
     21c:	92 e0       	ldi	r25, 0x02	; 2
     21e:	23 e0       	ldi	r18, 0x03	; 3
     220:	fc 01       	movw	r30, r24
     222:	22 a3       	std	Z+34, r18	; 0x22
	//ADCB.CTRLA
	//     7       6       5       4       3         2        1        0
	// |   -   |   -   |   -   |   -   |   -   | CH0START | FLUSH | ENABLE |
	//     0       0       0       0       0         0        0        0
	// Enable ADC, module B
	ADCA.CTRLA = ADC_ENABLE_bm; // 0x01
     224:	80 e0       	ldi	r24, 0x00	; 0
     226:	92 e0       	ldi	r25, 0x02	; 2
     228:	21 e0       	ldi	r18, 0x01	; 1
     22a:	fc 01       	movw	r30, r24
     22c:	20 83       	st	Z, r18
	//////////////////////////////////////////////////////////////////////
}
     22e:	00 00       	nop
     230:	df 91       	pop	r29
     232:	cf 91       	pop	r28
     234:	08 95       	ret

00000236 <ClockInit>:
#pragma GCC push_options
#pragma GCC optimize ("O2") //This function must be optimized to avoid too long time interval betwee CCP write and CLK.CTRL write (4 CLK CYC max)

void ClockInit(void)
{
	OSC.XOSCCTRL=0b11001011; //Clock<=16MHz	
     236:	8b ec       	ldi	r24, 0xCB	; 203
     238:	80 93 52 00 	sts	0x0052, r24	; 0x800052 <__TEXT_REGION_LENGTH__+0x700052>
	OSC.CTRL=0b01000; //Enable oscillator	
     23c:	88 e0       	ldi	r24, 0x08	; 8
     23e:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
	while (!(OSC.STATUS&0b1000)); //Wait until XTAL osc is ready
     242:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
     246:	83 ff       	sbrs	r24, 3
     248:	fc cf       	rjmp	.-8      	; 0x242 <ClockInit+0xc>
	
	//Select XTAL osc as system CLK source
	CCP=0xd8;
     24a:	88 ed       	ldi	r24, 0xD8	; 216
     24c:	84 bf       	out	0x34, r24	; 52
    CLK.CTRL=0b0011;
     24e:	83 e0       	ldi	r24, 0x03	; 3
     250:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
     254:	08 95       	ret

00000256 <EncoderInit>:
	
}
int EncoderGetPos(void)
{
	return encoderPos;
}
     256:	cf 93       	push	r28
     258:	df 93       	push	r29
     25a:	cd b7       	in	r28, 0x3d	; 61
     25c:	de b7       	in	r29, 0x3e	; 62
     25e:	80 e4       	ldi	r24, 0x40	; 64
     260:	96 e0       	ldi	r25, 0x06	; 6
     262:	20 e4       	ldi	r18, 0x40	; 64
     264:	36 e0       	ldi	r19, 0x06	; 6
     266:	f9 01       	movw	r30, r18
     268:	20 81       	ld	r18, Z
     26a:	2f 7c       	andi	r18, 0xCF	; 207
     26c:	fc 01       	movw	r30, r24
     26e:	20 83       	st	Z, r18
     270:	80 e4       	ldi	r24, 0x40	; 64
     272:	96 e0       	ldi	r25, 0x06	; 6
     274:	28 e1       	ldi	r18, 0x18	; 24
     276:	fc 01       	movw	r30, r24
     278:	24 8b       	std	Z+20, r18	; 0x14
     27a:	80 e4       	ldi	r24, 0x40	; 64
     27c:	96 e0       	ldi	r25, 0x06	; 6
     27e:	28 e1       	ldi	r18, 0x18	; 24
     280:	fc 01       	movw	r30, r24
     282:	25 8b       	std	Z+21, r18	; 0x15
     284:	80 e4       	ldi	r24, 0x40	; 64
     286:	96 e0       	ldi	r25, 0x06	; 6
     288:	2f e0       	ldi	r18, 0x0F	; 15
     28a:	fc 01       	movw	r30, r24
     28c:	21 87       	std	Z+9, r18	; 0x09
     28e:	80 e4       	ldi	r24, 0x40	; 64
     290:	96 e0       	ldi	r25, 0x06	; 6
     292:	20 e1       	ldi	r18, 0x10	; 16
     294:	fc 01       	movw	r30, r24
     296:	22 87       	std	Z+10, r18	; 0x0a
     298:	80 e4       	ldi	r24, 0x40	; 64
     29a:	96 e0       	ldi	r25, 0x06	; 6
     29c:	20 e2       	ldi	r18, 0x20	; 32
     29e:	fc 01       	movw	r30, r24
     2a0:	23 87       	std	Z+11, r18	; 0x0b
     2a2:	8f e3       	ldi	r24, 0x3F	; 63
     2a4:	90 e0       	ldi	r25, 0x00	; 0
     2a6:	2f e3       	ldi	r18, 0x3F	; 63
     2a8:	30 e0       	ldi	r19, 0x00	; 0
     2aa:	f9 01       	movw	r30, r18
     2ac:	20 81       	ld	r18, Z
     2ae:	20 68       	ori	r18, 0x80	; 128
     2b0:	fc 01       	movw	r30, r24
     2b2:	20 83       	st	Z, r18
     2b4:	80 ea       	ldi	r24, 0xA0	; 160
     2b6:	90 e0       	ldi	r25, 0x00	; 0
     2b8:	24 e0       	ldi	r18, 0x04	; 4
     2ba:	fc 01       	movw	r30, r24
     2bc:	22 83       	std	Z+2, r18	; 0x02
     2be:	00 00       	nop
     2c0:	df 91       	pop	r29
     2c2:	cf 91       	pop	r28
     2c4:	08 95       	ret

000002c6 <__vector_2>:

ISR(PORTC_INT0_vect){
     2c6:	1f 92       	push	r1
     2c8:	0f 92       	push	r0
     2ca:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     2ce:	0f 92       	push	r0
     2d0:	11 24       	eor	r1, r1
     2d2:	2f 93       	push	r18
     2d4:	3f 93       	push	r19
     2d6:	4f 93       	push	r20
     2d8:	5f 93       	push	r21
     2da:	6f 93       	push	r22
     2dc:	7f 93       	push	r23
     2de:	8f 93       	push	r24
     2e0:	9f 93       	push	r25
     2e2:	af 93       	push	r26
     2e4:	bf 93       	push	r27
     2e6:	ef 93       	push	r30
     2e8:	ff 93       	push	r31
     2ea:	cf 93       	push	r28
     2ec:	df 93       	push	r29
     2ee:	cd b7       	in	r28, 0x3d	; 61
     2f0:	de b7       	in	r29, 0x3e	; 62
	encoderPos += readEncoder();
     2f2:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <readEncoder>
     2f6:	9c 01       	movw	r18, r24
     2f8:	80 91 1c 20 	lds	r24, 0x201C	; 0x80201c <__data_end>
     2fc:	90 91 1d 20 	lds	r25, 0x201D	; 0x80201d <__data_end+0x1>
     300:	82 0f       	add	r24, r18
     302:	93 1f       	adc	r25, r19
     304:	80 93 1c 20 	sts	0x201C, r24	; 0x80201c <__data_end>
     308:	90 93 1d 20 	sts	0x201D, r25	; 0x80201d <__data_end+0x1>
}
     30c:	00 00       	nop
     30e:	df 91       	pop	r29
     310:	cf 91       	pop	r28
     312:	ff 91       	pop	r31
     314:	ef 91       	pop	r30
     316:	bf 91       	pop	r27
     318:	af 91       	pop	r26
     31a:	9f 91       	pop	r25
     31c:	8f 91       	pop	r24
     31e:	7f 91       	pop	r23
     320:	6f 91       	pop	r22
     322:	5f 91       	pop	r21
     324:	4f 91       	pop	r20
     326:	3f 91       	pop	r19
     328:	2f 91       	pop	r18
     32a:	0f 90       	pop	r0
     32c:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     330:	0f 90       	pop	r0
     332:	1f 90       	pop	r1
     334:	18 95       	reti

00000336 <__vector_3>:

ISR(PORTC_INT1_vect){
     336:	1f 92       	push	r1
     338:	0f 92       	push	r0
     33a:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     33e:	0f 92       	push	r0
     340:	11 24       	eor	r1, r1
     342:	2f 93       	push	r18
     344:	3f 93       	push	r19
     346:	4f 93       	push	r20
     348:	5f 93       	push	r21
     34a:	6f 93       	push	r22
     34c:	7f 93       	push	r23
     34e:	8f 93       	push	r24
     350:	9f 93       	push	r25
     352:	af 93       	push	r26
     354:	bf 93       	push	r27
     356:	ef 93       	push	r30
     358:	ff 93       	push	r31
     35a:	cf 93       	push	r28
     35c:	df 93       	push	r29
     35e:	cd b7       	in	r28, 0x3d	; 61
     360:	de b7       	in	r29, 0x3e	; 62
	encoderPos += readEncoder();
     362:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <readEncoder>
     366:	9c 01       	movw	r18, r24
     368:	80 91 1c 20 	lds	r24, 0x201C	; 0x80201c <__data_end>
     36c:	90 91 1d 20 	lds	r25, 0x201D	; 0x80201d <__data_end+0x1>
     370:	82 0f       	add	r24, r18
     372:	93 1f       	adc	r25, r19
     374:	80 93 1c 20 	sts	0x201C, r24	; 0x80201c <__data_end>
     378:	90 93 1d 20 	sts	0x201D, r25	; 0x80201d <__data_end+0x1>
}
     37c:	00 00       	nop
     37e:	df 91       	pop	r29
     380:	cf 91       	pop	r28
     382:	ff 91       	pop	r31
     384:	ef 91       	pop	r30
     386:	bf 91       	pop	r27
     388:	af 91       	pop	r26
     38a:	9f 91       	pop	r25
     38c:	8f 91       	pop	r24
     38e:	7f 91       	pop	r23
     390:	6f 91       	pop	r22
     392:	5f 91       	pop	r21
     394:	4f 91       	pop	r20
     396:	3f 91       	pop	r19
     398:	2f 91       	pop	r18
     39a:	0f 90       	pop	r0
     39c:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     3a0:	0f 90       	pop	r0
     3a2:	1f 90       	pop	r1
     3a4:	18 95       	reti

000003a6 <readEncoder>:
		}
		state = (s >> 2);
	}
*/

int readEncoder(){
     3a6:	cf 93       	push	r28
     3a8:	df 93       	push	r29
     3aa:	00 d0       	rcall	.+0      	; 0x3ac <readEncoder+0x6>
     3ac:	1f 92       	push	r1
     3ae:	cd b7       	in	r28, 0x3d	; 61
     3b0:	de b7       	in	r29, 0x3e	; 62
	currentPos = (PORTC.IN >> 4) & 3;
     3b2:	80 e4       	ldi	r24, 0x40	; 64
     3b4:	96 e0       	ldi	r25, 0x06	; 6
     3b6:	fc 01       	movw	r30, r24
     3b8:	80 85       	ldd	r24, Z+8	; 0x08
     3ba:	82 95       	swap	r24
     3bc:	8f 70       	andi	r24, 0x0F	; 15
     3be:	83 70       	andi	r24, 0x03	; 3
     3c0:	80 93 1e 20 	sts	0x201E, r24	; 0x80201e <currentPos>
	uint8_t s = (currentPos << 2) | prevpos;
     3c4:	80 91 1e 20 	lds	r24, 0x201E	; 0x80201e <currentPos>
     3c8:	88 2f       	mov	r24, r24
     3ca:	90 e0       	ldi	r25, 0x00	; 0
     3cc:	88 0f       	add	r24, r24
     3ce:	99 1f       	adc	r25, r25
     3d0:	88 0f       	add	r24, r24
     3d2:	99 1f       	adc	r25, r25
     3d4:	98 2f       	mov	r25, r24
     3d6:	80 91 1f 20 	lds	r24, 0x201F	; 0x80201f <prevpos>
     3da:	89 2b       	or	r24, r25
     3dc:	8b 83       	std	Y+3, r24	; 0x03
	int position = 0;
     3de:	19 82       	std	Y+1, r1	; 0x01
     3e0:	1a 82       	std	Y+2, r1	; 0x02
	switch (s) {
     3e2:	8b 81       	ldd	r24, Y+3	; 0x03
     3e4:	88 2f       	mov	r24, r24
     3e6:	90 e0       	ldi	r25, 0x00	; 0
     3e8:	09 2e       	mov	r0, r25
     3ea:	00 0c       	add	r0, r0
     3ec:	aa 0b       	sbc	r26, r26
     3ee:	bb 0b       	sbc	r27, r27
     3f0:	40 e0       	ldi	r20, 0x00	; 0
     3f2:	50 e0       	ldi	r21, 0x00	; 0
     3f4:	2f e0       	ldi	r18, 0x0F	; 15
     3f6:	30 e0       	ldi	r19, 0x00	; 0
     3f8:	84 1b       	sub	r24, r20
     3fa:	95 0b       	sbc	r25, r21
     3fc:	28 17       	cp	r18, r24
     3fe:	39 07       	cpc	r19, r25
     400:	b8 f0       	brcs	.+46     	; 0x430 <__FUSE_REGION_LENGTH__+0x30>
     402:	8a 54       	subi	r24, 0x4A	; 74
     404:	9f 4f       	sbci	r25, 0xFF	; 255
     406:	fc 01       	movw	r30, r24
     408:	0c 94 3a 06 	jmp	0xc74	; 0xc74 <__tablejump2__>
		case 0: case 5: case 10: case 15:
		break;
		case 1: case 7: case 8: case 14:
		position++; break;
     40c:	89 81       	ldd	r24, Y+1	; 0x01
     40e:	9a 81       	ldd	r25, Y+2	; 0x02
     410:	01 96       	adiw	r24, 0x01	; 1
     412:	89 83       	std	Y+1, r24	; 0x01
     414:	9a 83       	std	Y+2, r25	; 0x02
     416:	13 c0       	rjmp	.+38     	; 0x43e <__FUSE_REGION_LENGTH__+0x3e>
		case 2: case 4: case 11: case 13:
		position--; break;
     418:	89 81       	ldd	r24, Y+1	; 0x01
     41a:	9a 81       	ldd	r25, Y+2	; 0x02
     41c:	01 97       	sbiw	r24, 0x01	; 1
     41e:	89 83       	std	Y+1, r24	; 0x01
     420:	9a 83       	std	Y+2, r25	; 0x02
     422:	0d c0       	rjmp	.+26     	; 0x43e <__FUSE_REGION_LENGTH__+0x3e>
		case 3: case 12:
		position += 2; break;
     424:	89 81       	ldd	r24, Y+1	; 0x01
     426:	9a 81       	ldd	r25, Y+2	; 0x02
     428:	02 96       	adiw	r24, 0x02	; 2
     42a:	89 83       	std	Y+1, r24	; 0x01
     42c:	9a 83       	std	Y+2, r25	; 0x02
     42e:	07 c0       	rjmp	.+14     	; 0x43e <__FUSE_REGION_LENGTH__+0x3e>
		default:
		position -= 2; break;
     430:	89 81       	ldd	r24, Y+1	; 0x01
     432:	9a 81       	ldd	r25, Y+2	; 0x02
     434:	02 97       	sbiw	r24, 0x02	; 2
     436:	89 83       	std	Y+1, r24	; 0x01
     438:	9a 83       	std	Y+2, r25	; 0x02
     43a:	01 c0       	rjmp	.+2      	; 0x43e <__FUSE_REGION_LENGTH__+0x3e>
	currentPos = (PORTC.IN >> 4) & 3;
	uint8_t s = (currentPos << 2) | prevpos;
	int position = 0;
	switch (s) {
		case 0: case 5: case 10: case 15:
		break;
     43c:	00 00       	nop
		case 3: case 12:
		position += 2; break;
		default:
		position -= 2; break;
	}
	prevpos = currentPos;
     43e:	80 91 1e 20 	lds	r24, 0x201E	; 0x80201e <currentPos>
     442:	80 93 1f 20 	sts	0x201F, r24	; 0x80201f <prevpos>
	return position;
     446:	89 81       	ldd	r24, Y+1	; 0x01
     448:	9a 81       	ldd	r25, Y+2	; 0x02
}
     44a:	23 96       	adiw	r28, 0x03	; 3
     44c:	cd bf       	out	0x3d, r28	; 61
     44e:	de bf       	out	0x3e, r29	; 62
     450:	df 91       	pop	r29
     452:	cf 91       	pop	r28
     454:	08 95       	ret

00000456 <main>:
char a;

void SimpleFunction(void);	//A simple function: print a counter (0 to 9) to the terminal

int main(void)
{	
     456:	cf 93       	push	r28
     458:	df 93       	push	r29
     45a:	cd b7       	in	r28, 0x3d	; 61
     45c:	de b7       	in	r29, 0x3e	; 62
     45e:	6e 97       	sbiw	r28, 0x1e	; 30
     460:	cd bf       	out	0x3d, r28	; 61
     462:	de bf       	out	0x3e, r29	; 62
	//###1###
	 
	//Initialize subsystems
	ClockInit();			//Initialize system clock (16 MHz)
     464:	0e 94 1b 01 	call	0x236	; 0x236 <ClockInit>
	USARTInit();			//Initialize USART and bind to stdout,stdin
     468:	0e 94 8b 04 	call	0x916	; 0x916 <USARTInit>
	AnalogInit();			//Initialize ADC
     46c:	0e 94 ed 00 	call	0x1da	; 0x1da <AnalogInit>
	AccInit();				//Initialize accelerometer system
     470:	0e 94 e5 00 	call	0x1ca	; 0x1ca <AccInit>
	LEDInit();				//Initialize LEDs
     474:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <LEDInit>
	SwitchInit();			//Initialize switches
     478:	0e 94 65 04 	call	0x8ca	; 0x8ca <SwitchInit>
	EncoderInit();			//Initialize encoder
     47c:	0e 94 2b 01 	call	0x256	; 0x256 <EncoderInit>
	SpeakerInit();			//Initialize speaker system
     480:	0e 94 9b 03 	call	0x736	; 0x736 <SpeakerInit>
	
	//Enable interrupts
	PMIC.CTRL|=0b00000111;  //Enable low, medium, high priority interrupts
     484:	80 ea       	ldi	r24, 0xA0	; 160
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	20 ea       	ldi	r18, 0xA0	; 160
     48a:	30 e0       	ldi	r19, 0x00	; 0
     48c:	f9 01       	movw	r30, r18
     48e:	22 81       	ldd	r18, Z+2	; 0x02
     490:	27 60       	ori	r18, 0x07	; 7
     492:	fc 01       	movw	r30, r24
     494:	22 83       	std	Z+2, r18	; 0x02
	SREG|=0b10000000;		//Global interrupt enable
     496:	8f e3       	ldi	r24, 0x3F	; 63
     498:	90 e0       	ldi	r25, 0x00	; 0
     49a:	2f e3       	ldi	r18, 0x3F	; 63
     49c:	30 e0       	ldi	r19, 0x00	; 0
     49e:	f9 01       	movw	r30, r18
     4a0:	20 81       	ld	r18, Z
     4a2:	20 68       	ori	r18, 0x80	; 128
     4a4:	fc 01       	movw	r30, r24
     4a6:	20 83       	st	Z, r18
     4a8:	80 e0       	ldi	r24, 0x00	; 0
     4aa:	90 e0       	ldi	r25, 0x00	; 0
     4ac:	aa ef       	ldi	r26, 0xFA	; 250
     4ae:	b3 e4       	ldi	r27, 0x43	; 67
     4b0:	8f 83       	std	Y+7, r24	; 0x07
     4b2:	98 87       	std	Y+8, r25	; 0x08
     4b4:	a9 87       	std	Y+9, r26	; 0x09
     4b6:	ba 87       	std	Y+10, r27	; 0x0a

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     4b8:	20 e0       	ldi	r18, 0x00	; 0
     4ba:	30 e0       	ldi	r19, 0x00	; 0
     4bc:	4a e7       	ldi	r20, 0x7A	; 122
     4be:	55 e4       	ldi	r21, 0x45	; 69
     4c0:	6f 81       	ldd	r22, Y+7	; 0x07
     4c2:	78 85       	ldd	r23, Y+8	; 0x08
     4c4:	89 85       	ldd	r24, Y+9	; 0x09
     4c6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4c8:	0e 94 86 05 	call	0xb0c	; 0xb0c <__mulsf3>
     4cc:	dc 01       	movw	r26, r24
     4ce:	cb 01       	movw	r24, r22
     4d0:	8b 87       	std	Y+11, r24	; 0x0b
     4d2:	9c 87       	std	Y+12, r25	; 0x0c
     4d4:	ad 87       	std	Y+13, r26	; 0x0d
     4d6:	be 87       	std	Y+14, r27	; 0x0e
	if (__tmp < 1.0)
     4d8:	20 e0       	ldi	r18, 0x00	; 0
     4da:	30 e0       	ldi	r19, 0x00	; 0
     4dc:	40 e8       	ldi	r20, 0x80	; 128
     4de:	5f e3       	ldi	r21, 0x3F	; 63
     4e0:	6b 85       	ldd	r22, Y+11	; 0x0b
     4e2:	7c 85       	ldd	r23, Y+12	; 0x0c
     4e4:	8d 85       	ldd	r24, Y+13	; 0x0d
     4e6:	9e 85       	ldd	r25, Y+14	; 0x0e
     4e8:	0e 94 00 05 	call	0xa00	; 0xa00 <__cmpsf2>
     4ec:	88 23       	and	r24, r24
     4ee:	2c f4       	brge	.+10     	; 0x4fa <main+0xa4>
		__ticks = 1;
     4f0:	81 e0       	ldi	r24, 0x01	; 1
     4f2:	90 e0       	ldi	r25, 0x00	; 0
     4f4:	8f 87       	std	Y+15, r24	; 0x0f
     4f6:	98 8b       	std	Y+16, r25	; 0x10
     4f8:	3f c0       	rjmp	.+126    	; 0x578 <main+0x122>
	else if (__tmp > 65535)
     4fa:	20 e0       	ldi	r18, 0x00	; 0
     4fc:	3f ef       	ldi	r19, 0xFF	; 255
     4fe:	4f e7       	ldi	r20, 0x7F	; 127
     500:	57 e4       	ldi	r21, 0x47	; 71
     502:	6b 85       	ldd	r22, Y+11	; 0x0b
     504:	7c 85       	ldd	r23, Y+12	; 0x0c
     506:	8d 85       	ldd	r24, Y+13	; 0x0d
     508:	9e 85       	ldd	r25, Y+14	; 0x0e
     50a:	0e 94 81 05 	call	0xb02	; 0xb02 <__gesf2>
     50e:	18 16       	cp	r1, r24
     510:	4c f5       	brge	.+82     	; 0x564 <main+0x10e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     512:	20 e0       	ldi	r18, 0x00	; 0
     514:	30 e0       	ldi	r19, 0x00	; 0
     516:	40 e2       	ldi	r20, 0x20	; 32
     518:	51 e4       	ldi	r21, 0x41	; 65
     51a:	6f 81       	ldd	r22, Y+7	; 0x07
     51c:	78 85       	ldd	r23, Y+8	; 0x08
     51e:	89 85       	ldd	r24, Y+9	; 0x09
     520:	9a 85       	ldd	r25, Y+10	; 0x0a
     522:	0e 94 86 05 	call	0xb0c	; 0xb0c <__mulsf3>
     526:	dc 01       	movw	r26, r24
     528:	cb 01       	movw	r24, r22
     52a:	bc 01       	movw	r22, r24
     52c:	cd 01       	movw	r24, r26
     52e:	0e 94 05 05 	call	0xa0a	; 0xa0a <__fixunssfsi>
     532:	dc 01       	movw	r26, r24
     534:	cb 01       	movw	r24, r22
     536:	8f 87       	std	Y+15, r24	; 0x0f
     538:	98 8b       	std	Y+16, r25	; 0x10
     53a:	0f c0       	rjmp	.+30     	; 0x55a <main+0x104>
     53c:	80 e9       	ldi	r24, 0x90	; 144
     53e:	91 e0       	ldi	r25, 0x01	; 1
     540:	89 8b       	std	Y+17, r24	; 0x11
     542:	9a 8b       	std	Y+18, r25	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     544:	89 89       	ldd	r24, Y+17	; 0x11
     546:	9a 89       	ldd	r25, Y+18	; 0x12
     548:	01 97       	sbiw	r24, 0x01	; 1
     54a:	f1 f7       	brne	.-4      	; 0x548 <main+0xf2>
     54c:	89 8b       	std	Y+17, r24	; 0x11
     54e:	9a 8b       	std	Y+18, r25	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     550:	8f 85       	ldd	r24, Y+15	; 0x0f
     552:	98 89       	ldd	r25, Y+16	; 0x10
     554:	01 97       	sbiw	r24, 0x01	; 1
     556:	8f 87       	std	Y+15, r24	; 0x0f
     558:	98 8b       	std	Y+16, r25	; 0x10
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     55a:	8f 85       	ldd	r24, Y+15	; 0x0f
     55c:	98 89       	ldd	r25, Y+16	; 0x10
     55e:	89 2b       	or	r24, r25
     560:	69 f7       	brne	.-38     	; 0x53c <main+0xe6>
     562:	14 c0       	rjmp	.+40     	; 0x58c <main+0x136>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     564:	6b 85       	ldd	r22, Y+11	; 0x0b
     566:	7c 85       	ldd	r23, Y+12	; 0x0c
     568:	8d 85       	ldd	r24, Y+13	; 0x0d
     56a:	9e 85       	ldd	r25, Y+14	; 0x0e
     56c:	0e 94 05 05 	call	0xa0a	; 0xa0a <__fixunssfsi>
     570:	dc 01       	movw	r26, r24
     572:	cb 01       	movw	r24, r22
     574:	8f 87       	std	Y+15, r24	; 0x0f
     576:	98 8b       	std	Y+16, r25	; 0x10
     578:	8f 85       	ldd	r24, Y+15	; 0x0f
     57a:	98 89       	ldd	r25, Y+16	; 0x10
     57c:	8b 8b       	std	Y+19, r24	; 0x13
     57e:	9c 8b       	std	Y+20, r25	; 0x14
     580:	8b 89       	ldd	r24, Y+19	; 0x13
     582:	9c 89       	ldd	r25, Y+20	; 0x14
     584:	01 97       	sbiw	r24, 0x01	; 1
     586:	f1 f7       	brne	.-4      	; 0x584 <main+0x12e>
     588:	8b 8b       	std	Y+19, r24	; 0x13
     58a:	9c 8b       	std	Y+20, r25	; 0x14
	while (1){
		// Start ADC conversion
		//ADCA.CH0.CTRL |= 0x80;


		sprintf(text, "encoder: %d\r",(int)PORTC.DIR);
     58c:	80 e4       	ldi	r24, 0x40	; 64
     58e:	96 e0       	ldi	r25, 0x06	; 6
     590:	fc 01       	movw	r30, r24
     592:	80 81       	ld	r24, Z
     594:	88 2f       	mov	r24, r24
     596:	90 e0       	ldi	r25, 0x00	; 0
     598:	29 2f       	mov	r18, r25
     59a:	2f 93       	push	r18
     59c:	8f 93       	push	r24
     59e:	8e e0       	ldi	r24, 0x0E	; 14
     5a0:	90 e2       	ldi	r25, 0x20	; 32
     5a2:	89 2f       	mov	r24, r25
     5a4:	8f 93       	push	r24
     5a6:	8e e0       	ldi	r24, 0x0E	; 14
     5a8:	90 e2       	ldi	r25, 0x20	; 32
     5aa:	8f 93       	push	r24
     5ac:	80 e2       	ldi	r24, 0x20	; 32
     5ae:	90 e2       	ldi	r25, 0x20	; 32
     5b0:	89 2f       	mov	r24, r25
     5b2:	8f 93       	push	r24
     5b4:	80 e2       	ldi	r24, 0x20	; 32
     5b6:	90 e2       	ldi	r25, 0x20	; 32
     5b8:	8f 93       	push	r24
     5ba:	0e 94 92 06 	call	0xd24	; 0xd24 <sprintf>
     5be:	0f 90       	pop	r0
     5c0:	0f 90       	pop	r0
     5c2:	0f 90       	pop	r0
     5c4:	0f 90       	pop	r0
     5c6:	0f 90       	pop	r0
     5c8:	0f 90       	pop	r0
		puts(text);
     5ca:	80 e2       	ldi	r24, 0x20	; 32
     5cc:	90 e2       	ldi	r25, 0x20	; 32
     5ce:	0e 94 62 06 	call	0xcc4	; 0xcc4 <puts>
		
		
		//SpeakerBeep(500,1000);
		//SpeakerBeep(1000,1000);
		//SpeakerBeep(1500,1000);
		for (int i = 1; i<4; i++)
     5d2:	81 e0       	ldi	r24, 0x01	; 1
     5d4:	90 e0       	ldi	r25, 0x00	; 0
     5d6:	89 83       	std	Y+1, r24	; 0x01
     5d8:	9a 83       	std	Y+2, r25	; 0x02
     5da:	15 c0       	rjmp	.+42     	; 0x606 <main+0x1b0>
		{
			SpeakerBeep(i*500,1000);
     5dc:	29 81       	ldd	r18, Y+1	; 0x01
     5de:	3a 81       	ldd	r19, Y+2	; 0x02
     5e0:	84 ef       	ldi	r24, 0xF4	; 244
     5e2:	91 e0       	ldi	r25, 0x01	; 1
     5e4:	28 9f       	mul	r18, r24
     5e6:	a0 01       	movw	r20, r0
     5e8:	29 9f       	mul	r18, r25
     5ea:	50 0d       	add	r21, r0
     5ec:	38 9f       	mul	r19, r24
     5ee:	50 0d       	add	r21, r0
     5f0:	11 24       	eor	r1, r1
     5f2:	68 ee       	ldi	r22, 0xE8	; 232
     5f4:	73 e0       	ldi	r23, 0x03	; 3
     5f6:	ca 01       	movw	r24, r20
     5f8:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <SpeakerBeep>
		
		
		//SpeakerBeep(500,1000);
		//SpeakerBeep(1000,1000);
		//SpeakerBeep(1500,1000);
		for (int i = 1; i<4; i++)
     5fc:	89 81       	ldd	r24, Y+1	; 0x01
     5fe:	9a 81       	ldd	r25, Y+2	; 0x02
     600:	01 96       	adiw	r24, 0x01	; 1
     602:	89 83       	std	Y+1, r24	; 0x01
     604:	9a 83       	std	Y+2, r25	; 0x02
     606:	89 81       	ldd	r24, Y+1	; 0x01
     608:	9a 81       	ldd	r25, Y+2	; 0x02
     60a:	04 97       	sbiw	r24, 0x04	; 4
     60c:	3c f3       	brlt	.-50     	; 0x5dc <main+0x186>
     60e:	80 e0       	ldi	r24, 0x00	; 0
     610:	90 e4       	ldi	r25, 0x40	; 64
     612:	ac e1       	ldi	r26, 0x1C	; 28
     614:	b6 e4       	ldi	r27, 0x46	; 70
     616:	8b 83       	std	Y+3, r24	; 0x03
     618:	9c 83       	std	Y+4, r25	; 0x04
     61a:	ad 83       	std	Y+5, r26	; 0x05
     61c:	be 83       	std	Y+6, r27	; 0x06

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     61e:	20 e0       	ldi	r18, 0x00	; 0
     620:	30 e0       	ldi	r19, 0x00	; 0
     622:	4a e7       	ldi	r20, 0x7A	; 122
     624:	55 e4       	ldi	r21, 0x45	; 69
     626:	6b 81       	ldd	r22, Y+3	; 0x03
     628:	7c 81       	ldd	r23, Y+4	; 0x04
     62a:	8d 81       	ldd	r24, Y+5	; 0x05
     62c:	9e 81       	ldd	r25, Y+6	; 0x06
     62e:	0e 94 86 05 	call	0xb0c	; 0xb0c <__mulsf3>
     632:	dc 01       	movw	r26, r24
     634:	cb 01       	movw	r24, r22
     636:	8d 8b       	std	Y+21, r24	; 0x15
     638:	9e 8b       	std	Y+22, r25	; 0x16
     63a:	af 8b       	std	Y+23, r26	; 0x17
     63c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     63e:	20 e0       	ldi	r18, 0x00	; 0
     640:	30 e0       	ldi	r19, 0x00	; 0
     642:	40 e8       	ldi	r20, 0x80	; 128
     644:	5f e3       	ldi	r21, 0x3F	; 63
     646:	6d 89       	ldd	r22, Y+21	; 0x15
     648:	7e 89       	ldd	r23, Y+22	; 0x16
     64a:	8f 89       	ldd	r24, Y+23	; 0x17
     64c:	98 8d       	ldd	r25, Y+24	; 0x18
     64e:	0e 94 00 05 	call	0xa00	; 0xa00 <__cmpsf2>
     652:	88 23       	and	r24, r24
     654:	2c f4       	brge	.+10     	; 0x660 <main+0x20a>
		__ticks = 1;
     656:	81 e0       	ldi	r24, 0x01	; 1
     658:	90 e0       	ldi	r25, 0x00	; 0
     65a:	89 8f       	std	Y+25, r24	; 0x19
     65c:	9a 8f       	std	Y+26, r25	; 0x1a
     65e:	3f c0       	rjmp	.+126    	; 0x6de <main+0x288>
	else if (__tmp > 65535)
     660:	20 e0       	ldi	r18, 0x00	; 0
     662:	3f ef       	ldi	r19, 0xFF	; 255
     664:	4f e7       	ldi	r20, 0x7F	; 127
     666:	57 e4       	ldi	r21, 0x47	; 71
     668:	6d 89       	ldd	r22, Y+21	; 0x15
     66a:	7e 89       	ldd	r23, Y+22	; 0x16
     66c:	8f 89       	ldd	r24, Y+23	; 0x17
     66e:	98 8d       	ldd	r25, Y+24	; 0x18
     670:	0e 94 81 05 	call	0xb02	; 0xb02 <__gesf2>
     674:	18 16       	cp	r1, r24
     676:	4c f5       	brge	.+82     	; 0x6ca <main+0x274>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     678:	20 e0       	ldi	r18, 0x00	; 0
     67a:	30 e0       	ldi	r19, 0x00	; 0
     67c:	40 e2       	ldi	r20, 0x20	; 32
     67e:	51 e4       	ldi	r21, 0x41	; 65
     680:	6b 81       	ldd	r22, Y+3	; 0x03
     682:	7c 81       	ldd	r23, Y+4	; 0x04
     684:	8d 81       	ldd	r24, Y+5	; 0x05
     686:	9e 81       	ldd	r25, Y+6	; 0x06
     688:	0e 94 86 05 	call	0xb0c	; 0xb0c <__mulsf3>
     68c:	dc 01       	movw	r26, r24
     68e:	cb 01       	movw	r24, r22
     690:	bc 01       	movw	r22, r24
     692:	cd 01       	movw	r24, r26
     694:	0e 94 05 05 	call	0xa0a	; 0xa0a <__fixunssfsi>
     698:	dc 01       	movw	r26, r24
     69a:	cb 01       	movw	r24, r22
     69c:	89 8f       	std	Y+25, r24	; 0x19
     69e:	9a 8f       	std	Y+26, r25	; 0x1a
     6a0:	0f c0       	rjmp	.+30     	; 0x6c0 <main+0x26a>
     6a2:	80 e9       	ldi	r24, 0x90	; 144
     6a4:	91 e0       	ldi	r25, 0x01	; 1
     6a6:	8b 8f       	std	Y+27, r24	; 0x1b
     6a8:	9c 8f       	std	Y+28, r25	; 0x1c
     6aa:	8b 8d       	ldd	r24, Y+27	; 0x1b
     6ac:	9c 8d       	ldd	r25, Y+28	; 0x1c
     6ae:	01 97       	sbiw	r24, 0x01	; 1
     6b0:	f1 f7       	brne	.-4      	; 0x6ae <main+0x258>
     6b2:	8b 8f       	std	Y+27, r24	; 0x1b
     6b4:	9c 8f       	std	Y+28, r25	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6b6:	89 8d       	ldd	r24, Y+25	; 0x19
     6b8:	9a 8d       	ldd	r25, Y+26	; 0x1a
     6ba:	01 97       	sbiw	r24, 0x01	; 1
     6bc:	89 8f       	std	Y+25, r24	; 0x19
     6be:	9a 8f       	std	Y+26, r25	; 0x1a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     6c0:	89 8d       	ldd	r24, Y+25	; 0x19
     6c2:	9a 8d       	ldd	r25, Y+26	; 0x1a
     6c4:	89 2b       	or	r24, r25
     6c6:	69 f7       	brne	.-38     	; 0x6a2 <main+0x24c>
     6c8:	14 c0       	rjmp	.+40     	; 0x6f2 <main+0x29c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     6ca:	6d 89       	ldd	r22, Y+21	; 0x15
     6cc:	7e 89       	ldd	r23, Y+22	; 0x16
     6ce:	8f 89       	ldd	r24, Y+23	; 0x17
     6d0:	98 8d       	ldd	r25, Y+24	; 0x18
     6d2:	0e 94 05 05 	call	0xa0a	; 0xa0a <__fixunssfsi>
     6d6:	dc 01       	movw	r26, r24
     6d8:	cb 01       	movw	r24, r22
     6da:	89 8f       	std	Y+25, r24	; 0x19
     6dc:	9a 8f       	std	Y+26, r25	; 0x1a
     6de:	89 8d       	ldd	r24, Y+25	; 0x19
     6e0:	9a 8d       	ldd	r25, Y+26	; 0x1a
     6e2:	8d 8f       	std	Y+29, r24	; 0x1d
     6e4:	9e 8f       	std	Y+30, r25	; 0x1e
     6e6:	8d 8d       	ldd	r24, Y+29	; 0x1d
     6e8:	9e 8d       	ldd	r25, Y+30	; 0x1e
     6ea:	01 97       	sbiw	r24, 0x01	; 1
     6ec:	f1 f7       	brne	.-4      	; 0x6ea <main+0x294>
     6ee:	8d 8f       	std	Y+29, r24	; 0x1d
     6f0:	9e 8f       	std	Y+30, r25	; 0x1e
		_delay_ms(10000);
		
		
		
		//putchar('U');
	}
     6f2:	4c cf       	rjmp	.-360    	; 0x58c <main+0x136>

000006f4 <LEDInit>:
#include "LED.h"
#include <avr/io.h>

void LEDInit(void)
{
     6f4:	cf 93       	push	r28
     6f6:	df 93       	push	r29
     6f8:	cd b7       	in	r28, 0x3d	; 61
     6fa:	de b7       	in	r29, 0x3e	; 62
	PORTE.DIRSET=0b00001111;
     6fc:	80 e8       	ldi	r24, 0x80	; 128
     6fe:	96 e0       	ldi	r25, 0x06	; 6
     700:	2f e0       	ldi	r18, 0x0F	; 15
     702:	fc 01       	movw	r30, r24
     704:	21 83       	std	Z+1, r18	; 0x01
	PORTE.PIN0CTRL=0b01000000;
     706:	80 e8       	ldi	r24, 0x80	; 128
     708:	96 e0       	ldi	r25, 0x06	; 6
     70a:	20 e4       	ldi	r18, 0x40	; 64
     70c:	fc 01       	movw	r30, r24
     70e:	20 8b       	std	Z+16, r18	; 0x10
	PORTE.PIN1CTRL=0b01000000;
     710:	80 e8       	ldi	r24, 0x80	; 128
     712:	96 e0       	ldi	r25, 0x06	; 6
     714:	20 e4       	ldi	r18, 0x40	; 64
     716:	fc 01       	movw	r30, r24
     718:	21 8b       	std	Z+17, r18	; 0x11
	PORTE.PIN2CTRL=0b01000000;
     71a:	80 e8       	ldi	r24, 0x80	; 128
     71c:	96 e0       	ldi	r25, 0x06	; 6
     71e:	20 e4       	ldi	r18, 0x40	; 64
     720:	fc 01       	movw	r30, r24
     722:	22 8b       	std	Z+18, r18	; 0x12
	PORTE.PIN3CTRL=0b01000000;
     724:	80 e8       	ldi	r24, 0x80	; 128
     726:	96 e0       	ldi	r25, 0x06	; 6
     728:	20 e4       	ldi	r18, 0x40	; 64
     72a:	fc 01       	movw	r30, r24
     72c:	23 8b       	std	Z+19, r18	; 0x13
	
}
     72e:	00 00       	nop
     730:	df 91       	pop	r29
     732:	cf 91       	pop	r28
     734:	08 95       	ret

00000736 <SpeakerInit>:
#include <avr/interrupt.h>
#include <util/delay.h>
#include "speaker.h"

void SpeakerInit(void)
{
     736:	cf 93       	push	r28
     738:	df 93       	push	r29
     73a:	cd b7       	in	r28, 0x3d	; 61
     73c:	de b7       	in	r29, 0x3e	; 62
		//Setup IO
		PORTC.DIRCLR= 0b00000001; //set pin as input so no signal comes trough
     73e:	80 e4       	ldi	r24, 0x40	; 64
     740:	96 e0       	ldi	r25, 0x06	; 6
     742:	21 e0       	ldi	r18, 0x01	; 1
     744:	fc 01       	movw	r30, r24
     746:	22 83       	std	Z+2, r18	; 0x02
		PORTC.PIN0CTRL = 0b00010000; 
     748:	80 e4       	ldi	r24, 0x40	; 64
     74a:	96 e0       	ldi	r25, 0x06	; 6
     74c:	20 e1       	ldi	r18, 0x10	; 16
     74e:	fc 01       	movw	r30, r24
     750:	20 8b       	std	Z+16, r18	; 0x10
		
		//Setup TC for frequency generation
		TCC0.CTRLA= 0; //turn counter of
     752:	80 e0       	ldi	r24, 0x00	; 0
     754:	98 e0       	ldi	r25, 0x08	; 8
     756:	fc 01       	movw	r30, r24
     758:	10 82       	st	Z, r1
		TCC0.CTRLB= 0b00010011; //set counter in single slope pwm mode and overwrite the first pin of the port with the pwm signal.
     75a:	80 e0       	ldi	r24, 0x00	; 0
     75c:	98 e0       	ldi	r25, 0x08	; 8
     75e:	23 e1       	ldi	r18, 0x13	; 19
     760:	fc 01       	movw	r30, r24
     762:	21 83       	std	Z+1, r18	; 0x01
		//TCC0.CTRLC=  //nothing to see here
		TCC0.CTRLD= 0; //random settings not important just turnn of
     764:	80 e0       	ldi	r24, 0x00	; 0
     766:	98 e0       	ldi	r25, 0x08	; 8
     768:	fc 01       	movw	r30, r24
     76a:	13 82       	std	Z+3, r1	; 0x03
		TCC0.CTRLE= 0;
     76c:	80 e0       	ldi	r24, 0x00	; 0
     76e:	98 e0       	ldi	r25, 0x08	; 8
     770:	fc 01       	movw	r30, r24
     772:	14 82       	std	Z+4, r1	; 0x04
		
		//Setup TC for duration timing
		TCC1.CTRLA= 0; //turn counter off
     774:	80 e4       	ldi	r24, 0x40	; 64
     776:	98 e0       	ldi	r25, 0x08	; 8
     778:	fc 01       	movw	r30, r24
     77a:	10 82       	st	Z, r1
		TCC1.CTRLB= 0; //nothing to set here
     77c:	80 e4       	ldi	r24, 0x40	; 64
     77e:	98 e0       	ldi	r25, 0x08	; 8
     780:	fc 01       	movw	r30, r24
     782:	11 82       	std	Z+1, r1	; 0x01
		//TCC1.CTRLC=
		TCC1.CTRLD= 0;
     784:	80 e4       	ldi	r24, 0x40	; 64
     786:	98 e0       	ldi	r25, 0x08	; 8
     788:	fc 01       	movw	r30, r24
     78a:	13 82       	std	Z+3, r1	; 0x03
		TCC1.CTRLE= 0;
     78c:	80 e4       	ldi	r24, 0x40	; 64
     78e:	98 e0       	ldi	r25, 0x08	; 8
     790:	fc 01       	movw	r30, r24
     792:	14 82       	std	Z+4, r1	; 0x04
		TCC1.INTCTRLA = 0b00000011; //set overflow interrupt to top level
     794:	80 e4       	ldi	r24, 0x40	; 64
     796:	98 e0       	ldi	r25, 0x08	; 8
     798:	23 e0       	ldi	r18, 0x03	; 3
     79a:	fc 01       	movw	r30, r24
     79c:	26 83       	std	Z+6, r18	; 0x06
		
		
}
     79e:	00 00       	nop
     7a0:	df 91       	pop	r29
     7a2:	cf 91       	pop	r28
     7a4:	08 95       	ret

000007a6 <SpeakerBeep>:
void SpeakerBeep(int Frequency,int Length)
{
     7a6:	0f 93       	push	r16
     7a8:	1f 93       	push	r17
     7aa:	cf 93       	push	r28
     7ac:	df 93       	push	r29
     7ae:	00 d0       	rcall	.+0      	; 0x7b0 <SpeakerBeep+0xa>
     7b0:	00 d0       	rcall	.+0      	; 0x7b2 <SpeakerBeep+0xc>
     7b2:	cd b7       	in	r28, 0x3d	; 61
     7b4:	de b7       	in	r29, 0x3e	; 62
     7b6:	89 83       	std	Y+1, r24	; 0x01
     7b8:	9a 83       	std	Y+2, r25	; 0x02
     7ba:	6b 83       	std	Y+3, r22	; 0x03
     7bc:	7c 83       	std	Y+4, r23	; 0x04
	TCC0.CTRLA= 0b00000101; //turn on timer with prescaler divide by 64
     7be:	80 e0       	ldi	r24, 0x00	; 0
     7c0:	98 e0       	ldi	r25, 0x08	; 8
     7c2:	25 e0       	ldi	r18, 0x05	; 5
     7c4:	fc 01       	movw	r30, r24
     7c6:	20 83       	st	Z, r18
	TCC0.CNT = 0; //set count to 0
     7c8:	80 e0       	ldi	r24, 0x00	; 0
     7ca:	98 e0       	ldi	r25, 0x08	; 8
     7cc:	fc 01       	movw	r30, r24
     7ce:	10 a2       	std	Z+32, r1	; 0x20
     7d0:	11 a2       	std	Z+33, r1	; 0x21
	TCC0.PER = 250000/Frequency; //set period of the pwm signal
     7d2:	00 e0       	ldi	r16, 0x00	; 0
     7d4:	18 e0       	ldi	r17, 0x08	; 8
     7d6:	89 81       	ldd	r24, Y+1	; 0x01
     7d8:	9a 81       	ldd	r25, Y+2	; 0x02
     7da:	9c 01       	movw	r18, r24
     7dc:	99 0f       	add	r25, r25
     7de:	44 0b       	sbc	r20, r20
     7e0:	55 0b       	sbc	r21, r21
     7e2:	80 e9       	ldi	r24, 0x90	; 144
     7e4:	90 ed       	ldi	r25, 0xD0	; 208
     7e6:	a3 e0       	ldi	r26, 0x03	; 3
     7e8:	b0 e0       	ldi	r27, 0x00	; 0
     7ea:	bc 01       	movw	r22, r24
     7ec:	cd 01       	movw	r24, r26
     7ee:	0e 94 1b 06 	call	0xc36	; 0xc36 <__divmodsi4>
     7f2:	da 01       	movw	r26, r20
     7f4:	c9 01       	movw	r24, r18
     7f6:	f8 01       	movw	r30, r16
     7f8:	86 a3       	std	Z+38, r24	; 0x26
     7fa:	97 a3       	std	Z+39, r25	; 0x27
	TCC0.CCA = TCC0.PER / 2; //duty cycle 0.5
     7fc:	80 e0       	ldi	r24, 0x00	; 0
     7fe:	98 e0       	ldi	r25, 0x08	; 8
     800:	20 e0       	ldi	r18, 0x00	; 0
     802:	38 e0       	ldi	r19, 0x08	; 8
     804:	f9 01       	movw	r30, r18
     806:	26 a1       	ldd	r18, Z+38	; 0x26
     808:	37 a1       	ldd	r19, Z+39	; 0x27
     80a:	36 95       	lsr	r19
     80c:	27 95       	ror	r18
     80e:	fc 01       	movw	r30, r24
     810:	20 a7       	std	Z+40, r18	; 0x28
     812:	31 a7       	std	Z+41, r19	; 0x29
	PORTC.DIRSET = 0b00000001; //turn port as output
     814:	80 e4       	ldi	r24, 0x40	; 64
     816:	96 e0       	ldi	r25, 0x06	; 6
     818:	21 e0       	ldi	r18, 0x01	; 1
     81a:	fc 01       	movw	r30, r24
     81c:	21 83       	std	Z+1, r18	; 0x01
	TCC1.CTRLA= 0b00000111; //turn on counter2 with prescaler divide by 1024 for a max time of 2 sec
     81e:	80 e4       	ldi	r24, 0x40	; 64
     820:	98 e0       	ldi	r25, 0x08	; 8
     822:	27 e0       	ldi	r18, 0x07	; 7
     824:	fc 01       	movw	r30, r24
     826:	20 83       	st	Z, r18
	TCC1.CNT = 0; //set count to 0
     828:	80 e4       	ldi	r24, 0x40	; 64
     82a:	98 e0       	ldi	r25, 0x08	; 8
     82c:	fc 01       	movw	r30, r24
     82e:	10 a2       	std	Z+32, r1	; 0x20
     830:	11 a2       	std	Z+33, r1	; 0x21
	TCC1.PER = (Length*15);//not exactly correct because real value is 15.625 but processor doesn't like floating point operations.
     832:	80 e4       	ldi	r24, 0x40	; 64
     834:	98 e0       	ldi	r25, 0x08	; 8
     836:	2b 81       	ldd	r18, Y+3	; 0x03
     838:	3c 81       	ldd	r19, Y+4	; 0x04
     83a:	6f e0       	ldi	r22, 0x0F	; 15
     83c:	62 9f       	mul	r22, r18
     83e:	a0 01       	movw	r20, r0
     840:	63 9f       	mul	r22, r19
     842:	50 0d       	add	r21, r0
     844:	11 24       	eor	r1, r1
     846:	9a 01       	movw	r18, r20
     848:	fc 01       	movw	r30, r24
     84a:	26 a3       	std	Z+38, r18	; 0x26
     84c:	37 a3       	std	Z+39, r19	; 0x27
	while(PORTC.DIR & 1){ //this function can not move on because other sounds could overrule the current one
     84e:	00 00       	nop
     850:	80 e4       	ldi	r24, 0x40	; 64
     852:	96 e0       	ldi	r25, 0x06	; 6
     854:	fc 01       	movw	r30, r24
     856:	80 81       	ld	r24, Z
     858:	88 2f       	mov	r24, r24
     85a:	90 e0       	ldi	r25, 0x00	; 0
     85c:	81 70       	andi	r24, 0x01	; 1
     85e:	99 27       	eor	r25, r25
     860:	89 2b       	or	r24, r25
     862:	b1 f7       	brne	.-20     	; 0x850 <SpeakerBeep+0xaa>
		
	}
}
     864:	00 00       	nop
     866:	24 96       	adiw	r28, 0x04	; 4
     868:	cd bf       	out	0x3d, r28	; 61
     86a:	de bf       	out	0x3e, r29	; 62
     86c:	df 91       	pop	r29
     86e:	cf 91       	pop	r28
     870:	1f 91       	pop	r17
     872:	0f 91       	pop	r16
     874:	08 95       	ret

00000876 <__vector_20>:

ISR(TCC1_OVF_vect){ //turn pin to input and turn of timers.
     876:	1f 92       	push	r1
     878:	0f 92       	push	r0
     87a:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     87e:	0f 92       	push	r0
     880:	11 24       	eor	r1, r1
     882:	2f 93       	push	r18
     884:	8f 93       	push	r24
     886:	9f 93       	push	r25
     888:	ef 93       	push	r30
     88a:	ff 93       	push	r31
     88c:	cf 93       	push	r28
     88e:	df 93       	push	r29
     890:	cd b7       	in	r28, 0x3d	; 61
     892:	de b7       	in	r29, 0x3e	; 62
	PORTC.DIRCLR = 0b00000001; 
     894:	80 e4       	ldi	r24, 0x40	; 64
     896:	96 e0       	ldi	r25, 0x06	; 6
     898:	21 e0       	ldi	r18, 0x01	; 1
     89a:	fc 01       	movw	r30, r24
     89c:	22 83       	std	Z+2, r18	; 0x02
	TCC0.CTRLA = 0;
     89e:	80 e0       	ldi	r24, 0x00	; 0
     8a0:	98 e0       	ldi	r25, 0x08	; 8
     8a2:	fc 01       	movw	r30, r24
     8a4:	10 82       	st	Z, r1
	TCC1.CTRLA = 0;
     8a6:	80 e4       	ldi	r24, 0x40	; 64
     8a8:	98 e0       	ldi	r25, 0x08	; 8
     8aa:	fc 01       	movw	r30, r24
     8ac:	10 82       	st	Z, r1
}
     8ae:	00 00       	nop
     8b0:	df 91       	pop	r29
     8b2:	cf 91       	pop	r28
     8b4:	ff 91       	pop	r31
     8b6:	ef 91       	pop	r30
     8b8:	9f 91       	pop	r25
     8ba:	8f 91       	pop	r24
     8bc:	2f 91       	pop	r18
     8be:	0f 90       	pop	r0
     8c0:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     8c4:	0f 90       	pop	r0
     8c6:	1f 90       	pop	r1
     8c8:	18 95       	reti

000008ca <SwitchInit>:
#include "switch.h"
#include <avr/io.h>

void SwitchInit(void)
{
     8ca:	cf 93       	push	r28
     8cc:	df 93       	push	r29
     8ce:	cd b7       	in	r28, 0x3d	; 61
     8d0:	de b7       	in	r29, 0x3e	; 62
	PORTD.DIRCLR=0b11110001;
     8d2:	80 e6       	ldi	r24, 0x60	; 96
     8d4:	96 e0       	ldi	r25, 0x06	; 6
     8d6:	21 ef       	ldi	r18, 0xF1	; 241
     8d8:	fc 01       	movw	r30, r24
     8da:	22 83       	std	Z+2, r18	; 0x02
	PORTD.PIN0CTRL=0b01011000;
     8dc:	80 e6       	ldi	r24, 0x60	; 96
     8de:	96 e0       	ldi	r25, 0x06	; 6
     8e0:	28 e5       	ldi	r18, 0x58	; 88
     8e2:	fc 01       	movw	r30, r24
     8e4:	20 8b       	std	Z+16, r18	; 0x10
	PORTD.PIN4CTRL=0b01011000;
     8e6:	80 e6       	ldi	r24, 0x60	; 96
     8e8:	96 e0       	ldi	r25, 0x06	; 6
     8ea:	28 e5       	ldi	r18, 0x58	; 88
     8ec:	fc 01       	movw	r30, r24
     8ee:	24 8b       	std	Z+20, r18	; 0x14
	PORTD.PIN5CTRL=0b01011000;
     8f0:	80 e6       	ldi	r24, 0x60	; 96
     8f2:	96 e0       	ldi	r25, 0x06	; 6
     8f4:	28 e5       	ldi	r18, 0x58	; 88
     8f6:	fc 01       	movw	r30, r24
     8f8:	25 8b       	std	Z+21, r18	; 0x15
	PORTD.PIN6CTRL=0b01011000;
     8fa:	80 e6       	ldi	r24, 0x60	; 96
     8fc:	96 e0       	ldi	r25, 0x06	; 6
     8fe:	28 e5       	ldi	r18, 0x58	; 88
     900:	fc 01       	movw	r30, r24
     902:	26 8b       	std	Z+22, r18	; 0x16
	PORTD.PIN7CTRL=0b01011000;
     904:	80 e6       	ldi	r24, 0x60	; 96
     906:	96 e0       	ldi	r25, 0x06	; 6
     908:	28 e5       	ldi	r18, 0x58	; 88
     90a:	fc 01       	movw	r30, r24
     90c:	27 8b       	std	Z+23, r18	; 0x17
}
     90e:	00 00       	nop
     910:	df 91       	pop	r29
     912:	cf 91       	pop	r28
     914:	08 95       	ret

00000916 <USARTInit>:
 int stdio_putchar(char c, FILE * stream);
 int stdio_getchar(FILE *stream);
static FILE UsartStdio = FDEV_SETUP_STREAM(stdio_putchar, stdio_getchar,_FDEV_SETUP_WRITE);

void USARTInit(void)
{
     916:	cf 93       	push	r28
     918:	df 93       	push	r29
     91a:	cd b7       	in	r28, 0x3d	; 61
     91c:	de b7       	in	r29, 0x3e	; 62
	USART_PORT.DIRSET=0b00001000;	
     91e:	80 e6       	ldi	r24, 0x60	; 96
     920:	96 e0       	ldi	r25, 0x06	; 6
     922:	28 e0       	ldi	r18, 0x08	; 8
     924:	fc 01       	movw	r30, r24
     926:	21 83       	std	Z+1, r18	; 0x01
	USART_PORT.DIRCLR=0b00000100;
     928:	80 e6       	ldi	r24, 0x60	; 96
     92a:	96 e0       	ldi	r25, 0x06	; 6
     92c:	24 e0       	ldi	r18, 0x04	; 4
     92e:	fc 01       	movw	r30, r24
     930:	22 83       	std	Z+2, r18	; 0x02
	
	USART.CTRLA=0b00000000;
     932:	80 ea       	ldi	r24, 0xA0	; 160
     934:	99 e0       	ldi	r25, 0x09	; 9
     936:	fc 01       	movw	r30, r24
     938:	13 82       	std	Z+3, r1	; 0x03
	USART.CTRLB=0b00011000;
     93a:	80 ea       	ldi	r24, 0xA0	; 160
     93c:	99 e0       	ldi	r25, 0x09	; 9
     93e:	28 e1       	ldi	r18, 0x18	; 24
     940:	fc 01       	movw	r30, r24
     942:	24 83       	std	Z+4, r18	; 0x04
	USART.CTRLC=0b00000011;
     944:	80 ea       	ldi	r24, 0xA0	; 160
     946:	99 e0       	ldi	r25, 0x09	; 9
     948:	23 e0       	ldi	r18, 0x03	; 3
     94a:	fc 01       	movw	r30, r24
     94c:	25 83       	std	Z+5, r18	; 0x05
	
	USART.BAUDCTRLA=0xD7; //BSEL=3301, BSCALE=-5 9600 baud
     94e:	80 ea       	ldi	r24, 0xA0	; 160
     950:	99 e0       	ldi	r25, 0x09	; 9
     952:	27 ed       	ldi	r18, 0xD7	; 215
     954:	fc 01       	movw	r30, r24
     956:	26 83       	std	Z+6, r18	; 0x06
	USART.BAUDCTRLB=0x93; 
     958:	80 ea       	ldi	r24, 0xA0	; 160
     95a:	99 e0       	ldi	r25, 0x09	; 9
     95c:	23 e9       	ldi	r18, 0x93	; 147
     95e:	fc 01       	movw	r30, r24
     960:	27 83       	std	Z+7, r18	; 0x07
	
	stdout=&UsartStdio;
     962:	80 e0       	ldi	r24, 0x00	; 0
     964:	90 e2       	ldi	r25, 0x20	; 32
     966:	80 93 87 20 	sts	0x2087, r24	; 0x802087 <__iob+0x2>
     96a:	90 93 88 20 	sts	0x2088, r25	; 0x802088 <__iob+0x3>
	stdin=&UsartStdio;
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e2       	ldi	r25, 0x20	; 32
     972:	80 93 85 20 	sts	0x2085, r24	; 0x802085 <__iob>
     976:	90 93 86 20 	sts	0x2086, r25	; 0x802086 <__iob+0x1>
}
     97a:	00 00       	nop
     97c:	df 91       	pop	r29
     97e:	cf 91       	pop	r28
     980:	08 95       	ret

00000982 <stdio_putchar>:


int stdio_putchar(char c, FILE * stream)
{
     982:	cf 93       	push	r28
     984:	df 93       	push	r29
     986:	00 d0       	rcall	.+0      	; 0x988 <stdio_putchar+0x6>
     988:	1f 92       	push	r1
     98a:	cd b7       	in	r28, 0x3d	; 61
     98c:	de b7       	in	r29, 0x3e	; 62
     98e:	89 83       	std	Y+1, r24	; 0x01
     990:	6a 83       	std	Y+2, r22	; 0x02
     992:	7b 83       	std	Y+3, r23	; 0x03
	USART.DATA = c;
     994:	80 ea       	ldi	r24, 0xA0	; 160
     996:	99 e0       	ldi	r25, 0x09	; 9
     998:	29 81       	ldd	r18, Y+1	; 0x01
     99a:	fc 01       	movw	r30, r24
     99c:	20 83       	st	Z, r18
	while (!(USART.STATUS & 0b01000000));
     99e:	00 00       	nop
     9a0:	80 ea       	ldi	r24, 0xA0	; 160
     9a2:	99 e0       	ldi	r25, 0x09	; 9
     9a4:	fc 01       	movw	r30, r24
     9a6:	81 81       	ldd	r24, Z+1	; 0x01
     9a8:	88 2f       	mov	r24, r24
     9aa:	90 e0       	ldi	r25, 0x00	; 0
     9ac:	80 74       	andi	r24, 0x40	; 64
     9ae:	99 27       	eor	r25, r25
     9b0:	89 2b       	or	r24, r25
     9b2:	b1 f3       	breq	.-20     	; 0x9a0 <stdio_putchar+0x1e>
	USART.STATUS=0b01000000;
     9b4:	80 ea       	ldi	r24, 0xA0	; 160
     9b6:	99 e0       	ldi	r25, 0x09	; 9
     9b8:	20 e4       	ldi	r18, 0x40	; 64
     9ba:	fc 01       	movw	r30, r24
     9bc:	21 83       	std	Z+1, r18	; 0x01
	return 0;
     9be:	80 e0       	ldi	r24, 0x00	; 0
     9c0:	90 e0       	ldi	r25, 0x00	; 0
}
     9c2:	23 96       	adiw	r28, 0x03	; 3
     9c4:	cd bf       	out	0x3d, r28	; 61
     9c6:	de bf       	out	0x3e, r29	; 62
     9c8:	df 91       	pop	r29
     9ca:	cf 91       	pop	r28
     9cc:	08 95       	ret

000009ce <stdio_getchar>:
	
int stdio_getchar(FILE *stream)
{
     9ce:	cf 93       	push	r28
     9d0:	df 93       	push	r29
     9d2:	00 d0       	rcall	.+0      	; 0x9d4 <stdio_getchar+0x6>
     9d4:	cd b7       	in	r28, 0x3d	; 61
     9d6:	de b7       	in	r29, 0x3e	; 62
     9d8:	89 83       	std	Y+1, r24	; 0x01
     9da:	9a 83       	std	Y+2, r25	; 0x02
	while (!(USART.STATUS & 0b10000000));
     9dc:	00 00       	nop
     9de:	80 ea       	ldi	r24, 0xA0	; 160
     9e0:	99 e0       	ldi	r25, 0x09	; 9
     9e2:	fc 01       	movw	r30, r24
     9e4:	81 81       	ldd	r24, Z+1	; 0x01
     9e6:	88 23       	and	r24, r24
     9e8:	d4 f7       	brge	.-12     	; 0x9de <stdio_getchar+0x10>
	return USART.DATA;
     9ea:	80 ea       	ldi	r24, 0xA0	; 160
     9ec:	99 e0       	ldi	r25, 0x09	; 9
     9ee:	fc 01       	movw	r30, r24
     9f0:	80 81       	ld	r24, Z
     9f2:	88 2f       	mov	r24, r24
     9f4:	90 e0       	ldi	r25, 0x00	; 0
}
     9f6:	0f 90       	pop	r0
     9f8:	0f 90       	pop	r0
     9fa:	df 91       	pop	r29
     9fc:	cf 91       	pop	r28
     9fe:	08 95       	ret

00000a00 <__cmpsf2>:
     a00:	0e 94 34 05 	call	0xa68	; 0xa68 <__fp_cmp>
     a04:	08 f4       	brcc	.+2      	; 0xa08 <__cmpsf2+0x8>
     a06:	81 e0       	ldi	r24, 0x01	; 1
     a08:	08 95       	ret

00000a0a <__fixunssfsi>:
     a0a:	0e 94 60 05 	call	0xac0	; 0xac0 <__fp_splitA>
     a0e:	88 f0       	brcs	.+34     	; 0xa32 <__fixunssfsi+0x28>
     a10:	9f 57       	subi	r25, 0x7F	; 127
     a12:	98 f0       	brcs	.+38     	; 0xa3a <__fixunssfsi+0x30>
     a14:	b9 2f       	mov	r27, r25
     a16:	99 27       	eor	r25, r25
     a18:	b7 51       	subi	r27, 0x17	; 23
     a1a:	b0 f0       	brcs	.+44     	; 0xa48 <__fixunssfsi+0x3e>
     a1c:	e1 f0       	breq	.+56     	; 0xa56 <__fixunssfsi+0x4c>
     a1e:	66 0f       	add	r22, r22
     a20:	77 1f       	adc	r23, r23
     a22:	88 1f       	adc	r24, r24
     a24:	99 1f       	adc	r25, r25
     a26:	1a f0       	brmi	.+6      	; 0xa2e <__fixunssfsi+0x24>
     a28:	ba 95       	dec	r27
     a2a:	c9 f7       	brne	.-14     	; 0xa1e <__fixunssfsi+0x14>
     a2c:	14 c0       	rjmp	.+40     	; 0xa56 <__fixunssfsi+0x4c>
     a2e:	b1 30       	cpi	r27, 0x01	; 1
     a30:	91 f0       	breq	.+36     	; 0xa56 <__fixunssfsi+0x4c>
     a32:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <__fp_zero>
     a36:	b1 e0       	ldi	r27, 0x01	; 1
     a38:	08 95       	ret
     a3a:	0c 94 7a 05 	jmp	0xaf4	; 0xaf4 <__fp_zero>
     a3e:	67 2f       	mov	r22, r23
     a40:	78 2f       	mov	r23, r24
     a42:	88 27       	eor	r24, r24
     a44:	b8 5f       	subi	r27, 0xF8	; 248
     a46:	39 f0       	breq	.+14     	; 0xa56 <__fixunssfsi+0x4c>
     a48:	b9 3f       	cpi	r27, 0xF9	; 249
     a4a:	cc f3       	brlt	.-14     	; 0xa3e <__fixunssfsi+0x34>
     a4c:	86 95       	lsr	r24
     a4e:	77 95       	ror	r23
     a50:	67 95       	ror	r22
     a52:	b3 95       	inc	r27
     a54:	d9 f7       	brne	.-10     	; 0xa4c <__fixunssfsi+0x42>
     a56:	3e f4       	brtc	.+14     	; 0xa66 <__fixunssfsi+0x5c>
     a58:	90 95       	com	r25
     a5a:	80 95       	com	r24
     a5c:	70 95       	com	r23
     a5e:	61 95       	neg	r22
     a60:	7f 4f       	sbci	r23, 0xFF	; 255
     a62:	8f 4f       	sbci	r24, 0xFF	; 255
     a64:	9f 4f       	sbci	r25, 0xFF	; 255
     a66:	08 95       	ret

00000a68 <__fp_cmp>:
     a68:	99 0f       	add	r25, r25
     a6a:	00 08       	sbc	r0, r0
     a6c:	55 0f       	add	r21, r21
     a6e:	aa 0b       	sbc	r26, r26
     a70:	e0 e8       	ldi	r30, 0x80	; 128
     a72:	fe ef       	ldi	r31, 0xFE	; 254
     a74:	16 16       	cp	r1, r22
     a76:	17 06       	cpc	r1, r23
     a78:	e8 07       	cpc	r30, r24
     a7a:	f9 07       	cpc	r31, r25
     a7c:	c0 f0       	brcs	.+48     	; 0xaae <__fp_cmp+0x46>
     a7e:	12 16       	cp	r1, r18
     a80:	13 06       	cpc	r1, r19
     a82:	e4 07       	cpc	r30, r20
     a84:	f5 07       	cpc	r31, r21
     a86:	98 f0       	brcs	.+38     	; 0xaae <__fp_cmp+0x46>
     a88:	62 1b       	sub	r22, r18
     a8a:	73 0b       	sbc	r23, r19
     a8c:	84 0b       	sbc	r24, r20
     a8e:	95 0b       	sbc	r25, r21
     a90:	39 f4       	brne	.+14     	; 0xaa0 <__fp_cmp+0x38>
     a92:	0a 26       	eor	r0, r26
     a94:	61 f0       	breq	.+24     	; 0xaae <__fp_cmp+0x46>
     a96:	23 2b       	or	r18, r19
     a98:	24 2b       	or	r18, r20
     a9a:	25 2b       	or	r18, r21
     a9c:	21 f4       	brne	.+8      	; 0xaa6 <__fp_cmp+0x3e>
     a9e:	08 95       	ret
     aa0:	0a 26       	eor	r0, r26
     aa2:	09 f4       	brne	.+2      	; 0xaa6 <__fp_cmp+0x3e>
     aa4:	a1 40       	sbci	r26, 0x01	; 1
     aa6:	a6 95       	lsr	r26
     aa8:	8f ef       	ldi	r24, 0xFF	; 255
     aaa:	81 1d       	adc	r24, r1
     aac:	81 1d       	adc	r24, r1
     aae:	08 95       	ret

00000ab0 <__fp_split3>:
     ab0:	57 fd       	sbrc	r21, 7
     ab2:	90 58       	subi	r25, 0x80	; 128
     ab4:	44 0f       	add	r20, r20
     ab6:	55 1f       	adc	r21, r21
     ab8:	59 f0       	breq	.+22     	; 0xad0 <__fp_splitA+0x10>
     aba:	5f 3f       	cpi	r21, 0xFF	; 255
     abc:	71 f0       	breq	.+28     	; 0xada <__fp_splitA+0x1a>
     abe:	47 95       	ror	r20

00000ac0 <__fp_splitA>:
     ac0:	88 0f       	add	r24, r24
     ac2:	97 fb       	bst	r25, 7
     ac4:	99 1f       	adc	r25, r25
     ac6:	61 f0       	breq	.+24     	; 0xae0 <__fp_splitA+0x20>
     ac8:	9f 3f       	cpi	r25, 0xFF	; 255
     aca:	79 f0       	breq	.+30     	; 0xaea <__fp_splitA+0x2a>
     acc:	87 95       	ror	r24
     ace:	08 95       	ret
     ad0:	12 16       	cp	r1, r18
     ad2:	13 06       	cpc	r1, r19
     ad4:	14 06       	cpc	r1, r20
     ad6:	55 1f       	adc	r21, r21
     ad8:	f2 cf       	rjmp	.-28     	; 0xabe <__fp_split3+0xe>
     ada:	46 95       	lsr	r20
     adc:	f1 df       	rcall	.-30     	; 0xac0 <__fp_splitA>
     ade:	08 c0       	rjmp	.+16     	; 0xaf0 <__fp_splitA+0x30>
     ae0:	16 16       	cp	r1, r22
     ae2:	17 06       	cpc	r1, r23
     ae4:	18 06       	cpc	r1, r24
     ae6:	99 1f       	adc	r25, r25
     ae8:	f1 cf       	rjmp	.-30     	; 0xacc <__fp_splitA+0xc>
     aea:	86 95       	lsr	r24
     aec:	71 05       	cpc	r23, r1
     aee:	61 05       	cpc	r22, r1
     af0:	08 94       	sec
     af2:	08 95       	ret

00000af4 <__fp_zero>:
     af4:	e8 94       	clt

00000af6 <__fp_szero>:
     af6:	bb 27       	eor	r27, r27
     af8:	66 27       	eor	r22, r22
     afa:	77 27       	eor	r23, r23
     afc:	cb 01       	movw	r24, r22
     afe:	97 f9       	bld	r25, 7
     b00:	08 95       	ret

00000b02 <__gesf2>:
     b02:	0e 94 34 05 	call	0xa68	; 0xa68 <__fp_cmp>
     b06:	08 f4       	brcc	.+2      	; 0xb0a <__gesf2+0x8>
     b08:	8f ef       	ldi	r24, 0xFF	; 255
     b0a:	08 95       	ret

00000b0c <__mulsf3>:
     b0c:	0e 94 99 05 	call	0xb32	; 0xb32 <__mulsf3x>
     b10:	0c 94 0a 06 	jmp	0xc14	; 0xc14 <__fp_round>
     b14:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <__fp_pscA>
     b18:	38 f0       	brcs	.+14     	; 0xb28 <__mulsf3+0x1c>
     b1a:	0e 94 03 06 	call	0xc06	; 0xc06 <__fp_pscB>
     b1e:	20 f0       	brcs	.+8      	; 0xb28 <__mulsf3+0x1c>
     b20:	95 23       	and	r25, r21
     b22:	11 f0       	breq	.+4      	; 0xb28 <__mulsf3+0x1c>
     b24:	0c 94 f3 05 	jmp	0xbe6	; 0xbe6 <__fp_inf>
     b28:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__fp_nan>
     b2c:	11 24       	eor	r1, r1
     b2e:	0c 94 7b 05 	jmp	0xaf6	; 0xaf6 <__fp_szero>

00000b32 <__mulsf3x>:
     b32:	0e 94 58 05 	call	0xab0	; 0xab0 <__fp_split3>
     b36:	70 f3       	brcs	.-36     	; 0xb14 <__mulsf3+0x8>

00000b38 <__mulsf3_pse>:
     b38:	95 9f       	mul	r25, r21
     b3a:	c1 f3       	breq	.-16     	; 0xb2c <__mulsf3+0x20>
     b3c:	95 0f       	add	r25, r21
     b3e:	50 e0       	ldi	r21, 0x00	; 0
     b40:	55 1f       	adc	r21, r21
     b42:	62 9f       	mul	r22, r18
     b44:	f0 01       	movw	r30, r0
     b46:	72 9f       	mul	r23, r18
     b48:	bb 27       	eor	r27, r27
     b4a:	f0 0d       	add	r31, r0
     b4c:	b1 1d       	adc	r27, r1
     b4e:	63 9f       	mul	r22, r19
     b50:	aa 27       	eor	r26, r26
     b52:	f0 0d       	add	r31, r0
     b54:	b1 1d       	adc	r27, r1
     b56:	aa 1f       	adc	r26, r26
     b58:	64 9f       	mul	r22, r20
     b5a:	66 27       	eor	r22, r22
     b5c:	b0 0d       	add	r27, r0
     b5e:	a1 1d       	adc	r26, r1
     b60:	66 1f       	adc	r22, r22
     b62:	82 9f       	mul	r24, r18
     b64:	22 27       	eor	r18, r18
     b66:	b0 0d       	add	r27, r0
     b68:	a1 1d       	adc	r26, r1
     b6a:	62 1f       	adc	r22, r18
     b6c:	73 9f       	mul	r23, r19
     b6e:	b0 0d       	add	r27, r0
     b70:	a1 1d       	adc	r26, r1
     b72:	62 1f       	adc	r22, r18
     b74:	83 9f       	mul	r24, r19
     b76:	a0 0d       	add	r26, r0
     b78:	61 1d       	adc	r22, r1
     b7a:	22 1f       	adc	r18, r18
     b7c:	74 9f       	mul	r23, r20
     b7e:	33 27       	eor	r19, r19
     b80:	a0 0d       	add	r26, r0
     b82:	61 1d       	adc	r22, r1
     b84:	23 1f       	adc	r18, r19
     b86:	84 9f       	mul	r24, r20
     b88:	60 0d       	add	r22, r0
     b8a:	21 1d       	adc	r18, r1
     b8c:	82 2f       	mov	r24, r18
     b8e:	76 2f       	mov	r23, r22
     b90:	6a 2f       	mov	r22, r26
     b92:	11 24       	eor	r1, r1
     b94:	9f 57       	subi	r25, 0x7F	; 127
     b96:	50 40       	sbci	r21, 0x00	; 0
     b98:	9a f0       	brmi	.+38     	; 0xbc0 <__mulsf3_pse+0x88>
     b9a:	f1 f0       	breq	.+60     	; 0xbd8 <__mulsf3_pse+0xa0>
     b9c:	88 23       	and	r24, r24
     b9e:	4a f0       	brmi	.+18     	; 0xbb2 <__mulsf3_pse+0x7a>
     ba0:	ee 0f       	add	r30, r30
     ba2:	ff 1f       	adc	r31, r31
     ba4:	bb 1f       	adc	r27, r27
     ba6:	66 1f       	adc	r22, r22
     ba8:	77 1f       	adc	r23, r23
     baa:	88 1f       	adc	r24, r24
     bac:	91 50       	subi	r25, 0x01	; 1
     bae:	50 40       	sbci	r21, 0x00	; 0
     bb0:	a9 f7       	brne	.-22     	; 0xb9c <__mulsf3_pse+0x64>
     bb2:	9e 3f       	cpi	r25, 0xFE	; 254
     bb4:	51 05       	cpc	r21, r1
     bb6:	80 f0       	brcs	.+32     	; 0xbd8 <__mulsf3_pse+0xa0>
     bb8:	0c 94 f3 05 	jmp	0xbe6	; 0xbe6 <__fp_inf>
     bbc:	0c 94 7b 05 	jmp	0xaf6	; 0xaf6 <__fp_szero>
     bc0:	5f 3f       	cpi	r21, 0xFF	; 255
     bc2:	e4 f3       	brlt	.-8      	; 0xbbc <__mulsf3_pse+0x84>
     bc4:	98 3e       	cpi	r25, 0xE8	; 232
     bc6:	d4 f3       	brlt	.-12     	; 0xbbc <__mulsf3_pse+0x84>
     bc8:	86 95       	lsr	r24
     bca:	77 95       	ror	r23
     bcc:	67 95       	ror	r22
     bce:	b7 95       	ror	r27
     bd0:	f7 95       	ror	r31
     bd2:	e7 95       	ror	r30
     bd4:	9f 5f       	subi	r25, 0xFF	; 255
     bd6:	c1 f7       	brne	.-16     	; 0xbc8 <__mulsf3_pse+0x90>
     bd8:	fe 2b       	or	r31, r30
     bda:	88 0f       	add	r24, r24
     bdc:	91 1d       	adc	r25, r1
     bde:	96 95       	lsr	r25
     be0:	87 95       	ror	r24
     be2:	97 f9       	bld	r25, 7
     be4:	08 95       	ret

00000be6 <__fp_inf>:
     be6:	97 f9       	bld	r25, 7
     be8:	9f 67       	ori	r25, 0x7F	; 127
     bea:	80 e8       	ldi	r24, 0x80	; 128
     bec:	70 e0       	ldi	r23, 0x00	; 0
     bee:	60 e0       	ldi	r22, 0x00	; 0
     bf0:	08 95       	ret

00000bf2 <__fp_nan>:
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
     bf4:	80 ec       	ldi	r24, 0xC0	; 192
     bf6:	08 95       	ret

00000bf8 <__fp_pscA>:
     bf8:	00 24       	eor	r0, r0
     bfa:	0a 94       	dec	r0
     bfc:	16 16       	cp	r1, r22
     bfe:	17 06       	cpc	r1, r23
     c00:	18 06       	cpc	r1, r24
     c02:	09 06       	cpc	r0, r25
     c04:	08 95       	ret

00000c06 <__fp_pscB>:
     c06:	00 24       	eor	r0, r0
     c08:	0a 94       	dec	r0
     c0a:	12 16       	cp	r1, r18
     c0c:	13 06       	cpc	r1, r19
     c0e:	14 06       	cpc	r1, r20
     c10:	05 06       	cpc	r0, r21
     c12:	08 95       	ret

00000c14 <__fp_round>:
     c14:	09 2e       	mov	r0, r25
     c16:	03 94       	inc	r0
     c18:	00 0c       	add	r0, r0
     c1a:	11 f4       	brne	.+4      	; 0xc20 <__fp_round+0xc>
     c1c:	88 23       	and	r24, r24
     c1e:	52 f0       	brmi	.+20     	; 0xc34 <__fp_round+0x20>
     c20:	bb 0f       	add	r27, r27
     c22:	40 f4       	brcc	.+16     	; 0xc34 <__fp_round+0x20>
     c24:	bf 2b       	or	r27, r31
     c26:	11 f4       	brne	.+4      	; 0xc2c <__fp_round+0x18>
     c28:	60 ff       	sbrs	r22, 0
     c2a:	04 c0       	rjmp	.+8      	; 0xc34 <__fp_round+0x20>
     c2c:	6f 5f       	subi	r22, 0xFF	; 255
     c2e:	7f 4f       	sbci	r23, 0xFF	; 255
     c30:	8f 4f       	sbci	r24, 0xFF	; 255
     c32:	9f 4f       	sbci	r25, 0xFF	; 255
     c34:	08 95       	ret

00000c36 <__divmodsi4>:
     c36:	05 2e       	mov	r0, r21
     c38:	97 fb       	bst	r25, 7
     c3a:	1e f4       	brtc	.+6      	; 0xc42 <__divmodsi4+0xc>
     c3c:	00 94       	com	r0
     c3e:	0e 94 32 06 	call	0xc64	; 0xc64 <__negsi2>
     c42:	57 fd       	sbrc	r21, 7
     c44:	07 d0       	rcall	.+14     	; 0xc54 <__divmodsi4_neg2>
     c46:	0e 94 40 06 	call	0xc80	; 0xc80 <__udivmodsi4>
     c4a:	07 fc       	sbrc	r0, 7
     c4c:	03 d0       	rcall	.+6      	; 0xc54 <__divmodsi4_neg2>
     c4e:	4e f4       	brtc	.+18     	; 0xc62 <__divmodsi4_exit>
     c50:	0c 94 32 06 	jmp	0xc64	; 0xc64 <__negsi2>

00000c54 <__divmodsi4_neg2>:
     c54:	50 95       	com	r21
     c56:	40 95       	com	r20
     c58:	30 95       	com	r19
     c5a:	21 95       	neg	r18
     c5c:	3f 4f       	sbci	r19, 0xFF	; 255
     c5e:	4f 4f       	sbci	r20, 0xFF	; 255
     c60:	5f 4f       	sbci	r21, 0xFF	; 255

00000c62 <__divmodsi4_exit>:
     c62:	08 95       	ret

00000c64 <__negsi2>:
     c64:	90 95       	com	r25
     c66:	80 95       	com	r24
     c68:	70 95       	com	r23
     c6a:	61 95       	neg	r22
     c6c:	7f 4f       	sbci	r23, 0xFF	; 255
     c6e:	8f 4f       	sbci	r24, 0xFF	; 255
     c70:	9f 4f       	sbci	r25, 0xFF	; 255
     c72:	08 95       	ret

00000c74 <__tablejump2__>:
     c74:	ee 0f       	add	r30, r30
     c76:	ff 1f       	adc	r31, r31
     c78:	05 90       	lpm	r0, Z+
     c7a:	f4 91       	lpm	r31, Z
     c7c:	e0 2d       	mov	r30, r0
     c7e:	09 94       	ijmp

00000c80 <__udivmodsi4>:
     c80:	a1 e2       	ldi	r26, 0x21	; 33
     c82:	1a 2e       	mov	r1, r26
     c84:	aa 1b       	sub	r26, r26
     c86:	bb 1b       	sub	r27, r27
     c88:	fd 01       	movw	r30, r26
     c8a:	0d c0       	rjmp	.+26     	; 0xca6 <__udivmodsi4_ep>

00000c8c <__udivmodsi4_loop>:
     c8c:	aa 1f       	adc	r26, r26
     c8e:	bb 1f       	adc	r27, r27
     c90:	ee 1f       	adc	r30, r30
     c92:	ff 1f       	adc	r31, r31
     c94:	a2 17       	cp	r26, r18
     c96:	b3 07       	cpc	r27, r19
     c98:	e4 07       	cpc	r30, r20
     c9a:	f5 07       	cpc	r31, r21
     c9c:	20 f0       	brcs	.+8      	; 0xca6 <__udivmodsi4_ep>
     c9e:	a2 1b       	sub	r26, r18
     ca0:	b3 0b       	sbc	r27, r19
     ca2:	e4 0b       	sbc	r30, r20
     ca4:	f5 0b       	sbc	r31, r21

00000ca6 <__udivmodsi4_ep>:
     ca6:	66 1f       	adc	r22, r22
     ca8:	77 1f       	adc	r23, r23
     caa:	88 1f       	adc	r24, r24
     cac:	99 1f       	adc	r25, r25
     cae:	1a 94       	dec	r1
     cb0:	69 f7       	brne	.-38     	; 0xc8c <__udivmodsi4_loop>
     cb2:	60 95       	com	r22
     cb4:	70 95       	com	r23
     cb6:	80 95       	com	r24
     cb8:	90 95       	com	r25
     cba:	9b 01       	movw	r18, r22
     cbc:	ac 01       	movw	r20, r24
     cbe:	bd 01       	movw	r22, r26
     cc0:	cf 01       	movw	r24, r30
     cc2:	08 95       	ret

00000cc4 <puts>:
     cc4:	0f 93       	push	r16
     cc6:	1f 93       	push	r17
     cc8:	cf 93       	push	r28
     cca:	df 93       	push	r29
     ccc:	e0 91 87 20 	lds	r30, 0x2087	; 0x802087 <__iob+0x2>
     cd0:	f0 91 88 20 	lds	r31, 0x2088	; 0x802088 <__iob+0x3>
     cd4:	23 81       	ldd	r18, Z+3	; 0x03
     cd6:	21 ff       	sbrs	r18, 1
     cd8:	1b c0       	rjmp	.+54     	; 0xd10 <puts+0x4c>
     cda:	8c 01       	movw	r16, r24
     cdc:	d0 e0       	ldi	r29, 0x00	; 0
     cde:	c0 e0       	ldi	r28, 0x00	; 0
     ce0:	f8 01       	movw	r30, r16
     ce2:	81 91       	ld	r24, Z+
     ce4:	8f 01       	movw	r16, r30
     ce6:	60 91 87 20 	lds	r22, 0x2087	; 0x802087 <__iob+0x2>
     cea:	70 91 88 20 	lds	r23, 0x2088	; 0x802088 <__iob+0x3>
     cee:	db 01       	movw	r26, r22
     cf0:	18 96       	adiw	r26, 0x08	; 8
     cf2:	ed 91       	ld	r30, X+
     cf4:	fc 91       	ld	r31, X
     cf6:	19 97       	sbiw	r26, 0x09	; 9
     cf8:	88 23       	and	r24, r24
     cfa:	31 f0       	breq	.+12     	; 0xd08 <puts+0x44>
     cfc:	09 95       	icall
     cfe:	89 2b       	or	r24, r25
     d00:	79 f3       	breq	.-34     	; 0xce0 <puts+0x1c>
     d02:	df ef       	ldi	r29, 0xFF	; 255
     d04:	cf ef       	ldi	r28, 0xFF	; 255
     d06:	ec cf       	rjmp	.-40     	; 0xce0 <puts+0x1c>
     d08:	8a e0       	ldi	r24, 0x0A	; 10
     d0a:	09 95       	icall
     d0c:	89 2b       	or	r24, r25
     d0e:	19 f0       	breq	.+6      	; 0xd16 <puts+0x52>
     d10:	8f ef       	ldi	r24, 0xFF	; 255
     d12:	9f ef       	ldi	r25, 0xFF	; 255
     d14:	02 c0       	rjmp	.+4      	; 0xd1a <puts+0x56>
     d16:	8d 2f       	mov	r24, r29
     d18:	9c 2f       	mov	r25, r28
     d1a:	df 91       	pop	r29
     d1c:	cf 91       	pop	r28
     d1e:	1f 91       	pop	r17
     d20:	0f 91       	pop	r16
     d22:	08 95       	ret

00000d24 <sprintf>:
     d24:	ae e0       	ldi	r26, 0x0E	; 14
     d26:	b0 e0       	ldi	r27, 0x00	; 0
     d28:	e8 e9       	ldi	r30, 0x98	; 152
     d2a:	f6 e0       	ldi	r31, 0x06	; 6
     d2c:	0c 94 53 09 	jmp	0x12a6	; 0x12a6 <__prologue_saves__+0x1c>
     d30:	0d 89       	ldd	r16, Y+21	; 0x15
     d32:	1e 89       	ldd	r17, Y+22	; 0x16
     d34:	86 e0       	ldi	r24, 0x06	; 6
     d36:	8c 83       	std	Y+4, r24	; 0x04
     d38:	09 83       	std	Y+1, r16	; 0x01
     d3a:	1a 83       	std	Y+2, r17	; 0x02
     d3c:	8f ef       	ldi	r24, 0xFF	; 255
     d3e:	9f e7       	ldi	r25, 0x7F	; 127
     d40:	8d 83       	std	Y+5, r24	; 0x05
     d42:	9e 83       	std	Y+6, r25	; 0x06
     d44:	ae 01       	movw	r20, r28
     d46:	47 5e       	subi	r20, 0xE7	; 231
     d48:	5f 4f       	sbci	r21, 0xFF	; 255
     d4a:	6f 89       	ldd	r22, Y+23	; 0x17
     d4c:	78 8d       	ldd	r23, Y+24	; 0x18
     d4e:	ce 01       	movw	r24, r28
     d50:	01 96       	adiw	r24, 0x01	; 1
     d52:	0e 94 b4 06 	call	0xd68	; 0xd68 <vfprintf>
     d56:	ef 81       	ldd	r30, Y+7	; 0x07
     d58:	f8 85       	ldd	r31, Y+8	; 0x08
     d5a:	e0 0f       	add	r30, r16
     d5c:	f1 1f       	adc	r31, r17
     d5e:	10 82       	st	Z, r1
     d60:	2e 96       	adiw	r28, 0x0e	; 14
     d62:	e4 e0       	ldi	r30, 0x04	; 4
     d64:	0c 94 6c 09 	jmp	0x12d8	; 0x12d8 <__epilogue_restores__+0x1c>

00000d68 <vfprintf>:
     d68:	ab e0       	ldi	r26, 0x0B	; 11
     d6a:	b0 e0       	ldi	r27, 0x00	; 0
     d6c:	ea eb       	ldi	r30, 0xBA	; 186
     d6e:	f6 e0       	ldi	r31, 0x06	; 6
     d70:	0c 94 45 09 	jmp	0x128a	; 0x128a <__prologue_saves__>
     d74:	6c 01       	movw	r12, r24
     d76:	7b 01       	movw	r14, r22
     d78:	8a 01       	movw	r16, r20
     d7a:	fc 01       	movw	r30, r24
     d7c:	16 82       	std	Z+6, r1	; 0x06
     d7e:	17 82       	std	Z+7, r1	; 0x07
     d80:	83 81       	ldd	r24, Z+3	; 0x03
     d82:	81 ff       	sbrs	r24, 1
     d84:	cc c1       	rjmp	.+920    	; 0x111e <vfprintf+0x3b6>
     d86:	ce 01       	movw	r24, r28
     d88:	01 96       	adiw	r24, 0x01	; 1
     d8a:	3c 01       	movw	r6, r24
     d8c:	f6 01       	movw	r30, r12
     d8e:	93 81       	ldd	r25, Z+3	; 0x03
     d90:	f7 01       	movw	r30, r14
     d92:	93 fd       	sbrc	r25, 3
     d94:	85 91       	lpm	r24, Z+
     d96:	93 ff       	sbrs	r25, 3
     d98:	81 91       	ld	r24, Z+
     d9a:	7f 01       	movw	r14, r30
     d9c:	88 23       	and	r24, r24
     d9e:	09 f4       	brne	.+2      	; 0xda2 <vfprintf+0x3a>
     da0:	ba c1       	rjmp	.+884    	; 0x1116 <vfprintf+0x3ae>
     da2:	85 32       	cpi	r24, 0x25	; 37
     da4:	39 f4       	brne	.+14     	; 0xdb4 <vfprintf+0x4c>
     da6:	93 fd       	sbrc	r25, 3
     da8:	85 91       	lpm	r24, Z+
     daa:	93 ff       	sbrs	r25, 3
     dac:	81 91       	ld	r24, Z+
     dae:	7f 01       	movw	r14, r30
     db0:	85 32       	cpi	r24, 0x25	; 37
     db2:	29 f4       	brne	.+10     	; 0xdbe <vfprintf+0x56>
     db4:	b6 01       	movw	r22, r12
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	0e 94 ab 08 	call	0x1156	; 0x1156 <fputc>
     dbc:	e7 cf       	rjmp	.-50     	; 0xd8c <vfprintf+0x24>
     dbe:	91 2c       	mov	r9, r1
     dc0:	21 2c       	mov	r2, r1
     dc2:	31 2c       	mov	r3, r1
     dc4:	ff e1       	ldi	r31, 0x1F	; 31
     dc6:	f3 15       	cp	r31, r3
     dc8:	d8 f0       	brcs	.+54     	; 0xe00 <vfprintf+0x98>
     dca:	8b 32       	cpi	r24, 0x2B	; 43
     dcc:	79 f0       	breq	.+30     	; 0xdec <vfprintf+0x84>
     dce:	38 f4       	brcc	.+14     	; 0xdde <vfprintf+0x76>
     dd0:	80 32       	cpi	r24, 0x20	; 32
     dd2:	79 f0       	breq	.+30     	; 0xdf2 <vfprintf+0x8a>
     dd4:	83 32       	cpi	r24, 0x23	; 35
     dd6:	a1 f4       	brne	.+40     	; 0xe00 <vfprintf+0x98>
     dd8:	23 2d       	mov	r18, r3
     dda:	20 61       	ori	r18, 0x10	; 16
     ddc:	1d c0       	rjmp	.+58     	; 0xe18 <vfprintf+0xb0>
     dde:	8d 32       	cpi	r24, 0x2D	; 45
     de0:	61 f0       	breq	.+24     	; 0xdfa <vfprintf+0x92>
     de2:	80 33       	cpi	r24, 0x30	; 48
     de4:	69 f4       	brne	.+26     	; 0xe00 <vfprintf+0x98>
     de6:	23 2d       	mov	r18, r3
     de8:	21 60       	ori	r18, 0x01	; 1
     dea:	16 c0       	rjmp	.+44     	; 0xe18 <vfprintf+0xb0>
     dec:	83 2d       	mov	r24, r3
     dee:	82 60       	ori	r24, 0x02	; 2
     df0:	38 2e       	mov	r3, r24
     df2:	e3 2d       	mov	r30, r3
     df4:	e4 60       	ori	r30, 0x04	; 4
     df6:	3e 2e       	mov	r3, r30
     df8:	2a c0       	rjmp	.+84     	; 0xe4e <vfprintf+0xe6>
     dfa:	f3 2d       	mov	r31, r3
     dfc:	f8 60       	ori	r31, 0x08	; 8
     dfe:	1d c0       	rjmp	.+58     	; 0xe3a <vfprintf+0xd2>
     e00:	37 fc       	sbrc	r3, 7
     e02:	2d c0       	rjmp	.+90     	; 0xe5e <vfprintf+0xf6>
     e04:	20 ed       	ldi	r18, 0xD0	; 208
     e06:	28 0f       	add	r18, r24
     e08:	2a 30       	cpi	r18, 0x0A	; 10
     e0a:	40 f0       	brcs	.+16     	; 0xe1c <vfprintf+0xb4>
     e0c:	8e 32       	cpi	r24, 0x2E	; 46
     e0e:	b9 f4       	brne	.+46     	; 0xe3e <vfprintf+0xd6>
     e10:	36 fc       	sbrc	r3, 6
     e12:	81 c1       	rjmp	.+770    	; 0x1116 <vfprintf+0x3ae>
     e14:	23 2d       	mov	r18, r3
     e16:	20 64       	ori	r18, 0x40	; 64
     e18:	32 2e       	mov	r3, r18
     e1a:	19 c0       	rjmp	.+50     	; 0xe4e <vfprintf+0xe6>
     e1c:	36 fe       	sbrs	r3, 6
     e1e:	06 c0       	rjmp	.+12     	; 0xe2c <vfprintf+0xc4>
     e20:	8a e0       	ldi	r24, 0x0A	; 10
     e22:	98 9e       	mul	r9, r24
     e24:	20 0d       	add	r18, r0
     e26:	11 24       	eor	r1, r1
     e28:	92 2e       	mov	r9, r18
     e2a:	11 c0       	rjmp	.+34     	; 0xe4e <vfprintf+0xe6>
     e2c:	ea e0       	ldi	r30, 0x0A	; 10
     e2e:	2e 9e       	mul	r2, r30
     e30:	20 0d       	add	r18, r0
     e32:	11 24       	eor	r1, r1
     e34:	22 2e       	mov	r2, r18
     e36:	f3 2d       	mov	r31, r3
     e38:	f0 62       	ori	r31, 0x20	; 32
     e3a:	3f 2e       	mov	r3, r31
     e3c:	08 c0       	rjmp	.+16     	; 0xe4e <vfprintf+0xe6>
     e3e:	8c 36       	cpi	r24, 0x6C	; 108
     e40:	21 f4       	brne	.+8      	; 0xe4a <vfprintf+0xe2>
     e42:	83 2d       	mov	r24, r3
     e44:	80 68       	ori	r24, 0x80	; 128
     e46:	38 2e       	mov	r3, r24
     e48:	02 c0       	rjmp	.+4      	; 0xe4e <vfprintf+0xe6>
     e4a:	88 36       	cpi	r24, 0x68	; 104
     e4c:	41 f4       	brne	.+16     	; 0xe5e <vfprintf+0xf6>
     e4e:	f7 01       	movw	r30, r14
     e50:	93 fd       	sbrc	r25, 3
     e52:	85 91       	lpm	r24, Z+
     e54:	93 ff       	sbrs	r25, 3
     e56:	81 91       	ld	r24, Z+
     e58:	7f 01       	movw	r14, r30
     e5a:	81 11       	cpse	r24, r1
     e5c:	b3 cf       	rjmp	.-154    	; 0xdc4 <vfprintf+0x5c>
     e5e:	98 2f       	mov	r25, r24
     e60:	9f 7d       	andi	r25, 0xDF	; 223
     e62:	95 54       	subi	r25, 0x45	; 69
     e64:	93 30       	cpi	r25, 0x03	; 3
     e66:	28 f4       	brcc	.+10     	; 0xe72 <vfprintf+0x10a>
     e68:	0c 5f       	subi	r16, 0xFC	; 252
     e6a:	1f 4f       	sbci	r17, 0xFF	; 255
     e6c:	9f e3       	ldi	r25, 0x3F	; 63
     e6e:	99 83       	std	Y+1, r25	; 0x01
     e70:	0d c0       	rjmp	.+26     	; 0xe8c <vfprintf+0x124>
     e72:	83 36       	cpi	r24, 0x63	; 99
     e74:	31 f0       	breq	.+12     	; 0xe82 <vfprintf+0x11a>
     e76:	83 37       	cpi	r24, 0x73	; 115
     e78:	71 f0       	breq	.+28     	; 0xe96 <vfprintf+0x12e>
     e7a:	83 35       	cpi	r24, 0x53	; 83
     e7c:	09 f0       	breq	.+2      	; 0xe80 <vfprintf+0x118>
     e7e:	59 c0       	rjmp	.+178    	; 0xf32 <vfprintf+0x1ca>
     e80:	21 c0       	rjmp	.+66     	; 0xec4 <vfprintf+0x15c>
     e82:	f8 01       	movw	r30, r16
     e84:	80 81       	ld	r24, Z
     e86:	89 83       	std	Y+1, r24	; 0x01
     e88:	0e 5f       	subi	r16, 0xFE	; 254
     e8a:	1f 4f       	sbci	r17, 0xFF	; 255
     e8c:	88 24       	eor	r8, r8
     e8e:	83 94       	inc	r8
     e90:	91 2c       	mov	r9, r1
     e92:	53 01       	movw	r10, r6
     e94:	13 c0       	rjmp	.+38     	; 0xebc <vfprintf+0x154>
     e96:	28 01       	movw	r4, r16
     e98:	f2 e0       	ldi	r31, 0x02	; 2
     e9a:	4f 0e       	add	r4, r31
     e9c:	51 1c       	adc	r5, r1
     e9e:	f8 01       	movw	r30, r16
     ea0:	a0 80       	ld	r10, Z
     ea2:	b1 80       	ldd	r11, Z+1	; 0x01
     ea4:	36 fe       	sbrs	r3, 6
     ea6:	03 c0       	rjmp	.+6      	; 0xeae <vfprintf+0x146>
     ea8:	69 2d       	mov	r22, r9
     eaa:	70 e0       	ldi	r23, 0x00	; 0
     eac:	02 c0       	rjmp	.+4      	; 0xeb2 <vfprintf+0x14a>
     eae:	6f ef       	ldi	r22, 0xFF	; 255
     eb0:	7f ef       	ldi	r23, 0xFF	; 255
     eb2:	c5 01       	movw	r24, r10
     eb4:	0e 94 a0 08 	call	0x1140	; 0x1140 <strnlen>
     eb8:	4c 01       	movw	r8, r24
     eba:	82 01       	movw	r16, r4
     ebc:	f3 2d       	mov	r31, r3
     ebe:	ff 77       	andi	r31, 0x7F	; 127
     ec0:	3f 2e       	mov	r3, r31
     ec2:	16 c0       	rjmp	.+44     	; 0xef0 <vfprintf+0x188>
     ec4:	28 01       	movw	r4, r16
     ec6:	22 e0       	ldi	r18, 0x02	; 2
     ec8:	42 0e       	add	r4, r18
     eca:	51 1c       	adc	r5, r1
     ecc:	f8 01       	movw	r30, r16
     ece:	a0 80       	ld	r10, Z
     ed0:	b1 80       	ldd	r11, Z+1	; 0x01
     ed2:	36 fe       	sbrs	r3, 6
     ed4:	03 c0       	rjmp	.+6      	; 0xedc <vfprintf+0x174>
     ed6:	69 2d       	mov	r22, r9
     ed8:	70 e0       	ldi	r23, 0x00	; 0
     eda:	02 c0       	rjmp	.+4      	; 0xee0 <vfprintf+0x178>
     edc:	6f ef       	ldi	r22, 0xFF	; 255
     ede:	7f ef       	ldi	r23, 0xFF	; 255
     ee0:	c5 01       	movw	r24, r10
     ee2:	0e 94 95 08 	call	0x112a	; 0x112a <strnlen_P>
     ee6:	4c 01       	movw	r8, r24
     ee8:	f3 2d       	mov	r31, r3
     eea:	f0 68       	ori	r31, 0x80	; 128
     eec:	3f 2e       	mov	r3, r31
     eee:	82 01       	movw	r16, r4
     ef0:	33 fc       	sbrc	r3, 3
     ef2:	1b c0       	rjmp	.+54     	; 0xf2a <vfprintf+0x1c2>
     ef4:	82 2d       	mov	r24, r2
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	88 16       	cp	r8, r24
     efa:	99 06       	cpc	r9, r25
     efc:	b0 f4       	brcc	.+44     	; 0xf2a <vfprintf+0x1c2>
     efe:	b6 01       	movw	r22, r12
     f00:	80 e2       	ldi	r24, 0x20	; 32
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	0e 94 ab 08 	call	0x1156	; 0x1156 <fputc>
     f08:	2a 94       	dec	r2
     f0a:	f4 cf       	rjmp	.-24     	; 0xef4 <vfprintf+0x18c>
     f0c:	f5 01       	movw	r30, r10
     f0e:	37 fc       	sbrc	r3, 7
     f10:	85 91       	lpm	r24, Z+
     f12:	37 fe       	sbrs	r3, 7
     f14:	81 91       	ld	r24, Z+
     f16:	5f 01       	movw	r10, r30
     f18:	b6 01       	movw	r22, r12
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	0e 94 ab 08 	call	0x1156	; 0x1156 <fputc>
     f20:	21 10       	cpse	r2, r1
     f22:	2a 94       	dec	r2
     f24:	21 e0       	ldi	r18, 0x01	; 1
     f26:	82 1a       	sub	r8, r18
     f28:	91 08       	sbc	r9, r1
     f2a:	81 14       	cp	r8, r1
     f2c:	91 04       	cpc	r9, r1
     f2e:	71 f7       	brne	.-36     	; 0xf0c <vfprintf+0x1a4>
     f30:	e8 c0       	rjmp	.+464    	; 0x1102 <vfprintf+0x39a>
     f32:	84 36       	cpi	r24, 0x64	; 100
     f34:	11 f0       	breq	.+4      	; 0xf3a <vfprintf+0x1d2>
     f36:	89 36       	cpi	r24, 0x69	; 105
     f38:	41 f5       	brne	.+80     	; 0xf8a <vfprintf+0x222>
     f3a:	f8 01       	movw	r30, r16
     f3c:	37 fe       	sbrs	r3, 7
     f3e:	07 c0       	rjmp	.+14     	; 0xf4e <vfprintf+0x1e6>
     f40:	60 81       	ld	r22, Z
     f42:	71 81       	ldd	r23, Z+1	; 0x01
     f44:	82 81       	ldd	r24, Z+2	; 0x02
     f46:	93 81       	ldd	r25, Z+3	; 0x03
     f48:	0c 5f       	subi	r16, 0xFC	; 252
     f4a:	1f 4f       	sbci	r17, 0xFF	; 255
     f4c:	08 c0       	rjmp	.+16     	; 0xf5e <vfprintf+0x1f6>
     f4e:	60 81       	ld	r22, Z
     f50:	71 81       	ldd	r23, Z+1	; 0x01
     f52:	07 2e       	mov	r0, r23
     f54:	00 0c       	add	r0, r0
     f56:	88 0b       	sbc	r24, r24
     f58:	99 0b       	sbc	r25, r25
     f5a:	0e 5f       	subi	r16, 0xFE	; 254
     f5c:	1f 4f       	sbci	r17, 0xFF	; 255
     f5e:	f3 2d       	mov	r31, r3
     f60:	ff 76       	andi	r31, 0x6F	; 111
     f62:	3f 2e       	mov	r3, r31
     f64:	97 ff       	sbrs	r25, 7
     f66:	09 c0       	rjmp	.+18     	; 0xf7a <vfprintf+0x212>
     f68:	90 95       	com	r25
     f6a:	80 95       	com	r24
     f6c:	70 95       	com	r23
     f6e:	61 95       	neg	r22
     f70:	7f 4f       	sbci	r23, 0xFF	; 255
     f72:	8f 4f       	sbci	r24, 0xFF	; 255
     f74:	9f 4f       	sbci	r25, 0xFF	; 255
     f76:	f0 68       	ori	r31, 0x80	; 128
     f78:	3f 2e       	mov	r3, r31
     f7a:	2a e0       	ldi	r18, 0x0A	; 10
     f7c:	30 e0       	ldi	r19, 0x00	; 0
     f7e:	a3 01       	movw	r20, r6
     f80:	0e 94 e7 08 	call	0x11ce	; 0x11ce <__ultoa_invert>
     f84:	88 2e       	mov	r8, r24
     f86:	86 18       	sub	r8, r6
     f88:	45 c0       	rjmp	.+138    	; 0x1014 <vfprintf+0x2ac>
     f8a:	85 37       	cpi	r24, 0x75	; 117
     f8c:	31 f4       	brne	.+12     	; 0xf9a <vfprintf+0x232>
     f8e:	23 2d       	mov	r18, r3
     f90:	2f 7e       	andi	r18, 0xEF	; 239
     f92:	b2 2e       	mov	r11, r18
     f94:	2a e0       	ldi	r18, 0x0A	; 10
     f96:	30 e0       	ldi	r19, 0x00	; 0
     f98:	25 c0       	rjmp	.+74     	; 0xfe4 <vfprintf+0x27c>
     f9a:	93 2d       	mov	r25, r3
     f9c:	99 7f       	andi	r25, 0xF9	; 249
     f9e:	b9 2e       	mov	r11, r25
     fa0:	8f 36       	cpi	r24, 0x6F	; 111
     fa2:	c1 f0       	breq	.+48     	; 0xfd4 <vfprintf+0x26c>
     fa4:	18 f4       	brcc	.+6      	; 0xfac <vfprintf+0x244>
     fa6:	88 35       	cpi	r24, 0x58	; 88
     fa8:	79 f0       	breq	.+30     	; 0xfc8 <vfprintf+0x260>
     faa:	b5 c0       	rjmp	.+362    	; 0x1116 <vfprintf+0x3ae>
     fac:	80 37       	cpi	r24, 0x70	; 112
     fae:	19 f0       	breq	.+6      	; 0xfb6 <vfprintf+0x24e>
     fb0:	88 37       	cpi	r24, 0x78	; 120
     fb2:	21 f0       	breq	.+8      	; 0xfbc <vfprintf+0x254>
     fb4:	b0 c0       	rjmp	.+352    	; 0x1116 <vfprintf+0x3ae>
     fb6:	e9 2f       	mov	r30, r25
     fb8:	e0 61       	ori	r30, 0x10	; 16
     fba:	be 2e       	mov	r11, r30
     fbc:	b4 fe       	sbrs	r11, 4
     fbe:	0d c0       	rjmp	.+26     	; 0xfda <vfprintf+0x272>
     fc0:	fb 2d       	mov	r31, r11
     fc2:	f4 60       	ori	r31, 0x04	; 4
     fc4:	bf 2e       	mov	r11, r31
     fc6:	09 c0       	rjmp	.+18     	; 0xfda <vfprintf+0x272>
     fc8:	34 fe       	sbrs	r3, 4
     fca:	0a c0       	rjmp	.+20     	; 0xfe0 <vfprintf+0x278>
     fcc:	29 2f       	mov	r18, r25
     fce:	26 60       	ori	r18, 0x06	; 6
     fd0:	b2 2e       	mov	r11, r18
     fd2:	06 c0       	rjmp	.+12     	; 0xfe0 <vfprintf+0x278>
     fd4:	28 e0       	ldi	r18, 0x08	; 8
     fd6:	30 e0       	ldi	r19, 0x00	; 0
     fd8:	05 c0       	rjmp	.+10     	; 0xfe4 <vfprintf+0x27c>
     fda:	20 e1       	ldi	r18, 0x10	; 16
     fdc:	30 e0       	ldi	r19, 0x00	; 0
     fde:	02 c0       	rjmp	.+4      	; 0xfe4 <vfprintf+0x27c>
     fe0:	20 e1       	ldi	r18, 0x10	; 16
     fe2:	32 e0       	ldi	r19, 0x02	; 2
     fe4:	f8 01       	movw	r30, r16
     fe6:	b7 fe       	sbrs	r11, 7
     fe8:	07 c0       	rjmp	.+14     	; 0xff8 <vfprintf+0x290>
     fea:	60 81       	ld	r22, Z
     fec:	71 81       	ldd	r23, Z+1	; 0x01
     fee:	82 81       	ldd	r24, Z+2	; 0x02
     ff0:	93 81       	ldd	r25, Z+3	; 0x03
     ff2:	0c 5f       	subi	r16, 0xFC	; 252
     ff4:	1f 4f       	sbci	r17, 0xFF	; 255
     ff6:	06 c0       	rjmp	.+12     	; 0x1004 <vfprintf+0x29c>
     ff8:	60 81       	ld	r22, Z
     ffa:	71 81       	ldd	r23, Z+1	; 0x01
     ffc:	80 e0       	ldi	r24, 0x00	; 0
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	0e 5f       	subi	r16, 0xFE	; 254
    1002:	1f 4f       	sbci	r17, 0xFF	; 255
    1004:	a3 01       	movw	r20, r6
    1006:	0e 94 e7 08 	call	0x11ce	; 0x11ce <__ultoa_invert>
    100a:	88 2e       	mov	r8, r24
    100c:	86 18       	sub	r8, r6
    100e:	fb 2d       	mov	r31, r11
    1010:	ff 77       	andi	r31, 0x7F	; 127
    1012:	3f 2e       	mov	r3, r31
    1014:	36 fe       	sbrs	r3, 6
    1016:	0d c0       	rjmp	.+26     	; 0x1032 <vfprintf+0x2ca>
    1018:	23 2d       	mov	r18, r3
    101a:	2e 7f       	andi	r18, 0xFE	; 254
    101c:	a2 2e       	mov	r10, r18
    101e:	89 14       	cp	r8, r9
    1020:	58 f4       	brcc	.+22     	; 0x1038 <vfprintf+0x2d0>
    1022:	34 fe       	sbrs	r3, 4
    1024:	0b c0       	rjmp	.+22     	; 0x103c <vfprintf+0x2d4>
    1026:	32 fc       	sbrc	r3, 2
    1028:	09 c0       	rjmp	.+18     	; 0x103c <vfprintf+0x2d4>
    102a:	83 2d       	mov	r24, r3
    102c:	8e 7e       	andi	r24, 0xEE	; 238
    102e:	a8 2e       	mov	r10, r24
    1030:	05 c0       	rjmp	.+10     	; 0x103c <vfprintf+0x2d4>
    1032:	b8 2c       	mov	r11, r8
    1034:	a3 2c       	mov	r10, r3
    1036:	03 c0       	rjmp	.+6      	; 0x103e <vfprintf+0x2d6>
    1038:	b8 2c       	mov	r11, r8
    103a:	01 c0       	rjmp	.+2      	; 0x103e <vfprintf+0x2d6>
    103c:	b9 2c       	mov	r11, r9
    103e:	a4 fe       	sbrs	r10, 4
    1040:	0f c0       	rjmp	.+30     	; 0x1060 <vfprintf+0x2f8>
    1042:	fe 01       	movw	r30, r28
    1044:	e8 0d       	add	r30, r8
    1046:	f1 1d       	adc	r31, r1
    1048:	80 81       	ld	r24, Z
    104a:	80 33       	cpi	r24, 0x30	; 48
    104c:	21 f4       	brne	.+8      	; 0x1056 <vfprintf+0x2ee>
    104e:	9a 2d       	mov	r25, r10
    1050:	99 7e       	andi	r25, 0xE9	; 233
    1052:	a9 2e       	mov	r10, r25
    1054:	09 c0       	rjmp	.+18     	; 0x1068 <vfprintf+0x300>
    1056:	a2 fe       	sbrs	r10, 2
    1058:	06 c0       	rjmp	.+12     	; 0x1066 <vfprintf+0x2fe>
    105a:	b3 94       	inc	r11
    105c:	b3 94       	inc	r11
    105e:	04 c0       	rjmp	.+8      	; 0x1068 <vfprintf+0x300>
    1060:	8a 2d       	mov	r24, r10
    1062:	86 78       	andi	r24, 0x86	; 134
    1064:	09 f0       	breq	.+2      	; 0x1068 <vfprintf+0x300>
    1066:	b3 94       	inc	r11
    1068:	a3 fc       	sbrc	r10, 3
    106a:	11 c0       	rjmp	.+34     	; 0x108e <vfprintf+0x326>
    106c:	a0 fe       	sbrs	r10, 0
    106e:	06 c0       	rjmp	.+12     	; 0x107c <vfprintf+0x314>
    1070:	b2 14       	cp	r11, r2
    1072:	88 f4       	brcc	.+34     	; 0x1096 <vfprintf+0x32e>
    1074:	28 0c       	add	r2, r8
    1076:	92 2c       	mov	r9, r2
    1078:	9b 18       	sub	r9, r11
    107a:	0e c0       	rjmp	.+28     	; 0x1098 <vfprintf+0x330>
    107c:	b2 14       	cp	r11, r2
    107e:	60 f4       	brcc	.+24     	; 0x1098 <vfprintf+0x330>
    1080:	b6 01       	movw	r22, r12
    1082:	80 e2       	ldi	r24, 0x20	; 32
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	0e 94 ab 08 	call	0x1156	; 0x1156 <fputc>
    108a:	b3 94       	inc	r11
    108c:	f7 cf       	rjmp	.-18     	; 0x107c <vfprintf+0x314>
    108e:	b2 14       	cp	r11, r2
    1090:	18 f4       	brcc	.+6      	; 0x1098 <vfprintf+0x330>
    1092:	2b 18       	sub	r2, r11
    1094:	02 c0       	rjmp	.+4      	; 0x109a <vfprintf+0x332>
    1096:	98 2c       	mov	r9, r8
    1098:	21 2c       	mov	r2, r1
    109a:	a4 fe       	sbrs	r10, 4
    109c:	10 c0       	rjmp	.+32     	; 0x10be <vfprintf+0x356>
    109e:	b6 01       	movw	r22, r12
    10a0:	80 e3       	ldi	r24, 0x30	; 48
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	0e 94 ab 08 	call	0x1156	; 0x1156 <fputc>
    10a8:	a2 fe       	sbrs	r10, 2
    10aa:	17 c0       	rjmp	.+46     	; 0x10da <vfprintf+0x372>
    10ac:	a1 fc       	sbrc	r10, 1
    10ae:	03 c0       	rjmp	.+6      	; 0x10b6 <vfprintf+0x34e>
    10b0:	88 e7       	ldi	r24, 0x78	; 120
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	02 c0       	rjmp	.+4      	; 0x10ba <vfprintf+0x352>
    10b6:	88 e5       	ldi	r24, 0x58	; 88
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	b6 01       	movw	r22, r12
    10bc:	0c c0       	rjmp	.+24     	; 0x10d6 <vfprintf+0x36e>
    10be:	8a 2d       	mov	r24, r10
    10c0:	86 78       	andi	r24, 0x86	; 134
    10c2:	59 f0       	breq	.+22     	; 0x10da <vfprintf+0x372>
    10c4:	a1 fe       	sbrs	r10, 1
    10c6:	02 c0       	rjmp	.+4      	; 0x10cc <vfprintf+0x364>
    10c8:	8b e2       	ldi	r24, 0x2B	; 43
    10ca:	01 c0       	rjmp	.+2      	; 0x10ce <vfprintf+0x366>
    10cc:	80 e2       	ldi	r24, 0x20	; 32
    10ce:	a7 fc       	sbrc	r10, 7
    10d0:	8d e2       	ldi	r24, 0x2D	; 45
    10d2:	b6 01       	movw	r22, r12
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	0e 94 ab 08 	call	0x1156	; 0x1156 <fputc>
    10da:	89 14       	cp	r8, r9
    10dc:	38 f4       	brcc	.+14     	; 0x10ec <vfprintf+0x384>
    10de:	b6 01       	movw	r22, r12
    10e0:	80 e3       	ldi	r24, 0x30	; 48
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	0e 94 ab 08 	call	0x1156	; 0x1156 <fputc>
    10e8:	9a 94       	dec	r9
    10ea:	f7 cf       	rjmp	.-18     	; 0x10da <vfprintf+0x372>
    10ec:	8a 94       	dec	r8
    10ee:	f3 01       	movw	r30, r6
    10f0:	e8 0d       	add	r30, r8
    10f2:	f1 1d       	adc	r31, r1
    10f4:	80 81       	ld	r24, Z
    10f6:	b6 01       	movw	r22, r12
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	0e 94 ab 08 	call	0x1156	; 0x1156 <fputc>
    10fe:	81 10       	cpse	r8, r1
    1100:	f5 cf       	rjmp	.-22     	; 0x10ec <vfprintf+0x384>
    1102:	22 20       	and	r2, r2
    1104:	09 f4       	brne	.+2      	; 0x1108 <vfprintf+0x3a0>
    1106:	42 ce       	rjmp	.-892    	; 0xd8c <vfprintf+0x24>
    1108:	b6 01       	movw	r22, r12
    110a:	80 e2       	ldi	r24, 0x20	; 32
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	0e 94 ab 08 	call	0x1156	; 0x1156 <fputc>
    1112:	2a 94       	dec	r2
    1114:	f6 cf       	rjmp	.-20     	; 0x1102 <vfprintf+0x39a>
    1116:	f6 01       	movw	r30, r12
    1118:	86 81       	ldd	r24, Z+6	; 0x06
    111a:	97 81       	ldd	r25, Z+7	; 0x07
    111c:	02 c0       	rjmp	.+4      	; 0x1122 <vfprintf+0x3ba>
    111e:	8f ef       	ldi	r24, 0xFF	; 255
    1120:	9f ef       	ldi	r25, 0xFF	; 255
    1122:	2b 96       	adiw	r28, 0x0b	; 11
    1124:	e2 e1       	ldi	r30, 0x12	; 18
    1126:	0c 94 5e 09 	jmp	0x12bc	; 0x12bc <__epilogue_restores__>

0000112a <strnlen_P>:
    112a:	fc 01       	movw	r30, r24
    112c:	05 90       	lpm	r0, Z+
    112e:	61 50       	subi	r22, 0x01	; 1
    1130:	70 40       	sbci	r23, 0x00	; 0
    1132:	01 10       	cpse	r0, r1
    1134:	d8 f7       	brcc	.-10     	; 0x112c <strnlen_P+0x2>
    1136:	80 95       	com	r24
    1138:	90 95       	com	r25
    113a:	8e 0f       	add	r24, r30
    113c:	9f 1f       	adc	r25, r31
    113e:	08 95       	ret

00001140 <strnlen>:
    1140:	fc 01       	movw	r30, r24
    1142:	61 50       	subi	r22, 0x01	; 1
    1144:	70 40       	sbci	r23, 0x00	; 0
    1146:	01 90       	ld	r0, Z+
    1148:	01 10       	cpse	r0, r1
    114a:	d8 f7       	brcc	.-10     	; 0x1142 <strnlen+0x2>
    114c:	80 95       	com	r24
    114e:	90 95       	com	r25
    1150:	8e 0f       	add	r24, r30
    1152:	9f 1f       	adc	r25, r31
    1154:	08 95       	ret

00001156 <fputc>:
    1156:	0f 93       	push	r16
    1158:	1f 93       	push	r17
    115a:	cf 93       	push	r28
    115c:	df 93       	push	r29
    115e:	fb 01       	movw	r30, r22
    1160:	23 81       	ldd	r18, Z+3	; 0x03
    1162:	21 fd       	sbrc	r18, 1
    1164:	03 c0       	rjmp	.+6      	; 0x116c <fputc+0x16>
    1166:	8f ef       	ldi	r24, 0xFF	; 255
    1168:	9f ef       	ldi	r25, 0xFF	; 255
    116a:	2c c0       	rjmp	.+88     	; 0x11c4 <fputc+0x6e>
    116c:	22 ff       	sbrs	r18, 2
    116e:	16 c0       	rjmp	.+44     	; 0x119c <fputc+0x46>
    1170:	46 81       	ldd	r20, Z+6	; 0x06
    1172:	57 81       	ldd	r21, Z+7	; 0x07
    1174:	24 81       	ldd	r18, Z+4	; 0x04
    1176:	35 81       	ldd	r19, Z+5	; 0x05
    1178:	42 17       	cp	r20, r18
    117a:	53 07       	cpc	r21, r19
    117c:	44 f4       	brge	.+16     	; 0x118e <fputc+0x38>
    117e:	a0 81       	ld	r26, Z
    1180:	b1 81       	ldd	r27, Z+1	; 0x01
    1182:	9d 01       	movw	r18, r26
    1184:	2f 5f       	subi	r18, 0xFF	; 255
    1186:	3f 4f       	sbci	r19, 0xFF	; 255
    1188:	20 83       	st	Z, r18
    118a:	31 83       	std	Z+1, r19	; 0x01
    118c:	8c 93       	st	X, r24
    118e:	26 81       	ldd	r18, Z+6	; 0x06
    1190:	37 81       	ldd	r19, Z+7	; 0x07
    1192:	2f 5f       	subi	r18, 0xFF	; 255
    1194:	3f 4f       	sbci	r19, 0xFF	; 255
    1196:	26 83       	std	Z+6, r18	; 0x06
    1198:	37 83       	std	Z+7, r19	; 0x07
    119a:	14 c0       	rjmp	.+40     	; 0x11c4 <fputc+0x6e>
    119c:	8b 01       	movw	r16, r22
    119e:	ec 01       	movw	r28, r24
    11a0:	fb 01       	movw	r30, r22
    11a2:	00 84       	ldd	r0, Z+8	; 0x08
    11a4:	f1 85       	ldd	r31, Z+9	; 0x09
    11a6:	e0 2d       	mov	r30, r0
    11a8:	09 95       	icall
    11aa:	89 2b       	or	r24, r25
    11ac:	e1 f6       	brne	.-72     	; 0x1166 <fputc+0x10>
    11ae:	d8 01       	movw	r26, r16
    11b0:	16 96       	adiw	r26, 0x06	; 6
    11b2:	8d 91       	ld	r24, X+
    11b4:	9c 91       	ld	r25, X
    11b6:	17 97       	sbiw	r26, 0x07	; 7
    11b8:	01 96       	adiw	r24, 0x01	; 1
    11ba:	16 96       	adiw	r26, 0x06	; 6
    11bc:	8d 93       	st	X+, r24
    11be:	9c 93       	st	X, r25
    11c0:	17 97       	sbiw	r26, 0x07	; 7
    11c2:	ce 01       	movw	r24, r28
    11c4:	df 91       	pop	r29
    11c6:	cf 91       	pop	r28
    11c8:	1f 91       	pop	r17
    11ca:	0f 91       	pop	r16
    11cc:	08 95       	ret

000011ce <__ultoa_invert>:
    11ce:	fa 01       	movw	r30, r20
    11d0:	aa 27       	eor	r26, r26
    11d2:	28 30       	cpi	r18, 0x08	; 8
    11d4:	51 f1       	breq	.+84     	; 0x122a <__ultoa_invert+0x5c>
    11d6:	20 31       	cpi	r18, 0x10	; 16
    11d8:	81 f1       	breq	.+96     	; 0x123a <__ultoa_invert+0x6c>
    11da:	e8 94       	clt
    11dc:	6f 93       	push	r22
    11de:	6e 7f       	andi	r22, 0xFE	; 254
    11e0:	6e 5f       	subi	r22, 0xFE	; 254
    11e2:	7f 4f       	sbci	r23, 0xFF	; 255
    11e4:	8f 4f       	sbci	r24, 0xFF	; 255
    11e6:	9f 4f       	sbci	r25, 0xFF	; 255
    11e8:	af 4f       	sbci	r26, 0xFF	; 255
    11ea:	b1 e0       	ldi	r27, 0x01	; 1
    11ec:	3e d0       	rcall	.+124    	; 0x126a <__ultoa_invert+0x9c>
    11ee:	b4 e0       	ldi	r27, 0x04	; 4
    11f0:	3c d0       	rcall	.+120    	; 0x126a <__ultoa_invert+0x9c>
    11f2:	67 0f       	add	r22, r23
    11f4:	78 1f       	adc	r23, r24
    11f6:	89 1f       	adc	r24, r25
    11f8:	9a 1f       	adc	r25, r26
    11fa:	a1 1d       	adc	r26, r1
    11fc:	68 0f       	add	r22, r24
    11fe:	79 1f       	adc	r23, r25
    1200:	8a 1f       	adc	r24, r26
    1202:	91 1d       	adc	r25, r1
    1204:	a1 1d       	adc	r26, r1
    1206:	6a 0f       	add	r22, r26
    1208:	71 1d       	adc	r23, r1
    120a:	81 1d       	adc	r24, r1
    120c:	91 1d       	adc	r25, r1
    120e:	a1 1d       	adc	r26, r1
    1210:	20 d0       	rcall	.+64     	; 0x1252 <__ultoa_invert+0x84>
    1212:	09 f4       	brne	.+2      	; 0x1216 <__ultoa_invert+0x48>
    1214:	68 94       	set
    1216:	3f 91       	pop	r19
    1218:	2a e0       	ldi	r18, 0x0A	; 10
    121a:	26 9f       	mul	r18, r22
    121c:	11 24       	eor	r1, r1
    121e:	30 19       	sub	r19, r0
    1220:	30 5d       	subi	r19, 0xD0	; 208
    1222:	31 93       	st	Z+, r19
    1224:	de f6       	brtc	.-74     	; 0x11dc <__ultoa_invert+0xe>
    1226:	cf 01       	movw	r24, r30
    1228:	08 95       	ret
    122a:	46 2f       	mov	r20, r22
    122c:	47 70       	andi	r20, 0x07	; 7
    122e:	40 5d       	subi	r20, 0xD0	; 208
    1230:	41 93       	st	Z+, r20
    1232:	b3 e0       	ldi	r27, 0x03	; 3
    1234:	0f d0       	rcall	.+30     	; 0x1254 <__ultoa_invert+0x86>
    1236:	c9 f7       	brne	.-14     	; 0x122a <__ultoa_invert+0x5c>
    1238:	f6 cf       	rjmp	.-20     	; 0x1226 <__ultoa_invert+0x58>
    123a:	46 2f       	mov	r20, r22
    123c:	4f 70       	andi	r20, 0x0F	; 15
    123e:	40 5d       	subi	r20, 0xD0	; 208
    1240:	4a 33       	cpi	r20, 0x3A	; 58
    1242:	18 f0       	brcs	.+6      	; 0x124a <__ultoa_invert+0x7c>
    1244:	49 5d       	subi	r20, 0xD9	; 217
    1246:	31 fd       	sbrc	r19, 1
    1248:	40 52       	subi	r20, 0x20	; 32
    124a:	41 93       	st	Z+, r20
    124c:	02 d0       	rcall	.+4      	; 0x1252 <__ultoa_invert+0x84>
    124e:	a9 f7       	brne	.-22     	; 0x123a <__ultoa_invert+0x6c>
    1250:	ea cf       	rjmp	.-44     	; 0x1226 <__ultoa_invert+0x58>
    1252:	b4 e0       	ldi	r27, 0x04	; 4
    1254:	a6 95       	lsr	r26
    1256:	97 95       	ror	r25
    1258:	87 95       	ror	r24
    125a:	77 95       	ror	r23
    125c:	67 95       	ror	r22
    125e:	ba 95       	dec	r27
    1260:	c9 f7       	brne	.-14     	; 0x1254 <__ultoa_invert+0x86>
    1262:	00 97       	sbiw	r24, 0x00	; 0
    1264:	61 05       	cpc	r22, r1
    1266:	71 05       	cpc	r23, r1
    1268:	08 95       	ret
    126a:	9b 01       	movw	r18, r22
    126c:	ac 01       	movw	r20, r24
    126e:	0a 2e       	mov	r0, r26
    1270:	06 94       	lsr	r0
    1272:	57 95       	ror	r21
    1274:	47 95       	ror	r20
    1276:	37 95       	ror	r19
    1278:	27 95       	ror	r18
    127a:	ba 95       	dec	r27
    127c:	c9 f7       	brne	.-14     	; 0x1270 <__ultoa_invert+0xa2>
    127e:	62 0f       	add	r22, r18
    1280:	73 1f       	adc	r23, r19
    1282:	84 1f       	adc	r24, r20
    1284:	95 1f       	adc	r25, r21
    1286:	a0 1d       	adc	r26, r0
    1288:	08 95       	ret

0000128a <__prologue_saves__>:
    128a:	2f 92       	push	r2
    128c:	3f 92       	push	r3
    128e:	4f 92       	push	r4
    1290:	5f 92       	push	r5
    1292:	6f 92       	push	r6
    1294:	7f 92       	push	r7
    1296:	8f 92       	push	r8
    1298:	9f 92       	push	r9
    129a:	af 92       	push	r10
    129c:	bf 92       	push	r11
    129e:	cf 92       	push	r12
    12a0:	df 92       	push	r13
    12a2:	ef 92       	push	r14
    12a4:	ff 92       	push	r15
    12a6:	0f 93       	push	r16
    12a8:	1f 93       	push	r17
    12aa:	cf 93       	push	r28
    12ac:	df 93       	push	r29
    12ae:	cd b7       	in	r28, 0x3d	; 61
    12b0:	de b7       	in	r29, 0x3e	; 62
    12b2:	ca 1b       	sub	r28, r26
    12b4:	db 0b       	sbc	r29, r27
    12b6:	cd bf       	out	0x3d, r28	; 61
    12b8:	de bf       	out	0x3e, r29	; 62
    12ba:	09 94       	ijmp

000012bc <__epilogue_restores__>:
    12bc:	2a 88       	ldd	r2, Y+18	; 0x12
    12be:	39 88       	ldd	r3, Y+17	; 0x11
    12c0:	48 88       	ldd	r4, Y+16	; 0x10
    12c2:	5f 84       	ldd	r5, Y+15	; 0x0f
    12c4:	6e 84       	ldd	r6, Y+14	; 0x0e
    12c6:	7d 84       	ldd	r7, Y+13	; 0x0d
    12c8:	8c 84       	ldd	r8, Y+12	; 0x0c
    12ca:	9b 84       	ldd	r9, Y+11	; 0x0b
    12cc:	aa 84       	ldd	r10, Y+10	; 0x0a
    12ce:	b9 84       	ldd	r11, Y+9	; 0x09
    12d0:	c8 84       	ldd	r12, Y+8	; 0x08
    12d2:	df 80       	ldd	r13, Y+7	; 0x07
    12d4:	ee 80       	ldd	r14, Y+6	; 0x06
    12d6:	fd 80       	ldd	r15, Y+5	; 0x05
    12d8:	0c 81       	ldd	r16, Y+4	; 0x04
    12da:	1b 81       	ldd	r17, Y+3	; 0x03
    12dc:	aa 81       	ldd	r26, Y+2	; 0x02
    12de:	b9 81       	ldd	r27, Y+1	; 0x01
    12e0:	ce 0f       	add	r28, r30
    12e2:	d1 1d       	adc	r29, r1
    12e4:	cd bf       	out	0x3d, r28	; 61
    12e6:	de bf       	out	0x3e, r29	; 62
    12e8:	ed 01       	movw	r28, r26
    12ea:	08 95       	ret

000012ec <_exit>:
    12ec:	f8 94       	cli

000012ee <__stop_program>:
    12ee:	ff cf       	rjmp	.-2      	; 0x12ee <__stop_program>
