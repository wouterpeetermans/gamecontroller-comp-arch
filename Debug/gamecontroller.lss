
gamecontroller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000077e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00802000  0000077e  00000812  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  0080200e  0080200e  00000820  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000820  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000850  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000190  00000000  00000000  00000890  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001145  00000000  00000000  00000a20  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000701  00000000  00000000  00001b65  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001911  00000000  00000000  00002266  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000384  00000000  00000000  00003b78  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00011d49  00000000  00000000  00003efc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000593  00000000  00000000  00015c45  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  000161d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000597a  00000000  00000000  000162d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__ctors_end>
   4:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
   8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
   c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  10:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  14:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  18:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  1c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  20:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  24:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  28:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  2c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  30:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  34:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  38:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  3c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  40:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  44:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  48:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  4c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  50:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  54:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  58:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  5c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  60:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  64:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  68:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  6c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  70:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  74:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  78:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  7c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  80:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  84:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  88:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  8c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  90:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  94:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  98:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  9c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  a0:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  a4:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  a8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  ac:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  b0:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  b4:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  b8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  bc:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  c0:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  c4:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  c8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  cc:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  d0:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  d4:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  d8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  dc:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  e0:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  e4:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  e8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  ec:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  f0:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  f4:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  f8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  fc:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 100:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 104:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 108:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 10c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 110:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 114:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 118:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 11c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 120:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 124:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 128:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 12c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 130:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 134:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 138:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 13c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 140:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 144:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 148:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 14c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 150:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 154:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 158:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 15c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 160:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 164:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 168:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>

0000016c <__ctors_end>:
 16c:	11 24       	eor	r1, r1
 16e:	1f be       	out	0x3f, r1	; 63
 170:	cf ef       	ldi	r28, 0xFF	; 255
 172:	cd bf       	out	0x3d, r28	; 61
 174:	d7 e2       	ldi	r29, 0x27	; 39
 176:	de bf       	out	0x3e, r29	; 62

00000178 <__do_copy_data>:
 178:	10 e2       	ldi	r17, 0x20	; 32
 17a:	a0 e0       	ldi	r26, 0x00	; 0
 17c:	b0 e2       	ldi	r27, 0x20	; 32
 17e:	ee e7       	ldi	r30, 0x7E	; 126
 180:	f7 e0       	ldi	r31, 0x07	; 7
 182:	02 c0       	rjmp	.+4      	; 0x188 <__do_copy_data+0x10>
 184:	05 90       	lpm	r0, Z+
 186:	0d 92       	st	X+, r0
 188:	ae 30       	cpi	r26, 0x0E	; 14
 18a:	b1 07       	cpc	r27, r17
 18c:	d9 f7       	brne	.-10     	; 0x184 <__do_copy_data+0xc>

0000018e <__do_clear_bss>:
 18e:	20 e2       	ldi	r18, 0x20	; 32
 190:	ae e0       	ldi	r26, 0x0E	; 14
 192:	b0 e2       	ldi	r27, 0x20	; 32
 194:	01 c0       	rjmp	.+2      	; 0x198 <.do_clear_bss_start>

00000196 <.do_clear_bss_loop>:
 196:	1d 92       	st	X+, r1

00000198 <.do_clear_bss_start>:
 198:	a4 31       	cpi	r26, 0x14	; 20
 19a:	b2 07       	cpc	r27, r18
 19c:	e1 f7       	brne	.-8      	; 0x196 <.do_clear_bss_loop>
 19e:	0e 94 fd 00 	call	0x1fa	; 0x1fa <main>
 1a2:	0c 94 bd 03 	jmp	0x77a	; 0x77a <_exit>

000001a6 <__bad_interrupt>:
 1a6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001aa <AccInit>:
#include "acc.h"



void AccInit(void)
{
 1aa:	cf 93       	push	r28
 1ac:	df 93       	push	r29
 1ae:	cd b7       	in	r28, 0x3d	; 61
 1b0:	de b7       	in	r29, 0x3e	; 62

	
}
 1b2:	00 00       	nop
 1b4:	df 91       	pop	r29
 1b6:	cf 91       	pop	r28
 1b8:	08 95       	ret

000001ba <AnalogInit>:
 1ba:	cf 93       	push	r28
 1bc:	df 93       	push	r29
 1be:	cd b7       	in	r28, 0x3d	; 61
 1c0:	de b7       	in	r29, 0x3e	; 62
 1c2:	00 00       	nop
 1c4:	df 91       	pop	r29
 1c6:	cf 91       	pop	r28
 1c8:	08 95       	ret

000001ca <ClockInit>:
 1ca:	8b ec       	ldi	r24, 0xCB	; 203
 1cc:	80 93 52 00 	sts	0x0052, r24	; 0x800052 <__TEXT_REGION_LENGTH__+0x700052>
 1d0:	88 e0       	ldi	r24, 0x08	; 8
 1d2:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
 1d6:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
 1da:	83 ff       	sbrs	r24, 3
 1dc:	fc cf       	rjmp	.-8      	; 0x1d6 <ClockInit+0xc>
 1de:	88 ed       	ldi	r24, 0xD8	; 216
 1e0:	84 bf       	out	0x34, r24	; 52
 1e2:	83 e0       	ldi	r24, 0x03	; 3
 1e4:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
 1e8:	08 95       	ret

000001ea <EncoderInit>:
 1ea:	cf 93       	push	r28
 1ec:	df 93       	push	r29
 1ee:	cd b7       	in	r28, 0x3d	; 61
 1f0:	de b7       	in	r29, 0x3e	; 62
 1f2:	00 00       	nop
 1f4:	df 91       	pop	r29
 1f6:	cf 91       	pop	r28
 1f8:	08 95       	ret

000001fa <main>:
char a;

void SimpleFunction(void);	//A simple function: print a counter (0 to 9) to the terminal

int main(void)
{	
 1fa:	cf 93       	push	r28
 1fc:	df 93       	push	r29
 1fe:	cd b7       	in	r28, 0x3d	; 61
 200:	de b7       	in	r29, 0x3e	; 62
 202:	2e 97       	sbiw	r28, 0x0e	; 14
 204:	cd bf       	out	0x3d, r28	; 61
 206:	de bf       	out	0x3e, r29	; 62
	//###1###
	 
	//Initialize subsystems
	ClockInit();			//Initialize system clock (16 MHz)
 208:	0e 94 e5 00 	call	0x1ca	; 0x1ca <ClockInit>
	USARTInit();			//Initialize USART and bind to stdout,stdin
 20c:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <USARTInit>
	AnalogInit();			//Initialize ADC
 210:	0e 94 dd 00 	call	0x1ba	; 0x1ba <AnalogInit>
	AccInit();				//Initialize accelerometer system
 214:	0e 94 d5 00 	call	0x1aa	; 0x1aa <AccInit>
	LEDInit();				//Initialize LEDs
 218:	0e 94 a2 01 	call	0x344	; 0x344 <LEDInit>
	SwitchInit();			//Initialize switches
 21c:	0e 94 cb 01 	call	0x396	; 0x396 <SwitchInit>
	EncoderInit();			//Initialize encoder
 220:	0e 94 f5 00 	call	0x1ea	; 0x1ea <EncoderInit>
	SpeakerInit();			//Initialize speaker system
 224:	0e 94 c3 01 	call	0x386	; 0x386 <SpeakerInit>
	
	//Enable interrupts
	PMIC.CTRL|=0b00000111;  //Enable low, medium, high priority interrupts
 228:	80 ea       	ldi	r24, 0xA0	; 160
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	20 ea       	ldi	r18, 0xA0	; 160
 22e:	30 e0       	ldi	r19, 0x00	; 0
 230:	f9 01       	movw	r30, r18
 232:	22 81       	ldd	r18, Z+2	; 0x02
 234:	27 60       	ori	r18, 0x07	; 7
 236:	fc 01       	movw	r30, r24
 238:	22 83       	std	Z+2, r18	; 0x02
	SREG|=0b10000000;		//Global interrupt enable
 23a:	8f e3       	ldi	r24, 0x3F	; 63
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	2f e3       	ldi	r18, 0x3F	; 63
 240:	30 e0       	ldi	r19, 0x00	; 0
 242:	f9 01       	movw	r30, r18
 244:	20 81       	ld	r18, Z
 246:	20 68       	ori	r18, 0x80	; 128
 248:	fc 01       	movw	r30, r24
 24a:	20 83       	st	Z, r18
 24c:	80 e0       	ldi	r24, 0x00	; 0
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	aa ef       	ldi	r26, 0xFA	; 250
 252:	b3 e4       	ldi	r27, 0x43	; 67
 254:	89 83       	std	Y+1, r24	; 0x01
 256:	9a 83       	std	Y+2, r25	; 0x02
 258:	ab 83       	std	Y+3, r26	; 0x03
 25a:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 25c:	20 e0       	ldi	r18, 0x00	; 0
 25e:	30 e0       	ldi	r19, 0x00	; 0
 260:	4a e7       	ldi	r20, 0x7A	; 122
 262:	55 e4       	ldi	r21, 0x45	; 69
 264:	69 81       	ldd	r22, Y+1	; 0x01
 266:	7a 81       	ldd	r23, Y+2	; 0x02
 268:	8b 81       	ldd	r24, Y+3	; 0x03
 26a:	9c 81       	ldd	r25, Y+4	; 0x04
 26c:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <__mulsf3>
 270:	dc 01       	movw	r26, r24
 272:	cb 01       	movw	r24, r22
 274:	8d 83       	std	Y+5, r24	; 0x05
 276:	9e 83       	std	Y+6, r25	; 0x06
 278:	af 83       	std	Y+7, r26	; 0x07
 27a:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
 27c:	20 e0       	ldi	r18, 0x00	; 0
 27e:	30 e0       	ldi	r19, 0x00	; 0
 280:	40 e8       	ldi	r20, 0x80	; 128
 282:	5f e3       	ldi	r21, 0x3F	; 63
 284:	6d 81       	ldd	r22, Y+5	; 0x05
 286:	7e 81       	ldd	r23, Y+6	; 0x06
 288:	8f 81       	ldd	r24, Y+7	; 0x07
 28a:	98 85       	ldd	r25, Y+8	; 0x08
 28c:	0e 94 66 02 	call	0x4cc	; 0x4cc <__cmpsf2>
 290:	88 23       	and	r24, r24
 292:	2c f4       	brge	.+10     	; 0x29e <main+0xa4>
		__ticks = 1;
 294:	81 e0       	ldi	r24, 0x01	; 1
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	89 87       	std	Y+9, r24	; 0x09
 29a:	9a 87       	std	Y+10, r25	; 0x0a
 29c:	3f c0       	rjmp	.+126    	; 0x31c <main+0x122>
	else if (__tmp > 65535)
 29e:	20 e0       	ldi	r18, 0x00	; 0
 2a0:	3f ef       	ldi	r19, 0xFF	; 255
 2a2:	4f e7       	ldi	r20, 0x7F	; 127
 2a4:	57 e4       	ldi	r21, 0x47	; 71
 2a6:	6d 81       	ldd	r22, Y+5	; 0x05
 2a8:	7e 81       	ldd	r23, Y+6	; 0x06
 2aa:	8f 81       	ldd	r24, Y+7	; 0x07
 2ac:	98 85       	ldd	r25, Y+8	; 0x08
 2ae:	0e 94 e7 02 	call	0x5ce	; 0x5ce <__gesf2>
 2b2:	18 16       	cp	r1, r24
 2b4:	4c f5       	brge	.+82     	; 0x308 <main+0x10e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 2b6:	20 e0       	ldi	r18, 0x00	; 0
 2b8:	30 e0       	ldi	r19, 0x00	; 0
 2ba:	40 e2       	ldi	r20, 0x20	; 32
 2bc:	51 e4       	ldi	r21, 0x41	; 65
 2be:	69 81       	ldd	r22, Y+1	; 0x01
 2c0:	7a 81       	ldd	r23, Y+2	; 0x02
 2c2:	8b 81       	ldd	r24, Y+3	; 0x03
 2c4:	9c 81       	ldd	r25, Y+4	; 0x04
 2c6:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <__mulsf3>
 2ca:	dc 01       	movw	r26, r24
 2cc:	cb 01       	movw	r24, r22
 2ce:	bc 01       	movw	r22, r24
 2d0:	cd 01       	movw	r24, r26
 2d2:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <__fixunssfsi>
 2d6:	dc 01       	movw	r26, r24
 2d8:	cb 01       	movw	r24, r22
 2da:	89 87       	std	Y+9, r24	; 0x09
 2dc:	9a 87       	std	Y+10, r25	; 0x0a
 2de:	0f c0       	rjmp	.+30     	; 0x2fe <main+0x104>
 2e0:	80 e9       	ldi	r24, 0x90	; 144
 2e2:	91 e0       	ldi	r25, 0x01	; 1
 2e4:	8b 87       	std	Y+11, r24	; 0x0b
 2e6:	9c 87       	std	Y+12, r25	; 0x0c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 2e8:	8b 85       	ldd	r24, Y+11	; 0x0b
 2ea:	9c 85       	ldd	r25, Y+12	; 0x0c
 2ec:	01 97       	sbiw	r24, 0x01	; 1
 2ee:	f1 f7       	brne	.-4      	; 0x2ec <main+0xf2>
 2f0:	8b 87       	std	Y+11, r24	; 0x0b
 2f2:	9c 87       	std	Y+12, r25	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2f4:	89 85       	ldd	r24, Y+9	; 0x09
 2f6:	9a 85       	ldd	r25, Y+10	; 0x0a
 2f8:	01 97       	sbiw	r24, 0x01	; 1
 2fa:	89 87       	std	Y+9, r24	; 0x09
 2fc:	9a 87       	std	Y+10, r25	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2fe:	89 85       	ldd	r24, Y+9	; 0x09
 300:	9a 85       	ldd	r25, Y+10	; 0x0a
 302:	89 2b       	or	r24, r25
 304:	69 f7       	brne	.-38     	; 0x2e0 <main+0xe6>
 306:	14 c0       	rjmp	.+40     	; 0x330 <main+0x136>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 308:	6d 81       	ldd	r22, Y+5	; 0x05
 30a:	7e 81       	ldd	r23, Y+6	; 0x06
 30c:	8f 81       	ldd	r24, Y+7	; 0x07
 30e:	98 85       	ldd	r25, Y+8	; 0x08
 310:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <__fixunssfsi>
 314:	dc 01       	movw	r26, r24
 316:	cb 01       	movw	r24, r22
 318:	89 87       	std	Y+9, r24	; 0x09
 31a:	9a 87       	std	Y+10, r25	; 0x0a
 31c:	89 85       	ldd	r24, Y+9	; 0x09
 31e:	9a 85       	ldd	r25, Y+10	; 0x0a
 320:	8d 87       	std	Y+13, r24	; 0x0d
 322:	9e 87       	std	Y+14, r25	; 0x0e
 324:	8d 85       	ldd	r24, Y+13	; 0x0d
 326:	9e 85       	ldd	r25, Y+14	; 0x0e
 328:	01 97       	sbiw	r24, 0x01	; 1
 32a:	f1 f7       	brne	.-4      	; 0x328 <main+0x12e>
 32c:	8d 87       	std	Y+13, r24	; 0x0d
 32e:	9e 87       	std	Y+14, r25	; 0x0e
	
	while (1){
		//sprintf(text, "switches: %d\r", SwitchGet());
		//puts(text);
//		sprintf(text, "gestuurde output: %d\r",stdio_putchar('0b01010101',stdout));	
		putchar('U');
 330:	80 91 10 20 	lds	r24, 0x2010	; 0x802010 <__data_end+0x2>
 334:	90 91 11 20 	lds	r25, 0x2011	; 0x802011 <__data_end+0x3>
 338:	bc 01       	movw	r22, r24
 33a:	85 e5       	ldi	r24, 0x55	; 85
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	0e 94 81 03 	call	0x702	; 0x702 <fputc>
	}
 342:	f6 cf       	rjmp	.-20     	; 0x330 <main+0x136>

00000344 <LEDInit>:
#include "LED.h"
#include <avr/io.h>

void LEDInit(void)
{
 344:	cf 93       	push	r28
 346:	df 93       	push	r29
 348:	cd b7       	in	r28, 0x3d	; 61
 34a:	de b7       	in	r29, 0x3e	; 62
	PORTE.DIRSET=0b00001111;
 34c:	80 e8       	ldi	r24, 0x80	; 128
 34e:	96 e0       	ldi	r25, 0x06	; 6
 350:	2f e0       	ldi	r18, 0x0F	; 15
 352:	fc 01       	movw	r30, r24
 354:	21 83       	std	Z+1, r18	; 0x01
	PORTE.PIN0CTRL=0b01000000;
 356:	80 e8       	ldi	r24, 0x80	; 128
 358:	96 e0       	ldi	r25, 0x06	; 6
 35a:	20 e4       	ldi	r18, 0x40	; 64
 35c:	fc 01       	movw	r30, r24
 35e:	20 8b       	std	Z+16, r18	; 0x10
	PORTE.PIN1CTRL=0b01000000;
 360:	80 e8       	ldi	r24, 0x80	; 128
 362:	96 e0       	ldi	r25, 0x06	; 6
 364:	20 e4       	ldi	r18, 0x40	; 64
 366:	fc 01       	movw	r30, r24
 368:	21 8b       	std	Z+17, r18	; 0x11
	PORTE.PIN2CTRL=0b01000000;
 36a:	80 e8       	ldi	r24, 0x80	; 128
 36c:	96 e0       	ldi	r25, 0x06	; 6
 36e:	20 e4       	ldi	r18, 0x40	; 64
 370:	fc 01       	movw	r30, r24
 372:	22 8b       	std	Z+18, r18	; 0x12
	PORTE.PIN3CTRL=0b01000000;
 374:	80 e8       	ldi	r24, 0x80	; 128
 376:	96 e0       	ldi	r25, 0x06	; 6
 378:	20 e4       	ldi	r18, 0x40	; 64
 37a:	fc 01       	movw	r30, r24
 37c:	23 8b       	std	Z+19, r18	; 0x13
	
}
 37e:	00 00       	nop
 380:	df 91       	pop	r29
 382:	cf 91       	pop	r28
 384:	08 95       	ret

00000386 <SpeakerInit>:
 386:	cf 93       	push	r28
 388:	df 93       	push	r29
 38a:	cd b7       	in	r28, 0x3d	; 61
 38c:	de b7       	in	r29, 0x3e	; 62
 38e:	00 00       	nop
 390:	df 91       	pop	r29
 392:	cf 91       	pop	r28
 394:	08 95       	ret

00000396 <SwitchInit>:
#include "switch.h"
#include <avr/io.h>

void SwitchInit(void)
{
 396:	cf 93       	push	r28
 398:	df 93       	push	r29
 39a:	cd b7       	in	r28, 0x3d	; 61
 39c:	de b7       	in	r29, 0x3e	; 62
	PORTD.DIRCLR=0b11110001;
 39e:	80 e6       	ldi	r24, 0x60	; 96
 3a0:	96 e0       	ldi	r25, 0x06	; 6
 3a2:	21 ef       	ldi	r18, 0xF1	; 241
 3a4:	fc 01       	movw	r30, r24
 3a6:	22 83       	std	Z+2, r18	; 0x02
	PORTD.PIN0CTRL=0b01011000;
 3a8:	80 e6       	ldi	r24, 0x60	; 96
 3aa:	96 e0       	ldi	r25, 0x06	; 6
 3ac:	28 e5       	ldi	r18, 0x58	; 88
 3ae:	fc 01       	movw	r30, r24
 3b0:	20 8b       	std	Z+16, r18	; 0x10
	PORTD.PIN4CTRL=0b01011000;
 3b2:	80 e6       	ldi	r24, 0x60	; 96
 3b4:	96 e0       	ldi	r25, 0x06	; 6
 3b6:	28 e5       	ldi	r18, 0x58	; 88
 3b8:	fc 01       	movw	r30, r24
 3ba:	24 8b       	std	Z+20, r18	; 0x14
	PORTD.PIN5CTRL=0b01011000;
 3bc:	80 e6       	ldi	r24, 0x60	; 96
 3be:	96 e0       	ldi	r25, 0x06	; 6
 3c0:	28 e5       	ldi	r18, 0x58	; 88
 3c2:	fc 01       	movw	r30, r24
 3c4:	25 8b       	std	Z+21, r18	; 0x15
	PORTD.PIN6CTRL=0b01011000;
 3c6:	80 e6       	ldi	r24, 0x60	; 96
 3c8:	96 e0       	ldi	r25, 0x06	; 6
 3ca:	28 e5       	ldi	r18, 0x58	; 88
 3cc:	fc 01       	movw	r30, r24
 3ce:	26 8b       	std	Z+22, r18	; 0x16
	PORTD.PIN7CTRL=0b01011000;
 3d0:	80 e6       	ldi	r24, 0x60	; 96
 3d2:	96 e0       	ldi	r25, 0x06	; 6
 3d4:	28 e5       	ldi	r18, 0x58	; 88
 3d6:	fc 01       	movw	r30, r24
 3d8:	27 8b       	std	Z+23, r18	; 0x17
}
 3da:	00 00       	nop
 3dc:	df 91       	pop	r29
 3de:	cf 91       	pop	r28
 3e0:	08 95       	ret

000003e2 <USARTInit>:
 int stdio_putchar(char c, FILE * stream);
 int stdio_getchar(FILE *stream);
static FILE UsartStdio = FDEV_SETUP_STREAM(stdio_putchar, stdio_getchar,_FDEV_SETUP_WRITE);

void USARTInit(void)
{
 3e2:	cf 93       	push	r28
 3e4:	df 93       	push	r29
 3e6:	cd b7       	in	r28, 0x3d	; 61
 3e8:	de b7       	in	r29, 0x3e	; 62
	USART_PORT.DIRSET=0b00001000;	
 3ea:	80 e4       	ldi	r24, 0x40	; 64
 3ec:	96 e0       	ldi	r25, 0x06	; 6
 3ee:	28 e0       	ldi	r18, 0x08	; 8
 3f0:	fc 01       	movw	r30, r24
 3f2:	21 83       	std	Z+1, r18	; 0x01
	USART_PORT.DIRCLR=0b00000100;
 3f4:	80 e4       	ldi	r24, 0x40	; 64
 3f6:	96 e0       	ldi	r25, 0x06	; 6
 3f8:	24 e0       	ldi	r18, 0x04	; 4
 3fa:	fc 01       	movw	r30, r24
 3fc:	22 83       	std	Z+2, r18	; 0x02
	
	USART.CTRLA=0b00000000;
 3fe:	80 ea       	ldi	r24, 0xA0	; 160
 400:	98 e0       	ldi	r25, 0x08	; 8
 402:	fc 01       	movw	r30, r24
 404:	13 82       	std	Z+3, r1	; 0x03
	USART.CTRLB=0b00011000;
 406:	80 ea       	ldi	r24, 0xA0	; 160
 408:	98 e0       	ldi	r25, 0x08	; 8
 40a:	28 e1       	ldi	r18, 0x18	; 24
 40c:	fc 01       	movw	r30, r24
 40e:	24 83       	std	Z+4, r18	; 0x04
	USART.CTRLC=0b00000011;
 410:	80 ea       	ldi	r24, 0xA0	; 160
 412:	98 e0       	ldi	r25, 0x08	; 8
 414:	23 e0       	ldi	r18, 0x03	; 3
 416:	fc 01       	movw	r30, r24
 418:	25 83       	std	Z+5, r18	; 0x05
	
	USART.BAUDCTRLA=0xE5; //BSEL=3301, BSCALE=-5 9600 baud
 41a:	80 ea       	ldi	r24, 0xA0	; 160
 41c:	98 e0       	ldi	r25, 0x08	; 8
 41e:	25 ee       	ldi	r18, 0xE5	; 229
 420:	fc 01       	movw	r30, r24
 422:	26 83       	std	Z+6, r18	; 0x06
	USART.BAUDCTRLB=0xBC; 
 424:	80 ea       	ldi	r24, 0xA0	; 160
 426:	98 e0       	ldi	r25, 0x08	; 8
 428:	2c eb       	ldi	r18, 0xBC	; 188
 42a:	fc 01       	movw	r30, r24
 42c:	27 83       	std	Z+7, r18	; 0x07
	
	stdout=&UsartStdio;
 42e:	80 e0       	ldi	r24, 0x00	; 0
 430:	90 e2       	ldi	r25, 0x20	; 32
 432:	80 93 10 20 	sts	0x2010, r24	; 0x802010 <__data_end+0x2>
 436:	90 93 11 20 	sts	0x2011, r25	; 0x802011 <__data_end+0x3>
	stdin=&UsartStdio;
 43a:	80 e0       	ldi	r24, 0x00	; 0
 43c:	90 e2       	ldi	r25, 0x20	; 32
 43e:	80 93 0e 20 	sts	0x200E, r24	; 0x80200e <__data_end>
 442:	90 93 0f 20 	sts	0x200F, r25	; 0x80200f <__data_end+0x1>
}
 446:	00 00       	nop
 448:	df 91       	pop	r29
 44a:	cf 91       	pop	r28
 44c:	08 95       	ret

0000044e <stdio_putchar>:


int stdio_putchar(char c, FILE * stream)
{
 44e:	cf 93       	push	r28
 450:	df 93       	push	r29
 452:	00 d0       	rcall	.+0      	; 0x454 <stdio_putchar+0x6>
 454:	1f 92       	push	r1
 456:	cd b7       	in	r28, 0x3d	; 61
 458:	de b7       	in	r29, 0x3e	; 62
 45a:	89 83       	std	Y+1, r24	; 0x01
 45c:	6a 83       	std	Y+2, r22	; 0x02
 45e:	7b 83       	std	Y+3, r23	; 0x03
	USART.DATA = c;
 460:	80 ea       	ldi	r24, 0xA0	; 160
 462:	98 e0       	ldi	r25, 0x08	; 8
 464:	29 81       	ldd	r18, Y+1	; 0x01
 466:	fc 01       	movw	r30, r24
 468:	20 83       	st	Z, r18
	while (!(USART.STATUS & 0b01000000));
 46a:	00 00       	nop
 46c:	80 ea       	ldi	r24, 0xA0	; 160
 46e:	98 e0       	ldi	r25, 0x08	; 8
 470:	fc 01       	movw	r30, r24
 472:	81 81       	ldd	r24, Z+1	; 0x01
 474:	88 2f       	mov	r24, r24
 476:	90 e0       	ldi	r25, 0x00	; 0
 478:	80 74       	andi	r24, 0x40	; 64
 47a:	99 27       	eor	r25, r25
 47c:	89 2b       	or	r24, r25
 47e:	b1 f3       	breq	.-20     	; 0x46c <stdio_putchar+0x1e>
	USART.STATUS=0b01000000;
 480:	80 ea       	ldi	r24, 0xA0	; 160
 482:	98 e0       	ldi	r25, 0x08	; 8
 484:	20 e4       	ldi	r18, 0x40	; 64
 486:	fc 01       	movw	r30, r24
 488:	21 83       	std	Z+1, r18	; 0x01
	return 0;
 48a:	80 e0       	ldi	r24, 0x00	; 0
 48c:	90 e0       	ldi	r25, 0x00	; 0
}
 48e:	23 96       	adiw	r28, 0x03	; 3
 490:	cd bf       	out	0x3d, r28	; 61
 492:	de bf       	out	0x3e, r29	; 62
 494:	df 91       	pop	r29
 496:	cf 91       	pop	r28
 498:	08 95       	ret

0000049a <stdio_getchar>:
	
int stdio_getchar(FILE *stream)
{
 49a:	cf 93       	push	r28
 49c:	df 93       	push	r29
 49e:	00 d0       	rcall	.+0      	; 0x4a0 <stdio_getchar+0x6>
 4a0:	cd b7       	in	r28, 0x3d	; 61
 4a2:	de b7       	in	r29, 0x3e	; 62
 4a4:	89 83       	std	Y+1, r24	; 0x01
 4a6:	9a 83       	std	Y+2, r25	; 0x02
	while (!(USART.STATUS & 0b10000000));
 4a8:	00 00       	nop
 4aa:	80 ea       	ldi	r24, 0xA0	; 160
 4ac:	98 e0       	ldi	r25, 0x08	; 8
 4ae:	fc 01       	movw	r30, r24
 4b0:	81 81       	ldd	r24, Z+1	; 0x01
 4b2:	88 23       	and	r24, r24
 4b4:	d4 f7       	brge	.-12     	; 0x4aa <stdio_getchar+0x10>
	return USART.DATA;
 4b6:	80 ea       	ldi	r24, 0xA0	; 160
 4b8:	98 e0       	ldi	r25, 0x08	; 8
 4ba:	fc 01       	movw	r30, r24
 4bc:	80 81       	ld	r24, Z
 4be:	88 2f       	mov	r24, r24
 4c0:	90 e0       	ldi	r25, 0x00	; 0
}
 4c2:	0f 90       	pop	r0
 4c4:	0f 90       	pop	r0
 4c6:	df 91       	pop	r29
 4c8:	cf 91       	pop	r28
 4ca:	08 95       	ret

000004cc <__cmpsf2>:
 4cc:	0e 94 9a 02 	call	0x534	; 0x534 <__fp_cmp>
 4d0:	08 f4       	brcc	.+2      	; 0x4d4 <__cmpsf2+0x8>
 4d2:	81 e0       	ldi	r24, 0x01	; 1
 4d4:	08 95       	ret

000004d6 <__fixunssfsi>:
 4d6:	0e 94 c6 02 	call	0x58c	; 0x58c <__fp_splitA>
 4da:	88 f0       	brcs	.+34     	; 0x4fe <__fixunssfsi+0x28>
 4dc:	9f 57       	subi	r25, 0x7F	; 127
 4de:	98 f0       	brcs	.+38     	; 0x506 <__fixunssfsi+0x30>
 4e0:	b9 2f       	mov	r27, r25
 4e2:	99 27       	eor	r25, r25
 4e4:	b7 51       	subi	r27, 0x17	; 23
 4e6:	b0 f0       	brcs	.+44     	; 0x514 <__fixunssfsi+0x3e>
 4e8:	e1 f0       	breq	.+56     	; 0x522 <__fixunssfsi+0x4c>
 4ea:	66 0f       	add	r22, r22
 4ec:	77 1f       	adc	r23, r23
 4ee:	88 1f       	adc	r24, r24
 4f0:	99 1f       	adc	r25, r25
 4f2:	1a f0       	brmi	.+6      	; 0x4fa <__fixunssfsi+0x24>
 4f4:	ba 95       	dec	r27
 4f6:	c9 f7       	brne	.-14     	; 0x4ea <__fixunssfsi+0x14>
 4f8:	14 c0       	rjmp	.+40     	; 0x522 <__fixunssfsi+0x4c>
 4fa:	b1 30       	cpi	r27, 0x01	; 1
 4fc:	91 f0       	breq	.+36     	; 0x522 <__fixunssfsi+0x4c>
 4fe:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <__fp_zero>
 502:	b1 e0       	ldi	r27, 0x01	; 1
 504:	08 95       	ret
 506:	0c 94 e0 02 	jmp	0x5c0	; 0x5c0 <__fp_zero>
 50a:	67 2f       	mov	r22, r23
 50c:	78 2f       	mov	r23, r24
 50e:	88 27       	eor	r24, r24
 510:	b8 5f       	subi	r27, 0xF8	; 248
 512:	39 f0       	breq	.+14     	; 0x522 <__fixunssfsi+0x4c>
 514:	b9 3f       	cpi	r27, 0xF9	; 249
 516:	cc f3       	brlt	.-14     	; 0x50a <__fixunssfsi+0x34>
 518:	86 95       	lsr	r24
 51a:	77 95       	ror	r23
 51c:	67 95       	ror	r22
 51e:	b3 95       	inc	r27
 520:	d9 f7       	brne	.-10     	; 0x518 <__fixunssfsi+0x42>
 522:	3e f4       	brtc	.+14     	; 0x532 <__fixunssfsi+0x5c>
 524:	90 95       	com	r25
 526:	80 95       	com	r24
 528:	70 95       	com	r23
 52a:	61 95       	neg	r22
 52c:	7f 4f       	sbci	r23, 0xFF	; 255
 52e:	8f 4f       	sbci	r24, 0xFF	; 255
 530:	9f 4f       	sbci	r25, 0xFF	; 255
 532:	08 95       	ret

00000534 <__fp_cmp>:
 534:	99 0f       	add	r25, r25
 536:	00 08       	sbc	r0, r0
 538:	55 0f       	add	r21, r21
 53a:	aa 0b       	sbc	r26, r26
 53c:	e0 e8       	ldi	r30, 0x80	; 128
 53e:	fe ef       	ldi	r31, 0xFE	; 254
 540:	16 16       	cp	r1, r22
 542:	17 06       	cpc	r1, r23
 544:	e8 07       	cpc	r30, r24
 546:	f9 07       	cpc	r31, r25
 548:	c0 f0       	brcs	.+48     	; 0x57a <__fp_cmp+0x46>
 54a:	12 16       	cp	r1, r18
 54c:	13 06       	cpc	r1, r19
 54e:	e4 07       	cpc	r30, r20
 550:	f5 07       	cpc	r31, r21
 552:	98 f0       	brcs	.+38     	; 0x57a <__fp_cmp+0x46>
 554:	62 1b       	sub	r22, r18
 556:	73 0b       	sbc	r23, r19
 558:	84 0b       	sbc	r24, r20
 55a:	95 0b       	sbc	r25, r21
 55c:	39 f4       	brne	.+14     	; 0x56c <__fp_cmp+0x38>
 55e:	0a 26       	eor	r0, r26
 560:	61 f0       	breq	.+24     	; 0x57a <__fp_cmp+0x46>
 562:	23 2b       	or	r18, r19
 564:	24 2b       	or	r18, r20
 566:	25 2b       	or	r18, r21
 568:	21 f4       	brne	.+8      	; 0x572 <__fp_cmp+0x3e>
 56a:	08 95       	ret
 56c:	0a 26       	eor	r0, r26
 56e:	09 f4       	brne	.+2      	; 0x572 <__fp_cmp+0x3e>
 570:	a1 40       	sbci	r26, 0x01	; 1
 572:	a6 95       	lsr	r26
 574:	8f ef       	ldi	r24, 0xFF	; 255
 576:	81 1d       	adc	r24, r1
 578:	81 1d       	adc	r24, r1
 57a:	08 95       	ret

0000057c <__fp_split3>:
 57c:	57 fd       	sbrc	r21, 7
 57e:	90 58       	subi	r25, 0x80	; 128
 580:	44 0f       	add	r20, r20
 582:	55 1f       	adc	r21, r21
 584:	59 f0       	breq	.+22     	; 0x59c <__fp_splitA+0x10>
 586:	5f 3f       	cpi	r21, 0xFF	; 255
 588:	71 f0       	breq	.+28     	; 0x5a6 <__fp_splitA+0x1a>
 58a:	47 95       	ror	r20

0000058c <__fp_splitA>:
 58c:	88 0f       	add	r24, r24
 58e:	97 fb       	bst	r25, 7
 590:	99 1f       	adc	r25, r25
 592:	61 f0       	breq	.+24     	; 0x5ac <__fp_splitA+0x20>
 594:	9f 3f       	cpi	r25, 0xFF	; 255
 596:	79 f0       	breq	.+30     	; 0x5b6 <__fp_splitA+0x2a>
 598:	87 95       	ror	r24
 59a:	08 95       	ret
 59c:	12 16       	cp	r1, r18
 59e:	13 06       	cpc	r1, r19
 5a0:	14 06       	cpc	r1, r20
 5a2:	55 1f       	adc	r21, r21
 5a4:	f2 cf       	rjmp	.-28     	; 0x58a <__fp_split3+0xe>
 5a6:	46 95       	lsr	r20
 5a8:	f1 df       	rcall	.-30     	; 0x58c <__fp_splitA>
 5aa:	08 c0       	rjmp	.+16     	; 0x5bc <__fp_splitA+0x30>
 5ac:	16 16       	cp	r1, r22
 5ae:	17 06       	cpc	r1, r23
 5b0:	18 06       	cpc	r1, r24
 5b2:	99 1f       	adc	r25, r25
 5b4:	f1 cf       	rjmp	.-30     	; 0x598 <__fp_splitA+0xc>
 5b6:	86 95       	lsr	r24
 5b8:	71 05       	cpc	r23, r1
 5ba:	61 05       	cpc	r22, r1
 5bc:	08 94       	sec
 5be:	08 95       	ret

000005c0 <__fp_zero>:
 5c0:	e8 94       	clt

000005c2 <__fp_szero>:
 5c2:	bb 27       	eor	r27, r27
 5c4:	66 27       	eor	r22, r22
 5c6:	77 27       	eor	r23, r23
 5c8:	cb 01       	movw	r24, r22
 5ca:	97 f9       	bld	r25, 7
 5cc:	08 95       	ret

000005ce <__gesf2>:
 5ce:	0e 94 9a 02 	call	0x534	; 0x534 <__fp_cmp>
 5d2:	08 f4       	brcc	.+2      	; 0x5d6 <__gesf2+0x8>
 5d4:	8f ef       	ldi	r24, 0xFF	; 255
 5d6:	08 95       	ret

000005d8 <__mulsf3>:
 5d8:	0e 94 ff 02 	call	0x5fe	; 0x5fe <__mulsf3x>
 5dc:	0c 94 70 03 	jmp	0x6e0	; 0x6e0 <__fp_round>
 5e0:	0e 94 62 03 	call	0x6c4	; 0x6c4 <__fp_pscA>
 5e4:	38 f0       	brcs	.+14     	; 0x5f4 <__mulsf3+0x1c>
 5e6:	0e 94 69 03 	call	0x6d2	; 0x6d2 <__fp_pscB>
 5ea:	20 f0       	brcs	.+8      	; 0x5f4 <__mulsf3+0x1c>
 5ec:	95 23       	and	r25, r21
 5ee:	11 f0       	breq	.+4      	; 0x5f4 <__mulsf3+0x1c>
 5f0:	0c 94 59 03 	jmp	0x6b2	; 0x6b2 <__fp_inf>
 5f4:	0c 94 5f 03 	jmp	0x6be	; 0x6be <__fp_nan>
 5f8:	11 24       	eor	r1, r1
 5fa:	0c 94 e1 02 	jmp	0x5c2	; 0x5c2 <__fp_szero>

000005fe <__mulsf3x>:
 5fe:	0e 94 be 02 	call	0x57c	; 0x57c <__fp_split3>
 602:	70 f3       	brcs	.-36     	; 0x5e0 <__mulsf3+0x8>

00000604 <__mulsf3_pse>:
 604:	95 9f       	mul	r25, r21
 606:	c1 f3       	breq	.-16     	; 0x5f8 <__mulsf3+0x20>
 608:	95 0f       	add	r25, r21
 60a:	50 e0       	ldi	r21, 0x00	; 0
 60c:	55 1f       	adc	r21, r21
 60e:	62 9f       	mul	r22, r18
 610:	f0 01       	movw	r30, r0
 612:	72 9f       	mul	r23, r18
 614:	bb 27       	eor	r27, r27
 616:	f0 0d       	add	r31, r0
 618:	b1 1d       	adc	r27, r1
 61a:	63 9f       	mul	r22, r19
 61c:	aa 27       	eor	r26, r26
 61e:	f0 0d       	add	r31, r0
 620:	b1 1d       	adc	r27, r1
 622:	aa 1f       	adc	r26, r26
 624:	64 9f       	mul	r22, r20
 626:	66 27       	eor	r22, r22
 628:	b0 0d       	add	r27, r0
 62a:	a1 1d       	adc	r26, r1
 62c:	66 1f       	adc	r22, r22
 62e:	82 9f       	mul	r24, r18
 630:	22 27       	eor	r18, r18
 632:	b0 0d       	add	r27, r0
 634:	a1 1d       	adc	r26, r1
 636:	62 1f       	adc	r22, r18
 638:	73 9f       	mul	r23, r19
 63a:	b0 0d       	add	r27, r0
 63c:	a1 1d       	adc	r26, r1
 63e:	62 1f       	adc	r22, r18
 640:	83 9f       	mul	r24, r19
 642:	a0 0d       	add	r26, r0
 644:	61 1d       	adc	r22, r1
 646:	22 1f       	adc	r18, r18
 648:	74 9f       	mul	r23, r20
 64a:	33 27       	eor	r19, r19
 64c:	a0 0d       	add	r26, r0
 64e:	61 1d       	adc	r22, r1
 650:	23 1f       	adc	r18, r19
 652:	84 9f       	mul	r24, r20
 654:	60 0d       	add	r22, r0
 656:	21 1d       	adc	r18, r1
 658:	82 2f       	mov	r24, r18
 65a:	76 2f       	mov	r23, r22
 65c:	6a 2f       	mov	r22, r26
 65e:	11 24       	eor	r1, r1
 660:	9f 57       	subi	r25, 0x7F	; 127
 662:	50 40       	sbci	r21, 0x00	; 0
 664:	9a f0       	brmi	.+38     	; 0x68c <__mulsf3_pse+0x88>
 666:	f1 f0       	breq	.+60     	; 0x6a4 <__mulsf3_pse+0xa0>
 668:	88 23       	and	r24, r24
 66a:	4a f0       	brmi	.+18     	; 0x67e <__mulsf3_pse+0x7a>
 66c:	ee 0f       	add	r30, r30
 66e:	ff 1f       	adc	r31, r31
 670:	bb 1f       	adc	r27, r27
 672:	66 1f       	adc	r22, r22
 674:	77 1f       	adc	r23, r23
 676:	88 1f       	adc	r24, r24
 678:	91 50       	subi	r25, 0x01	; 1
 67a:	50 40       	sbci	r21, 0x00	; 0
 67c:	a9 f7       	brne	.-22     	; 0x668 <__mulsf3_pse+0x64>
 67e:	9e 3f       	cpi	r25, 0xFE	; 254
 680:	51 05       	cpc	r21, r1
 682:	80 f0       	brcs	.+32     	; 0x6a4 <__mulsf3_pse+0xa0>
 684:	0c 94 59 03 	jmp	0x6b2	; 0x6b2 <__fp_inf>
 688:	0c 94 e1 02 	jmp	0x5c2	; 0x5c2 <__fp_szero>
 68c:	5f 3f       	cpi	r21, 0xFF	; 255
 68e:	e4 f3       	brlt	.-8      	; 0x688 <__mulsf3_pse+0x84>
 690:	98 3e       	cpi	r25, 0xE8	; 232
 692:	d4 f3       	brlt	.-12     	; 0x688 <__mulsf3_pse+0x84>
 694:	86 95       	lsr	r24
 696:	77 95       	ror	r23
 698:	67 95       	ror	r22
 69a:	b7 95       	ror	r27
 69c:	f7 95       	ror	r31
 69e:	e7 95       	ror	r30
 6a0:	9f 5f       	subi	r25, 0xFF	; 255
 6a2:	c1 f7       	brne	.-16     	; 0x694 <__mulsf3_pse+0x90>
 6a4:	fe 2b       	or	r31, r30
 6a6:	88 0f       	add	r24, r24
 6a8:	91 1d       	adc	r25, r1
 6aa:	96 95       	lsr	r25
 6ac:	87 95       	ror	r24
 6ae:	97 f9       	bld	r25, 7
 6b0:	08 95       	ret

000006b2 <__fp_inf>:
 6b2:	97 f9       	bld	r25, 7
 6b4:	9f 67       	ori	r25, 0x7F	; 127
 6b6:	80 e8       	ldi	r24, 0x80	; 128
 6b8:	70 e0       	ldi	r23, 0x00	; 0
 6ba:	60 e0       	ldi	r22, 0x00	; 0
 6bc:	08 95       	ret

000006be <__fp_nan>:
 6be:	9f ef       	ldi	r25, 0xFF	; 255
 6c0:	80 ec       	ldi	r24, 0xC0	; 192
 6c2:	08 95       	ret

000006c4 <__fp_pscA>:
 6c4:	00 24       	eor	r0, r0
 6c6:	0a 94       	dec	r0
 6c8:	16 16       	cp	r1, r22
 6ca:	17 06       	cpc	r1, r23
 6cc:	18 06       	cpc	r1, r24
 6ce:	09 06       	cpc	r0, r25
 6d0:	08 95       	ret

000006d2 <__fp_pscB>:
 6d2:	00 24       	eor	r0, r0
 6d4:	0a 94       	dec	r0
 6d6:	12 16       	cp	r1, r18
 6d8:	13 06       	cpc	r1, r19
 6da:	14 06       	cpc	r1, r20
 6dc:	05 06       	cpc	r0, r21
 6de:	08 95       	ret

000006e0 <__fp_round>:
 6e0:	09 2e       	mov	r0, r25
 6e2:	03 94       	inc	r0
 6e4:	00 0c       	add	r0, r0
 6e6:	11 f4       	brne	.+4      	; 0x6ec <__fp_round+0xc>
 6e8:	88 23       	and	r24, r24
 6ea:	52 f0       	brmi	.+20     	; 0x700 <__fp_round+0x20>
 6ec:	bb 0f       	add	r27, r27
 6ee:	40 f4       	brcc	.+16     	; 0x700 <__fp_round+0x20>
 6f0:	bf 2b       	or	r27, r31
 6f2:	11 f4       	brne	.+4      	; 0x6f8 <__fp_round+0x18>
 6f4:	60 ff       	sbrs	r22, 0
 6f6:	04 c0       	rjmp	.+8      	; 0x700 <__fp_round+0x20>
 6f8:	6f 5f       	subi	r22, 0xFF	; 255
 6fa:	7f 4f       	sbci	r23, 0xFF	; 255
 6fc:	8f 4f       	sbci	r24, 0xFF	; 255
 6fe:	9f 4f       	sbci	r25, 0xFF	; 255
 700:	08 95       	ret

00000702 <fputc>:
 702:	0f 93       	push	r16
 704:	1f 93       	push	r17
 706:	cf 93       	push	r28
 708:	df 93       	push	r29
 70a:	fb 01       	movw	r30, r22
 70c:	23 81       	ldd	r18, Z+3	; 0x03
 70e:	21 fd       	sbrc	r18, 1
 710:	03 c0       	rjmp	.+6      	; 0x718 <fputc+0x16>
 712:	8f ef       	ldi	r24, 0xFF	; 255
 714:	9f ef       	ldi	r25, 0xFF	; 255
 716:	2c c0       	rjmp	.+88     	; 0x770 <fputc+0x6e>
 718:	22 ff       	sbrs	r18, 2
 71a:	16 c0       	rjmp	.+44     	; 0x748 <fputc+0x46>
 71c:	46 81       	ldd	r20, Z+6	; 0x06
 71e:	57 81       	ldd	r21, Z+7	; 0x07
 720:	24 81       	ldd	r18, Z+4	; 0x04
 722:	35 81       	ldd	r19, Z+5	; 0x05
 724:	42 17       	cp	r20, r18
 726:	53 07       	cpc	r21, r19
 728:	44 f4       	brge	.+16     	; 0x73a <fputc+0x38>
 72a:	a0 81       	ld	r26, Z
 72c:	b1 81       	ldd	r27, Z+1	; 0x01
 72e:	9d 01       	movw	r18, r26
 730:	2f 5f       	subi	r18, 0xFF	; 255
 732:	3f 4f       	sbci	r19, 0xFF	; 255
 734:	20 83       	st	Z, r18
 736:	31 83       	std	Z+1, r19	; 0x01
 738:	8c 93       	st	X, r24
 73a:	26 81       	ldd	r18, Z+6	; 0x06
 73c:	37 81       	ldd	r19, Z+7	; 0x07
 73e:	2f 5f       	subi	r18, 0xFF	; 255
 740:	3f 4f       	sbci	r19, 0xFF	; 255
 742:	26 83       	std	Z+6, r18	; 0x06
 744:	37 83       	std	Z+7, r19	; 0x07
 746:	14 c0       	rjmp	.+40     	; 0x770 <fputc+0x6e>
 748:	8b 01       	movw	r16, r22
 74a:	ec 01       	movw	r28, r24
 74c:	fb 01       	movw	r30, r22
 74e:	00 84       	ldd	r0, Z+8	; 0x08
 750:	f1 85       	ldd	r31, Z+9	; 0x09
 752:	e0 2d       	mov	r30, r0
 754:	09 95       	icall
 756:	89 2b       	or	r24, r25
 758:	e1 f6       	brne	.-72     	; 0x712 <fputc+0x10>
 75a:	d8 01       	movw	r26, r16
 75c:	16 96       	adiw	r26, 0x06	; 6
 75e:	8d 91       	ld	r24, X+
 760:	9c 91       	ld	r25, X
 762:	17 97       	sbiw	r26, 0x07	; 7
 764:	01 96       	adiw	r24, 0x01	; 1
 766:	16 96       	adiw	r26, 0x06	; 6
 768:	8d 93       	st	X+, r24
 76a:	9c 93       	st	X, r25
 76c:	17 97       	sbiw	r26, 0x07	; 7
 76e:	ce 01       	movw	r24, r28
 770:	df 91       	pop	r29
 772:	cf 91       	pop	r28
 774:	1f 91       	pop	r17
 776:	0f 91       	pop	r16
 778:	08 95       	ret

0000077a <_exit>:
 77a:	f8 94       	cli

0000077c <__stop_program>:
 77c:	ff cf       	rjmp	.-2      	; 0x77c <__stop_program>
