
gamecontroller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000013ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00802000  000013ae  00001442  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000006f  0080201c  0080201c  0000145e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000145e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000014bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b0  00000000  00000000  000014fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000023aa  00000000  00000000  000016ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000946  00000000  00000000  00003a56  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001bf7  00000000  00000000  0000439c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000498  00000000  00000000  00005f94  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00014d5e  00000000  00000000  0000642c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000081c  00000000  00000000  0001b18a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000120  00000000  00000000  0001b9a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00005fd0  00000000  00000000  0001bac6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__ctors_end>
       4:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
       8:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__vector_2>
       c:	0c 94 9b 01 	jmp	0x336	; 0x336 <__vector_3>
      10:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      14:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      18:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      1c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      20:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      24:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      28:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      2c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      30:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      34:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      38:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      3c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      40:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      44:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      48:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      4c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      50:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      54:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      58:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      5c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      60:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      64:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      68:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      6c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      70:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      74:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      78:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      7c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      80:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      84:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      88:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      8c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      90:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      94:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      98:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      9c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      a0:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      a4:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      a8:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      ac:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      b0:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      b4:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      b8:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      bc:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      c0:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      c4:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      c8:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      cc:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      d0:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      d4:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      d8:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      dc:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      e0:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      e4:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      e8:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      ec:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      f0:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      f4:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      f8:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      fc:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     100:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     104:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     108:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     10c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     110:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     114:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     118:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     11c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     120:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     124:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     128:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     12c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     130:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     134:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     138:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     13c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     140:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     144:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     148:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     14c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     150:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     154:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     158:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     15c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     160:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     164:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     168:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     16c:	1e 02       	muls	r17, r30
     16e:	06 02       	muls	r16, r22
     170:	0c 02       	muls	r16, r28
     172:	12 02       	muls	r17, r18
     174:	0c 02       	muls	r16, r28
     176:	1e 02       	muls	r17, r30
     178:	18 02       	muls	r17, r24
     17a:	06 02       	muls	r16, r22
     17c:	06 02       	muls	r16, r22
     17e:	18 02       	muls	r17, r24
     180:	1e 02       	muls	r17, r30
     182:	0c 02       	muls	r16, r28
     184:	12 02       	muls	r17, r18
     186:	0c 02       	muls	r16, r28
     188:	06 02       	muls	r16, r22
     18a:	1e 02       	muls	r17, r30

0000018c <__ctors_end>:
     18c:	11 24       	eor	r1, r1
     18e:	1f be       	out	0x3f, r1	; 63
     190:	cf ef       	ldi	r28, 0xFF	; 255
     192:	cd bf       	out	0x3d, r28	; 61
     194:	d7 e2       	ldi	r29, 0x27	; 39
     196:	de bf       	out	0x3e, r29	; 62

00000198 <__do_copy_data>:
     198:	10 e2       	ldi	r17, 0x20	; 32
     19a:	a0 e0       	ldi	r26, 0x00	; 0
     19c:	b0 e2       	ldi	r27, 0x20	; 32
     19e:	ee ea       	ldi	r30, 0xAE	; 174
     1a0:	f3 e1       	ldi	r31, 0x13	; 19
     1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <__do_copy_data+0x10>
     1a4:	05 90       	lpm	r0, Z+
     1a6:	0d 92       	st	X+, r0
     1a8:	ac 31       	cpi	r26, 0x1C	; 28
     1aa:	b1 07       	cpc	r27, r17
     1ac:	d9 f7       	brne	.-10     	; 0x1a4 <__do_copy_data+0xc>

000001ae <__do_clear_bss>:
     1ae:	20 e2       	ldi	r18, 0x20	; 32
     1b0:	ac e1       	ldi	r26, 0x1C	; 28
     1b2:	b0 e2       	ldi	r27, 0x20	; 32
     1b4:	01 c0       	rjmp	.+2      	; 0x1b8 <.do_clear_bss_start>

000001b6 <.do_clear_bss_loop>:
     1b6:	1d 92       	st	X+, r1

000001b8 <.do_clear_bss_start>:
     1b8:	ab 38       	cpi	r26, 0x8B	; 139
     1ba:	b2 07       	cpc	r27, r18
     1bc:	e1 f7       	brne	.-8      	; 0x1b6 <.do_clear_bss_loop>
     1be:	0e 94 2b 02 	call	0x456	; 0x456 <main>
     1c2:	0c 94 d5 09 	jmp	0x13aa	; 0x13aa <_exit>

000001c6 <__bad_interrupt>:
     1c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001ca <AccInit>:
#include "acc.h"



void AccInit(void)
{
     1ca:	cf 93       	push	r28
     1cc:	df 93       	push	r29
     1ce:	cd b7       	in	r28, 0x3d	; 61
     1d0:	de b7       	in	r29, 0x3e	; 62

	
}
     1d2:	00 00       	nop
     1d4:	df 91       	pop	r29
     1d6:	cf 91       	pop	r28
     1d8:	08 95       	ret

000001da <AnalogInit>:
#include <inttypes.h>



void AnalogInit(void)
{
     1da:	cf 93       	push	r28
     1dc:	df 93       	push	r29
     1de:	cd b7       	in	r28, 0x3d	; 61
     1e0:	de b7       	in	r29, 0x3e	; 62
	//     7        6       5        4        3        2       1       0
	// |   -    |           MUXPOS[3:0]             |     MUXNEG[2:0]     |
	//     0        0       0        0        0        0       0       0
	// Connect potentiometer (PB1) to positive input
	// MUXNEG bits are ignored in single-ended mode
	ADCA.CH0.MUXCTRL = ADC_CH_MUXINT0_bm; // 0x08
     1e2:	80 e0       	ldi	r24, 0x00	; 0
     1e4:	92 e0       	ldi	r25, 0x02	; 2
     1e6:	28 e0       	ldi	r18, 0x08	; 8
     1e8:	fc 01       	movw	r30, r24
     1ea:	21 a3       	std	Z+33, r18	; 0x21
	//     0        0       0         0         0         0       0        0
	// Apply no limit to ADC sample rate
	// Put ADC in signed mode
	// Disable Free-run mode (single conversion upon trigger)
	// Resolution set to 12-bit, right justified (11-bit effective in signed mode)
	ADCA.CTRLB = ADC_CONMODE_bm; // 0x10
     1ec:	80 e0       	ldi	r24, 0x00	; 0
     1ee:	92 e0       	ldi	r25, 0x02	; 2
     1f0:	20 e1       	ldi	r18, 0x10	; 16
     1f2:	fc 01       	movw	r30, r24
     1f4:	21 83       	std	Z+1, r18	; 0x01
	// The ADC runs off of the CPU_per clock
	// In sys_clk_init() the internal 2MHz RC osc was used to source a 16 MHz PLL
	// The PLL is then divided using Prescalers A, B, and C setting CPU_per to 8 MHz
	// According to AVR1300, the ADC clock should run in the range 100 kHz ~ approx 1.4 MHz
	// Set ADC clock to 125kHz:  CPU_per/64    =>    8MHz/64 = 125kHz
	ADCA.PRESCALER = ADC_PRESCALER2_bm; // 0x04
     1f6:	80 e0       	ldi	r24, 0x00	; 0
     1f8:	92 e0       	ldi	r25, 0x02	; 2
     1fa:	24 e0       	ldi	r18, 0x04	; 4
     1fc:	fc 01       	movw	r30, r24
     1fe:	24 83       	std	Z+4, r18	; 0x04
	//ADCB.REFCTRL
	//     7       6       5       4       3       2        1         0
	// |   -   |      REFSEL[2:0]      |   -   |   -   | BANDGAP | TEMPREF |
	//     0       0       0       0       0       0        0         0
	// Set internal 1V.  
	ADCA.REFCTRL = ADC_REFSEL_INT1V_gc; // 0x10
     200:	80 e0       	ldi	r24, 0x00	; 0
     202:	92 e0       	ldi	r25, 0x02	; 2
     204:	fc 01       	movw	r30, r24
     206:	12 82       	std	Z+2, r1	; 0x02
	//ADCB.EVCTRL
	//     7       6       5       4       3       2       1       0
	// |   -   |   -   |   -   |   EVSEL[1:0]  |      EVACT[2:0]       |
	//     0       0       0       0       0       0       0       0
	// Not implementing Event System so ensure EVCTRL is reading zeros
	ADCA.EVCTRL = 0x00;
     208:	80 e0       	ldi	r24, 0x00	; 0
     20a:	92 e0       	ldi	r25, 0x02	; 2
     20c:	fc 01       	movw	r30, r24
     20e:	13 82       	std	Z+3, r1	; 0x03
	//ADCB.INTFLAGS
	//     7       6       5       4       3       2       1       0
	// |   -   |   -   |   -   |   -   |   -   |   -   |   -   | CH0IF |
	//     0       0       0       0       0       0       0       0
	// Ensure the ADC complete flag is cleared (by writing a '1' to it)
	ADCA.INTFLAGS = ADC_CH0IF_bm; // 0x01
     210:	80 e0       	ldi	r24, 0x00	; 0
     212:	92 e0       	ldi	r25, 0x02	; 2
     214:	21 e0       	ldi	r18, 0x01	; 1
     216:	fc 01       	movw	r30, r24
     218:	26 83       	std	Z+6, r18	; 0x06
	//ADCB.CH0.INTCTRL
	//     7       6       5       4        3       2       1       0
	// |   -   |   -   |   -   |   -   |  INTMODE[1:0]  |  INTLVL[1:0]  |
	//     0       0       0       0        0       0       0       0
	// Configure interrupt on conversion complete with high priority
	ADCA.CH0.INTCTRL = ADC_CH_INTLVL1_bm | ADC_CH_INTLVL0_bm; // 0x03
     21a:	80 e0       	ldi	r24, 0x00	; 0
     21c:	92 e0       	ldi	r25, 0x02	; 2
     21e:	23 e0       	ldi	r18, 0x03	; 3
     220:	fc 01       	movw	r30, r24
     222:	22 a3       	std	Z+34, r18	; 0x22
	//ADCB.CTRLA
	//     7       6       5       4       3         2        1        0
	// |   -   |   -   |   -   |   -   |   -   | CH0START | FLUSH | ENABLE |
	//     0       0       0       0       0         0        0        0
	// Enable ADC, module B
	ADCA.CTRLA = ADC_ENABLE_bm; // 0x01
     224:	80 e0       	ldi	r24, 0x00	; 0
     226:	92 e0       	ldi	r25, 0x02	; 2
     228:	21 e0       	ldi	r18, 0x01	; 1
     22a:	fc 01       	movw	r30, r24
     22c:	20 83       	st	Z, r18
	//////////////////////////////////////////////////////////////////////
}
     22e:	00 00       	nop
     230:	df 91       	pop	r29
     232:	cf 91       	pop	r28
     234:	08 95       	ret

00000236 <ClockInit>:
#pragma GCC push_options
#pragma GCC optimize ("O2") //This function must be optimized to avoid too long time interval betwee CCP write and CLK.CTRL write (4 CLK CYC max)

void ClockInit(void)
{
	OSC.XOSCCTRL=0b11001011; //Clock<=16MHz	
     236:	8b ec       	ldi	r24, 0xCB	; 203
     238:	80 93 52 00 	sts	0x0052, r24	; 0x800052 <__TEXT_REGION_LENGTH__+0x700052>
	OSC.CTRL=0b01000; //Enable oscillator	
     23c:	88 e0       	ldi	r24, 0x08	; 8
     23e:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
	while (!(OSC.STATUS&0b1000)); //Wait until XTAL osc is ready
     242:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
     246:	83 ff       	sbrs	r24, 3
     248:	fc cf       	rjmp	.-8      	; 0x242 <ClockInit+0xc>
	
	//Select XTAL osc as system CLK source
	CCP=0xd8;
     24a:	88 ed       	ldi	r24, 0xD8	; 216
     24c:	84 bf       	out	0x34, r24	; 52
    CLK.CTRL=0b0011;
     24e:	83 e0       	ldi	r24, 0x03	; 3
     250:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
     254:	08 95       	ret

00000256 <EncoderInit>:
	
}
int EncoderGetPos(void)
{
	return encoderPos;
}
     256:	cf 93       	push	r28
     258:	df 93       	push	r29
     25a:	cd b7       	in	r28, 0x3d	; 61
     25c:	de b7       	in	r29, 0x3e	; 62
     25e:	80 e4       	ldi	r24, 0x40	; 64
     260:	96 e0       	ldi	r25, 0x06	; 6
     262:	20 e4       	ldi	r18, 0x40	; 64
     264:	36 e0       	ldi	r19, 0x06	; 6
     266:	f9 01       	movw	r30, r18
     268:	20 81       	ld	r18, Z
     26a:	2f 7c       	andi	r18, 0xCF	; 207
     26c:	fc 01       	movw	r30, r24
     26e:	20 83       	st	Z, r18
     270:	80 e4       	ldi	r24, 0x40	; 64
     272:	96 e0       	ldi	r25, 0x06	; 6
     274:	28 e1       	ldi	r18, 0x18	; 24
     276:	fc 01       	movw	r30, r24
     278:	24 8b       	std	Z+20, r18	; 0x14
     27a:	80 e4       	ldi	r24, 0x40	; 64
     27c:	96 e0       	ldi	r25, 0x06	; 6
     27e:	28 e1       	ldi	r18, 0x18	; 24
     280:	fc 01       	movw	r30, r24
     282:	25 8b       	std	Z+21, r18	; 0x15
     284:	80 e4       	ldi	r24, 0x40	; 64
     286:	96 e0       	ldi	r25, 0x06	; 6
     288:	2f e0       	ldi	r18, 0x0F	; 15
     28a:	fc 01       	movw	r30, r24
     28c:	21 87       	std	Z+9, r18	; 0x09
     28e:	80 e4       	ldi	r24, 0x40	; 64
     290:	96 e0       	ldi	r25, 0x06	; 6
     292:	20 e1       	ldi	r18, 0x10	; 16
     294:	fc 01       	movw	r30, r24
     296:	22 87       	std	Z+10, r18	; 0x0a
     298:	80 e4       	ldi	r24, 0x40	; 64
     29a:	96 e0       	ldi	r25, 0x06	; 6
     29c:	20 e2       	ldi	r18, 0x20	; 32
     29e:	fc 01       	movw	r30, r24
     2a0:	23 87       	std	Z+11, r18	; 0x0b
     2a2:	8f e3       	ldi	r24, 0x3F	; 63
     2a4:	90 e0       	ldi	r25, 0x00	; 0
     2a6:	2f e3       	ldi	r18, 0x3F	; 63
     2a8:	30 e0       	ldi	r19, 0x00	; 0
     2aa:	f9 01       	movw	r30, r18
     2ac:	20 81       	ld	r18, Z
     2ae:	20 68       	ori	r18, 0x80	; 128
     2b0:	fc 01       	movw	r30, r24
     2b2:	20 83       	st	Z, r18
     2b4:	80 ea       	ldi	r24, 0xA0	; 160
     2b6:	90 e0       	ldi	r25, 0x00	; 0
     2b8:	24 e0       	ldi	r18, 0x04	; 4
     2ba:	fc 01       	movw	r30, r24
     2bc:	22 83       	std	Z+2, r18	; 0x02
     2be:	00 00       	nop
     2c0:	df 91       	pop	r29
     2c2:	cf 91       	pop	r28
     2c4:	08 95       	ret

000002c6 <__vector_2>:

ISR(PORTC_INT0_vect){
     2c6:	1f 92       	push	r1
     2c8:	0f 92       	push	r0
     2ca:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     2ce:	0f 92       	push	r0
     2d0:	11 24       	eor	r1, r1
     2d2:	2f 93       	push	r18
     2d4:	3f 93       	push	r19
     2d6:	4f 93       	push	r20
     2d8:	5f 93       	push	r21
     2da:	6f 93       	push	r22
     2dc:	7f 93       	push	r23
     2de:	8f 93       	push	r24
     2e0:	9f 93       	push	r25
     2e2:	af 93       	push	r26
     2e4:	bf 93       	push	r27
     2e6:	ef 93       	push	r30
     2e8:	ff 93       	push	r31
     2ea:	cf 93       	push	r28
     2ec:	df 93       	push	r29
     2ee:	cd b7       	in	r28, 0x3d	; 61
     2f0:	de b7       	in	r29, 0x3e	; 62
	encoderPos += readEncoder();
     2f2:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <readEncoder>
     2f6:	9c 01       	movw	r18, r24
     2f8:	80 91 1c 20 	lds	r24, 0x201C	; 0x80201c <__data_end>
     2fc:	90 91 1d 20 	lds	r25, 0x201D	; 0x80201d <__data_end+0x1>
     300:	82 0f       	add	r24, r18
     302:	93 1f       	adc	r25, r19
     304:	80 93 1c 20 	sts	0x201C, r24	; 0x80201c <__data_end>
     308:	90 93 1d 20 	sts	0x201D, r25	; 0x80201d <__data_end+0x1>
}
     30c:	00 00       	nop
     30e:	df 91       	pop	r29
     310:	cf 91       	pop	r28
     312:	ff 91       	pop	r31
     314:	ef 91       	pop	r30
     316:	bf 91       	pop	r27
     318:	af 91       	pop	r26
     31a:	9f 91       	pop	r25
     31c:	8f 91       	pop	r24
     31e:	7f 91       	pop	r23
     320:	6f 91       	pop	r22
     322:	5f 91       	pop	r21
     324:	4f 91       	pop	r20
     326:	3f 91       	pop	r19
     328:	2f 91       	pop	r18
     32a:	0f 90       	pop	r0
     32c:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     330:	0f 90       	pop	r0
     332:	1f 90       	pop	r1
     334:	18 95       	reti

00000336 <__vector_3>:

ISR(PORTC_INT1_vect){
     336:	1f 92       	push	r1
     338:	0f 92       	push	r0
     33a:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     33e:	0f 92       	push	r0
     340:	11 24       	eor	r1, r1
     342:	2f 93       	push	r18
     344:	3f 93       	push	r19
     346:	4f 93       	push	r20
     348:	5f 93       	push	r21
     34a:	6f 93       	push	r22
     34c:	7f 93       	push	r23
     34e:	8f 93       	push	r24
     350:	9f 93       	push	r25
     352:	af 93       	push	r26
     354:	bf 93       	push	r27
     356:	ef 93       	push	r30
     358:	ff 93       	push	r31
     35a:	cf 93       	push	r28
     35c:	df 93       	push	r29
     35e:	cd b7       	in	r28, 0x3d	; 61
     360:	de b7       	in	r29, 0x3e	; 62
	encoderPos += readEncoder();
     362:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <readEncoder>
     366:	9c 01       	movw	r18, r24
     368:	80 91 1c 20 	lds	r24, 0x201C	; 0x80201c <__data_end>
     36c:	90 91 1d 20 	lds	r25, 0x201D	; 0x80201d <__data_end+0x1>
     370:	82 0f       	add	r24, r18
     372:	93 1f       	adc	r25, r19
     374:	80 93 1c 20 	sts	0x201C, r24	; 0x80201c <__data_end>
     378:	90 93 1d 20 	sts	0x201D, r25	; 0x80201d <__data_end+0x1>
}
     37c:	00 00       	nop
     37e:	df 91       	pop	r29
     380:	cf 91       	pop	r28
     382:	ff 91       	pop	r31
     384:	ef 91       	pop	r30
     386:	bf 91       	pop	r27
     388:	af 91       	pop	r26
     38a:	9f 91       	pop	r25
     38c:	8f 91       	pop	r24
     38e:	7f 91       	pop	r23
     390:	6f 91       	pop	r22
     392:	5f 91       	pop	r21
     394:	4f 91       	pop	r20
     396:	3f 91       	pop	r19
     398:	2f 91       	pop	r18
     39a:	0f 90       	pop	r0
     39c:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     3a0:	0f 90       	pop	r0
     3a2:	1f 90       	pop	r1
     3a4:	18 95       	reti

000003a6 <readEncoder>:
		}
		state = (s >> 2);
	}
*/

int readEncoder(){
     3a6:	cf 93       	push	r28
     3a8:	df 93       	push	r29
     3aa:	00 d0       	rcall	.+0      	; 0x3ac <readEncoder+0x6>
     3ac:	1f 92       	push	r1
     3ae:	cd b7       	in	r28, 0x3d	; 61
     3b0:	de b7       	in	r29, 0x3e	; 62
	currentPos = (PORTC.IN >> 4) & 3;
     3b2:	80 e4       	ldi	r24, 0x40	; 64
     3b4:	96 e0       	ldi	r25, 0x06	; 6
     3b6:	fc 01       	movw	r30, r24
     3b8:	80 85       	ldd	r24, Z+8	; 0x08
     3ba:	82 95       	swap	r24
     3bc:	8f 70       	andi	r24, 0x0F	; 15
     3be:	83 70       	andi	r24, 0x03	; 3
     3c0:	80 93 1e 20 	sts	0x201E, r24	; 0x80201e <currentPos>
	uint8_t s = (currentPos << 2) | prevpos;
     3c4:	80 91 1e 20 	lds	r24, 0x201E	; 0x80201e <currentPos>
     3c8:	88 2f       	mov	r24, r24
     3ca:	90 e0       	ldi	r25, 0x00	; 0
     3cc:	88 0f       	add	r24, r24
     3ce:	99 1f       	adc	r25, r25
     3d0:	88 0f       	add	r24, r24
     3d2:	99 1f       	adc	r25, r25
     3d4:	98 2f       	mov	r25, r24
     3d6:	80 91 1f 20 	lds	r24, 0x201F	; 0x80201f <prevpos>
     3da:	89 2b       	or	r24, r25
     3dc:	8b 83       	std	Y+3, r24	; 0x03
	int position = 0;
     3de:	19 82       	std	Y+1, r1	; 0x01
     3e0:	1a 82       	std	Y+2, r1	; 0x02
	switch (s) {
     3e2:	8b 81       	ldd	r24, Y+3	; 0x03
     3e4:	88 2f       	mov	r24, r24
     3e6:	90 e0       	ldi	r25, 0x00	; 0
     3e8:	09 2e       	mov	r0, r25
     3ea:	00 0c       	add	r0, r0
     3ec:	aa 0b       	sbc	r26, r26
     3ee:	bb 0b       	sbc	r27, r27
     3f0:	40 e0       	ldi	r20, 0x00	; 0
     3f2:	50 e0       	ldi	r21, 0x00	; 0
     3f4:	2f e0       	ldi	r18, 0x0F	; 15
     3f6:	30 e0       	ldi	r19, 0x00	; 0
     3f8:	84 1b       	sub	r24, r20
     3fa:	95 0b       	sbc	r25, r21
     3fc:	28 17       	cp	r18, r24
     3fe:	39 07       	cpc	r19, r25
     400:	b8 f0       	brcs	.+46     	; 0x430 <__FUSE_REGION_LENGTH__+0x30>
     402:	8a 54       	subi	r24, 0x4A	; 74
     404:	9f 4f       	sbci	r25, 0xFF	; 255
     406:	fc 01       	movw	r30, r24
     408:	0c 94 99 06 	jmp	0xd32	; 0xd32 <__tablejump2__>
		case 0: case 5: case 10: case 15:
		break;
		case 1: case 7: case 8: case 14:
		position++; break;
     40c:	89 81       	ldd	r24, Y+1	; 0x01
     40e:	9a 81       	ldd	r25, Y+2	; 0x02
     410:	01 96       	adiw	r24, 0x01	; 1
     412:	89 83       	std	Y+1, r24	; 0x01
     414:	9a 83       	std	Y+2, r25	; 0x02
     416:	13 c0       	rjmp	.+38     	; 0x43e <__FUSE_REGION_LENGTH__+0x3e>
		case 2: case 4: case 11: case 13:
		position--; break;
     418:	89 81       	ldd	r24, Y+1	; 0x01
     41a:	9a 81       	ldd	r25, Y+2	; 0x02
     41c:	01 97       	sbiw	r24, 0x01	; 1
     41e:	89 83       	std	Y+1, r24	; 0x01
     420:	9a 83       	std	Y+2, r25	; 0x02
     422:	0d c0       	rjmp	.+26     	; 0x43e <__FUSE_REGION_LENGTH__+0x3e>
		case 3: case 12:
		position += 2; break;
     424:	89 81       	ldd	r24, Y+1	; 0x01
     426:	9a 81       	ldd	r25, Y+2	; 0x02
     428:	02 96       	adiw	r24, 0x02	; 2
     42a:	89 83       	std	Y+1, r24	; 0x01
     42c:	9a 83       	std	Y+2, r25	; 0x02
     42e:	07 c0       	rjmp	.+14     	; 0x43e <__FUSE_REGION_LENGTH__+0x3e>
		default:
		position -= 2; break;
     430:	89 81       	ldd	r24, Y+1	; 0x01
     432:	9a 81       	ldd	r25, Y+2	; 0x02
     434:	02 97       	sbiw	r24, 0x02	; 2
     436:	89 83       	std	Y+1, r24	; 0x01
     438:	9a 83       	std	Y+2, r25	; 0x02
     43a:	01 c0       	rjmp	.+2      	; 0x43e <__FUSE_REGION_LENGTH__+0x3e>
	currentPos = (PORTC.IN >> 4) & 3;
	uint8_t s = (currentPos << 2) | prevpos;
	int position = 0;
	switch (s) {
		case 0: case 5: case 10: case 15:
		break;
     43c:	00 00       	nop
		case 3: case 12:
		position += 2; break;
		default:
		position -= 2; break;
	}
	prevpos = currentPos;
     43e:	80 91 1e 20 	lds	r24, 0x201E	; 0x80201e <currentPos>
     442:	80 93 1f 20 	sts	0x201F, r24	; 0x80201f <prevpos>
	return position;
     446:	89 81       	ldd	r24, Y+1	; 0x01
     448:	9a 81       	ldd	r25, Y+2	; 0x02
}
     44a:	23 96       	adiw	r28, 0x03	; 3
     44c:	cd bf       	out	0x3d, r28	; 61
     44e:	de bf       	out	0x3e, r29	; 62
     450:	df 91       	pop	r29
     452:	cf 91       	pop	r28
     454:	08 95       	ret

00000456 <main>:
char a;

void SimpleFunction(void);	//A simple function: print a counter (0 to 9) to the terminal

int main(void)
{	
     456:	cf 93       	push	r28
     458:	df 93       	push	r29
     45a:	cd b7       	in	r28, 0x3d	; 61
     45c:	de b7       	in	r29, 0x3e	; 62
     45e:	6e 97       	sbiw	r28, 0x1e	; 30
     460:	cd bf       	out	0x3d, r28	; 61
     462:	de bf       	out	0x3e, r29	; 62
	//###1###
	 
	//Initialize subsystems
	ClockInit();			//Initialize system clock (16 MHz)
     464:	0e 94 1b 01 	call	0x236	; 0x236 <ClockInit>
	USARTInit();			//Initialize USART and bind to stdout,stdin
     468:	0e 94 ad 04 	call	0x95a	; 0x95a <USARTInit>
	AnalogInit();			//Initialize ADC
     46c:	0e 94 ed 00 	call	0x1da	; 0x1da <AnalogInit>
	AccInit();				//Initialize accelerometer system
     470:	0e 94 e5 00 	call	0x1ca	; 0x1ca <AccInit>
	LEDInit();				//Initialize LEDs
     474:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <LEDInit>
	SwitchInit();			//Initialize switches
     478:	0e 94 87 04 	call	0x90e	; 0x90e <SwitchInit>
	EncoderInit();			//Initialize encoder
     47c:	0e 94 2b 01 	call	0x256	; 0x256 <EncoderInit>
	SpeakerInit();			//Initialize speaker system
     480:	0e 94 9b 03 	call	0x736	; 0x736 <SpeakerInit>
	
	//Enable interrupts
	PMIC.CTRL|=0b00000111;  //Enable low, medium, high priority interrupts
     484:	80 ea       	ldi	r24, 0xA0	; 160
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	20 ea       	ldi	r18, 0xA0	; 160
     48a:	30 e0       	ldi	r19, 0x00	; 0
     48c:	f9 01       	movw	r30, r18
     48e:	22 81       	ldd	r18, Z+2	; 0x02
     490:	27 60       	ori	r18, 0x07	; 7
     492:	fc 01       	movw	r30, r24
     494:	22 83       	std	Z+2, r18	; 0x02
	SREG|=0b10000000;		//Global interrupt enable
     496:	8f e3       	ldi	r24, 0x3F	; 63
     498:	90 e0       	ldi	r25, 0x00	; 0
     49a:	2f e3       	ldi	r18, 0x3F	; 63
     49c:	30 e0       	ldi	r19, 0x00	; 0
     49e:	f9 01       	movw	r30, r18
     4a0:	20 81       	ld	r18, Z
     4a2:	20 68       	ori	r18, 0x80	; 128
     4a4:	fc 01       	movw	r30, r24
     4a6:	20 83       	st	Z, r18
     4a8:	80 e0       	ldi	r24, 0x00	; 0
     4aa:	90 e0       	ldi	r25, 0x00	; 0
     4ac:	aa ef       	ldi	r26, 0xFA	; 250
     4ae:	b3 e4       	ldi	r27, 0x43	; 67
     4b0:	8f 83       	std	Y+7, r24	; 0x07
     4b2:	98 87       	std	Y+8, r25	; 0x08
     4b4:	a9 87       	std	Y+9, r26	; 0x09
     4b6:	ba 87       	std	Y+10, r27	; 0x0a

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     4b8:	20 e0       	ldi	r18, 0x00	; 0
     4ba:	30 e0       	ldi	r19, 0x00	; 0
     4bc:	4a e7       	ldi	r20, 0x7A	; 122
     4be:	55 e4       	ldi	r21, 0x45	; 69
     4c0:	6f 81       	ldd	r22, Y+7	; 0x07
     4c2:	78 85       	ldd	r23, Y+8	; 0x08
     4c4:	89 85       	ldd	r24, Y+9	; 0x09
     4c6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4c8:	0e 94 e5 05 	call	0xbca	; 0xbca <__mulsf3>
     4cc:	dc 01       	movw	r26, r24
     4ce:	cb 01       	movw	r24, r22
     4d0:	8b 87       	std	Y+11, r24	; 0x0b
     4d2:	9c 87       	std	Y+12, r25	; 0x0c
     4d4:	ad 87       	std	Y+13, r26	; 0x0d
     4d6:	be 87       	std	Y+14, r27	; 0x0e
	if (__tmp < 1.0)
     4d8:	20 e0       	ldi	r18, 0x00	; 0
     4da:	30 e0       	ldi	r19, 0x00	; 0
     4dc:	40 e8       	ldi	r20, 0x80	; 128
     4de:	5f e3       	ldi	r21, 0x3F	; 63
     4e0:	6b 85       	ldd	r22, Y+11	; 0x0b
     4e2:	7c 85       	ldd	r23, Y+12	; 0x0c
     4e4:	8d 85       	ldd	r24, Y+13	; 0x0d
     4e6:	9e 85       	ldd	r25, Y+14	; 0x0e
     4e8:	0e 94 22 05 	call	0xa44	; 0xa44 <__cmpsf2>
     4ec:	88 23       	and	r24, r24
     4ee:	2c f4       	brge	.+10     	; 0x4fa <main+0xa4>
		__ticks = 1;
     4f0:	81 e0       	ldi	r24, 0x01	; 1
     4f2:	90 e0       	ldi	r25, 0x00	; 0
     4f4:	8f 87       	std	Y+15, r24	; 0x0f
     4f6:	98 8b       	std	Y+16, r25	; 0x10
     4f8:	3f c0       	rjmp	.+126    	; 0x578 <main+0x122>
	else if (__tmp > 65535)
     4fa:	20 e0       	ldi	r18, 0x00	; 0
     4fc:	3f ef       	ldi	r19, 0xFF	; 255
     4fe:	4f e7       	ldi	r20, 0x7F	; 127
     500:	57 e4       	ldi	r21, 0x47	; 71
     502:	6b 85       	ldd	r22, Y+11	; 0x0b
     504:	7c 85       	ldd	r23, Y+12	; 0x0c
     506:	8d 85       	ldd	r24, Y+13	; 0x0d
     508:	9e 85       	ldd	r25, Y+14	; 0x0e
     50a:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <__gesf2>
     50e:	18 16       	cp	r1, r24
     510:	4c f5       	brge	.+82     	; 0x564 <main+0x10e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     512:	20 e0       	ldi	r18, 0x00	; 0
     514:	30 e0       	ldi	r19, 0x00	; 0
     516:	40 e2       	ldi	r20, 0x20	; 32
     518:	51 e4       	ldi	r21, 0x41	; 65
     51a:	6f 81       	ldd	r22, Y+7	; 0x07
     51c:	78 85       	ldd	r23, Y+8	; 0x08
     51e:	89 85       	ldd	r24, Y+9	; 0x09
     520:	9a 85       	ldd	r25, Y+10	; 0x0a
     522:	0e 94 e5 05 	call	0xbca	; 0xbca <__mulsf3>
     526:	dc 01       	movw	r26, r24
     528:	cb 01       	movw	r24, r22
     52a:	bc 01       	movw	r22, r24
     52c:	cd 01       	movw	r24, r26
     52e:	0e 94 27 05 	call	0xa4e	; 0xa4e <__fixunssfsi>
     532:	dc 01       	movw	r26, r24
     534:	cb 01       	movw	r24, r22
     536:	8f 87       	std	Y+15, r24	; 0x0f
     538:	98 8b       	std	Y+16, r25	; 0x10
     53a:	0f c0       	rjmp	.+30     	; 0x55a <main+0x104>
     53c:	80 e9       	ldi	r24, 0x90	; 144
     53e:	91 e0       	ldi	r25, 0x01	; 1
     540:	89 8b       	std	Y+17, r24	; 0x11
     542:	9a 8b       	std	Y+18, r25	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     544:	89 89       	ldd	r24, Y+17	; 0x11
     546:	9a 89       	ldd	r25, Y+18	; 0x12
     548:	01 97       	sbiw	r24, 0x01	; 1
     54a:	f1 f7       	brne	.-4      	; 0x548 <main+0xf2>
     54c:	89 8b       	std	Y+17, r24	; 0x11
     54e:	9a 8b       	std	Y+18, r25	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     550:	8f 85       	ldd	r24, Y+15	; 0x0f
     552:	98 89       	ldd	r25, Y+16	; 0x10
     554:	01 97       	sbiw	r24, 0x01	; 1
     556:	8f 87       	std	Y+15, r24	; 0x0f
     558:	98 8b       	std	Y+16, r25	; 0x10
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     55a:	8f 85       	ldd	r24, Y+15	; 0x0f
     55c:	98 89       	ldd	r25, Y+16	; 0x10
     55e:	89 2b       	or	r24, r25
     560:	69 f7       	brne	.-38     	; 0x53c <main+0xe6>
     562:	14 c0       	rjmp	.+40     	; 0x58c <main+0x136>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     564:	6b 85       	ldd	r22, Y+11	; 0x0b
     566:	7c 85       	ldd	r23, Y+12	; 0x0c
     568:	8d 85       	ldd	r24, Y+13	; 0x0d
     56a:	9e 85       	ldd	r25, Y+14	; 0x0e
     56c:	0e 94 27 05 	call	0xa4e	; 0xa4e <__fixunssfsi>
     570:	dc 01       	movw	r26, r24
     572:	cb 01       	movw	r24, r22
     574:	8f 87       	std	Y+15, r24	; 0x0f
     576:	98 8b       	std	Y+16, r25	; 0x10
     578:	8f 85       	ldd	r24, Y+15	; 0x0f
     57a:	98 89       	ldd	r25, Y+16	; 0x10
     57c:	8b 8b       	std	Y+19, r24	; 0x13
     57e:	9c 8b       	std	Y+20, r25	; 0x14
     580:	8b 89       	ldd	r24, Y+19	; 0x13
     582:	9c 89       	ldd	r25, Y+20	; 0x14
     584:	01 97       	sbiw	r24, 0x01	; 1
     586:	f1 f7       	brne	.-4      	; 0x584 <main+0x12e>
     588:	8b 8b       	std	Y+19, r24	; 0x13
     58a:	9c 8b       	std	Y+20, r25	; 0x14
	while (1){
		// Start ADC conversion
		//ADCA.CH0.CTRL |= 0x80;


		sprintf(text, "encoder: %d\r",(int)PORTC.DIR);
     58c:	80 e4       	ldi	r24, 0x40	; 64
     58e:	96 e0       	ldi	r25, 0x06	; 6
     590:	fc 01       	movw	r30, r24
     592:	80 81       	ld	r24, Z
     594:	88 2f       	mov	r24, r24
     596:	90 e0       	ldi	r25, 0x00	; 0
     598:	29 2f       	mov	r18, r25
     59a:	2f 93       	push	r18
     59c:	8f 93       	push	r24
     59e:	8e e0       	ldi	r24, 0x0E	; 14
     5a0:	90 e2       	ldi	r25, 0x20	; 32
     5a2:	89 2f       	mov	r24, r25
     5a4:	8f 93       	push	r24
     5a6:	8e e0       	ldi	r24, 0x0E	; 14
     5a8:	90 e2       	ldi	r25, 0x20	; 32
     5aa:	8f 93       	push	r24
     5ac:	80 e2       	ldi	r24, 0x20	; 32
     5ae:	90 e2       	ldi	r25, 0x20	; 32
     5b0:	89 2f       	mov	r24, r25
     5b2:	8f 93       	push	r24
     5b4:	80 e2       	ldi	r24, 0x20	; 32
     5b6:	90 e2       	ldi	r25, 0x20	; 32
     5b8:	8f 93       	push	r24
     5ba:	0e 94 f1 06 	call	0xde2	; 0xde2 <sprintf>
     5be:	0f 90       	pop	r0
     5c0:	0f 90       	pop	r0
     5c2:	0f 90       	pop	r0
     5c4:	0f 90       	pop	r0
     5c6:	0f 90       	pop	r0
     5c8:	0f 90       	pop	r0
		puts(text);
     5ca:	80 e2       	ldi	r24, 0x20	; 32
     5cc:	90 e2       	ldi	r25, 0x20	; 32
     5ce:	0e 94 c1 06 	call	0xd82	; 0xd82 <puts>
		
		
		//SpeakerBeep(500,1000);
		//SpeakerBeep(1000,1000);
		//SpeakerBeep(1500,1000);
		for (int i = 1; i<4; i++)
     5d2:	81 e0       	ldi	r24, 0x01	; 1
     5d4:	90 e0       	ldi	r25, 0x00	; 0
     5d6:	89 83       	std	Y+1, r24	; 0x01
     5d8:	9a 83       	std	Y+2, r25	; 0x02
     5da:	15 c0       	rjmp	.+42     	; 0x606 <main+0x1b0>
		{
			SpeakerBeep(i*500,1000);
     5dc:	29 81       	ldd	r18, Y+1	; 0x01
     5de:	3a 81       	ldd	r19, Y+2	; 0x02
     5e0:	84 ef       	ldi	r24, 0xF4	; 244
     5e2:	91 e0       	ldi	r25, 0x01	; 1
     5e4:	28 9f       	mul	r18, r24
     5e6:	a0 01       	movw	r20, r0
     5e8:	29 9f       	mul	r18, r25
     5ea:	50 0d       	add	r21, r0
     5ec:	38 9f       	mul	r19, r24
     5ee:	50 0d       	add	r21, r0
     5f0:	11 24       	eor	r1, r1
     5f2:	68 ee       	ldi	r22, 0xE8	; 232
     5f4:	73 e0       	ldi	r23, 0x03	; 3
     5f6:	ca 01       	movw	r24, r20
     5f8:	0e 94 be 03 	call	0x77c	; 0x77c <SpeakerBeep>
		
		
		//SpeakerBeep(500,1000);
		//SpeakerBeep(1000,1000);
		//SpeakerBeep(1500,1000);
		for (int i = 1; i<4; i++)
     5fc:	89 81       	ldd	r24, Y+1	; 0x01
     5fe:	9a 81       	ldd	r25, Y+2	; 0x02
     600:	01 96       	adiw	r24, 0x01	; 1
     602:	89 83       	std	Y+1, r24	; 0x01
     604:	9a 83       	std	Y+2, r25	; 0x02
     606:	89 81       	ldd	r24, Y+1	; 0x01
     608:	9a 81       	ldd	r25, Y+2	; 0x02
     60a:	04 97       	sbiw	r24, 0x04	; 4
     60c:	3c f3       	brlt	.-50     	; 0x5dc <main+0x186>
     60e:	80 e0       	ldi	r24, 0x00	; 0
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	aa e7       	ldi	r26, 0x7A	; 122
     614:	b4 e4       	ldi	r27, 0x44	; 68
     616:	8b 83       	std	Y+3, r24	; 0x03
     618:	9c 83       	std	Y+4, r25	; 0x04
     61a:	ad 83       	std	Y+5, r26	; 0x05
     61c:	be 83       	std	Y+6, r27	; 0x06

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     61e:	20 e0       	ldi	r18, 0x00	; 0
     620:	30 e0       	ldi	r19, 0x00	; 0
     622:	4a e7       	ldi	r20, 0x7A	; 122
     624:	55 e4       	ldi	r21, 0x45	; 69
     626:	6b 81       	ldd	r22, Y+3	; 0x03
     628:	7c 81       	ldd	r23, Y+4	; 0x04
     62a:	8d 81       	ldd	r24, Y+5	; 0x05
     62c:	9e 81       	ldd	r25, Y+6	; 0x06
     62e:	0e 94 e5 05 	call	0xbca	; 0xbca <__mulsf3>
     632:	dc 01       	movw	r26, r24
     634:	cb 01       	movw	r24, r22
     636:	8d 8b       	std	Y+21, r24	; 0x15
     638:	9e 8b       	std	Y+22, r25	; 0x16
     63a:	af 8b       	std	Y+23, r26	; 0x17
     63c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     63e:	20 e0       	ldi	r18, 0x00	; 0
     640:	30 e0       	ldi	r19, 0x00	; 0
     642:	40 e8       	ldi	r20, 0x80	; 128
     644:	5f e3       	ldi	r21, 0x3F	; 63
     646:	6d 89       	ldd	r22, Y+21	; 0x15
     648:	7e 89       	ldd	r23, Y+22	; 0x16
     64a:	8f 89       	ldd	r24, Y+23	; 0x17
     64c:	98 8d       	ldd	r25, Y+24	; 0x18
     64e:	0e 94 22 05 	call	0xa44	; 0xa44 <__cmpsf2>
     652:	88 23       	and	r24, r24
     654:	2c f4       	brge	.+10     	; 0x660 <main+0x20a>
		__ticks = 1;
     656:	81 e0       	ldi	r24, 0x01	; 1
     658:	90 e0       	ldi	r25, 0x00	; 0
     65a:	89 8f       	std	Y+25, r24	; 0x19
     65c:	9a 8f       	std	Y+26, r25	; 0x1a
     65e:	3f c0       	rjmp	.+126    	; 0x6de <main+0x288>
	else if (__tmp > 65535)
     660:	20 e0       	ldi	r18, 0x00	; 0
     662:	3f ef       	ldi	r19, 0xFF	; 255
     664:	4f e7       	ldi	r20, 0x7F	; 127
     666:	57 e4       	ldi	r21, 0x47	; 71
     668:	6d 89       	ldd	r22, Y+21	; 0x15
     66a:	7e 89       	ldd	r23, Y+22	; 0x16
     66c:	8f 89       	ldd	r24, Y+23	; 0x17
     66e:	98 8d       	ldd	r25, Y+24	; 0x18
     670:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <__gesf2>
     674:	18 16       	cp	r1, r24
     676:	4c f5       	brge	.+82     	; 0x6ca <main+0x274>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     678:	20 e0       	ldi	r18, 0x00	; 0
     67a:	30 e0       	ldi	r19, 0x00	; 0
     67c:	40 e2       	ldi	r20, 0x20	; 32
     67e:	51 e4       	ldi	r21, 0x41	; 65
     680:	6b 81       	ldd	r22, Y+3	; 0x03
     682:	7c 81       	ldd	r23, Y+4	; 0x04
     684:	8d 81       	ldd	r24, Y+5	; 0x05
     686:	9e 81       	ldd	r25, Y+6	; 0x06
     688:	0e 94 e5 05 	call	0xbca	; 0xbca <__mulsf3>
     68c:	dc 01       	movw	r26, r24
     68e:	cb 01       	movw	r24, r22
     690:	bc 01       	movw	r22, r24
     692:	cd 01       	movw	r24, r26
     694:	0e 94 27 05 	call	0xa4e	; 0xa4e <__fixunssfsi>
     698:	dc 01       	movw	r26, r24
     69a:	cb 01       	movw	r24, r22
     69c:	89 8f       	std	Y+25, r24	; 0x19
     69e:	9a 8f       	std	Y+26, r25	; 0x1a
     6a0:	0f c0       	rjmp	.+30     	; 0x6c0 <main+0x26a>
     6a2:	80 e9       	ldi	r24, 0x90	; 144
     6a4:	91 e0       	ldi	r25, 0x01	; 1
     6a6:	8b 8f       	std	Y+27, r24	; 0x1b
     6a8:	9c 8f       	std	Y+28, r25	; 0x1c
     6aa:	8b 8d       	ldd	r24, Y+27	; 0x1b
     6ac:	9c 8d       	ldd	r25, Y+28	; 0x1c
     6ae:	01 97       	sbiw	r24, 0x01	; 1
     6b0:	f1 f7       	brne	.-4      	; 0x6ae <main+0x258>
     6b2:	8b 8f       	std	Y+27, r24	; 0x1b
     6b4:	9c 8f       	std	Y+28, r25	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6b6:	89 8d       	ldd	r24, Y+25	; 0x19
     6b8:	9a 8d       	ldd	r25, Y+26	; 0x1a
     6ba:	01 97       	sbiw	r24, 0x01	; 1
     6bc:	89 8f       	std	Y+25, r24	; 0x19
     6be:	9a 8f       	std	Y+26, r25	; 0x1a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     6c0:	89 8d       	ldd	r24, Y+25	; 0x19
     6c2:	9a 8d       	ldd	r25, Y+26	; 0x1a
     6c4:	89 2b       	or	r24, r25
     6c6:	69 f7       	brne	.-38     	; 0x6a2 <main+0x24c>
     6c8:	14 c0       	rjmp	.+40     	; 0x6f2 <main+0x29c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     6ca:	6d 89       	ldd	r22, Y+21	; 0x15
     6cc:	7e 89       	ldd	r23, Y+22	; 0x16
     6ce:	8f 89       	ldd	r24, Y+23	; 0x17
     6d0:	98 8d       	ldd	r25, Y+24	; 0x18
     6d2:	0e 94 27 05 	call	0xa4e	; 0xa4e <__fixunssfsi>
     6d6:	dc 01       	movw	r26, r24
     6d8:	cb 01       	movw	r24, r22
     6da:	89 8f       	std	Y+25, r24	; 0x19
     6dc:	9a 8f       	std	Y+26, r25	; 0x1a
     6de:	89 8d       	ldd	r24, Y+25	; 0x19
     6e0:	9a 8d       	ldd	r25, Y+26	; 0x1a
     6e2:	8d 8f       	std	Y+29, r24	; 0x1d
     6e4:	9e 8f       	std	Y+30, r25	; 0x1e
     6e6:	8d 8d       	ldd	r24, Y+29	; 0x1d
     6e8:	9e 8d       	ldd	r25, Y+30	; 0x1e
     6ea:	01 97       	sbiw	r24, 0x01	; 1
     6ec:	f1 f7       	brne	.-4      	; 0x6ea <main+0x294>
     6ee:	8d 8f       	std	Y+29, r24	; 0x1d
     6f0:	9e 8f       	std	Y+30, r25	; 0x1e
		_delay_ms(1000);
		
		
		
		//putchar('U');
	}
     6f2:	4c cf       	rjmp	.-360    	; 0x58c <main+0x136>

000006f4 <LEDInit>:
#include "LED.h"
#include <avr/io.h>

void LEDInit(void)
{
     6f4:	cf 93       	push	r28
     6f6:	df 93       	push	r29
     6f8:	cd b7       	in	r28, 0x3d	; 61
     6fa:	de b7       	in	r29, 0x3e	; 62
	PORTE.DIRSET=0b00001111;
     6fc:	80 e8       	ldi	r24, 0x80	; 128
     6fe:	96 e0       	ldi	r25, 0x06	; 6
     700:	2f e0       	ldi	r18, 0x0F	; 15
     702:	fc 01       	movw	r30, r24
     704:	21 83       	std	Z+1, r18	; 0x01
	PORTE.PIN0CTRL=0b01000000;
     706:	80 e8       	ldi	r24, 0x80	; 128
     708:	96 e0       	ldi	r25, 0x06	; 6
     70a:	20 e4       	ldi	r18, 0x40	; 64
     70c:	fc 01       	movw	r30, r24
     70e:	20 8b       	std	Z+16, r18	; 0x10
	PORTE.PIN1CTRL=0b01000000;
     710:	80 e8       	ldi	r24, 0x80	; 128
     712:	96 e0       	ldi	r25, 0x06	; 6
     714:	20 e4       	ldi	r18, 0x40	; 64
     716:	fc 01       	movw	r30, r24
     718:	21 8b       	std	Z+17, r18	; 0x11
	PORTE.PIN2CTRL=0b01000000;
     71a:	80 e8       	ldi	r24, 0x80	; 128
     71c:	96 e0       	ldi	r25, 0x06	; 6
     71e:	20 e4       	ldi	r18, 0x40	; 64
     720:	fc 01       	movw	r30, r24
     722:	22 8b       	std	Z+18, r18	; 0x12
	PORTE.PIN3CTRL=0b01000000;
     724:	80 e8       	ldi	r24, 0x80	; 128
     726:	96 e0       	ldi	r25, 0x06	; 6
     728:	20 e4       	ldi	r18, 0x40	; 64
     72a:	fc 01       	movw	r30, r24
     72c:	23 8b       	std	Z+19, r18	; 0x13
	
}
     72e:	00 00       	nop
     730:	df 91       	pop	r29
     732:	cf 91       	pop	r28
     734:	08 95       	ret

00000736 <SpeakerInit>:
#include <avr/interrupt.h>
#include <util/delay.h>
#include "speaker.h"

void SpeakerInit(void)
{
     736:	cf 93       	push	r28
     738:	df 93       	push	r29
     73a:	cd b7       	in	r28, 0x3d	; 61
     73c:	de b7       	in	r29, 0x3e	; 62
		//Setup IO
		PORTC.DIRCLR= 0b00000001;
     73e:	80 e4       	ldi	r24, 0x40	; 64
     740:	96 e0       	ldi	r25, 0x06	; 6
     742:	21 e0       	ldi	r18, 0x01	; 1
     744:	fc 01       	movw	r30, r24
     746:	22 83       	std	Z+2, r18	; 0x02
		PORTC.PIN0CTRL = 0b00010000;
     748:	80 e4       	ldi	r24, 0x40	; 64
     74a:	96 e0       	ldi	r25, 0x06	; 6
     74c:	20 e1       	ldi	r18, 0x10	; 16
     74e:	fc 01       	movw	r30, r24
     750:	20 8b       	std	Z+16, r18	; 0x10
		
		//Setup TC for frequency generation
		TCC0.CTRLA= 0;
     752:	80 e0       	ldi	r24, 0x00	; 0
     754:	98 e0       	ldi	r25, 0x08	; 8
     756:	fc 01       	movw	r30, r24
     758:	10 82       	st	Z, r1
		TCC0.CTRLB= 0b00010011;
     75a:	80 e0       	ldi	r24, 0x00	; 0
     75c:	98 e0       	ldi	r25, 0x08	; 8
     75e:	23 e1       	ldi	r18, 0x13	; 19
     760:	fc 01       	movw	r30, r24
     762:	21 83       	std	Z+1, r18	; 0x01
		//TCC0.CTRLC= 
		TCC0.CTRLD= 0b00000000;
     764:	80 e0       	ldi	r24, 0x00	; 0
     766:	98 e0       	ldi	r25, 0x08	; 8
     768:	fc 01       	movw	r30, r24
     76a:	13 82       	std	Z+3, r1	; 0x03
		TCC0.CTRLE= 0b00000000;
     76c:	80 e0       	ldi	r24, 0x00	; 0
     76e:	98 e0       	ldi	r25, 0x08	; 8
     770:	fc 01       	movw	r30, r24
     772:	14 82       	std	Z+4, r1	; 0x04
		//TCC1.CTRLB=
		//TCC1.CTRLC=
		//TCC1.CTRLD=
		//TCC1.CTRLE=
		
}
     774:	00 00       	nop
     776:	df 91       	pop	r29
     778:	cf 91       	pop	r28
     77a:	08 95       	ret

0000077c <SpeakerBeep>:
void SpeakerBeep(int Frequency,int Length)
{
     77c:	0f 93       	push	r16
     77e:	1f 93       	push	r17
     780:	cf 93       	push	r28
     782:	df 93       	push	r29
     784:	cd b7       	in	r28, 0x3d	; 61
     786:	de b7       	in	r29, 0x3e	; 62
     788:	62 97       	sbiw	r28, 0x12	; 18
     78a:	cd bf       	out	0x3d, r28	; 61
     78c:	de bf       	out	0x3e, r29	; 62
     78e:	8f 87       	std	Y+15, r24	; 0x0f
     790:	98 8b       	std	Y+16, r25	; 0x10
     792:	69 8b       	std	Y+17, r22	; 0x11
     794:	7a 8b       	std	Y+18, r23	; 0x12
	TCC0.CTRLA= 0b00000110;
     796:	80 e0       	ldi	r24, 0x00	; 0
     798:	98 e0       	ldi	r25, 0x08	; 8
     79a:	26 e0       	ldi	r18, 0x06	; 6
     79c:	fc 01       	movw	r30, r24
     79e:	20 83       	st	Z, r18
	TCC0.CNT = 0;
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	98 e0       	ldi	r25, 0x08	; 8
     7a4:	fc 01       	movw	r30, r24
     7a6:	10 a2       	std	Z+32, r1	; 0x20
     7a8:	11 a2       	std	Z+33, r1	; 0x21
	TCC0.PER = 125000/Frequency;
     7aa:	00 e0       	ldi	r16, 0x00	; 0
     7ac:	18 e0       	ldi	r17, 0x08	; 8
     7ae:	8f 85       	ldd	r24, Y+15	; 0x0f
     7b0:	98 89       	ldd	r25, Y+16	; 0x10
     7b2:	9c 01       	movw	r18, r24
     7b4:	99 0f       	add	r25, r25
     7b6:	44 0b       	sbc	r20, r20
     7b8:	55 0b       	sbc	r21, r21
     7ba:	88 e4       	ldi	r24, 0x48	; 72
     7bc:	98 ee       	ldi	r25, 0xE8	; 232
     7be:	a1 e0       	ldi	r26, 0x01	; 1
     7c0:	b0 e0       	ldi	r27, 0x00	; 0
     7c2:	bc 01       	movw	r22, r24
     7c4:	cd 01       	movw	r24, r26
     7c6:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <__divmodsi4>
     7ca:	da 01       	movw	r26, r20
     7cc:	c9 01       	movw	r24, r18
     7ce:	f8 01       	movw	r30, r16
     7d0:	86 a3       	std	Z+38, r24	; 0x26
     7d2:	97 a3       	std	Z+39, r25	; 0x27
	TCC0.CCA = TCC0.PER / 2;
     7d4:	80 e0       	ldi	r24, 0x00	; 0
     7d6:	98 e0       	ldi	r25, 0x08	; 8
     7d8:	20 e0       	ldi	r18, 0x00	; 0
     7da:	38 e0       	ldi	r19, 0x08	; 8
     7dc:	f9 01       	movw	r30, r18
     7de:	26 a1       	ldd	r18, Z+38	; 0x26
     7e0:	37 a1       	ldd	r19, Z+39	; 0x27
     7e2:	36 95       	lsr	r19
     7e4:	27 95       	ror	r18
     7e6:	fc 01       	movw	r30, r24
     7e8:	20 a7       	std	Z+40, r18	; 0x28
     7ea:	31 a7       	std	Z+41, r19	; 0x29
	PORTC.DIRSET = 0b00000001;
     7ec:	80 e4       	ldi	r24, 0x40	; 64
     7ee:	96 e0       	ldi	r25, 0x06	; 6
     7f0:	21 e0       	ldi	r18, 0x01	; 1
     7f2:	fc 01       	movw	r30, r24
     7f4:	21 83       	std	Z+1, r18	; 0x01
	_delay_ms(Length);
     7f6:	89 89       	ldd	r24, Y+17	; 0x11
     7f8:	9a 89       	ldd	r25, Y+18	; 0x12
     7fa:	09 2e       	mov	r0, r25
     7fc:	00 0c       	add	r0, r0
     7fe:	aa 0b       	sbc	r26, r26
     800:	bb 0b       	sbc	r27, r27
     802:	bc 01       	movw	r22, r24
     804:	cd 01       	movw	r24, r26
     806:	0e 94 58 05 	call	0xab0	; 0xab0 <__floatsisf>
     80a:	dc 01       	movw	r26, r24
     80c:	cb 01       	movw	r24, r22
     80e:	89 83       	std	Y+1, r24	; 0x01
     810:	9a 83       	std	Y+2, r25	; 0x02
     812:	ab 83       	std	Y+3, r26	; 0x03
     814:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     816:	20 e0       	ldi	r18, 0x00	; 0
     818:	30 e0       	ldi	r19, 0x00	; 0
     81a:	4a e7       	ldi	r20, 0x7A	; 122
     81c:	53 e4       	ldi	r21, 0x43	; 67
     81e:	69 81       	ldd	r22, Y+1	; 0x01
     820:	7a 81       	ldd	r23, Y+2	; 0x02
     822:	8b 81       	ldd	r24, Y+3	; 0x03
     824:	9c 81       	ldd	r25, Y+4	; 0x04
     826:	0e 94 e5 05 	call	0xbca	; 0xbca <__mulsf3>
     82a:	dc 01       	movw	r26, r24
     82c:	cb 01       	movw	r24, r22
     82e:	8d 83       	std	Y+5, r24	; 0x05
     830:	9e 83       	std	Y+6, r25	; 0x06
     832:	af 83       	std	Y+7, r26	; 0x07
     834:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     836:	20 e0       	ldi	r18, 0x00	; 0
     838:	30 e0       	ldi	r19, 0x00	; 0
     83a:	40 e8       	ldi	r20, 0x80	; 128
     83c:	5f e3       	ldi	r21, 0x3F	; 63
     83e:	6d 81       	ldd	r22, Y+5	; 0x05
     840:	7e 81       	ldd	r23, Y+6	; 0x06
     842:	8f 81       	ldd	r24, Y+7	; 0x07
     844:	98 85       	ldd	r25, Y+8	; 0x08
     846:	0e 94 22 05 	call	0xa44	; 0xa44 <__cmpsf2>
     84a:	88 23       	and	r24, r24
     84c:	2c f4       	brge	.+10     	; 0x858 <SpeakerBeep+0xdc>
		__ticks = 1;
     84e:	81 e0       	ldi	r24, 0x01	; 1
     850:	90 e0       	ldi	r25, 0x00	; 0
     852:	89 87       	std	Y+9, r24	; 0x09
     854:	9a 87       	std	Y+10, r25	; 0x0a
     856:	3f c0       	rjmp	.+126    	; 0x8d6 <SpeakerBeep+0x15a>
	else if (__tmp > 65535)
     858:	20 e0       	ldi	r18, 0x00	; 0
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	4f e7       	ldi	r20, 0x7F	; 127
     85e:	57 e4       	ldi	r21, 0x47	; 71
     860:	6d 81       	ldd	r22, Y+5	; 0x05
     862:	7e 81       	ldd	r23, Y+6	; 0x06
     864:	8f 81       	ldd	r24, Y+7	; 0x07
     866:	98 85       	ldd	r25, Y+8	; 0x08
     868:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <__gesf2>
     86c:	18 16       	cp	r1, r24
     86e:	4c f5       	brge	.+82     	; 0x8c2 <SpeakerBeep+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     870:	20 e0       	ldi	r18, 0x00	; 0
     872:	30 e0       	ldi	r19, 0x00	; 0
     874:	40 e2       	ldi	r20, 0x20	; 32
     876:	51 e4       	ldi	r21, 0x41	; 65
     878:	69 81       	ldd	r22, Y+1	; 0x01
     87a:	7a 81       	ldd	r23, Y+2	; 0x02
     87c:	8b 81       	ldd	r24, Y+3	; 0x03
     87e:	9c 81       	ldd	r25, Y+4	; 0x04
     880:	0e 94 e5 05 	call	0xbca	; 0xbca <__mulsf3>
     884:	dc 01       	movw	r26, r24
     886:	cb 01       	movw	r24, r22
     888:	bc 01       	movw	r22, r24
     88a:	cd 01       	movw	r24, r26
     88c:	0e 94 27 05 	call	0xa4e	; 0xa4e <__fixunssfsi>
     890:	dc 01       	movw	r26, r24
     892:	cb 01       	movw	r24, r22
     894:	89 87       	std	Y+9, r24	; 0x09
     896:	9a 87       	std	Y+10, r25	; 0x0a
     898:	0f c0       	rjmp	.+30     	; 0x8b8 <SpeakerBeep+0x13c>
     89a:	89 e1       	ldi	r24, 0x19	; 25
     89c:	90 e0       	ldi	r25, 0x00	; 0
     89e:	8b 87       	std	Y+11, r24	; 0x0b
     8a0:	9c 87       	std	Y+12, r25	; 0x0c
     8a2:	8b 85       	ldd	r24, Y+11	; 0x0b
     8a4:	9c 85       	ldd	r25, Y+12	; 0x0c
     8a6:	01 97       	sbiw	r24, 0x01	; 1
     8a8:	f1 f7       	brne	.-4      	; 0x8a6 <SpeakerBeep+0x12a>
     8aa:	8b 87       	std	Y+11, r24	; 0x0b
     8ac:	9c 87       	std	Y+12, r25	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8ae:	89 85       	ldd	r24, Y+9	; 0x09
     8b0:	9a 85       	ldd	r25, Y+10	; 0x0a
     8b2:	01 97       	sbiw	r24, 0x01	; 1
     8b4:	89 87       	std	Y+9, r24	; 0x09
     8b6:	9a 87       	std	Y+10, r25	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8b8:	89 85       	ldd	r24, Y+9	; 0x09
     8ba:	9a 85       	ldd	r25, Y+10	; 0x0a
     8bc:	89 2b       	or	r24, r25
     8be:	69 f7       	brne	.-38     	; 0x89a <SpeakerBeep+0x11e>
     8c0:	14 c0       	rjmp	.+40     	; 0x8ea <SpeakerBeep+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     8c2:	6d 81       	ldd	r22, Y+5	; 0x05
     8c4:	7e 81       	ldd	r23, Y+6	; 0x06
     8c6:	8f 81       	ldd	r24, Y+7	; 0x07
     8c8:	98 85       	ldd	r25, Y+8	; 0x08
     8ca:	0e 94 27 05 	call	0xa4e	; 0xa4e <__fixunssfsi>
     8ce:	dc 01       	movw	r26, r24
     8d0:	cb 01       	movw	r24, r22
     8d2:	89 87       	std	Y+9, r24	; 0x09
     8d4:	9a 87       	std	Y+10, r25	; 0x0a
     8d6:	89 85       	ldd	r24, Y+9	; 0x09
     8d8:	9a 85       	ldd	r25, Y+10	; 0x0a
     8da:	8d 87       	std	Y+13, r24	; 0x0d
     8dc:	9e 87       	std	Y+14, r25	; 0x0e
     8de:	8d 85       	ldd	r24, Y+13	; 0x0d
     8e0:	9e 85       	ldd	r25, Y+14	; 0x0e
     8e2:	01 97       	sbiw	r24, 0x01	; 1
     8e4:	f1 f7       	brne	.-4      	; 0x8e2 <SpeakerBeep+0x166>
     8e6:	8d 87       	std	Y+13, r24	; 0x0d
     8e8:	9e 87       	std	Y+14, r25	; 0x0e
	PORTC.DIRCLR = 0b00000001;
     8ea:	80 e4       	ldi	r24, 0x40	; 64
     8ec:	96 e0       	ldi	r25, 0x06	; 6
     8ee:	21 e0       	ldi	r18, 0x01	; 1
     8f0:	fc 01       	movw	r30, r24
     8f2:	22 83       	std	Z+2, r18	; 0x02
	TCC0.CTRLA = 0;
     8f4:	80 e0       	ldi	r24, 0x00	; 0
     8f6:	98 e0       	ldi	r25, 0x08	; 8
     8f8:	fc 01       	movw	r30, r24
     8fa:	10 82       	st	Z, r1
}
     8fc:	00 00       	nop
     8fe:	62 96       	adiw	r28, 0x12	; 18
     900:	cd bf       	out	0x3d, r28	; 61
     902:	de bf       	out	0x3e, r29	; 62
     904:	df 91       	pop	r29
     906:	cf 91       	pop	r28
     908:	1f 91       	pop	r17
     90a:	0f 91       	pop	r16
     90c:	08 95       	ret

0000090e <SwitchInit>:
#include "switch.h"
#include <avr/io.h>

void SwitchInit(void)
{
     90e:	cf 93       	push	r28
     910:	df 93       	push	r29
     912:	cd b7       	in	r28, 0x3d	; 61
     914:	de b7       	in	r29, 0x3e	; 62
	PORTD.DIRCLR=0b11110001;
     916:	80 e6       	ldi	r24, 0x60	; 96
     918:	96 e0       	ldi	r25, 0x06	; 6
     91a:	21 ef       	ldi	r18, 0xF1	; 241
     91c:	fc 01       	movw	r30, r24
     91e:	22 83       	std	Z+2, r18	; 0x02
	PORTD.PIN0CTRL=0b01011000;
     920:	80 e6       	ldi	r24, 0x60	; 96
     922:	96 e0       	ldi	r25, 0x06	; 6
     924:	28 e5       	ldi	r18, 0x58	; 88
     926:	fc 01       	movw	r30, r24
     928:	20 8b       	std	Z+16, r18	; 0x10
	PORTD.PIN4CTRL=0b01011000;
     92a:	80 e6       	ldi	r24, 0x60	; 96
     92c:	96 e0       	ldi	r25, 0x06	; 6
     92e:	28 e5       	ldi	r18, 0x58	; 88
     930:	fc 01       	movw	r30, r24
     932:	24 8b       	std	Z+20, r18	; 0x14
	PORTD.PIN5CTRL=0b01011000;
     934:	80 e6       	ldi	r24, 0x60	; 96
     936:	96 e0       	ldi	r25, 0x06	; 6
     938:	28 e5       	ldi	r18, 0x58	; 88
     93a:	fc 01       	movw	r30, r24
     93c:	25 8b       	std	Z+21, r18	; 0x15
	PORTD.PIN6CTRL=0b01011000;
     93e:	80 e6       	ldi	r24, 0x60	; 96
     940:	96 e0       	ldi	r25, 0x06	; 6
     942:	28 e5       	ldi	r18, 0x58	; 88
     944:	fc 01       	movw	r30, r24
     946:	26 8b       	std	Z+22, r18	; 0x16
	PORTD.PIN7CTRL=0b01011000;
     948:	80 e6       	ldi	r24, 0x60	; 96
     94a:	96 e0       	ldi	r25, 0x06	; 6
     94c:	28 e5       	ldi	r18, 0x58	; 88
     94e:	fc 01       	movw	r30, r24
     950:	27 8b       	std	Z+23, r18	; 0x17
}
     952:	00 00       	nop
     954:	df 91       	pop	r29
     956:	cf 91       	pop	r28
     958:	08 95       	ret

0000095a <USARTInit>:
 int stdio_putchar(char c, FILE * stream);
 int stdio_getchar(FILE *stream);
static FILE UsartStdio = FDEV_SETUP_STREAM(stdio_putchar, stdio_getchar,_FDEV_SETUP_WRITE);

void USARTInit(void)
{
     95a:	cf 93       	push	r28
     95c:	df 93       	push	r29
     95e:	cd b7       	in	r28, 0x3d	; 61
     960:	de b7       	in	r29, 0x3e	; 62
	USART_PORT.DIRSET=0b00001000;	
     962:	80 e6       	ldi	r24, 0x60	; 96
     964:	96 e0       	ldi	r25, 0x06	; 6
     966:	28 e0       	ldi	r18, 0x08	; 8
     968:	fc 01       	movw	r30, r24
     96a:	21 83       	std	Z+1, r18	; 0x01
	USART_PORT.DIRCLR=0b00000100;
     96c:	80 e6       	ldi	r24, 0x60	; 96
     96e:	96 e0       	ldi	r25, 0x06	; 6
     970:	24 e0       	ldi	r18, 0x04	; 4
     972:	fc 01       	movw	r30, r24
     974:	22 83       	std	Z+2, r18	; 0x02
	
	USART.CTRLA=0b00000000;
     976:	80 ea       	ldi	r24, 0xA0	; 160
     978:	99 e0       	ldi	r25, 0x09	; 9
     97a:	fc 01       	movw	r30, r24
     97c:	13 82       	std	Z+3, r1	; 0x03
	USART.CTRLB=0b00011000;
     97e:	80 ea       	ldi	r24, 0xA0	; 160
     980:	99 e0       	ldi	r25, 0x09	; 9
     982:	28 e1       	ldi	r18, 0x18	; 24
     984:	fc 01       	movw	r30, r24
     986:	24 83       	std	Z+4, r18	; 0x04
	USART.CTRLC=0b00000011;
     988:	80 ea       	ldi	r24, 0xA0	; 160
     98a:	99 e0       	ldi	r25, 0x09	; 9
     98c:	23 e0       	ldi	r18, 0x03	; 3
     98e:	fc 01       	movw	r30, r24
     990:	25 83       	std	Z+5, r18	; 0x05
	
	USART.BAUDCTRLA=0xD7; //BSEL=3301, BSCALE=-5 9600 baud
     992:	80 ea       	ldi	r24, 0xA0	; 160
     994:	99 e0       	ldi	r25, 0x09	; 9
     996:	27 ed       	ldi	r18, 0xD7	; 215
     998:	fc 01       	movw	r30, r24
     99a:	26 83       	std	Z+6, r18	; 0x06
	USART.BAUDCTRLB=0x93; 
     99c:	80 ea       	ldi	r24, 0xA0	; 160
     99e:	99 e0       	ldi	r25, 0x09	; 9
     9a0:	23 e9       	ldi	r18, 0x93	; 147
     9a2:	fc 01       	movw	r30, r24
     9a4:	27 83       	std	Z+7, r18	; 0x07
	
	stdout=&UsartStdio;
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	90 e2       	ldi	r25, 0x20	; 32
     9aa:	80 93 87 20 	sts	0x2087, r24	; 0x802087 <__iob+0x2>
     9ae:	90 93 88 20 	sts	0x2088, r25	; 0x802088 <__iob+0x3>
	stdin=&UsartStdio;
     9b2:	80 e0       	ldi	r24, 0x00	; 0
     9b4:	90 e2       	ldi	r25, 0x20	; 32
     9b6:	80 93 85 20 	sts	0x2085, r24	; 0x802085 <__iob>
     9ba:	90 93 86 20 	sts	0x2086, r25	; 0x802086 <__iob+0x1>
}
     9be:	00 00       	nop
     9c0:	df 91       	pop	r29
     9c2:	cf 91       	pop	r28
     9c4:	08 95       	ret

000009c6 <stdio_putchar>:


int stdio_putchar(char c, FILE * stream)
{
     9c6:	cf 93       	push	r28
     9c8:	df 93       	push	r29
     9ca:	00 d0       	rcall	.+0      	; 0x9cc <stdio_putchar+0x6>
     9cc:	1f 92       	push	r1
     9ce:	cd b7       	in	r28, 0x3d	; 61
     9d0:	de b7       	in	r29, 0x3e	; 62
     9d2:	89 83       	std	Y+1, r24	; 0x01
     9d4:	6a 83       	std	Y+2, r22	; 0x02
     9d6:	7b 83       	std	Y+3, r23	; 0x03
	USART.DATA = c;
     9d8:	80 ea       	ldi	r24, 0xA0	; 160
     9da:	99 e0       	ldi	r25, 0x09	; 9
     9dc:	29 81       	ldd	r18, Y+1	; 0x01
     9de:	fc 01       	movw	r30, r24
     9e0:	20 83       	st	Z, r18
	while (!(USART.STATUS & 0b01000000));
     9e2:	00 00       	nop
     9e4:	80 ea       	ldi	r24, 0xA0	; 160
     9e6:	99 e0       	ldi	r25, 0x09	; 9
     9e8:	fc 01       	movw	r30, r24
     9ea:	81 81       	ldd	r24, Z+1	; 0x01
     9ec:	88 2f       	mov	r24, r24
     9ee:	90 e0       	ldi	r25, 0x00	; 0
     9f0:	80 74       	andi	r24, 0x40	; 64
     9f2:	99 27       	eor	r25, r25
     9f4:	89 2b       	or	r24, r25
     9f6:	b1 f3       	breq	.-20     	; 0x9e4 <stdio_putchar+0x1e>
	USART.STATUS=0b01000000;
     9f8:	80 ea       	ldi	r24, 0xA0	; 160
     9fa:	99 e0       	ldi	r25, 0x09	; 9
     9fc:	20 e4       	ldi	r18, 0x40	; 64
     9fe:	fc 01       	movw	r30, r24
     a00:	21 83       	std	Z+1, r18	; 0x01
	return 0;
     a02:	80 e0       	ldi	r24, 0x00	; 0
     a04:	90 e0       	ldi	r25, 0x00	; 0
}
     a06:	23 96       	adiw	r28, 0x03	; 3
     a08:	cd bf       	out	0x3d, r28	; 61
     a0a:	de bf       	out	0x3e, r29	; 62
     a0c:	df 91       	pop	r29
     a0e:	cf 91       	pop	r28
     a10:	08 95       	ret

00000a12 <stdio_getchar>:
	
int stdio_getchar(FILE *stream)
{
     a12:	cf 93       	push	r28
     a14:	df 93       	push	r29
     a16:	00 d0       	rcall	.+0      	; 0xa18 <stdio_getchar+0x6>
     a18:	cd b7       	in	r28, 0x3d	; 61
     a1a:	de b7       	in	r29, 0x3e	; 62
     a1c:	89 83       	std	Y+1, r24	; 0x01
     a1e:	9a 83       	std	Y+2, r25	; 0x02
	while (!(USART.STATUS & 0b10000000));
     a20:	00 00       	nop
     a22:	80 ea       	ldi	r24, 0xA0	; 160
     a24:	99 e0       	ldi	r25, 0x09	; 9
     a26:	fc 01       	movw	r30, r24
     a28:	81 81       	ldd	r24, Z+1	; 0x01
     a2a:	88 23       	and	r24, r24
     a2c:	d4 f7       	brge	.-12     	; 0xa22 <stdio_getchar+0x10>
	return USART.DATA;
     a2e:	80 ea       	ldi	r24, 0xA0	; 160
     a30:	99 e0       	ldi	r25, 0x09	; 9
     a32:	fc 01       	movw	r30, r24
     a34:	80 81       	ld	r24, Z
     a36:	88 2f       	mov	r24, r24
     a38:	90 e0       	ldi	r25, 0x00	; 0
}
     a3a:	0f 90       	pop	r0
     a3c:	0f 90       	pop	r0
     a3e:	df 91       	pop	r29
     a40:	cf 91       	pop	r28
     a42:	08 95       	ret

00000a44 <__cmpsf2>:
     a44:	0e 94 93 05 	call	0xb26	; 0xb26 <__fp_cmp>
     a48:	08 f4       	brcc	.+2      	; 0xa4c <__cmpsf2+0x8>
     a4a:	81 e0       	ldi	r24, 0x01	; 1
     a4c:	08 95       	ret

00000a4e <__fixunssfsi>:
     a4e:	0e 94 bf 05 	call	0xb7e	; 0xb7e <__fp_splitA>
     a52:	88 f0       	brcs	.+34     	; 0xa76 <__fixunssfsi+0x28>
     a54:	9f 57       	subi	r25, 0x7F	; 127
     a56:	98 f0       	brcs	.+38     	; 0xa7e <__fixunssfsi+0x30>
     a58:	b9 2f       	mov	r27, r25
     a5a:	99 27       	eor	r25, r25
     a5c:	b7 51       	subi	r27, 0x17	; 23
     a5e:	b0 f0       	brcs	.+44     	; 0xa8c <__fixunssfsi+0x3e>
     a60:	e1 f0       	breq	.+56     	; 0xa9a <__fixunssfsi+0x4c>
     a62:	66 0f       	add	r22, r22
     a64:	77 1f       	adc	r23, r23
     a66:	88 1f       	adc	r24, r24
     a68:	99 1f       	adc	r25, r25
     a6a:	1a f0       	brmi	.+6      	; 0xa72 <__fixunssfsi+0x24>
     a6c:	ba 95       	dec	r27
     a6e:	c9 f7       	brne	.-14     	; 0xa62 <__fixunssfsi+0x14>
     a70:	14 c0       	rjmp	.+40     	; 0xa9a <__fixunssfsi+0x4c>
     a72:	b1 30       	cpi	r27, 0x01	; 1
     a74:	91 f0       	breq	.+36     	; 0xa9a <__fixunssfsi+0x4c>
     a76:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <__fp_zero>
     a7a:	b1 e0       	ldi	r27, 0x01	; 1
     a7c:	08 95       	ret
     a7e:	0c 94 d9 05 	jmp	0xbb2	; 0xbb2 <__fp_zero>
     a82:	67 2f       	mov	r22, r23
     a84:	78 2f       	mov	r23, r24
     a86:	88 27       	eor	r24, r24
     a88:	b8 5f       	subi	r27, 0xF8	; 248
     a8a:	39 f0       	breq	.+14     	; 0xa9a <__fixunssfsi+0x4c>
     a8c:	b9 3f       	cpi	r27, 0xF9	; 249
     a8e:	cc f3       	brlt	.-14     	; 0xa82 <__fixunssfsi+0x34>
     a90:	86 95       	lsr	r24
     a92:	77 95       	ror	r23
     a94:	67 95       	ror	r22
     a96:	b3 95       	inc	r27
     a98:	d9 f7       	brne	.-10     	; 0xa90 <__fixunssfsi+0x42>
     a9a:	3e f4       	brtc	.+14     	; 0xaaa <__fixunssfsi+0x5c>
     a9c:	90 95       	com	r25
     a9e:	80 95       	com	r24
     aa0:	70 95       	com	r23
     aa2:	61 95       	neg	r22
     aa4:	7f 4f       	sbci	r23, 0xFF	; 255
     aa6:	8f 4f       	sbci	r24, 0xFF	; 255
     aa8:	9f 4f       	sbci	r25, 0xFF	; 255
     aaa:	08 95       	ret

00000aac <__floatunsisf>:
     aac:	e8 94       	clt
     aae:	09 c0       	rjmp	.+18     	; 0xac2 <__floatsisf+0x12>

00000ab0 <__floatsisf>:
     ab0:	97 fb       	bst	r25, 7
     ab2:	3e f4       	brtc	.+14     	; 0xac2 <__floatsisf+0x12>
     ab4:	90 95       	com	r25
     ab6:	80 95       	com	r24
     ab8:	70 95       	com	r23
     aba:	61 95       	neg	r22
     abc:	7f 4f       	sbci	r23, 0xFF	; 255
     abe:	8f 4f       	sbci	r24, 0xFF	; 255
     ac0:	9f 4f       	sbci	r25, 0xFF	; 255
     ac2:	99 23       	and	r25, r25
     ac4:	a9 f0       	breq	.+42     	; 0xaf0 <__floatsisf+0x40>
     ac6:	f9 2f       	mov	r31, r25
     ac8:	96 e9       	ldi	r25, 0x96	; 150
     aca:	bb 27       	eor	r27, r27
     acc:	93 95       	inc	r25
     ace:	f6 95       	lsr	r31
     ad0:	87 95       	ror	r24
     ad2:	77 95       	ror	r23
     ad4:	67 95       	ror	r22
     ad6:	b7 95       	ror	r27
     ad8:	f1 11       	cpse	r31, r1
     ada:	f8 cf       	rjmp	.-16     	; 0xacc <__floatsisf+0x1c>
     adc:	fa f4       	brpl	.+62     	; 0xb1c <__floatsisf+0x6c>
     ade:	bb 0f       	add	r27, r27
     ae0:	11 f4       	brne	.+4      	; 0xae6 <__floatsisf+0x36>
     ae2:	60 ff       	sbrs	r22, 0
     ae4:	1b c0       	rjmp	.+54     	; 0xb1c <__floatsisf+0x6c>
     ae6:	6f 5f       	subi	r22, 0xFF	; 255
     ae8:	7f 4f       	sbci	r23, 0xFF	; 255
     aea:	8f 4f       	sbci	r24, 0xFF	; 255
     aec:	9f 4f       	sbci	r25, 0xFF	; 255
     aee:	16 c0       	rjmp	.+44     	; 0xb1c <__floatsisf+0x6c>
     af0:	88 23       	and	r24, r24
     af2:	11 f0       	breq	.+4      	; 0xaf8 <__floatsisf+0x48>
     af4:	96 e9       	ldi	r25, 0x96	; 150
     af6:	11 c0       	rjmp	.+34     	; 0xb1a <__floatsisf+0x6a>
     af8:	77 23       	and	r23, r23
     afa:	21 f0       	breq	.+8      	; 0xb04 <__floatsisf+0x54>
     afc:	9e e8       	ldi	r25, 0x8E	; 142
     afe:	87 2f       	mov	r24, r23
     b00:	76 2f       	mov	r23, r22
     b02:	05 c0       	rjmp	.+10     	; 0xb0e <__floatsisf+0x5e>
     b04:	66 23       	and	r22, r22
     b06:	71 f0       	breq	.+28     	; 0xb24 <__floatsisf+0x74>
     b08:	96 e8       	ldi	r25, 0x86	; 134
     b0a:	86 2f       	mov	r24, r22
     b0c:	70 e0       	ldi	r23, 0x00	; 0
     b0e:	60 e0       	ldi	r22, 0x00	; 0
     b10:	2a f0       	brmi	.+10     	; 0xb1c <__floatsisf+0x6c>
     b12:	9a 95       	dec	r25
     b14:	66 0f       	add	r22, r22
     b16:	77 1f       	adc	r23, r23
     b18:	88 1f       	adc	r24, r24
     b1a:	da f7       	brpl	.-10     	; 0xb12 <__floatsisf+0x62>
     b1c:	88 0f       	add	r24, r24
     b1e:	96 95       	lsr	r25
     b20:	87 95       	ror	r24
     b22:	97 f9       	bld	r25, 7
     b24:	08 95       	ret

00000b26 <__fp_cmp>:
     b26:	99 0f       	add	r25, r25
     b28:	00 08       	sbc	r0, r0
     b2a:	55 0f       	add	r21, r21
     b2c:	aa 0b       	sbc	r26, r26
     b2e:	e0 e8       	ldi	r30, 0x80	; 128
     b30:	fe ef       	ldi	r31, 0xFE	; 254
     b32:	16 16       	cp	r1, r22
     b34:	17 06       	cpc	r1, r23
     b36:	e8 07       	cpc	r30, r24
     b38:	f9 07       	cpc	r31, r25
     b3a:	c0 f0       	brcs	.+48     	; 0xb6c <__fp_cmp+0x46>
     b3c:	12 16       	cp	r1, r18
     b3e:	13 06       	cpc	r1, r19
     b40:	e4 07       	cpc	r30, r20
     b42:	f5 07       	cpc	r31, r21
     b44:	98 f0       	brcs	.+38     	; 0xb6c <__fp_cmp+0x46>
     b46:	62 1b       	sub	r22, r18
     b48:	73 0b       	sbc	r23, r19
     b4a:	84 0b       	sbc	r24, r20
     b4c:	95 0b       	sbc	r25, r21
     b4e:	39 f4       	brne	.+14     	; 0xb5e <__fp_cmp+0x38>
     b50:	0a 26       	eor	r0, r26
     b52:	61 f0       	breq	.+24     	; 0xb6c <__fp_cmp+0x46>
     b54:	23 2b       	or	r18, r19
     b56:	24 2b       	or	r18, r20
     b58:	25 2b       	or	r18, r21
     b5a:	21 f4       	brne	.+8      	; 0xb64 <__fp_cmp+0x3e>
     b5c:	08 95       	ret
     b5e:	0a 26       	eor	r0, r26
     b60:	09 f4       	brne	.+2      	; 0xb64 <__fp_cmp+0x3e>
     b62:	a1 40       	sbci	r26, 0x01	; 1
     b64:	a6 95       	lsr	r26
     b66:	8f ef       	ldi	r24, 0xFF	; 255
     b68:	81 1d       	adc	r24, r1
     b6a:	81 1d       	adc	r24, r1
     b6c:	08 95       	ret

00000b6e <__fp_split3>:
     b6e:	57 fd       	sbrc	r21, 7
     b70:	90 58       	subi	r25, 0x80	; 128
     b72:	44 0f       	add	r20, r20
     b74:	55 1f       	adc	r21, r21
     b76:	59 f0       	breq	.+22     	; 0xb8e <__fp_splitA+0x10>
     b78:	5f 3f       	cpi	r21, 0xFF	; 255
     b7a:	71 f0       	breq	.+28     	; 0xb98 <__fp_splitA+0x1a>
     b7c:	47 95       	ror	r20

00000b7e <__fp_splitA>:
     b7e:	88 0f       	add	r24, r24
     b80:	97 fb       	bst	r25, 7
     b82:	99 1f       	adc	r25, r25
     b84:	61 f0       	breq	.+24     	; 0xb9e <__fp_splitA+0x20>
     b86:	9f 3f       	cpi	r25, 0xFF	; 255
     b88:	79 f0       	breq	.+30     	; 0xba8 <__fp_splitA+0x2a>
     b8a:	87 95       	ror	r24
     b8c:	08 95       	ret
     b8e:	12 16       	cp	r1, r18
     b90:	13 06       	cpc	r1, r19
     b92:	14 06       	cpc	r1, r20
     b94:	55 1f       	adc	r21, r21
     b96:	f2 cf       	rjmp	.-28     	; 0xb7c <__fp_split3+0xe>
     b98:	46 95       	lsr	r20
     b9a:	f1 df       	rcall	.-30     	; 0xb7e <__fp_splitA>
     b9c:	08 c0       	rjmp	.+16     	; 0xbae <__fp_splitA+0x30>
     b9e:	16 16       	cp	r1, r22
     ba0:	17 06       	cpc	r1, r23
     ba2:	18 06       	cpc	r1, r24
     ba4:	99 1f       	adc	r25, r25
     ba6:	f1 cf       	rjmp	.-30     	; 0xb8a <__fp_splitA+0xc>
     ba8:	86 95       	lsr	r24
     baa:	71 05       	cpc	r23, r1
     bac:	61 05       	cpc	r22, r1
     bae:	08 94       	sec
     bb0:	08 95       	ret

00000bb2 <__fp_zero>:
     bb2:	e8 94       	clt

00000bb4 <__fp_szero>:
     bb4:	bb 27       	eor	r27, r27
     bb6:	66 27       	eor	r22, r22
     bb8:	77 27       	eor	r23, r23
     bba:	cb 01       	movw	r24, r22
     bbc:	97 f9       	bld	r25, 7
     bbe:	08 95       	ret

00000bc0 <__gesf2>:
     bc0:	0e 94 93 05 	call	0xb26	; 0xb26 <__fp_cmp>
     bc4:	08 f4       	brcc	.+2      	; 0xbc8 <__gesf2+0x8>
     bc6:	8f ef       	ldi	r24, 0xFF	; 255
     bc8:	08 95       	ret

00000bca <__mulsf3>:
     bca:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__mulsf3x>
     bce:	0c 94 69 06 	jmp	0xcd2	; 0xcd2 <__fp_round>
     bd2:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__fp_pscA>
     bd6:	38 f0       	brcs	.+14     	; 0xbe6 <__mulsf3+0x1c>
     bd8:	0e 94 62 06 	call	0xcc4	; 0xcc4 <__fp_pscB>
     bdc:	20 f0       	brcs	.+8      	; 0xbe6 <__mulsf3+0x1c>
     bde:	95 23       	and	r25, r21
     be0:	11 f0       	breq	.+4      	; 0xbe6 <__mulsf3+0x1c>
     be2:	0c 94 52 06 	jmp	0xca4	; 0xca4 <__fp_inf>
     be6:	0c 94 58 06 	jmp	0xcb0	; 0xcb0 <__fp_nan>
     bea:	11 24       	eor	r1, r1
     bec:	0c 94 da 05 	jmp	0xbb4	; 0xbb4 <__fp_szero>

00000bf0 <__mulsf3x>:
     bf0:	0e 94 b7 05 	call	0xb6e	; 0xb6e <__fp_split3>
     bf4:	70 f3       	brcs	.-36     	; 0xbd2 <__mulsf3+0x8>

00000bf6 <__mulsf3_pse>:
     bf6:	95 9f       	mul	r25, r21
     bf8:	c1 f3       	breq	.-16     	; 0xbea <__mulsf3+0x20>
     bfa:	95 0f       	add	r25, r21
     bfc:	50 e0       	ldi	r21, 0x00	; 0
     bfe:	55 1f       	adc	r21, r21
     c00:	62 9f       	mul	r22, r18
     c02:	f0 01       	movw	r30, r0
     c04:	72 9f       	mul	r23, r18
     c06:	bb 27       	eor	r27, r27
     c08:	f0 0d       	add	r31, r0
     c0a:	b1 1d       	adc	r27, r1
     c0c:	63 9f       	mul	r22, r19
     c0e:	aa 27       	eor	r26, r26
     c10:	f0 0d       	add	r31, r0
     c12:	b1 1d       	adc	r27, r1
     c14:	aa 1f       	adc	r26, r26
     c16:	64 9f       	mul	r22, r20
     c18:	66 27       	eor	r22, r22
     c1a:	b0 0d       	add	r27, r0
     c1c:	a1 1d       	adc	r26, r1
     c1e:	66 1f       	adc	r22, r22
     c20:	82 9f       	mul	r24, r18
     c22:	22 27       	eor	r18, r18
     c24:	b0 0d       	add	r27, r0
     c26:	a1 1d       	adc	r26, r1
     c28:	62 1f       	adc	r22, r18
     c2a:	73 9f       	mul	r23, r19
     c2c:	b0 0d       	add	r27, r0
     c2e:	a1 1d       	adc	r26, r1
     c30:	62 1f       	adc	r22, r18
     c32:	83 9f       	mul	r24, r19
     c34:	a0 0d       	add	r26, r0
     c36:	61 1d       	adc	r22, r1
     c38:	22 1f       	adc	r18, r18
     c3a:	74 9f       	mul	r23, r20
     c3c:	33 27       	eor	r19, r19
     c3e:	a0 0d       	add	r26, r0
     c40:	61 1d       	adc	r22, r1
     c42:	23 1f       	adc	r18, r19
     c44:	84 9f       	mul	r24, r20
     c46:	60 0d       	add	r22, r0
     c48:	21 1d       	adc	r18, r1
     c4a:	82 2f       	mov	r24, r18
     c4c:	76 2f       	mov	r23, r22
     c4e:	6a 2f       	mov	r22, r26
     c50:	11 24       	eor	r1, r1
     c52:	9f 57       	subi	r25, 0x7F	; 127
     c54:	50 40       	sbci	r21, 0x00	; 0
     c56:	9a f0       	brmi	.+38     	; 0xc7e <__mulsf3_pse+0x88>
     c58:	f1 f0       	breq	.+60     	; 0xc96 <__mulsf3_pse+0xa0>
     c5a:	88 23       	and	r24, r24
     c5c:	4a f0       	brmi	.+18     	; 0xc70 <__mulsf3_pse+0x7a>
     c5e:	ee 0f       	add	r30, r30
     c60:	ff 1f       	adc	r31, r31
     c62:	bb 1f       	adc	r27, r27
     c64:	66 1f       	adc	r22, r22
     c66:	77 1f       	adc	r23, r23
     c68:	88 1f       	adc	r24, r24
     c6a:	91 50       	subi	r25, 0x01	; 1
     c6c:	50 40       	sbci	r21, 0x00	; 0
     c6e:	a9 f7       	brne	.-22     	; 0xc5a <__mulsf3_pse+0x64>
     c70:	9e 3f       	cpi	r25, 0xFE	; 254
     c72:	51 05       	cpc	r21, r1
     c74:	80 f0       	brcs	.+32     	; 0xc96 <__mulsf3_pse+0xa0>
     c76:	0c 94 52 06 	jmp	0xca4	; 0xca4 <__fp_inf>
     c7a:	0c 94 da 05 	jmp	0xbb4	; 0xbb4 <__fp_szero>
     c7e:	5f 3f       	cpi	r21, 0xFF	; 255
     c80:	e4 f3       	brlt	.-8      	; 0xc7a <__mulsf3_pse+0x84>
     c82:	98 3e       	cpi	r25, 0xE8	; 232
     c84:	d4 f3       	brlt	.-12     	; 0xc7a <__mulsf3_pse+0x84>
     c86:	86 95       	lsr	r24
     c88:	77 95       	ror	r23
     c8a:	67 95       	ror	r22
     c8c:	b7 95       	ror	r27
     c8e:	f7 95       	ror	r31
     c90:	e7 95       	ror	r30
     c92:	9f 5f       	subi	r25, 0xFF	; 255
     c94:	c1 f7       	brne	.-16     	; 0xc86 <__mulsf3_pse+0x90>
     c96:	fe 2b       	or	r31, r30
     c98:	88 0f       	add	r24, r24
     c9a:	91 1d       	adc	r25, r1
     c9c:	96 95       	lsr	r25
     c9e:	87 95       	ror	r24
     ca0:	97 f9       	bld	r25, 7
     ca2:	08 95       	ret

00000ca4 <__fp_inf>:
     ca4:	97 f9       	bld	r25, 7
     ca6:	9f 67       	ori	r25, 0x7F	; 127
     ca8:	80 e8       	ldi	r24, 0x80	; 128
     caa:	70 e0       	ldi	r23, 0x00	; 0
     cac:	60 e0       	ldi	r22, 0x00	; 0
     cae:	08 95       	ret

00000cb0 <__fp_nan>:
     cb0:	9f ef       	ldi	r25, 0xFF	; 255
     cb2:	80 ec       	ldi	r24, 0xC0	; 192
     cb4:	08 95       	ret

00000cb6 <__fp_pscA>:
     cb6:	00 24       	eor	r0, r0
     cb8:	0a 94       	dec	r0
     cba:	16 16       	cp	r1, r22
     cbc:	17 06       	cpc	r1, r23
     cbe:	18 06       	cpc	r1, r24
     cc0:	09 06       	cpc	r0, r25
     cc2:	08 95       	ret

00000cc4 <__fp_pscB>:
     cc4:	00 24       	eor	r0, r0
     cc6:	0a 94       	dec	r0
     cc8:	12 16       	cp	r1, r18
     cca:	13 06       	cpc	r1, r19
     ccc:	14 06       	cpc	r1, r20
     cce:	05 06       	cpc	r0, r21
     cd0:	08 95       	ret

00000cd2 <__fp_round>:
     cd2:	09 2e       	mov	r0, r25
     cd4:	03 94       	inc	r0
     cd6:	00 0c       	add	r0, r0
     cd8:	11 f4       	brne	.+4      	; 0xcde <__fp_round+0xc>
     cda:	88 23       	and	r24, r24
     cdc:	52 f0       	brmi	.+20     	; 0xcf2 <__fp_round+0x20>
     cde:	bb 0f       	add	r27, r27
     ce0:	40 f4       	brcc	.+16     	; 0xcf2 <__fp_round+0x20>
     ce2:	bf 2b       	or	r27, r31
     ce4:	11 f4       	brne	.+4      	; 0xcea <__fp_round+0x18>
     ce6:	60 ff       	sbrs	r22, 0
     ce8:	04 c0       	rjmp	.+8      	; 0xcf2 <__fp_round+0x20>
     cea:	6f 5f       	subi	r22, 0xFF	; 255
     cec:	7f 4f       	sbci	r23, 0xFF	; 255
     cee:	8f 4f       	sbci	r24, 0xFF	; 255
     cf0:	9f 4f       	sbci	r25, 0xFF	; 255
     cf2:	08 95       	ret

00000cf4 <__divmodsi4>:
     cf4:	05 2e       	mov	r0, r21
     cf6:	97 fb       	bst	r25, 7
     cf8:	1e f4       	brtc	.+6      	; 0xd00 <__divmodsi4+0xc>
     cfa:	00 94       	com	r0
     cfc:	0e 94 91 06 	call	0xd22	; 0xd22 <__negsi2>
     d00:	57 fd       	sbrc	r21, 7
     d02:	07 d0       	rcall	.+14     	; 0xd12 <__divmodsi4_neg2>
     d04:	0e 94 9f 06 	call	0xd3e	; 0xd3e <__udivmodsi4>
     d08:	07 fc       	sbrc	r0, 7
     d0a:	03 d0       	rcall	.+6      	; 0xd12 <__divmodsi4_neg2>
     d0c:	4e f4       	brtc	.+18     	; 0xd20 <__divmodsi4_exit>
     d0e:	0c 94 91 06 	jmp	0xd22	; 0xd22 <__negsi2>

00000d12 <__divmodsi4_neg2>:
     d12:	50 95       	com	r21
     d14:	40 95       	com	r20
     d16:	30 95       	com	r19
     d18:	21 95       	neg	r18
     d1a:	3f 4f       	sbci	r19, 0xFF	; 255
     d1c:	4f 4f       	sbci	r20, 0xFF	; 255
     d1e:	5f 4f       	sbci	r21, 0xFF	; 255

00000d20 <__divmodsi4_exit>:
     d20:	08 95       	ret

00000d22 <__negsi2>:
     d22:	90 95       	com	r25
     d24:	80 95       	com	r24
     d26:	70 95       	com	r23
     d28:	61 95       	neg	r22
     d2a:	7f 4f       	sbci	r23, 0xFF	; 255
     d2c:	8f 4f       	sbci	r24, 0xFF	; 255
     d2e:	9f 4f       	sbci	r25, 0xFF	; 255
     d30:	08 95       	ret

00000d32 <__tablejump2__>:
     d32:	ee 0f       	add	r30, r30
     d34:	ff 1f       	adc	r31, r31
     d36:	05 90       	lpm	r0, Z+
     d38:	f4 91       	lpm	r31, Z
     d3a:	e0 2d       	mov	r30, r0
     d3c:	09 94       	ijmp

00000d3e <__udivmodsi4>:
     d3e:	a1 e2       	ldi	r26, 0x21	; 33
     d40:	1a 2e       	mov	r1, r26
     d42:	aa 1b       	sub	r26, r26
     d44:	bb 1b       	sub	r27, r27
     d46:	fd 01       	movw	r30, r26
     d48:	0d c0       	rjmp	.+26     	; 0xd64 <__udivmodsi4_ep>

00000d4a <__udivmodsi4_loop>:
     d4a:	aa 1f       	adc	r26, r26
     d4c:	bb 1f       	adc	r27, r27
     d4e:	ee 1f       	adc	r30, r30
     d50:	ff 1f       	adc	r31, r31
     d52:	a2 17       	cp	r26, r18
     d54:	b3 07       	cpc	r27, r19
     d56:	e4 07       	cpc	r30, r20
     d58:	f5 07       	cpc	r31, r21
     d5a:	20 f0       	brcs	.+8      	; 0xd64 <__udivmodsi4_ep>
     d5c:	a2 1b       	sub	r26, r18
     d5e:	b3 0b       	sbc	r27, r19
     d60:	e4 0b       	sbc	r30, r20
     d62:	f5 0b       	sbc	r31, r21

00000d64 <__udivmodsi4_ep>:
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	88 1f       	adc	r24, r24
     d6a:	99 1f       	adc	r25, r25
     d6c:	1a 94       	dec	r1
     d6e:	69 f7       	brne	.-38     	; 0xd4a <__udivmodsi4_loop>
     d70:	60 95       	com	r22
     d72:	70 95       	com	r23
     d74:	80 95       	com	r24
     d76:	90 95       	com	r25
     d78:	9b 01       	movw	r18, r22
     d7a:	ac 01       	movw	r20, r24
     d7c:	bd 01       	movw	r22, r26
     d7e:	cf 01       	movw	r24, r30
     d80:	08 95       	ret

00000d82 <puts>:
     d82:	0f 93       	push	r16
     d84:	1f 93       	push	r17
     d86:	cf 93       	push	r28
     d88:	df 93       	push	r29
     d8a:	e0 91 87 20 	lds	r30, 0x2087	; 0x802087 <__iob+0x2>
     d8e:	f0 91 88 20 	lds	r31, 0x2088	; 0x802088 <__iob+0x3>
     d92:	23 81       	ldd	r18, Z+3	; 0x03
     d94:	21 ff       	sbrs	r18, 1
     d96:	1b c0       	rjmp	.+54     	; 0xdce <puts+0x4c>
     d98:	8c 01       	movw	r16, r24
     d9a:	d0 e0       	ldi	r29, 0x00	; 0
     d9c:	c0 e0       	ldi	r28, 0x00	; 0
     d9e:	f8 01       	movw	r30, r16
     da0:	81 91       	ld	r24, Z+
     da2:	8f 01       	movw	r16, r30
     da4:	60 91 87 20 	lds	r22, 0x2087	; 0x802087 <__iob+0x2>
     da8:	70 91 88 20 	lds	r23, 0x2088	; 0x802088 <__iob+0x3>
     dac:	db 01       	movw	r26, r22
     dae:	18 96       	adiw	r26, 0x08	; 8
     db0:	ed 91       	ld	r30, X+
     db2:	fc 91       	ld	r31, X
     db4:	19 97       	sbiw	r26, 0x09	; 9
     db6:	88 23       	and	r24, r24
     db8:	31 f0       	breq	.+12     	; 0xdc6 <puts+0x44>
     dba:	09 95       	icall
     dbc:	89 2b       	or	r24, r25
     dbe:	79 f3       	breq	.-34     	; 0xd9e <puts+0x1c>
     dc0:	df ef       	ldi	r29, 0xFF	; 255
     dc2:	cf ef       	ldi	r28, 0xFF	; 255
     dc4:	ec cf       	rjmp	.-40     	; 0xd9e <puts+0x1c>
     dc6:	8a e0       	ldi	r24, 0x0A	; 10
     dc8:	09 95       	icall
     dca:	89 2b       	or	r24, r25
     dcc:	19 f0       	breq	.+6      	; 0xdd4 <puts+0x52>
     dce:	8f ef       	ldi	r24, 0xFF	; 255
     dd0:	9f ef       	ldi	r25, 0xFF	; 255
     dd2:	02 c0       	rjmp	.+4      	; 0xdd8 <puts+0x56>
     dd4:	8d 2f       	mov	r24, r29
     dd6:	9c 2f       	mov	r25, r28
     dd8:	df 91       	pop	r29
     dda:	cf 91       	pop	r28
     ddc:	1f 91       	pop	r17
     dde:	0f 91       	pop	r16
     de0:	08 95       	ret

00000de2 <sprintf>:
     de2:	ae e0       	ldi	r26, 0x0E	; 14
     de4:	b0 e0       	ldi	r27, 0x00	; 0
     de6:	e7 ef       	ldi	r30, 0xF7	; 247
     de8:	f6 e0       	ldi	r31, 0x06	; 6
     dea:	0c 94 b2 09 	jmp	0x1364	; 0x1364 <__prologue_saves__+0x1c>
     dee:	0d 89       	ldd	r16, Y+21	; 0x15
     df0:	1e 89       	ldd	r17, Y+22	; 0x16
     df2:	86 e0       	ldi	r24, 0x06	; 6
     df4:	8c 83       	std	Y+4, r24	; 0x04
     df6:	09 83       	std	Y+1, r16	; 0x01
     df8:	1a 83       	std	Y+2, r17	; 0x02
     dfa:	8f ef       	ldi	r24, 0xFF	; 255
     dfc:	9f e7       	ldi	r25, 0x7F	; 127
     dfe:	8d 83       	std	Y+5, r24	; 0x05
     e00:	9e 83       	std	Y+6, r25	; 0x06
     e02:	ae 01       	movw	r20, r28
     e04:	47 5e       	subi	r20, 0xE7	; 231
     e06:	5f 4f       	sbci	r21, 0xFF	; 255
     e08:	6f 89       	ldd	r22, Y+23	; 0x17
     e0a:	78 8d       	ldd	r23, Y+24	; 0x18
     e0c:	ce 01       	movw	r24, r28
     e0e:	01 96       	adiw	r24, 0x01	; 1
     e10:	0e 94 13 07 	call	0xe26	; 0xe26 <vfprintf>
     e14:	ef 81       	ldd	r30, Y+7	; 0x07
     e16:	f8 85       	ldd	r31, Y+8	; 0x08
     e18:	e0 0f       	add	r30, r16
     e1a:	f1 1f       	adc	r31, r17
     e1c:	10 82       	st	Z, r1
     e1e:	2e 96       	adiw	r28, 0x0e	; 14
     e20:	e4 e0       	ldi	r30, 0x04	; 4
     e22:	0c 94 cb 09 	jmp	0x1396	; 0x1396 <__epilogue_restores__+0x1c>

00000e26 <vfprintf>:
     e26:	ab e0       	ldi	r26, 0x0B	; 11
     e28:	b0 e0       	ldi	r27, 0x00	; 0
     e2a:	e9 e1       	ldi	r30, 0x19	; 25
     e2c:	f7 e0       	ldi	r31, 0x07	; 7
     e2e:	0c 94 a4 09 	jmp	0x1348	; 0x1348 <__prologue_saves__>
     e32:	6c 01       	movw	r12, r24
     e34:	7b 01       	movw	r14, r22
     e36:	8a 01       	movw	r16, r20
     e38:	fc 01       	movw	r30, r24
     e3a:	16 82       	std	Z+6, r1	; 0x06
     e3c:	17 82       	std	Z+7, r1	; 0x07
     e3e:	83 81       	ldd	r24, Z+3	; 0x03
     e40:	81 ff       	sbrs	r24, 1
     e42:	cc c1       	rjmp	.+920    	; 0x11dc <vfprintf+0x3b6>
     e44:	ce 01       	movw	r24, r28
     e46:	01 96       	adiw	r24, 0x01	; 1
     e48:	3c 01       	movw	r6, r24
     e4a:	f6 01       	movw	r30, r12
     e4c:	93 81       	ldd	r25, Z+3	; 0x03
     e4e:	f7 01       	movw	r30, r14
     e50:	93 fd       	sbrc	r25, 3
     e52:	85 91       	lpm	r24, Z+
     e54:	93 ff       	sbrs	r25, 3
     e56:	81 91       	ld	r24, Z+
     e58:	7f 01       	movw	r14, r30
     e5a:	88 23       	and	r24, r24
     e5c:	09 f4       	brne	.+2      	; 0xe60 <vfprintf+0x3a>
     e5e:	ba c1       	rjmp	.+884    	; 0x11d4 <vfprintf+0x3ae>
     e60:	85 32       	cpi	r24, 0x25	; 37
     e62:	39 f4       	brne	.+14     	; 0xe72 <vfprintf+0x4c>
     e64:	93 fd       	sbrc	r25, 3
     e66:	85 91       	lpm	r24, Z+
     e68:	93 ff       	sbrs	r25, 3
     e6a:	81 91       	ld	r24, Z+
     e6c:	7f 01       	movw	r14, r30
     e6e:	85 32       	cpi	r24, 0x25	; 37
     e70:	29 f4       	brne	.+10     	; 0xe7c <vfprintf+0x56>
     e72:	b6 01       	movw	r22, r12
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	0e 94 0a 09 	call	0x1214	; 0x1214 <fputc>
     e7a:	e7 cf       	rjmp	.-50     	; 0xe4a <vfprintf+0x24>
     e7c:	91 2c       	mov	r9, r1
     e7e:	21 2c       	mov	r2, r1
     e80:	31 2c       	mov	r3, r1
     e82:	ff e1       	ldi	r31, 0x1F	; 31
     e84:	f3 15       	cp	r31, r3
     e86:	d8 f0       	brcs	.+54     	; 0xebe <vfprintf+0x98>
     e88:	8b 32       	cpi	r24, 0x2B	; 43
     e8a:	79 f0       	breq	.+30     	; 0xeaa <vfprintf+0x84>
     e8c:	38 f4       	brcc	.+14     	; 0xe9c <vfprintf+0x76>
     e8e:	80 32       	cpi	r24, 0x20	; 32
     e90:	79 f0       	breq	.+30     	; 0xeb0 <vfprintf+0x8a>
     e92:	83 32       	cpi	r24, 0x23	; 35
     e94:	a1 f4       	brne	.+40     	; 0xebe <vfprintf+0x98>
     e96:	23 2d       	mov	r18, r3
     e98:	20 61       	ori	r18, 0x10	; 16
     e9a:	1d c0       	rjmp	.+58     	; 0xed6 <vfprintf+0xb0>
     e9c:	8d 32       	cpi	r24, 0x2D	; 45
     e9e:	61 f0       	breq	.+24     	; 0xeb8 <vfprintf+0x92>
     ea0:	80 33       	cpi	r24, 0x30	; 48
     ea2:	69 f4       	brne	.+26     	; 0xebe <vfprintf+0x98>
     ea4:	23 2d       	mov	r18, r3
     ea6:	21 60       	ori	r18, 0x01	; 1
     ea8:	16 c0       	rjmp	.+44     	; 0xed6 <vfprintf+0xb0>
     eaa:	83 2d       	mov	r24, r3
     eac:	82 60       	ori	r24, 0x02	; 2
     eae:	38 2e       	mov	r3, r24
     eb0:	e3 2d       	mov	r30, r3
     eb2:	e4 60       	ori	r30, 0x04	; 4
     eb4:	3e 2e       	mov	r3, r30
     eb6:	2a c0       	rjmp	.+84     	; 0xf0c <vfprintf+0xe6>
     eb8:	f3 2d       	mov	r31, r3
     eba:	f8 60       	ori	r31, 0x08	; 8
     ebc:	1d c0       	rjmp	.+58     	; 0xef8 <vfprintf+0xd2>
     ebe:	37 fc       	sbrc	r3, 7
     ec0:	2d c0       	rjmp	.+90     	; 0xf1c <vfprintf+0xf6>
     ec2:	20 ed       	ldi	r18, 0xD0	; 208
     ec4:	28 0f       	add	r18, r24
     ec6:	2a 30       	cpi	r18, 0x0A	; 10
     ec8:	40 f0       	brcs	.+16     	; 0xeda <vfprintf+0xb4>
     eca:	8e 32       	cpi	r24, 0x2E	; 46
     ecc:	b9 f4       	brne	.+46     	; 0xefc <vfprintf+0xd6>
     ece:	36 fc       	sbrc	r3, 6
     ed0:	81 c1       	rjmp	.+770    	; 0x11d4 <vfprintf+0x3ae>
     ed2:	23 2d       	mov	r18, r3
     ed4:	20 64       	ori	r18, 0x40	; 64
     ed6:	32 2e       	mov	r3, r18
     ed8:	19 c0       	rjmp	.+50     	; 0xf0c <vfprintf+0xe6>
     eda:	36 fe       	sbrs	r3, 6
     edc:	06 c0       	rjmp	.+12     	; 0xeea <vfprintf+0xc4>
     ede:	8a e0       	ldi	r24, 0x0A	; 10
     ee0:	98 9e       	mul	r9, r24
     ee2:	20 0d       	add	r18, r0
     ee4:	11 24       	eor	r1, r1
     ee6:	92 2e       	mov	r9, r18
     ee8:	11 c0       	rjmp	.+34     	; 0xf0c <vfprintf+0xe6>
     eea:	ea e0       	ldi	r30, 0x0A	; 10
     eec:	2e 9e       	mul	r2, r30
     eee:	20 0d       	add	r18, r0
     ef0:	11 24       	eor	r1, r1
     ef2:	22 2e       	mov	r2, r18
     ef4:	f3 2d       	mov	r31, r3
     ef6:	f0 62       	ori	r31, 0x20	; 32
     ef8:	3f 2e       	mov	r3, r31
     efa:	08 c0       	rjmp	.+16     	; 0xf0c <vfprintf+0xe6>
     efc:	8c 36       	cpi	r24, 0x6C	; 108
     efe:	21 f4       	brne	.+8      	; 0xf08 <vfprintf+0xe2>
     f00:	83 2d       	mov	r24, r3
     f02:	80 68       	ori	r24, 0x80	; 128
     f04:	38 2e       	mov	r3, r24
     f06:	02 c0       	rjmp	.+4      	; 0xf0c <vfprintf+0xe6>
     f08:	88 36       	cpi	r24, 0x68	; 104
     f0a:	41 f4       	brne	.+16     	; 0xf1c <vfprintf+0xf6>
     f0c:	f7 01       	movw	r30, r14
     f0e:	93 fd       	sbrc	r25, 3
     f10:	85 91       	lpm	r24, Z+
     f12:	93 ff       	sbrs	r25, 3
     f14:	81 91       	ld	r24, Z+
     f16:	7f 01       	movw	r14, r30
     f18:	81 11       	cpse	r24, r1
     f1a:	b3 cf       	rjmp	.-154    	; 0xe82 <vfprintf+0x5c>
     f1c:	98 2f       	mov	r25, r24
     f1e:	9f 7d       	andi	r25, 0xDF	; 223
     f20:	95 54       	subi	r25, 0x45	; 69
     f22:	93 30       	cpi	r25, 0x03	; 3
     f24:	28 f4       	brcc	.+10     	; 0xf30 <vfprintf+0x10a>
     f26:	0c 5f       	subi	r16, 0xFC	; 252
     f28:	1f 4f       	sbci	r17, 0xFF	; 255
     f2a:	9f e3       	ldi	r25, 0x3F	; 63
     f2c:	99 83       	std	Y+1, r25	; 0x01
     f2e:	0d c0       	rjmp	.+26     	; 0xf4a <vfprintf+0x124>
     f30:	83 36       	cpi	r24, 0x63	; 99
     f32:	31 f0       	breq	.+12     	; 0xf40 <vfprintf+0x11a>
     f34:	83 37       	cpi	r24, 0x73	; 115
     f36:	71 f0       	breq	.+28     	; 0xf54 <vfprintf+0x12e>
     f38:	83 35       	cpi	r24, 0x53	; 83
     f3a:	09 f0       	breq	.+2      	; 0xf3e <vfprintf+0x118>
     f3c:	59 c0       	rjmp	.+178    	; 0xff0 <vfprintf+0x1ca>
     f3e:	21 c0       	rjmp	.+66     	; 0xf82 <vfprintf+0x15c>
     f40:	f8 01       	movw	r30, r16
     f42:	80 81       	ld	r24, Z
     f44:	89 83       	std	Y+1, r24	; 0x01
     f46:	0e 5f       	subi	r16, 0xFE	; 254
     f48:	1f 4f       	sbci	r17, 0xFF	; 255
     f4a:	88 24       	eor	r8, r8
     f4c:	83 94       	inc	r8
     f4e:	91 2c       	mov	r9, r1
     f50:	53 01       	movw	r10, r6
     f52:	13 c0       	rjmp	.+38     	; 0xf7a <vfprintf+0x154>
     f54:	28 01       	movw	r4, r16
     f56:	f2 e0       	ldi	r31, 0x02	; 2
     f58:	4f 0e       	add	r4, r31
     f5a:	51 1c       	adc	r5, r1
     f5c:	f8 01       	movw	r30, r16
     f5e:	a0 80       	ld	r10, Z
     f60:	b1 80       	ldd	r11, Z+1	; 0x01
     f62:	36 fe       	sbrs	r3, 6
     f64:	03 c0       	rjmp	.+6      	; 0xf6c <vfprintf+0x146>
     f66:	69 2d       	mov	r22, r9
     f68:	70 e0       	ldi	r23, 0x00	; 0
     f6a:	02 c0       	rjmp	.+4      	; 0xf70 <vfprintf+0x14a>
     f6c:	6f ef       	ldi	r22, 0xFF	; 255
     f6e:	7f ef       	ldi	r23, 0xFF	; 255
     f70:	c5 01       	movw	r24, r10
     f72:	0e 94 ff 08 	call	0x11fe	; 0x11fe <strnlen>
     f76:	4c 01       	movw	r8, r24
     f78:	82 01       	movw	r16, r4
     f7a:	f3 2d       	mov	r31, r3
     f7c:	ff 77       	andi	r31, 0x7F	; 127
     f7e:	3f 2e       	mov	r3, r31
     f80:	16 c0       	rjmp	.+44     	; 0xfae <vfprintf+0x188>
     f82:	28 01       	movw	r4, r16
     f84:	22 e0       	ldi	r18, 0x02	; 2
     f86:	42 0e       	add	r4, r18
     f88:	51 1c       	adc	r5, r1
     f8a:	f8 01       	movw	r30, r16
     f8c:	a0 80       	ld	r10, Z
     f8e:	b1 80       	ldd	r11, Z+1	; 0x01
     f90:	36 fe       	sbrs	r3, 6
     f92:	03 c0       	rjmp	.+6      	; 0xf9a <vfprintf+0x174>
     f94:	69 2d       	mov	r22, r9
     f96:	70 e0       	ldi	r23, 0x00	; 0
     f98:	02 c0       	rjmp	.+4      	; 0xf9e <vfprintf+0x178>
     f9a:	6f ef       	ldi	r22, 0xFF	; 255
     f9c:	7f ef       	ldi	r23, 0xFF	; 255
     f9e:	c5 01       	movw	r24, r10
     fa0:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <strnlen_P>
     fa4:	4c 01       	movw	r8, r24
     fa6:	f3 2d       	mov	r31, r3
     fa8:	f0 68       	ori	r31, 0x80	; 128
     faa:	3f 2e       	mov	r3, r31
     fac:	82 01       	movw	r16, r4
     fae:	33 fc       	sbrc	r3, 3
     fb0:	1b c0       	rjmp	.+54     	; 0xfe8 <vfprintf+0x1c2>
     fb2:	82 2d       	mov	r24, r2
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	88 16       	cp	r8, r24
     fb8:	99 06       	cpc	r9, r25
     fba:	b0 f4       	brcc	.+44     	; 0xfe8 <vfprintf+0x1c2>
     fbc:	b6 01       	movw	r22, r12
     fbe:	80 e2       	ldi	r24, 0x20	; 32
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	0e 94 0a 09 	call	0x1214	; 0x1214 <fputc>
     fc6:	2a 94       	dec	r2
     fc8:	f4 cf       	rjmp	.-24     	; 0xfb2 <vfprintf+0x18c>
     fca:	f5 01       	movw	r30, r10
     fcc:	37 fc       	sbrc	r3, 7
     fce:	85 91       	lpm	r24, Z+
     fd0:	37 fe       	sbrs	r3, 7
     fd2:	81 91       	ld	r24, Z+
     fd4:	5f 01       	movw	r10, r30
     fd6:	b6 01       	movw	r22, r12
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	0e 94 0a 09 	call	0x1214	; 0x1214 <fputc>
     fde:	21 10       	cpse	r2, r1
     fe0:	2a 94       	dec	r2
     fe2:	21 e0       	ldi	r18, 0x01	; 1
     fe4:	82 1a       	sub	r8, r18
     fe6:	91 08       	sbc	r9, r1
     fe8:	81 14       	cp	r8, r1
     fea:	91 04       	cpc	r9, r1
     fec:	71 f7       	brne	.-36     	; 0xfca <vfprintf+0x1a4>
     fee:	e8 c0       	rjmp	.+464    	; 0x11c0 <vfprintf+0x39a>
     ff0:	84 36       	cpi	r24, 0x64	; 100
     ff2:	11 f0       	breq	.+4      	; 0xff8 <vfprintf+0x1d2>
     ff4:	89 36       	cpi	r24, 0x69	; 105
     ff6:	41 f5       	brne	.+80     	; 0x1048 <vfprintf+0x222>
     ff8:	f8 01       	movw	r30, r16
     ffa:	37 fe       	sbrs	r3, 7
     ffc:	07 c0       	rjmp	.+14     	; 0x100c <vfprintf+0x1e6>
     ffe:	60 81       	ld	r22, Z
    1000:	71 81       	ldd	r23, Z+1	; 0x01
    1002:	82 81       	ldd	r24, Z+2	; 0x02
    1004:	93 81       	ldd	r25, Z+3	; 0x03
    1006:	0c 5f       	subi	r16, 0xFC	; 252
    1008:	1f 4f       	sbci	r17, 0xFF	; 255
    100a:	08 c0       	rjmp	.+16     	; 0x101c <vfprintf+0x1f6>
    100c:	60 81       	ld	r22, Z
    100e:	71 81       	ldd	r23, Z+1	; 0x01
    1010:	07 2e       	mov	r0, r23
    1012:	00 0c       	add	r0, r0
    1014:	88 0b       	sbc	r24, r24
    1016:	99 0b       	sbc	r25, r25
    1018:	0e 5f       	subi	r16, 0xFE	; 254
    101a:	1f 4f       	sbci	r17, 0xFF	; 255
    101c:	f3 2d       	mov	r31, r3
    101e:	ff 76       	andi	r31, 0x6F	; 111
    1020:	3f 2e       	mov	r3, r31
    1022:	97 ff       	sbrs	r25, 7
    1024:	09 c0       	rjmp	.+18     	; 0x1038 <vfprintf+0x212>
    1026:	90 95       	com	r25
    1028:	80 95       	com	r24
    102a:	70 95       	com	r23
    102c:	61 95       	neg	r22
    102e:	7f 4f       	sbci	r23, 0xFF	; 255
    1030:	8f 4f       	sbci	r24, 0xFF	; 255
    1032:	9f 4f       	sbci	r25, 0xFF	; 255
    1034:	f0 68       	ori	r31, 0x80	; 128
    1036:	3f 2e       	mov	r3, r31
    1038:	2a e0       	ldi	r18, 0x0A	; 10
    103a:	30 e0       	ldi	r19, 0x00	; 0
    103c:	a3 01       	movw	r20, r6
    103e:	0e 94 46 09 	call	0x128c	; 0x128c <__ultoa_invert>
    1042:	88 2e       	mov	r8, r24
    1044:	86 18       	sub	r8, r6
    1046:	45 c0       	rjmp	.+138    	; 0x10d2 <vfprintf+0x2ac>
    1048:	85 37       	cpi	r24, 0x75	; 117
    104a:	31 f4       	brne	.+12     	; 0x1058 <vfprintf+0x232>
    104c:	23 2d       	mov	r18, r3
    104e:	2f 7e       	andi	r18, 0xEF	; 239
    1050:	b2 2e       	mov	r11, r18
    1052:	2a e0       	ldi	r18, 0x0A	; 10
    1054:	30 e0       	ldi	r19, 0x00	; 0
    1056:	25 c0       	rjmp	.+74     	; 0x10a2 <vfprintf+0x27c>
    1058:	93 2d       	mov	r25, r3
    105a:	99 7f       	andi	r25, 0xF9	; 249
    105c:	b9 2e       	mov	r11, r25
    105e:	8f 36       	cpi	r24, 0x6F	; 111
    1060:	c1 f0       	breq	.+48     	; 0x1092 <vfprintf+0x26c>
    1062:	18 f4       	brcc	.+6      	; 0x106a <vfprintf+0x244>
    1064:	88 35       	cpi	r24, 0x58	; 88
    1066:	79 f0       	breq	.+30     	; 0x1086 <vfprintf+0x260>
    1068:	b5 c0       	rjmp	.+362    	; 0x11d4 <vfprintf+0x3ae>
    106a:	80 37       	cpi	r24, 0x70	; 112
    106c:	19 f0       	breq	.+6      	; 0x1074 <vfprintf+0x24e>
    106e:	88 37       	cpi	r24, 0x78	; 120
    1070:	21 f0       	breq	.+8      	; 0x107a <vfprintf+0x254>
    1072:	b0 c0       	rjmp	.+352    	; 0x11d4 <vfprintf+0x3ae>
    1074:	e9 2f       	mov	r30, r25
    1076:	e0 61       	ori	r30, 0x10	; 16
    1078:	be 2e       	mov	r11, r30
    107a:	b4 fe       	sbrs	r11, 4
    107c:	0d c0       	rjmp	.+26     	; 0x1098 <vfprintf+0x272>
    107e:	fb 2d       	mov	r31, r11
    1080:	f4 60       	ori	r31, 0x04	; 4
    1082:	bf 2e       	mov	r11, r31
    1084:	09 c0       	rjmp	.+18     	; 0x1098 <vfprintf+0x272>
    1086:	34 fe       	sbrs	r3, 4
    1088:	0a c0       	rjmp	.+20     	; 0x109e <vfprintf+0x278>
    108a:	29 2f       	mov	r18, r25
    108c:	26 60       	ori	r18, 0x06	; 6
    108e:	b2 2e       	mov	r11, r18
    1090:	06 c0       	rjmp	.+12     	; 0x109e <vfprintf+0x278>
    1092:	28 e0       	ldi	r18, 0x08	; 8
    1094:	30 e0       	ldi	r19, 0x00	; 0
    1096:	05 c0       	rjmp	.+10     	; 0x10a2 <vfprintf+0x27c>
    1098:	20 e1       	ldi	r18, 0x10	; 16
    109a:	30 e0       	ldi	r19, 0x00	; 0
    109c:	02 c0       	rjmp	.+4      	; 0x10a2 <vfprintf+0x27c>
    109e:	20 e1       	ldi	r18, 0x10	; 16
    10a0:	32 e0       	ldi	r19, 0x02	; 2
    10a2:	f8 01       	movw	r30, r16
    10a4:	b7 fe       	sbrs	r11, 7
    10a6:	07 c0       	rjmp	.+14     	; 0x10b6 <vfprintf+0x290>
    10a8:	60 81       	ld	r22, Z
    10aa:	71 81       	ldd	r23, Z+1	; 0x01
    10ac:	82 81       	ldd	r24, Z+2	; 0x02
    10ae:	93 81       	ldd	r25, Z+3	; 0x03
    10b0:	0c 5f       	subi	r16, 0xFC	; 252
    10b2:	1f 4f       	sbci	r17, 0xFF	; 255
    10b4:	06 c0       	rjmp	.+12     	; 0x10c2 <vfprintf+0x29c>
    10b6:	60 81       	ld	r22, Z
    10b8:	71 81       	ldd	r23, Z+1	; 0x01
    10ba:	80 e0       	ldi	r24, 0x00	; 0
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	0e 5f       	subi	r16, 0xFE	; 254
    10c0:	1f 4f       	sbci	r17, 0xFF	; 255
    10c2:	a3 01       	movw	r20, r6
    10c4:	0e 94 46 09 	call	0x128c	; 0x128c <__ultoa_invert>
    10c8:	88 2e       	mov	r8, r24
    10ca:	86 18       	sub	r8, r6
    10cc:	fb 2d       	mov	r31, r11
    10ce:	ff 77       	andi	r31, 0x7F	; 127
    10d0:	3f 2e       	mov	r3, r31
    10d2:	36 fe       	sbrs	r3, 6
    10d4:	0d c0       	rjmp	.+26     	; 0x10f0 <vfprintf+0x2ca>
    10d6:	23 2d       	mov	r18, r3
    10d8:	2e 7f       	andi	r18, 0xFE	; 254
    10da:	a2 2e       	mov	r10, r18
    10dc:	89 14       	cp	r8, r9
    10de:	58 f4       	brcc	.+22     	; 0x10f6 <vfprintf+0x2d0>
    10e0:	34 fe       	sbrs	r3, 4
    10e2:	0b c0       	rjmp	.+22     	; 0x10fa <vfprintf+0x2d4>
    10e4:	32 fc       	sbrc	r3, 2
    10e6:	09 c0       	rjmp	.+18     	; 0x10fa <vfprintf+0x2d4>
    10e8:	83 2d       	mov	r24, r3
    10ea:	8e 7e       	andi	r24, 0xEE	; 238
    10ec:	a8 2e       	mov	r10, r24
    10ee:	05 c0       	rjmp	.+10     	; 0x10fa <vfprintf+0x2d4>
    10f0:	b8 2c       	mov	r11, r8
    10f2:	a3 2c       	mov	r10, r3
    10f4:	03 c0       	rjmp	.+6      	; 0x10fc <vfprintf+0x2d6>
    10f6:	b8 2c       	mov	r11, r8
    10f8:	01 c0       	rjmp	.+2      	; 0x10fc <vfprintf+0x2d6>
    10fa:	b9 2c       	mov	r11, r9
    10fc:	a4 fe       	sbrs	r10, 4
    10fe:	0f c0       	rjmp	.+30     	; 0x111e <vfprintf+0x2f8>
    1100:	fe 01       	movw	r30, r28
    1102:	e8 0d       	add	r30, r8
    1104:	f1 1d       	adc	r31, r1
    1106:	80 81       	ld	r24, Z
    1108:	80 33       	cpi	r24, 0x30	; 48
    110a:	21 f4       	brne	.+8      	; 0x1114 <vfprintf+0x2ee>
    110c:	9a 2d       	mov	r25, r10
    110e:	99 7e       	andi	r25, 0xE9	; 233
    1110:	a9 2e       	mov	r10, r25
    1112:	09 c0       	rjmp	.+18     	; 0x1126 <vfprintf+0x300>
    1114:	a2 fe       	sbrs	r10, 2
    1116:	06 c0       	rjmp	.+12     	; 0x1124 <vfprintf+0x2fe>
    1118:	b3 94       	inc	r11
    111a:	b3 94       	inc	r11
    111c:	04 c0       	rjmp	.+8      	; 0x1126 <vfprintf+0x300>
    111e:	8a 2d       	mov	r24, r10
    1120:	86 78       	andi	r24, 0x86	; 134
    1122:	09 f0       	breq	.+2      	; 0x1126 <vfprintf+0x300>
    1124:	b3 94       	inc	r11
    1126:	a3 fc       	sbrc	r10, 3
    1128:	11 c0       	rjmp	.+34     	; 0x114c <vfprintf+0x326>
    112a:	a0 fe       	sbrs	r10, 0
    112c:	06 c0       	rjmp	.+12     	; 0x113a <vfprintf+0x314>
    112e:	b2 14       	cp	r11, r2
    1130:	88 f4       	brcc	.+34     	; 0x1154 <vfprintf+0x32e>
    1132:	28 0c       	add	r2, r8
    1134:	92 2c       	mov	r9, r2
    1136:	9b 18       	sub	r9, r11
    1138:	0e c0       	rjmp	.+28     	; 0x1156 <vfprintf+0x330>
    113a:	b2 14       	cp	r11, r2
    113c:	60 f4       	brcc	.+24     	; 0x1156 <vfprintf+0x330>
    113e:	b6 01       	movw	r22, r12
    1140:	80 e2       	ldi	r24, 0x20	; 32
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	0e 94 0a 09 	call	0x1214	; 0x1214 <fputc>
    1148:	b3 94       	inc	r11
    114a:	f7 cf       	rjmp	.-18     	; 0x113a <vfprintf+0x314>
    114c:	b2 14       	cp	r11, r2
    114e:	18 f4       	brcc	.+6      	; 0x1156 <vfprintf+0x330>
    1150:	2b 18       	sub	r2, r11
    1152:	02 c0       	rjmp	.+4      	; 0x1158 <vfprintf+0x332>
    1154:	98 2c       	mov	r9, r8
    1156:	21 2c       	mov	r2, r1
    1158:	a4 fe       	sbrs	r10, 4
    115a:	10 c0       	rjmp	.+32     	; 0x117c <vfprintf+0x356>
    115c:	b6 01       	movw	r22, r12
    115e:	80 e3       	ldi	r24, 0x30	; 48
    1160:	90 e0       	ldi	r25, 0x00	; 0
    1162:	0e 94 0a 09 	call	0x1214	; 0x1214 <fputc>
    1166:	a2 fe       	sbrs	r10, 2
    1168:	17 c0       	rjmp	.+46     	; 0x1198 <vfprintf+0x372>
    116a:	a1 fc       	sbrc	r10, 1
    116c:	03 c0       	rjmp	.+6      	; 0x1174 <vfprintf+0x34e>
    116e:	88 e7       	ldi	r24, 0x78	; 120
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	02 c0       	rjmp	.+4      	; 0x1178 <vfprintf+0x352>
    1174:	88 e5       	ldi	r24, 0x58	; 88
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	b6 01       	movw	r22, r12
    117a:	0c c0       	rjmp	.+24     	; 0x1194 <vfprintf+0x36e>
    117c:	8a 2d       	mov	r24, r10
    117e:	86 78       	andi	r24, 0x86	; 134
    1180:	59 f0       	breq	.+22     	; 0x1198 <vfprintf+0x372>
    1182:	a1 fe       	sbrs	r10, 1
    1184:	02 c0       	rjmp	.+4      	; 0x118a <vfprintf+0x364>
    1186:	8b e2       	ldi	r24, 0x2B	; 43
    1188:	01 c0       	rjmp	.+2      	; 0x118c <vfprintf+0x366>
    118a:	80 e2       	ldi	r24, 0x20	; 32
    118c:	a7 fc       	sbrc	r10, 7
    118e:	8d e2       	ldi	r24, 0x2D	; 45
    1190:	b6 01       	movw	r22, r12
    1192:	90 e0       	ldi	r25, 0x00	; 0
    1194:	0e 94 0a 09 	call	0x1214	; 0x1214 <fputc>
    1198:	89 14       	cp	r8, r9
    119a:	38 f4       	brcc	.+14     	; 0x11aa <vfprintf+0x384>
    119c:	b6 01       	movw	r22, r12
    119e:	80 e3       	ldi	r24, 0x30	; 48
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	0e 94 0a 09 	call	0x1214	; 0x1214 <fputc>
    11a6:	9a 94       	dec	r9
    11a8:	f7 cf       	rjmp	.-18     	; 0x1198 <vfprintf+0x372>
    11aa:	8a 94       	dec	r8
    11ac:	f3 01       	movw	r30, r6
    11ae:	e8 0d       	add	r30, r8
    11b0:	f1 1d       	adc	r31, r1
    11b2:	80 81       	ld	r24, Z
    11b4:	b6 01       	movw	r22, r12
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    11b8:	0e 94 0a 09 	call	0x1214	; 0x1214 <fputc>
    11bc:	81 10       	cpse	r8, r1
    11be:	f5 cf       	rjmp	.-22     	; 0x11aa <vfprintf+0x384>
    11c0:	22 20       	and	r2, r2
    11c2:	09 f4       	brne	.+2      	; 0x11c6 <vfprintf+0x3a0>
    11c4:	42 ce       	rjmp	.-892    	; 0xe4a <vfprintf+0x24>
    11c6:	b6 01       	movw	r22, r12
    11c8:	80 e2       	ldi	r24, 0x20	; 32
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	0e 94 0a 09 	call	0x1214	; 0x1214 <fputc>
    11d0:	2a 94       	dec	r2
    11d2:	f6 cf       	rjmp	.-20     	; 0x11c0 <vfprintf+0x39a>
    11d4:	f6 01       	movw	r30, r12
    11d6:	86 81       	ldd	r24, Z+6	; 0x06
    11d8:	97 81       	ldd	r25, Z+7	; 0x07
    11da:	02 c0       	rjmp	.+4      	; 0x11e0 <vfprintf+0x3ba>
    11dc:	8f ef       	ldi	r24, 0xFF	; 255
    11de:	9f ef       	ldi	r25, 0xFF	; 255
    11e0:	2b 96       	adiw	r28, 0x0b	; 11
    11e2:	e2 e1       	ldi	r30, 0x12	; 18
    11e4:	0c 94 bd 09 	jmp	0x137a	; 0x137a <__epilogue_restores__>

000011e8 <strnlen_P>:
    11e8:	fc 01       	movw	r30, r24
    11ea:	05 90       	lpm	r0, Z+
    11ec:	61 50       	subi	r22, 0x01	; 1
    11ee:	70 40       	sbci	r23, 0x00	; 0
    11f0:	01 10       	cpse	r0, r1
    11f2:	d8 f7       	brcc	.-10     	; 0x11ea <strnlen_P+0x2>
    11f4:	80 95       	com	r24
    11f6:	90 95       	com	r25
    11f8:	8e 0f       	add	r24, r30
    11fa:	9f 1f       	adc	r25, r31
    11fc:	08 95       	ret

000011fe <strnlen>:
    11fe:	fc 01       	movw	r30, r24
    1200:	61 50       	subi	r22, 0x01	; 1
    1202:	70 40       	sbci	r23, 0x00	; 0
    1204:	01 90       	ld	r0, Z+
    1206:	01 10       	cpse	r0, r1
    1208:	d8 f7       	brcc	.-10     	; 0x1200 <strnlen+0x2>
    120a:	80 95       	com	r24
    120c:	90 95       	com	r25
    120e:	8e 0f       	add	r24, r30
    1210:	9f 1f       	adc	r25, r31
    1212:	08 95       	ret

00001214 <fputc>:
    1214:	0f 93       	push	r16
    1216:	1f 93       	push	r17
    1218:	cf 93       	push	r28
    121a:	df 93       	push	r29
    121c:	fb 01       	movw	r30, r22
    121e:	23 81       	ldd	r18, Z+3	; 0x03
    1220:	21 fd       	sbrc	r18, 1
    1222:	03 c0       	rjmp	.+6      	; 0x122a <fputc+0x16>
    1224:	8f ef       	ldi	r24, 0xFF	; 255
    1226:	9f ef       	ldi	r25, 0xFF	; 255
    1228:	2c c0       	rjmp	.+88     	; 0x1282 <fputc+0x6e>
    122a:	22 ff       	sbrs	r18, 2
    122c:	16 c0       	rjmp	.+44     	; 0x125a <fputc+0x46>
    122e:	46 81       	ldd	r20, Z+6	; 0x06
    1230:	57 81       	ldd	r21, Z+7	; 0x07
    1232:	24 81       	ldd	r18, Z+4	; 0x04
    1234:	35 81       	ldd	r19, Z+5	; 0x05
    1236:	42 17       	cp	r20, r18
    1238:	53 07       	cpc	r21, r19
    123a:	44 f4       	brge	.+16     	; 0x124c <fputc+0x38>
    123c:	a0 81       	ld	r26, Z
    123e:	b1 81       	ldd	r27, Z+1	; 0x01
    1240:	9d 01       	movw	r18, r26
    1242:	2f 5f       	subi	r18, 0xFF	; 255
    1244:	3f 4f       	sbci	r19, 0xFF	; 255
    1246:	20 83       	st	Z, r18
    1248:	31 83       	std	Z+1, r19	; 0x01
    124a:	8c 93       	st	X, r24
    124c:	26 81       	ldd	r18, Z+6	; 0x06
    124e:	37 81       	ldd	r19, Z+7	; 0x07
    1250:	2f 5f       	subi	r18, 0xFF	; 255
    1252:	3f 4f       	sbci	r19, 0xFF	; 255
    1254:	26 83       	std	Z+6, r18	; 0x06
    1256:	37 83       	std	Z+7, r19	; 0x07
    1258:	14 c0       	rjmp	.+40     	; 0x1282 <fputc+0x6e>
    125a:	8b 01       	movw	r16, r22
    125c:	ec 01       	movw	r28, r24
    125e:	fb 01       	movw	r30, r22
    1260:	00 84       	ldd	r0, Z+8	; 0x08
    1262:	f1 85       	ldd	r31, Z+9	; 0x09
    1264:	e0 2d       	mov	r30, r0
    1266:	09 95       	icall
    1268:	89 2b       	or	r24, r25
    126a:	e1 f6       	brne	.-72     	; 0x1224 <fputc+0x10>
    126c:	d8 01       	movw	r26, r16
    126e:	16 96       	adiw	r26, 0x06	; 6
    1270:	8d 91       	ld	r24, X+
    1272:	9c 91       	ld	r25, X
    1274:	17 97       	sbiw	r26, 0x07	; 7
    1276:	01 96       	adiw	r24, 0x01	; 1
    1278:	16 96       	adiw	r26, 0x06	; 6
    127a:	8d 93       	st	X+, r24
    127c:	9c 93       	st	X, r25
    127e:	17 97       	sbiw	r26, 0x07	; 7
    1280:	ce 01       	movw	r24, r28
    1282:	df 91       	pop	r29
    1284:	cf 91       	pop	r28
    1286:	1f 91       	pop	r17
    1288:	0f 91       	pop	r16
    128a:	08 95       	ret

0000128c <__ultoa_invert>:
    128c:	fa 01       	movw	r30, r20
    128e:	aa 27       	eor	r26, r26
    1290:	28 30       	cpi	r18, 0x08	; 8
    1292:	51 f1       	breq	.+84     	; 0x12e8 <__ultoa_invert+0x5c>
    1294:	20 31       	cpi	r18, 0x10	; 16
    1296:	81 f1       	breq	.+96     	; 0x12f8 <__ultoa_invert+0x6c>
    1298:	e8 94       	clt
    129a:	6f 93       	push	r22
    129c:	6e 7f       	andi	r22, 0xFE	; 254
    129e:	6e 5f       	subi	r22, 0xFE	; 254
    12a0:	7f 4f       	sbci	r23, 0xFF	; 255
    12a2:	8f 4f       	sbci	r24, 0xFF	; 255
    12a4:	9f 4f       	sbci	r25, 0xFF	; 255
    12a6:	af 4f       	sbci	r26, 0xFF	; 255
    12a8:	b1 e0       	ldi	r27, 0x01	; 1
    12aa:	3e d0       	rcall	.+124    	; 0x1328 <__ultoa_invert+0x9c>
    12ac:	b4 e0       	ldi	r27, 0x04	; 4
    12ae:	3c d0       	rcall	.+120    	; 0x1328 <__ultoa_invert+0x9c>
    12b0:	67 0f       	add	r22, r23
    12b2:	78 1f       	adc	r23, r24
    12b4:	89 1f       	adc	r24, r25
    12b6:	9a 1f       	adc	r25, r26
    12b8:	a1 1d       	adc	r26, r1
    12ba:	68 0f       	add	r22, r24
    12bc:	79 1f       	adc	r23, r25
    12be:	8a 1f       	adc	r24, r26
    12c0:	91 1d       	adc	r25, r1
    12c2:	a1 1d       	adc	r26, r1
    12c4:	6a 0f       	add	r22, r26
    12c6:	71 1d       	adc	r23, r1
    12c8:	81 1d       	adc	r24, r1
    12ca:	91 1d       	adc	r25, r1
    12cc:	a1 1d       	adc	r26, r1
    12ce:	20 d0       	rcall	.+64     	; 0x1310 <__ultoa_invert+0x84>
    12d0:	09 f4       	brne	.+2      	; 0x12d4 <__ultoa_invert+0x48>
    12d2:	68 94       	set
    12d4:	3f 91       	pop	r19
    12d6:	2a e0       	ldi	r18, 0x0A	; 10
    12d8:	26 9f       	mul	r18, r22
    12da:	11 24       	eor	r1, r1
    12dc:	30 19       	sub	r19, r0
    12de:	30 5d       	subi	r19, 0xD0	; 208
    12e0:	31 93       	st	Z+, r19
    12e2:	de f6       	brtc	.-74     	; 0x129a <__ultoa_invert+0xe>
    12e4:	cf 01       	movw	r24, r30
    12e6:	08 95       	ret
    12e8:	46 2f       	mov	r20, r22
    12ea:	47 70       	andi	r20, 0x07	; 7
    12ec:	40 5d       	subi	r20, 0xD0	; 208
    12ee:	41 93       	st	Z+, r20
    12f0:	b3 e0       	ldi	r27, 0x03	; 3
    12f2:	0f d0       	rcall	.+30     	; 0x1312 <__ultoa_invert+0x86>
    12f4:	c9 f7       	brne	.-14     	; 0x12e8 <__ultoa_invert+0x5c>
    12f6:	f6 cf       	rjmp	.-20     	; 0x12e4 <__ultoa_invert+0x58>
    12f8:	46 2f       	mov	r20, r22
    12fa:	4f 70       	andi	r20, 0x0F	; 15
    12fc:	40 5d       	subi	r20, 0xD0	; 208
    12fe:	4a 33       	cpi	r20, 0x3A	; 58
    1300:	18 f0       	brcs	.+6      	; 0x1308 <__ultoa_invert+0x7c>
    1302:	49 5d       	subi	r20, 0xD9	; 217
    1304:	31 fd       	sbrc	r19, 1
    1306:	40 52       	subi	r20, 0x20	; 32
    1308:	41 93       	st	Z+, r20
    130a:	02 d0       	rcall	.+4      	; 0x1310 <__ultoa_invert+0x84>
    130c:	a9 f7       	brne	.-22     	; 0x12f8 <__ultoa_invert+0x6c>
    130e:	ea cf       	rjmp	.-44     	; 0x12e4 <__ultoa_invert+0x58>
    1310:	b4 e0       	ldi	r27, 0x04	; 4
    1312:	a6 95       	lsr	r26
    1314:	97 95       	ror	r25
    1316:	87 95       	ror	r24
    1318:	77 95       	ror	r23
    131a:	67 95       	ror	r22
    131c:	ba 95       	dec	r27
    131e:	c9 f7       	brne	.-14     	; 0x1312 <__ultoa_invert+0x86>
    1320:	00 97       	sbiw	r24, 0x00	; 0
    1322:	61 05       	cpc	r22, r1
    1324:	71 05       	cpc	r23, r1
    1326:	08 95       	ret
    1328:	9b 01       	movw	r18, r22
    132a:	ac 01       	movw	r20, r24
    132c:	0a 2e       	mov	r0, r26
    132e:	06 94       	lsr	r0
    1330:	57 95       	ror	r21
    1332:	47 95       	ror	r20
    1334:	37 95       	ror	r19
    1336:	27 95       	ror	r18
    1338:	ba 95       	dec	r27
    133a:	c9 f7       	brne	.-14     	; 0x132e <__ultoa_invert+0xa2>
    133c:	62 0f       	add	r22, r18
    133e:	73 1f       	adc	r23, r19
    1340:	84 1f       	adc	r24, r20
    1342:	95 1f       	adc	r25, r21
    1344:	a0 1d       	adc	r26, r0
    1346:	08 95       	ret

00001348 <__prologue_saves__>:
    1348:	2f 92       	push	r2
    134a:	3f 92       	push	r3
    134c:	4f 92       	push	r4
    134e:	5f 92       	push	r5
    1350:	6f 92       	push	r6
    1352:	7f 92       	push	r7
    1354:	8f 92       	push	r8
    1356:	9f 92       	push	r9
    1358:	af 92       	push	r10
    135a:	bf 92       	push	r11
    135c:	cf 92       	push	r12
    135e:	df 92       	push	r13
    1360:	ef 92       	push	r14
    1362:	ff 92       	push	r15
    1364:	0f 93       	push	r16
    1366:	1f 93       	push	r17
    1368:	cf 93       	push	r28
    136a:	df 93       	push	r29
    136c:	cd b7       	in	r28, 0x3d	; 61
    136e:	de b7       	in	r29, 0x3e	; 62
    1370:	ca 1b       	sub	r28, r26
    1372:	db 0b       	sbc	r29, r27
    1374:	cd bf       	out	0x3d, r28	; 61
    1376:	de bf       	out	0x3e, r29	; 62
    1378:	09 94       	ijmp

0000137a <__epilogue_restores__>:
    137a:	2a 88       	ldd	r2, Y+18	; 0x12
    137c:	39 88       	ldd	r3, Y+17	; 0x11
    137e:	48 88       	ldd	r4, Y+16	; 0x10
    1380:	5f 84       	ldd	r5, Y+15	; 0x0f
    1382:	6e 84       	ldd	r6, Y+14	; 0x0e
    1384:	7d 84       	ldd	r7, Y+13	; 0x0d
    1386:	8c 84       	ldd	r8, Y+12	; 0x0c
    1388:	9b 84       	ldd	r9, Y+11	; 0x0b
    138a:	aa 84       	ldd	r10, Y+10	; 0x0a
    138c:	b9 84       	ldd	r11, Y+9	; 0x09
    138e:	c8 84       	ldd	r12, Y+8	; 0x08
    1390:	df 80       	ldd	r13, Y+7	; 0x07
    1392:	ee 80       	ldd	r14, Y+6	; 0x06
    1394:	fd 80       	ldd	r15, Y+5	; 0x05
    1396:	0c 81       	ldd	r16, Y+4	; 0x04
    1398:	1b 81       	ldd	r17, Y+3	; 0x03
    139a:	aa 81       	ldd	r26, Y+2	; 0x02
    139c:	b9 81       	ldd	r27, Y+1	; 0x01
    139e:	ce 0f       	add	r28, r30
    13a0:	d1 1d       	adc	r29, r1
    13a2:	cd bf       	out	0x3d, r28	; 61
    13a4:	de bf       	out	0x3e, r29	; 62
    13a6:	ed 01       	movw	r28, r26
    13a8:	08 95       	ret

000013aa <_exit>:
    13aa:	f8 94       	cli

000013ac <__stop_program>:
    13ac:	ff cf       	rjmp	.-2      	; 0x13ac <__stop_program>
