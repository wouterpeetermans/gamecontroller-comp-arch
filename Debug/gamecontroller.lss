
gamecontroller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000013da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00802000  000013da  0000146e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000006f  00802020  00802020  0000148e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000148e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000014ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b8  00000000  00000000  0000152c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000287b  00000000  00000000  000016e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009dd  00000000  00000000  00003f5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001cd4  00000000  00000000  0000493c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004f8  00000000  00000000  00006610  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00014a05  00000000  00000000  00006b08  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000900  00000000  00000000  0001b50d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  0001be0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00006152  00000000  00000000  0001bf35  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__ctors_end>
       4:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
       8:	0c 94 8b 02 	jmp	0x516	; 0x516 <__vector_2>
       c:	0c 94 c3 02 	jmp	0x586	; 0x586 <__vector_3>
      10:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      14:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      18:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      1c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      20:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      24:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      28:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      2c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      30:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      34:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      38:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      3c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      40:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      44:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      48:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      4c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      50:	0c 94 f1 04 	jmp	0x9e2	; 0x9e2 <__vector_20>
      54:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      58:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      5c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      60:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      64:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      68:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      6c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      70:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      74:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      78:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      7c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      80:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      84:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      88:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      8c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      90:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      94:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      98:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      9c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      a0:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      a4:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      a8:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      ac:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      b0:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      b4:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      b8:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      bc:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      c0:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      c4:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      c8:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      cc:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      d0:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      d4:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      d8:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      dc:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      e0:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      e4:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      e8:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      ec:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      f0:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      f4:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      f8:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      fc:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     100:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     104:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     108:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     10c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     110:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     114:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     118:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     11c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     120:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     124:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     128:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     12c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     130:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     134:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     138:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     13c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     140:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     144:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     148:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     14c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     150:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     154:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     158:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     15c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     160:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     164:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     168:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     16c:	b9 03       	fmulsu	r19, r17
     16e:	a1 03       	fmuls	r18, r17
     170:	a7 03       	fmuls	r18, r23
     172:	ad 03       	fmulsu	r18, r21
     174:	a7 03       	fmuls	r18, r23
     176:	b9 03       	fmulsu	r19, r17
     178:	b3 03       	fmuls	r19, r19
     17a:	a1 03       	fmuls	r18, r17
     17c:	a1 03       	fmuls	r18, r17
     17e:	b3 03       	fmuls	r19, r19
     180:	b9 03       	fmulsu	r19, r17
     182:	a7 03       	fmuls	r18, r23
     184:	ad 03       	fmulsu	r18, r21
     186:	a7 03       	fmuls	r18, r23
     188:	a1 03       	fmuls	r18, r17
     18a:	b9 03       	fmulsu	r19, r17

0000018c <__ctors_end>:
     18c:	11 24       	eor	r1, r1
     18e:	1f be       	out	0x3f, r1	; 63
     190:	cf ef       	ldi	r28, 0xFF	; 255
     192:	cd bf       	out	0x3d, r28	; 61
     194:	d7 e2       	ldi	r29, 0x27	; 39
     196:	de bf       	out	0x3e, r29	; 62

00000198 <__do_copy_data>:
     198:	10 e2       	ldi	r17, 0x20	; 32
     19a:	a0 e0       	ldi	r26, 0x00	; 0
     19c:	b0 e2       	ldi	r27, 0x20	; 32
     19e:	ea ed       	ldi	r30, 0xDA	; 218
     1a0:	f3 e1       	ldi	r31, 0x13	; 19
     1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <__do_copy_data+0x10>
     1a4:	05 90       	lpm	r0, Z+
     1a6:	0d 92       	st	X+, r0
     1a8:	a0 32       	cpi	r26, 0x20	; 32
     1aa:	b1 07       	cpc	r27, r17
     1ac:	d9 f7       	brne	.-10     	; 0x1a4 <__do_copy_data+0xc>

000001ae <__do_clear_bss>:
     1ae:	20 e2       	ldi	r18, 0x20	; 32
     1b0:	a0 e2       	ldi	r26, 0x20	; 32
     1b2:	b0 e2       	ldi	r27, 0x20	; 32
     1b4:	01 c0       	rjmp	.+2      	; 0x1b8 <.do_clear_bss_start>

000001b6 <.do_clear_bss_loop>:
     1b6:	1d 92       	st	X+, r1

000001b8 <.do_clear_bss_start>:
     1b8:	af 38       	cpi	r26, 0x8F	; 143
     1ba:	b2 07       	cpc	r27, r18
     1bc:	e1 f7       	brne	.-8      	; 0x1b6 <.do_clear_bss_loop>
     1be:	0e 94 c6 03 	call	0x78c	; 0x78c <main>
     1c2:	0c 94 eb 09 	jmp	0x13d6	; 0x13d6 <_exit>

000001c6 <__bad_interrupt>:
     1c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001ca <AccInit>:
#include "acc.h"



void AccInit(void)
{
     1ca:	cf 93       	push	r28
     1cc:	df 93       	push	r29
     1ce:	cd b7       	in	r28, 0x3d	; 61
     1d0:	de b7       	in	r29, 0x3e	; 62
 PORTC.DIRSET = 0b01000000; //set PC6 as output
     1d2:	80 e4       	ldi	r24, 0x40	; 64
     1d4:	96 e0       	ldi	r25, 0x06	; 6
     1d6:	20 e4       	ldi	r18, 0x40	; 64
     1d8:	fc 01       	movw	r30, r24
     1da:	21 83       	std	Z+1, r18	; 0x01
 PORTC.PIN6CTRL = 0b00010000; //totem pole configuration with pull down if we would want to turn the acc off 
     1dc:	80 e4       	ldi	r24, 0x40	; 64
     1de:	96 e0       	ldi	r25, 0x06	; 6
     1e0:	20 e1       	ldi	r18, 0x10	; 16
     1e2:	fc 01       	movw	r30, r24
     1e4:	26 8b       	std	Z+22, r18	; 0x16
 PORTC.OUT |= 0b01000000;//turn on output so chip becomes active
     1e6:	80 e4       	ldi	r24, 0x40	; 64
     1e8:	96 e0       	ldi	r25, 0x06	; 6
     1ea:	20 e4       	ldi	r18, 0x40	; 64
     1ec:	36 e0       	ldi	r19, 0x06	; 6
     1ee:	f9 01       	movw	r30, r18
     1f0:	24 81       	ldd	r18, Z+4	; 0x04
     1f2:	20 64       	ori	r18, 0x40	; 64
     1f4:	fc 01       	movw	r30, r24
     1f6:	24 83       	std	Z+4, r18	; 0x04
 PORTA.PIN0CTRL = 0; //all pins set to totem pole inputs with no resistor for adc measurements. 
     1f8:	80 e0       	ldi	r24, 0x00	; 0
     1fa:	96 e0       	ldi	r25, 0x06	; 6
     1fc:	fc 01       	movw	r30, r24
     1fe:	10 8a       	std	Z+16, r1	; 0x10
 PORTA.PIN1CTRL = 0;
     200:	80 e0       	ldi	r24, 0x00	; 0
     202:	96 e0       	ldi	r25, 0x06	; 6
     204:	fc 01       	movw	r30, r24
     206:	11 8a       	std	Z+17, r1	; 0x11
 PORTA.PIN2CTRL = 0;
     208:	80 e0       	ldi	r24, 0x00	; 0
     20a:	96 e0       	ldi	r25, 0x06	; 6
     20c:	fc 01       	movw	r30, r24
     20e:	12 8a       	std	Z+18, r1	; 0x12
 PORTA.PIN4CTRL = 0;
     210:	80 e0       	ldi	r24, 0x00	; 0
     212:	96 e0       	ldi	r25, 0x06	; 6
     214:	fc 01       	movw	r30, r24
     216:	14 8a       	std	Z+20, r1	; 0x14
 PORTA.DIRCLR = 0b00010111;
     218:	80 e0       	ldi	r24, 0x00	; 0
     21a:	96 e0       	ldi	r25, 0x06	; 6
     21c:	27 e1       	ldi	r18, 0x17	; 23
     21e:	fc 01       	movw	r30, r24
     220:	22 83       	std	Z+2, r18	; 0x02


}
     222:	00 00       	nop
     224:	df 91       	pop	r29
     226:	cf 91       	pop	r28
     228:	08 95       	ret

0000022a <AccGetXAxisRaw>:
unsigned int AccGetXAxisRaw(void)
{
     22a:	cf 93       	push	r28
     22c:	df 93       	push	r29
     22e:	cd b7       	in	r28, 0x3d	; 61
     230:	de b7       	in	r29, 0x3e	; 62
	return abs(AnalogGetCh(0,4));//the abs value wil not introduce any problems because we wil never encounter a negative signal 
     232:	64 e0       	ldi	r22, 0x04	; 4
     234:	70 e0       	ldi	r23, 0x00	; 0
     236:	80 e0       	ldi	r24, 0x00	; 0
     238:	90 e0       	ldi	r25, 0x00	; 0
     23a:	0e 94 99 01 	call	0x332	; 0x332 <AnalogGetCh>
     23e:	99 23       	and	r25, r25
     240:	1c f4       	brge	.+6      	; 0x248 <AccGetXAxisRaw+0x1e>
     242:	91 95       	neg	r25
     244:	81 95       	neg	r24
     246:	91 09       	sbc	r25, r1
}
     248:	df 91       	pop	r29
     24a:	cf 91       	pop	r28
     24c:	08 95       	ret

0000024e <AccGetYAxisRaw>:
unsigned int AccGetYAxisRaw(void)
{
     24e:	cf 93       	push	r28
     250:	df 93       	push	r29
     252:	cd b7       	in	r28, 0x3d	; 61
     254:	de b7       	in	r29, 0x3e	; 62
	return abs(AnalogGetCh(1,4));
     256:	64 e0       	ldi	r22, 0x04	; 4
     258:	70 e0       	ldi	r23, 0x00	; 0
     25a:	81 e0       	ldi	r24, 0x01	; 1
     25c:	90 e0       	ldi	r25, 0x00	; 0
     25e:	0e 94 99 01 	call	0x332	; 0x332 <AnalogGetCh>
     262:	99 23       	and	r25, r25
     264:	1c f4       	brge	.+6      	; 0x26c <AccGetYAxisRaw+0x1e>
     266:	91 95       	neg	r25
     268:	81 95       	neg	r24
     26a:	91 09       	sbc	r25, r1
}
     26c:	df 91       	pop	r29
     26e:	cf 91       	pop	r28
     270:	08 95       	ret

00000272 <AccGetZAxisRaw>:
unsigned int AccGetZAxisRaw(void)
{
     272:	cf 93       	push	r28
     274:	df 93       	push	r29
     276:	cd b7       	in	r28, 0x3d	; 61
     278:	de b7       	in	r29, 0x3e	; 62
	return abs(AnalogGetCh(2,4));
     27a:	64 e0       	ldi	r22, 0x04	; 4
     27c:	70 e0       	ldi	r23, 0x00	; 0
     27e:	82 e0       	ldi	r24, 0x02	; 2
     280:	90 e0       	ldi	r25, 0x00	; 0
     282:	0e 94 99 01 	call	0x332	; 0x332 <AnalogGetCh>
     286:	99 23       	and	r25, r25
     288:	1c f4       	brge	.+6      	; 0x290 <AccGetZAxisRaw+0x1e>
     28a:	91 95       	neg	r25
     28c:	81 95       	neg	r24
     28e:	91 09       	sbc	r25, r1
}
     290:	df 91       	pop	r29
     292:	cf 91       	pop	r28
     294:	08 95       	ret

00000296 <AccGetXAxis>:

int AccGetXAxis(unsigned int AccRaw)
{
     296:	cf 93       	push	r28
     298:	df 93       	push	r29
     29a:	00 d0       	rcall	.+0      	; 0x29c <AccGetXAxis+0x6>
     29c:	cd b7       	in	r28, 0x3d	; 61
     29e:	de b7       	in	r29, 0x3e	; 62
     2a0:	89 83       	std	Y+1, r24	; 0x01
     2a2:	9a 83       	std	Y+2, r25	; 0x02
	return AccRaw - 300;
     2a4:	89 81       	ldd	r24, Y+1	; 0x01
     2a6:	9a 81       	ldd	r25, Y+2	; 0x02
     2a8:	8c 52       	subi	r24, 0x2C	; 44
     2aa:	91 40       	sbci	r25, 0x01	; 1
}
     2ac:	0f 90       	pop	r0
     2ae:	0f 90       	pop	r0
     2b0:	df 91       	pop	r29
     2b2:	cf 91       	pop	r28
     2b4:	08 95       	ret

000002b6 <AccGetYAxis>:

int AccGetYAxis(unsigned int AccRaw)
{
     2b6:	cf 93       	push	r28
     2b8:	df 93       	push	r29
     2ba:	00 d0       	rcall	.+0      	; 0x2bc <AccGetYAxis+0x6>
     2bc:	cd b7       	in	r28, 0x3d	; 61
     2be:	de b7       	in	r29, 0x3e	; 62
     2c0:	89 83       	std	Y+1, r24	; 0x01
     2c2:	9a 83       	std	Y+2, r25	; 0x02
	return AccRaw - 350;
     2c4:	89 81       	ldd	r24, Y+1	; 0x01
     2c6:	9a 81       	ldd	r25, Y+2	; 0x02
     2c8:	8e 55       	subi	r24, 0x5E	; 94
     2ca:	91 40       	sbci	r25, 0x01	; 1
}
     2cc:	0f 90       	pop	r0
     2ce:	0f 90       	pop	r0
     2d0:	df 91       	pop	r29
     2d2:	cf 91       	pop	r28
     2d4:	08 95       	ret

000002d6 <AccGetZAxis>:

int AccGetZAxis(unsigned int AccRaw)
{
     2d6:	cf 93       	push	r28
     2d8:	df 93       	push	r29
     2da:	00 d0       	rcall	.+0      	; 0x2dc <AccGetZAxis+0x6>
     2dc:	cd b7       	in	r28, 0x3d	; 61
     2de:	de b7       	in	r29, 0x3e	; 62
     2e0:	89 83       	std	Y+1, r24	; 0x01
     2e2:	9a 83       	std	Y+2, r25	; 0x02
	return AccRaw - 200;
     2e4:	89 81       	ldd	r24, Y+1	; 0x01
     2e6:	9a 81       	ldd	r25, Y+2	; 0x02
     2e8:	88 5c       	subi	r24, 0xC8	; 200
     2ea:	91 09       	sbc	r25, r1
}
     2ec:	0f 90       	pop	r0
     2ee:	0f 90       	pop	r0
     2f0:	df 91       	pop	r29
     2f2:	cf 91       	pop	r28
     2f4:	08 95       	ret

000002f6 <AnalogInit>:
#include <inttypes.h>



void AnalogInit(void)
{
     2f6:	cf 93       	push	r28
     2f8:	df 93       	push	r29
     2fa:	cd b7       	in	r28, 0x3d	; 61
     2fc:	de b7       	in	r29, 0x3e	; 62
	ADCA.CTRLA = 0;
     2fe:	80 e0       	ldi	r24, 0x00	; 0
     300:	92 e0       	ldi	r25, 0x02	; 2
     302:	fc 01       	movw	r30, r24
     304:	10 82       	st	Z, r1
	ADCA.CTRLB = 0b00010000; //no current limit signed mode 12bit.
     306:	80 e0       	ldi	r24, 0x00	; 0
     308:	92 e0       	ldi	r25, 0x02	; 2
     30a:	20 e1       	ldi	r18, 0x10	; 16
     30c:	fc 01       	movw	r30, r24
     30e:	21 83       	std	Z+1, r18	; 0x01
	ADCA.REFCTRL = 2; //enable bandgap and set reference to 1v internal source disable temp detection
     310:	80 e0       	ldi	r24, 0x00	; 0
     312:	92 e0       	ldi	r25, 0x02	; 2
     314:	22 e0       	ldi	r18, 0x02	; 2
     316:	fc 01       	movw	r30, r24
     318:	22 83       	std	Z+2, r18	; 0x02
	ADCA.EVCTRL = 0; //no events
     31a:	80 e0       	ldi	r24, 0x00	; 0
     31c:	92 e0       	ldi	r25, 0x02	; 2
     31e:	fc 01       	movw	r30, r24
     320:	13 82       	std	Z+3, r1	; 0x03
	ADCA.PRESCALER = 0; //div 4 prescaler
     322:	80 e0       	ldi	r24, 0x00	; 0
     324:	92 e0       	ldi	r25, 0x02	; 2
     326:	fc 01       	movw	r30, r24
     328:	14 82       	std	Z+4, r1	; 0x04
	
}
     32a:	00 00       	nop
     32c:	df 91       	pop	r29
     32e:	cf 91       	pop	r28
     330:	08 95       	ret

00000332 <AnalogGetCh>:



int AnalogGetCh(int PinPos,int PinNeg)
{
     332:	cf 93       	push	r28
     334:	df 93       	push	r29
     336:	cd b7       	in	r28, 0x3d	; 61
     338:	de b7       	in	r29, 0x3e	; 62
     33a:	64 97       	sbiw	r28, 0x14	; 20
     33c:	cd bf       	out	0x3d, r28	; 61
     33e:	de bf       	out	0x3e, r29	; 62
     340:	89 8b       	std	Y+17, r24	; 0x11
     342:	9a 8b       	std	Y+18, r25	; 0x12
     344:	6b 8b       	std	Y+19, r22	; 0x13
     346:	7c 8b       	std	Y+20, r23	; 0x14
	ADCA.CH0.MUXCTRL = (((uint8_t) PinPos) << 3) | ((uint8_t) PinNeg);
     348:	80 e0       	ldi	r24, 0x00	; 0
     34a:	92 e0       	ldi	r25, 0x02	; 2
     34c:	29 89       	ldd	r18, Y+17	; 0x11
     34e:	3a 89       	ldd	r19, Y+18	; 0x12
     350:	33 27       	eor	r19, r19
     352:	22 0f       	add	r18, r18
     354:	33 1f       	adc	r19, r19
     356:	22 0f       	add	r18, r18
     358:	33 1f       	adc	r19, r19
     35a:	22 0f       	add	r18, r18
     35c:	33 1f       	adc	r19, r19
     35e:	32 2f       	mov	r19, r18
     360:	2b 89       	ldd	r18, Y+19	; 0x13
     362:	23 2b       	or	r18, r19
     364:	fc 01       	movw	r30, r24
     366:	21 a3       	std	Z+33, r18	; 0x21
	ADCA.CTRLA = 7; //flush all data and start measurement enable adc
     368:	80 e0       	ldi	r24, 0x00	; 0
     36a:	92 e0       	ldi	r25, 0x02	; 2
     36c:	27 e0       	ldi	r18, 0x07	; 7
     36e:	fc 01       	movw	r30, r24
     370:	20 83       	st	Z, r18
	ADCA.CH0.CTRL = 0b10000011; //gain 1 difwgain mode
     372:	80 e0       	ldi	r24, 0x00	; 0
     374:	92 e0       	ldi	r25, 0x02	; 2
     376:	23 e8       	ldi	r18, 0x83	; 131
     378:	fc 01       	movw	r30, r24
     37a:	20 a3       	std	Z+32, r18	; 0x20
     37c:	80 e0       	ldi	r24, 0x00	; 0
     37e:	90 e0       	ldi	r25, 0x00	; 0
     380:	a0 e8       	ldi	r26, 0x80	; 128
     382:	bf e3       	ldi	r27, 0x3F	; 63
     384:	8b 83       	std	Y+3, r24	; 0x03
     386:	9c 83       	std	Y+4, r25	; 0x04
     388:	ad 83       	std	Y+5, r26	; 0x05
     38a:	be 83       	std	Y+6, r27	; 0x06

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     38c:	20 e0       	ldi	r18, 0x00	; 0
     38e:	30 e0       	ldi	r19, 0x00	; 0
     390:	4a e7       	ldi	r20, 0x7A	; 122
     392:	53 e4       	ldi	r21, 0x43	; 67
     394:	6b 81       	ldd	r22, Y+3	; 0x03
     396:	7c 81       	ldd	r23, Y+4	; 0x04
     398:	8d 81       	ldd	r24, Y+5	; 0x05
     39a:	9e 81       	ldd	r25, Y+6	; 0x06
     39c:	0e 94 3c 06 	call	0xc78	; 0xc78 <__mulsf3>
     3a0:	dc 01       	movw	r26, r24
     3a2:	cb 01       	movw	r24, r22
     3a4:	8f 83       	std	Y+7, r24	; 0x07
     3a6:	98 87       	std	Y+8, r25	; 0x08
     3a8:	a9 87       	std	Y+9, r26	; 0x09
     3aa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     3ac:	20 e0       	ldi	r18, 0x00	; 0
     3ae:	30 e0       	ldi	r19, 0x00	; 0
     3b0:	40 e8       	ldi	r20, 0x80	; 128
     3b2:	5f e3       	ldi	r21, 0x3F	; 63
     3b4:	6f 81       	ldd	r22, Y+7	; 0x07
     3b6:	78 85       	ldd	r23, Y+8	; 0x08
     3b8:	89 85       	ldd	r24, Y+9	; 0x09
     3ba:	9a 85       	ldd	r25, Y+10	; 0x0a
     3bc:	0e 94 b6 05 	call	0xb6c	; 0xb6c <__cmpsf2>
     3c0:	88 23       	and	r24, r24
     3c2:	2c f4       	brge	.+10     	; 0x3ce <AnalogGetCh+0x9c>
		__ticks = 1;
     3c4:	81 e0       	ldi	r24, 0x01	; 1
     3c6:	90 e0       	ldi	r25, 0x00	; 0
     3c8:	8b 87       	std	Y+11, r24	; 0x0b
     3ca:	9c 87       	std	Y+12, r25	; 0x0c
     3cc:	3f c0       	rjmp	.+126    	; 0x44c <__FUSE_REGION_LENGTH__+0x4c>
	else if (__tmp > 65535)
     3ce:	20 e0       	ldi	r18, 0x00	; 0
     3d0:	3f ef       	ldi	r19, 0xFF	; 255
     3d2:	4f e7       	ldi	r20, 0x7F	; 127
     3d4:	57 e4       	ldi	r21, 0x47	; 71
     3d6:	6f 81       	ldd	r22, Y+7	; 0x07
     3d8:	78 85       	ldd	r23, Y+8	; 0x08
     3da:	89 85       	ldd	r24, Y+9	; 0x09
     3dc:	9a 85       	ldd	r25, Y+10	; 0x0a
     3de:	0e 94 37 06 	call	0xc6e	; 0xc6e <__gesf2>
     3e2:	18 16       	cp	r1, r24
     3e4:	4c f5       	brge	.+82     	; 0x438 <__FUSE_REGION_LENGTH__+0x38>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     3e6:	20 e0       	ldi	r18, 0x00	; 0
     3e8:	30 e0       	ldi	r19, 0x00	; 0
     3ea:	40 e2       	ldi	r20, 0x20	; 32
     3ec:	51 e4       	ldi	r21, 0x41	; 65
     3ee:	6b 81       	ldd	r22, Y+3	; 0x03
     3f0:	7c 81       	ldd	r23, Y+4	; 0x04
     3f2:	8d 81       	ldd	r24, Y+5	; 0x05
     3f4:	9e 81       	ldd	r25, Y+6	; 0x06
     3f6:	0e 94 3c 06 	call	0xc78	; 0xc78 <__mulsf3>
     3fa:	dc 01       	movw	r26, r24
     3fc:	cb 01       	movw	r24, r22
     3fe:	bc 01       	movw	r22, r24
     400:	cd 01       	movw	r24, r26
     402:	0e 94 bb 05 	call	0xb76	; 0xb76 <__fixunssfsi>
     406:	dc 01       	movw	r26, r24
     408:	cb 01       	movw	r24, r22
     40a:	8b 87       	std	Y+11, r24	; 0x0b
     40c:	9c 87       	std	Y+12, r25	; 0x0c
     40e:	0f c0       	rjmp	.+30     	; 0x42e <__FUSE_REGION_LENGTH__+0x2e>
     410:	89 e1       	ldi	r24, 0x19	; 25
     412:	90 e0       	ldi	r25, 0x00	; 0
     414:	8d 87       	std	Y+13, r24	; 0x0d
     416:	9e 87       	std	Y+14, r25	; 0x0e
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     418:	8d 85       	ldd	r24, Y+13	; 0x0d
     41a:	9e 85       	ldd	r25, Y+14	; 0x0e
     41c:	01 97       	sbiw	r24, 0x01	; 1
     41e:	f1 f7       	brne	.-4      	; 0x41c <__FUSE_REGION_LENGTH__+0x1c>
     420:	8d 87       	std	Y+13, r24	; 0x0d
     422:	9e 87       	std	Y+14, r25	; 0x0e
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     424:	8b 85       	ldd	r24, Y+11	; 0x0b
     426:	9c 85       	ldd	r25, Y+12	; 0x0c
     428:	01 97       	sbiw	r24, 0x01	; 1
     42a:	8b 87       	std	Y+11, r24	; 0x0b
     42c:	9c 87       	std	Y+12, r25	; 0x0c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     42e:	8b 85       	ldd	r24, Y+11	; 0x0b
     430:	9c 85       	ldd	r25, Y+12	; 0x0c
     432:	89 2b       	or	r24, r25
     434:	69 f7       	brne	.-38     	; 0x410 <__FUSE_REGION_LENGTH__+0x10>
     436:	14 c0       	rjmp	.+40     	; 0x460 <__FUSE_REGION_LENGTH__+0x60>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     438:	6f 81       	ldd	r22, Y+7	; 0x07
     43a:	78 85       	ldd	r23, Y+8	; 0x08
     43c:	89 85       	ldd	r24, Y+9	; 0x09
     43e:	9a 85       	ldd	r25, Y+10	; 0x0a
     440:	0e 94 bb 05 	call	0xb76	; 0xb76 <__fixunssfsi>
     444:	dc 01       	movw	r26, r24
     446:	cb 01       	movw	r24, r22
     448:	8b 87       	std	Y+11, r24	; 0x0b
     44a:	9c 87       	std	Y+12, r25	; 0x0c
     44c:	8b 85       	ldd	r24, Y+11	; 0x0b
     44e:	9c 85       	ldd	r25, Y+12	; 0x0c
     450:	8f 87       	std	Y+15, r24	; 0x0f
     452:	98 8b       	std	Y+16, r25	; 0x10
     454:	8f 85       	ldd	r24, Y+15	; 0x0f
     456:	98 89       	ldd	r25, Y+16	; 0x10
     458:	01 97       	sbiw	r24, 0x01	; 1
     45a:	f1 f7       	brne	.-4      	; 0x458 <__FUSE_REGION_LENGTH__+0x58>
     45c:	8f 87       	std	Y+15, r24	; 0x0f
     45e:	98 8b       	std	Y+16, r25	; 0x10
	//while(!ADCA.CH0.RES){ //wait for data in the register. can be done with interupt ... (didn't work)
		//
	//}
	_delay_ms(1);//delay to wait for measurement to complete 
	int result = ADCA.CH0.RES;
     460:	80 e0       	ldi	r24, 0x00	; 0
     462:	92 e0       	ldi	r25, 0x02	; 2
     464:	fc 01       	movw	r30, r24
     466:	84 a1       	ldd	r24, Z+36	; 0x24
     468:	95 a1       	ldd	r25, Z+37	; 0x25
     46a:	89 83       	std	Y+1, r24	; 0x01
     46c:	9a 83       	std	Y+2, r25	; 0x02
	ADCA.CTRLA = 0; //turn of adc
     46e:	80 e0       	ldi	r24, 0x00	; 0
     470:	92 e0       	ldi	r25, 0x02	; 2
     472:	fc 01       	movw	r30, r24
     474:	10 82       	st	Z, r1
	return result;
     476:	89 81       	ldd	r24, Y+1	; 0x01
     478:	9a 81       	ldd	r25, Y+2	; 0x02
}
     47a:	64 96       	adiw	r28, 0x14	; 20
     47c:	cd bf       	out	0x3d, r28	; 61
     47e:	de bf       	out	0x3e, r29	; 62
     480:	df 91       	pop	r29
     482:	cf 91       	pop	r28
     484:	08 95       	ret

00000486 <ClockInit>:
#pragma GCC push_options
#pragma GCC optimize ("O2") //This function must be optimized to avoid too long time interval betwee CCP write and CLK.CTRL write (4 CLK CYC max)

void ClockInit(void)
{
	OSC.XOSCCTRL=0b11001011; //Clock<=16MHz	
     486:	8b ec       	ldi	r24, 0xCB	; 203
     488:	80 93 52 00 	sts	0x0052, r24	; 0x800052 <__TEXT_REGION_LENGTH__+0x700052>
	OSC.CTRL=0b01000; //Enable oscillator	
     48c:	88 e0       	ldi	r24, 0x08	; 8
     48e:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
	while (!(OSC.STATUS&0b1000)); //Wait until XTAL osc is ready
     492:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
     496:	83 ff       	sbrs	r24, 3
     498:	fc cf       	rjmp	.-8      	; 0x492 <ClockInit+0xc>
	
	//Select XTAL osc as system CLK source
	CCP=0xd8;
     49a:	88 ed       	ldi	r24, 0xD8	; 216
     49c:	84 bf       	out	0x34, r24	; 52
    CLK.CTRL=0b0011;
     49e:	83 e0       	ldi	r24, 0x03	; 3
     4a0:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
     4a4:	08 95       	ret

000004a6 <EncoderInit>:
	
}
int EncoderGetPos(void)
{
	return encoderPos;
}
     4a6:	cf 93       	push	r28
     4a8:	df 93       	push	r29
     4aa:	cd b7       	in	r28, 0x3d	; 61
     4ac:	de b7       	in	r29, 0x3e	; 62
     4ae:	80 e4       	ldi	r24, 0x40	; 64
     4b0:	96 e0       	ldi	r25, 0x06	; 6
     4b2:	20 e4       	ldi	r18, 0x40	; 64
     4b4:	36 e0       	ldi	r19, 0x06	; 6
     4b6:	f9 01       	movw	r30, r18
     4b8:	20 81       	ld	r18, Z
     4ba:	2f 7c       	andi	r18, 0xCF	; 207
     4bc:	fc 01       	movw	r30, r24
     4be:	20 83       	st	Z, r18
     4c0:	80 e4       	ldi	r24, 0x40	; 64
     4c2:	96 e0       	ldi	r25, 0x06	; 6
     4c4:	28 e1       	ldi	r18, 0x18	; 24
     4c6:	fc 01       	movw	r30, r24
     4c8:	24 8b       	std	Z+20, r18	; 0x14
     4ca:	80 e4       	ldi	r24, 0x40	; 64
     4cc:	96 e0       	ldi	r25, 0x06	; 6
     4ce:	28 e1       	ldi	r18, 0x18	; 24
     4d0:	fc 01       	movw	r30, r24
     4d2:	25 8b       	std	Z+21, r18	; 0x15
     4d4:	80 e4       	ldi	r24, 0x40	; 64
     4d6:	96 e0       	ldi	r25, 0x06	; 6
     4d8:	2f e0       	ldi	r18, 0x0F	; 15
     4da:	fc 01       	movw	r30, r24
     4dc:	21 87       	std	Z+9, r18	; 0x09
     4de:	80 e4       	ldi	r24, 0x40	; 64
     4e0:	96 e0       	ldi	r25, 0x06	; 6
     4e2:	20 e1       	ldi	r18, 0x10	; 16
     4e4:	fc 01       	movw	r30, r24
     4e6:	22 87       	std	Z+10, r18	; 0x0a
     4e8:	80 e4       	ldi	r24, 0x40	; 64
     4ea:	96 e0       	ldi	r25, 0x06	; 6
     4ec:	20 e2       	ldi	r18, 0x20	; 32
     4ee:	fc 01       	movw	r30, r24
     4f0:	23 87       	std	Z+11, r18	; 0x0b
     4f2:	8f e3       	ldi	r24, 0x3F	; 63
     4f4:	90 e0       	ldi	r25, 0x00	; 0
     4f6:	2f e3       	ldi	r18, 0x3F	; 63
     4f8:	30 e0       	ldi	r19, 0x00	; 0
     4fa:	f9 01       	movw	r30, r18
     4fc:	20 81       	ld	r18, Z
     4fe:	20 68       	ori	r18, 0x80	; 128
     500:	fc 01       	movw	r30, r24
     502:	20 83       	st	Z, r18
     504:	80 ea       	ldi	r24, 0xA0	; 160
     506:	90 e0       	ldi	r25, 0x00	; 0
     508:	24 e0       	ldi	r18, 0x04	; 4
     50a:	fc 01       	movw	r30, r24
     50c:	22 83       	std	Z+2, r18	; 0x02
     50e:	00 00       	nop
     510:	df 91       	pop	r29
     512:	cf 91       	pop	r28
     514:	08 95       	ret

00000516 <__vector_2>:

ISR(PORTC_INT0_vect){
     516:	1f 92       	push	r1
     518:	0f 92       	push	r0
     51a:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     51e:	0f 92       	push	r0
     520:	11 24       	eor	r1, r1
     522:	2f 93       	push	r18
     524:	3f 93       	push	r19
     526:	4f 93       	push	r20
     528:	5f 93       	push	r21
     52a:	6f 93       	push	r22
     52c:	7f 93       	push	r23
     52e:	8f 93       	push	r24
     530:	9f 93       	push	r25
     532:	af 93       	push	r26
     534:	bf 93       	push	r27
     536:	ef 93       	push	r30
     538:	ff 93       	push	r31
     53a:	cf 93       	push	r28
     53c:	df 93       	push	r29
     53e:	cd b7       	in	r28, 0x3d	; 61
     540:	de b7       	in	r29, 0x3e	; 62
	
	encoderPos += readEncoder();
     542:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <readEncoder>
     546:	9c 01       	movw	r18, r24
     548:	80 91 20 20 	lds	r24, 0x2020	; 0x802020 <__data_end>
     54c:	90 91 21 20 	lds	r25, 0x2021	; 0x802021 <__data_end+0x1>
     550:	82 0f       	add	r24, r18
     552:	93 1f       	adc	r25, r19
     554:	80 93 20 20 	sts	0x2020, r24	; 0x802020 <__data_end>
     558:	90 93 21 20 	sts	0x2021, r25	; 0x802021 <__data_end+0x1>
}
     55c:	00 00       	nop
     55e:	df 91       	pop	r29
     560:	cf 91       	pop	r28
     562:	ff 91       	pop	r31
     564:	ef 91       	pop	r30
     566:	bf 91       	pop	r27
     568:	af 91       	pop	r26
     56a:	9f 91       	pop	r25
     56c:	8f 91       	pop	r24
     56e:	7f 91       	pop	r23
     570:	6f 91       	pop	r22
     572:	5f 91       	pop	r21
     574:	4f 91       	pop	r20
     576:	3f 91       	pop	r19
     578:	2f 91       	pop	r18
     57a:	0f 90       	pop	r0
     57c:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     580:	0f 90       	pop	r0
     582:	1f 90       	pop	r1
     584:	18 95       	reti

00000586 <__vector_3>:

ISR(PORTC_INT1_vect){
     586:	1f 92       	push	r1
     588:	0f 92       	push	r0
     58a:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     58e:	0f 92       	push	r0
     590:	11 24       	eor	r1, r1
     592:	2f 93       	push	r18
     594:	3f 93       	push	r19
     596:	4f 93       	push	r20
     598:	5f 93       	push	r21
     59a:	6f 93       	push	r22
     59c:	7f 93       	push	r23
     59e:	8f 93       	push	r24
     5a0:	9f 93       	push	r25
     5a2:	af 93       	push	r26
     5a4:	bf 93       	push	r27
     5a6:	ef 93       	push	r30
     5a8:	ff 93       	push	r31
     5aa:	cf 93       	push	r28
     5ac:	df 93       	push	r29
     5ae:	cd b7       	in	r28, 0x3d	; 61
     5b0:	de b7       	in	r29, 0x3e	; 62
	encoderPos += readEncoder();
     5b2:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <readEncoder>
     5b6:	9c 01       	movw	r18, r24
     5b8:	80 91 20 20 	lds	r24, 0x2020	; 0x802020 <__data_end>
     5bc:	90 91 21 20 	lds	r25, 0x2021	; 0x802021 <__data_end+0x1>
     5c0:	82 0f       	add	r24, r18
     5c2:	93 1f       	adc	r25, r19
     5c4:	80 93 20 20 	sts	0x2020, r24	; 0x802020 <__data_end>
     5c8:	90 93 21 20 	sts	0x2021, r25	; 0x802021 <__data_end+0x1>
}
     5cc:	00 00       	nop
     5ce:	df 91       	pop	r29
     5d0:	cf 91       	pop	r28
     5d2:	ff 91       	pop	r31
     5d4:	ef 91       	pop	r30
     5d6:	bf 91       	pop	r27
     5d8:	af 91       	pop	r26
     5da:	9f 91       	pop	r25
     5dc:	8f 91       	pop	r24
     5de:	7f 91       	pop	r23
     5e0:	6f 91       	pop	r22
     5e2:	5f 91       	pop	r21
     5e4:	4f 91       	pop	r20
     5e6:	3f 91       	pop	r19
     5e8:	2f 91       	pop	r18
     5ea:	0f 90       	pop	r0
     5ec:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     5f0:	0f 90       	pop	r0
     5f2:	1f 90       	pop	r1
     5f4:	18 95       	reti

000005f6 <readEncoder>:
		}
		state = (s >> 2);
	}
*/

int readEncoder(){
     5f6:	cf 93       	push	r28
     5f8:	df 93       	push	r29
     5fa:	cd b7       	in	r28, 0x3d	; 61
     5fc:	de b7       	in	r29, 0x3e	; 62
     5fe:	61 97       	sbiw	r28, 0x11	; 17
     600:	cd bf       	out	0x3d, r28	; 61
     602:	de bf       	out	0x3e, r29	; 62
     604:	80 e0       	ldi	r24, 0x00	; 0
     606:	90 e0       	ldi	r25, 0x00	; 0
     608:	a0 e0       	ldi	r26, 0x00	; 0
     60a:	b0 e4       	ldi	r27, 0x40	; 64
     60c:	8c 83       	std	Y+4, r24	; 0x04
     60e:	9d 83       	std	Y+5, r25	; 0x05
     610:	ae 83       	std	Y+6, r26	; 0x06
     612:	bf 83       	std	Y+7, r27	; 0x07

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     614:	20 e0       	ldi	r18, 0x00	; 0
     616:	30 e0       	ldi	r19, 0x00	; 0
     618:	4a e7       	ldi	r20, 0x7A	; 122
     61a:	55 e4       	ldi	r21, 0x45	; 69
     61c:	6c 81       	ldd	r22, Y+4	; 0x04
     61e:	7d 81       	ldd	r23, Y+5	; 0x05
     620:	8e 81       	ldd	r24, Y+6	; 0x06
     622:	9f 81       	ldd	r25, Y+7	; 0x07
     624:	0e 94 3c 06 	call	0xc78	; 0xc78 <__mulsf3>
     628:	dc 01       	movw	r26, r24
     62a:	cb 01       	movw	r24, r22
     62c:	88 87       	std	Y+8, r24	; 0x08
     62e:	99 87       	std	Y+9, r25	; 0x09
     630:	aa 87       	std	Y+10, r26	; 0x0a
     632:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
     634:	20 e0       	ldi	r18, 0x00	; 0
     636:	30 e0       	ldi	r19, 0x00	; 0
     638:	40 e8       	ldi	r20, 0x80	; 128
     63a:	5f e3       	ldi	r21, 0x3F	; 63
     63c:	68 85       	ldd	r22, Y+8	; 0x08
     63e:	79 85       	ldd	r23, Y+9	; 0x09
     640:	8a 85       	ldd	r24, Y+10	; 0x0a
     642:	9b 85       	ldd	r25, Y+11	; 0x0b
     644:	0e 94 b6 05 	call	0xb6c	; 0xb6c <__cmpsf2>
     648:	88 23       	and	r24, r24
     64a:	2c f4       	brge	.+10     	; 0x656 <readEncoder+0x60>
		__ticks = 1;
     64c:	81 e0       	ldi	r24, 0x01	; 1
     64e:	90 e0       	ldi	r25, 0x00	; 0
     650:	8c 87       	std	Y+12, r24	; 0x0c
     652:	9d 87       	std	Y+13, r25	; 0x0d
     654:	3f c0       	rjmp	.+126    	; 0x6d4 <readEncoder+0xde>
	else if (__tmp > 65535)
     656:	20 e0       	ldi	r18, 0x00	; 0
     658:	3f ef       	ldi	r19, 0xFF	; 255
     65a:	4f e7       	ldi	r20, 0x7F	; 127
     65c:	57 e4       	ldi	r21, 0x47	; 71
     65e:	68 85       	ldd	r22, Y+8	; 0x08
     660:	79 85       	ldd	r23, Y+9	; 0x09
     662:	8a 85       	ldd	r24, Y+10	; 0x0a
     664:	9b 85       	ldd	r25, Y+11	; 0x0b
     666:	0e 94 37 06 	call	0xc6e	; 0xc6e <__gesf2>
     66a:	18 16       	cp	r1, r24
     66c:	4c f5       	brge	.+82     	; 0x6c0 <readEncoder+0xca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     66e:	20 e0       	ldi	r18, 0x00	; 0
     670:	30 e0       	ldi	r19, 0x00	; 0
     672:	40 e2       	ldi	r20, 0x20	; 32
     674:	51 e4       	ldi	r21, 0x41	; 65
     676:	6c 81       	ldd	r22, Y+4	; 0x04
     678:	7d 81       	ldd	r23, Y+5	; 0x05
     67a:	8e 81       	ldd	r24, Y+6	; 0x06
     67c:	9f 81       	ldd	r25, Y+7	; 0x07
     67e:	0e 94 3c 06 	call	0xc78	; 0xc78 <__mulsf3>
     682:	dc 01       	movw	r26, r24
     684:	cb 01       	movw	r24, r22
     686:	bc 01       	movw	r22, r24
     688:	cd 01       	movw	r24, r26
     68a:	0e 94 bb 05 	call	0xb76	; 0xb76 <__fixunssfsi>
     68e:	dc 01       	movw	r26, r24
     690:	cb 01       	movw	r24, r22
     692:	8c 87       	std	Y+12, r24	; 0x0c
     694:	9d 87       	std	Y+13, r25	; 0x0d
     696:	0f c0       	rjmp	.+30     	; 0x6b6 <readEncoder+0xc0>
     698:	80 e9       	ldi	r24, 0x90	; 144
     69a:	91 e0       	ldi	r25, 0x01	; 1
     69c:	8e 87       	std	Y+14, r24	; 0x0e
     69e:	9f 87       	std	Y+15, r25	; 0x0f
     6a0:	8e 85       	ldd	r24, Y+14	; 0x0e
     6a2:	9f 85       	ldd	r25, Y+15	; 0x0f
     6a4:	01 97       	sbiw	r24, 0x01	; 1
     6a6:	f1 f7       	brne	.-4      	; 0x6a4 <readEncoder+0xae>
     6a8:	8e 87       	std	Y+14, r24	; 0x0e
     6aa:	9f 87       	std	Y+15, r25	; 0x0f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6ac:	8c 85       	ldd	r24, Y+12	; 0x0c
     6ae:	9d 85       	ldd	r25, Y+13	; 0x0d
     6b0:	01 97       	sbiw	r24, 0x01	; 1
     6b2:	8c 87       	std	Y+12, r24	; 0x0c
     6b4:	9d 87       	std	Y+13, r25	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     6b6:	8c 85       	ldd	r24, Y+12	; 0x0c
     6b8:	9d 85       	ldd	r25, Y+13	; 0x0d
     6ba:	89 2b       	or	r24, r25
     6bc:	69 f7       	brne	.-38     	; 0x698 <readEncoder+0xa2>
     6be:	14 c0       	rjmp	.+40     	; 0x6e8 <readEncoder+0xf2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     6c0:	68 85       	ldd	r22, Y+8	; 0x08
     6c2:	79 85       	ldd	r23, Y+9	; 0x09
     6c4:	8a 85       	ldd	r24, Y+10	; 0x0a
     6c6:	9b 85       	ldd	r25, Y+11	; 0x0b
     6c8:	0e 94 bb 05 	call	0xb76	; 0xb76 <__fixunssfsi>
     6cc:	dc 01       	movw	r26, r24
     6ce:	cb 01       	movw	r24, r22
     6d0:	8c 87       	std	Y+12, r24	; 0x0c
     6d2:	9d 87       	std	Y+13, r25	; 0x0d
     6d4:	8c 85       	ldd	r24, Y+12	; 0x0c
     6d6:	9d 85       	ldd	r25, Y+13	; 0x0d
     6d8:	88 8b       	std	Y+16, r24	; 0x10
     6da:	99 8b       	std	Y+17, r25	; 0x11
     6dc:	88 89       	ldd	r24, Y+16	; 0x10
     6de:	99 89       	ldd	r25, Y+17	; 0x11
     6e0:	01 97       	sbiw	r24, 0x01	; 1
     6e2:	f1 f7       	brne	.-4      	; 0x6e0 <readEncoder+0xea>
     6e4:	88 8b       	std	Y+16, r24	; 0x10
     6e6:	99 8b       	std	Y+17, r25	; 0x11
	_delay_ms(2);
	currentPos = (PORTC.IN >> 4) & 3;
     6e8:	80 e4       	ldi	r24, 0x40	; 64
     6ea:	96 e0       	ldi	r25, 0x06	; 6
     6ec:	fc 01       	movw	r30, r24
     6ee:	80 85       	ldd	r24, Z+8	; 0x08
     6f0:	82 95       	swap	r24
     6f2:	8f 70       	andi	r24, 0x0F	; 15
     6f4:	83 70       	andi	r24, 0x03	; 3
     6f6:	80 93 22 20 	sts	0x2022, r24	; 0x802022 <currentPos>
	uint8_t s = (currentPos << 2) | prevpos;
     6fa:	80 91 22 20 	lds	r24, 0x2022	; 0x802022 <currentPos>
     6fe:	88 2f       	mov	r24, r24
     700:	90 e0       	ldi	r25, 0x00	; 0
     702:	88 0f       	add	r24, r24
     704:	99 1f       	adc	r25, r25
     706:	88 0f       	add	r24, r24
     708:	99 1f       	adc	r25, r25
     70a:	98 2f       	mov	r25, r24
     70c:	80 91 23 20 	lds	r24, 0x2023	; 0x802023 <prevpos>
     710:	89 2b       	or	r24, r25
     712:	8b 83       	std	Y+3, r24	; 0x03
	int position = 0;
     714:	19 82       	std	Y+1, r1	; 0x01
     716:	1a 82       	std	Y+2, r1	; 0x02
	switch (s) {
     718:	8b 81       	ldd	r24, Y+3	; 0x03
     71a:	88 2f       	mov	r24, r24
     71c:	90 e0       	ldi	r25, 0x00	; 0
     71e:	09 2e       	mov	r0, r25
     720:	00 0c       	add	r0, r0
     722:	aa 0b       	sbc	r26, r26
     724:	bb 0b       	sbc	r27, r27
     726:	40 e0       	ldi	r20, 0x00	; 0
     728:	50 e0       	ldi	r21, 0x00	; 0
     72a:	2f e0       	ldi	r18, 0x0F	; 15
     72c:	30 e0       	ldi	r19, 0x00	; 0
     72e:	84 1b       	sub	r24, r20
     730:	95 0b       	sbc	r25, r21
     732:	28 17       	cp	r18, r24
     734:	39 07       	cpc	r19, r25
     736:	b8 f0       	brcs	.+46     	; 0x766 <readEncoder+0x170>
     738:	8a 54       	subi	r24, 0x4A	; 74
     73a:	9f 4f       	sbci	r25, 0xFF	; 255
     73c:	fc 01       	movw	r30, r24
     73e:	0c 94 d1 06 	jmp	0xda2	; 0xda2 <__tablejump2__>
		case 0: case 5: case 10: case 15:
		break;
		case 1: case 7: case 8: case 14:
		position++; break;
     742:	89 81       	ldd	r24, Y+1	; 0x01
     744:	9a 81       	ldd	r25, Y+2	; 0x02
     746:	01 96       	adiw	r24, 0x01	; 1
     748:	89 83       	std	Y+1, r24	; 0x01
     74a:	9a 83       	std	Y+2, r25	; 0x02
     74c:	13 c0       	rjmp	.+38     	; 0x774 <readEncoder+0x17e>
		case 2: case 4: case 11: case 13:
		position--; break;
     74e:	89 81       	ldd	r24, Y+1	; 0x01
     750:	9a 81       	ldd	r25, Y+2	; 0x02
     752:	01 97       	sbiw	r24, 0x01	; 1
     754:	89 83       	std	Y+1, r24	; 0x01
     756:	9a 83       	std	Y+2, r25	; 0x02
     758:	0d c0       	rjmp	.+26     	; 0x774 <readEncoder+0x17e>
		case 3: case 12:
		position += 2; break;
     75a:	89 81       	ldd	r24, Y+1	; 0x01
     75c:	9a 81       	ldd	r25, Y+2	; 0x02
     75e:	02 96       	adiw	r24, 0x02	; 2
     760:	89 83       	std	Y+1, r24	; 0x01
     762:	9a 83       	std	Y+2, r25	; 0x02
     764:	07 c0       	rjmp	.+14     	; 0x774 <readEncoder+0x17e>
		default:
		position -= 2; break;
     766:	89 81       	ldd	r24, Y+1	; 0x01
     768:	9a 81       	ldd	r25, Y+2	; 0x02
     76a:	02 97       	sbiw	r24, 0x02	; 2
     76c:	89 83       	std	Y+1, r24	; 0x01
     76e:	9a 83       	std	Y+2, r25	; 0x02
     770:	01 c0       	rjmp	.+2      	; 0x774 <readEncoder+0x17e>
	currentPos = (PORTC.IN >> 4) & 3;
	uint8_t s = (currentPos << 2) | prevpos;
	int position = 0;
	switch (s) {
		case 0: case 5: case 10: case 15:
		break;
     772:	00 00       	nop
		case 3: case 12:
		position += 2; break;
		default:
		position -= 2; break;
	}
	prevpos = currentPos;
     774:	80 91 22 20 	lds	r24, 0x2022	; 0x802022 <currentPos>
     778:	80 93 23 20 	sts	0x2023, r24	; 0x802023 <prevpos>
	return position;
     77c:	89 81       	ldd	r24, Y+1	; 0x01
     77e:	9a 81       	ldd	r25, Y+2	; 0x02
}
     780:	61 96       	adiw	r28, 0x11	; 17
     782:	cd bf       	out	0x3d, r28	; 61
     784:	de bf       	out	0x3e, r29	; 62
     786:	df 91       	pop	r29
     788:	cf 91       	pop	r28
     78a:	08 95       	ret

0000078c <main>:
char a;

void SimpleFunction(void);	//A simple function: print a counter (0 to 9) to the terminal

int main(void)
{	
     78c:	ef 92       	push	r14
     78e:	ff 92       	push	r15
     790:	0f 93       	push	r16
     792:	1f 93       	push	r17
     794:	cf 93       	push	r28
     796:	df 93       	push	r29
     798:	cd b7       	in	r28, 0x3d	; 61
     79a:	de b7       	in	r29, 0x3e	; 62
     79c:	2e 97       	sbiw	r28, 0x0e	; 14
     79e:	cd bf       	out	0x3d, r28	; 61
     7a0:	de bf       	out	0x3e, r29	; 62
	//###1###
	 
	//Initialize subsystems
	ClockInit();			//Initialize system clock (16 MHz)
     7a2:	0e 94 43 02 	call	0x486	; 0x486 <ClockInit>
	USARTInit();			//Initialize USART and bind to stdout,stdin
     7a6:	0e 94 41 05 	call	0xa82	; 0xa82 <USARTInit>
	AnalogInit();			//Initialize ADC
     7aa:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <AnalogInit>
	AccInit();				//Initialize accelerometer system
     7ae:	0e 94 e5 00 	call	0x1ca	; 0x1ca <AccInit>
	LEDInit();				//Initialize LEDs
     7b2:	0e 94 98 04 	call	0x930	; 0x930 <LEDInit>
	SwitchInit();			//Initialize switches
     7b6:	0e 94 1b 05 	call	0xa36	; 0xa36 <SwitchInit>
	EncoderInit();			//Initialize encoder
     7ba:	0e 94 53 02 	call	0x4a6	; 0x4a6 <EncoderInit>
	SpeakerInit();			//Initialize speaker system
     7be:	0e 94 b9 04 	call	0x972	; 0x972 <SpeakerInit>
	
	//Enable interrupts
	PMIC.CTRL|=0b00000111;  //Enable low, medium, high priority interrupts
     7c2:	80 ea       	ldi	r24, 0xA0	; 160
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	20 ea       	ldi	r18, 0xA0	; 160
     7c8:	30 e0       	ldi	r19, 0x00	; 0
     7ca:	f9 01       	movw	r30, r18
     7cc:	22 81       	ldd	r18, Z+2	; 0x02
     7ce:	27 60       	ori	r18, 0x07	; 7
     7d0:	fc 01       	movw	r30, r24
     7d2:	22 83       	std	Z+2, r18	; 0x02
	SREG|=0b10000000;		//Global interrupt enable
     7d4:	8f e3       	ldi	r24, 0x3F	; 63
     7d6:	90 e0       	ldi	r25, 0x00	; 0
     7d8:	2f e3       	ldi	r18, 0x3F	; 63
     7da:	30 e0       	ldi	r19, 0x00	; 0
     7dc:	f9 01       	movw	r30, r18
     7de:	20 81       	ld	r18, Z
     7e0:	20 68       	ori	r18, 0x80	; 128
     7e2:	fc 01       	movw	r30, r24
     7e4:	20 83       	st	Z, r18
     7e6:	80 e0       	ldi	r24, 0x00	; 0
     7e8:	90 e0       	ldi	r25, 0x00	; 0
     7ea:	aa ef       	ldi	r26, 0xFA	; 250
     7ec:	b3 e4       	ldi	r27, 0x43	; 67
     7ee:	89 83       	std	Y+1, r24	; 0x01
     7f0:	9a 83       	std	Y+2, r25	; 0x02
     7f2:	ab 83       	std	Y+3, r26	; 0x03
     7f4:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     7f6:	20 e0       	ldi	r18, 0x00	; 0
     7f8:	30 e0       	ldi	r19, 0x00	; 0
     7fa:	4a e7       	ldi	r20, 0x7A	; 122
     7fc:	55 e4       	ldi	r21, 0x45	; 69
     7fe:	69 81       	ldd	r22, Y+1	; 0x01
     800:	7a 81       	ldd	r23, Y+2	; 0x02
     802:	8b 81       	ldd	r24, Y+3	; 0x03
     804:	9c 81       	ldd	r25, Y+4	; 0x04
     806:	0e 94 3c 06 	call	0xc78	; 0xc78 <__mulsf3>
     80a:	dc 01       	movw	r26, r24
     80c:	cb 01       	movw	r24, r22
     80e:	8d 83       	std	Y+5, r24	; 0x05
     810:	9e 83       	std	Y+6, r25	; 0x06
     812:	af 83       	std	Y+7, r26	; 0x07
     814:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     816:	20 e0       	ldi	r18, 0x00	; 0
     818:	30 e0       	ldi	r19, 0x00	; 0
     81a:	40 e8       	ldi	r20, 0x80	; 128
     81c:	5f e3       	ldi	r21, 0x3F	; 63
     81e:	6d 81       	ldd	r22, Y+5	; 0x05
     820:	7e 81       	ldd	r23, Y+6	; 0x06
     822:	8f 81       	ldd	r24, Y+7	; 0x07
     824:	98 85       	ldd	r25, Y+8	; 0x08
     826:	0e 94 b6 05 	call	0xb6c	; 0xb6c <__cmpsf2>
     82a:	88 23       	and	r24, r24
     82c:	2c f4       	brge	.+10     	; 0x838 <main+0xac>
		__ticks = 1;
     82e:	81 e0       	ldi	r24, 0x01	; 1
     830:	90 e0       	ldi	r25, 0x00	; 0
     832:	89 87       	std	Y+9, r24	; 0x09
     834:	9a 87       	std	Y+10, r25	; 0x0a
     836:	3f c0       	rjmp	.+126    	; 0x8b6 <main+0x12a>
	else if (__tmp > 65535)
     838:	20 e0       	ldi	r18, 0x00	; 0
     83a:	3f ef       	ldi	r19, 0xFF	; 255
     83c:	4f e7       	ldi	r20, 0x7F	; 127
     83e:	57 e4       	ldi	r21, 0x47	; 71
     840:	6d 81       	ldd	r22, Y+5	; 0x05
     842:	7e 81       	ldd	r23, Y+6	; 0x06
     844:	8f 81       	ldd	r24, Y+7	; 0x07
     846:	98 85       	ldd	r25, Y+8	; 0x08
     848:	0e 94 37 06 	call	0xc6e	; 0xc6e <__gesf2>
     84c:	18 16       	cp	r1, r24
     84e:	4c f5       	brge	.+82     	; 0x8a2 <main+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     850:	20 e0       	ldi	r18, 0x00	; 0
     852:	30 e0       	ldi	r19, 0x00	; 0
     854:	40 e2       	ldi	r20, 0x20	; 32
     856:	51 e4       	ldi	r21, 0x41	; 65
     858:	69 81       	ldd	r22, Y+1	; 0x01
     85a:	7a 81       	ldd	r23, Y+2	; 0x02
     85c:	8b 81       	ldd	r24, Y+3	; 0x03
     85e:	9c 81       	ldd	r25, Y+4	; 0x04
     860:	0e 94 3c 06 	call	0xc78	; 0xc78 <__mulsf3>
     864:	dc 01       	movw	r26, r24
     866:	cb 01       	movw	r24, r22
     868:	bc 01       	movw	r22, r24
     86a:	cd 01       	movw	r24, r26
     86c:	0e 94 bb 05 	call	0xb76	; 0xb76 <__fixunssfsi>
     870:	dc 01       	movw	r26, r24
     872:	cb 01       	movw	r24, r22
     874:	89 87       	std	Y+9, r24	; 0x09
     876:	9a 87       	std	Y+10, r25	; 0x0a
     878:	0f c0       	rjmp	.+30     	; 0x898 <main+0x10c>
     87a:	80 e9       	ldi	r24, 0x90	; 144
     87c:	91 e0       	ldi	r25, 0x01	; 1
     87e:	8b 87       	std	Y+11, r24	; 0x0b
     880:	9c 87       	std	Y+12, r25	; 0x0c
     882:	8b 85       	ldd	r24, Y+11	; 0x0b
     884:	9c 85       	ldd	r25, Y+12	; 0x0c
     886:	01 97       	sbiw	r24, 0x01	; 1
     888:	f1 f7       	brne	.-4      	; 0x886 <main+0xfa>
     88a:	8b 87       	std	Y+11, r24	; 0x0b
     88c:	9c 87       	std	Y+12, r25	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     88e:	89 85       	ldd	r24, Y+9	; 0x09
     890:	9a 85       	ldd	r25, Y+10	; 0x0a
     892:	01 97       	sbiw	r24, 0x01	; 1
     894:	89 87       	std	Y+9, r24	; 0x09
     896:	9a 87       	std	Y+10, r25	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     898:	89 85       	ldd	r24, Y+9	; 0x09
     89a:	9a 85       	ldd	r25, Y+10	; 0x0a
     89c:	89 2b       	or	r24, r25
     89e:	69 f7       	brne	.-38     	; 0x87a <main+0xee>
     8a0:	14 c0       	rjmp	.+40     	; 0x8ca <main+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     8a2:	6d 81       	ldd	r22, Y+5	; 0x05
     8a4:	7e 81       	ldd	r23, Y+6	; 0x06
     8a6:	8f 81       	ldd	r24, Y+7	; 0x07
     8a8:	98 85       	ldd	r25, Y+8	; 0x08
     8aa:	0e 94 bb 05 	call	0xb76	; 0xb76 <__fixunssfsi>
     8ae:	dc 01       	movw	r26, r24
     8b0:	cb 01       	movw	r24, r22
     8b2:	89 87       	std	Y+9, r24	; 0x09
     8b4:	9a 87       	std	Y+10, r25	; 0x0a
     8b6:	89 85       	ldd	r24, Y+9	; 0x09
     8b8:	9a 85       	ldd	r25, Y+10	; 0x0a
     8ba:	8d 87       	std	Y+13, r24	; 0x0d
     8bc:	9e 87       	std	Y+14, r25	; 0x0e
     8be:	8d 85       	ldd	r24, Y+13	; 0x0d
     8c0:	9e 85       	ldd	r25, Y+14	; 0x0e
     8c2:	01 97       	sbiw	r24, 0x01	; 1
     8c4:	f1 f7       	brne	.-4      	; 0x8c2 <main+0x136>
     8c6:	8d 87       	std	Y+13, r24	; 0x0d
     8c8:	9e 87       	std	Y+14, r25	; 0x0e
		// Start ADC conversion
		//ADCA.CH0.CTRL |= 0x80;



		sprintf(text, "ACCRAW %d %d %d\r\n",AccGetXAxis(AccGetXAxisRaw()),AccGetYAxis(AccGetYAxisRaw()),AccGetZAxis(AccGetZAxisRaw()));
     8ca:	0e 94 39 01 	call	0x272	; 0x272 <AccGetZAxisRaw>
     8ce:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <AccGetZAxis>
     8d2:	7c 01       	movw	r14, r24
     8d4:	0e 94 27 01 	call	0x24e	; 0x24e <AccGetYAxisRaw>
     8d8:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <AccGetYAxis>
     8dc:	8c 01       	movw	r16, r24
     8de:	0e 94 15 01 	call	0x22a	; 0x22a <AccGetXAxisRaw>
     8e2:	0e 94 4b 01 	call	0x296	; 0x296 <AccGetXAxis>
     8e6:	2f 2d       	mov	r18, r15
     8e8:	2f 93       	push	r18
     8ea:	2e 2d       	mov	r18, r14
     8ec:	2f 93       	push	r18
     8ee:	21 2f       	mov	r18, r17
     8f0:	2f 93       	push	r18
     8f2:	20 2f       	mov	r18, r16
     8f4:	2f 93       	push	r18
     8f6:	29 2f       	mov	r18, r25
     8f8:	2f 93       	push	r18
     8fa:	8f 93       	push	r24
     8fc:	8e e0       	ldi	r24, 0x0E	; 14
     8fe:	90 e2       	ldi	r25, 0x20	; 32
     900:	89 2f       	mov	r24, r25
     902:	8f 93       	push	r24
     904:	8e e0       	ldi	r24, 0x0E	; 14
     906:	90 e2       	ldi	r25, 0x20	; 32
     908:	8f 93       	push	r24
     90a:	84 e2       	ldi	r24, 0x24	; 36
     90c:	90 e2       	ldi	r25, 0x20	; 32
     90e:	89 2f       	mov	r24, r25
     910:	8f 93       	push	r24
     912:	84 e2       	ldi	r24, 0x24	; 36
     914:	90 e2       	ldi	r25, 0x20	; 32
     916:	8f 93       	push	r24
     918:	0e 94 07 07 	call	0xe0e	; 0xe0e <sprintf>
     91c:	8d b7       	in	r24, 0x3d	; 61
     91e:	9e b7       	in	r25, 0x3e	; 62
     920:	0a 96       	adiw	r24, 0x0a	; 10
     922:	cd bf       	out	0x3d, r28	; 61
     924:	de bf       	out	0x3e, r29	; 62
		puts(text);
     926:	84 e2       	ldi	r24, 0x24	; 36
     928:	90 e2       	ldi	r25, 0x20	; 32
     92a:	0e 94 d7 06 	call	0xdae	; 0xdae <puts>
		//

		
		
		//putchar('U');
	}
     92e:	cd cf       	rjmp	.-102    	; 0x8ca <main+0x13e>

00000930 <LEDInit>:
#include "LED.h"
#include <avr/io.h>

void LEDInit(void)
{
     930:	cf 93       	push	r28
     932:	df 93       	push	r29
     934:	cd b7       	in	r28, 0x3d	; 61
     936:	de b7       	in	r29, 0x3e	; 62
	PORTE.DIRSET=0b00001111;
     938:	80 e8       	ldi	r24, 0x80	; 128
     93a:	96 e0       	ldi	r25, 0x06	; 6
     93c:	2f e0       	ldi	r18, 0x0F	; 15
     93e:	fc 01       	movw	r30, r24
     940:	21 83       	std	Z+1, r18	; 0x01
	PORTE.PIN0CTRL=0b01000000;
     942:	80 e8       	ldi	r24, 0x80	; 128
     944:	96 e0       	ldi	r25, 0x06	; 6
     946:	20 e4       	ldi	r18, 0x40	; 64
     948:	fc 01       	movw	r30, r24
     94a:	20 8b       	std	Z+16, r18	; 0x10
	PORTE.PIN1CTRL=0b01000000;
     94c:	80 e8       	ldi	r24, 0x80	; 128
     94e:	96 e0       	ldi	r25, 0x06	; 6
     950:	20 e4       	ldi	r18, 0x40	; 64
     952:	fc 01       	movw	r30, r24
     954:	21 8b       	std	Z+17, r18	; 0x11
	PORTE.PIN2CTRL=0b01000000;
     956:	80 e8       	ldi	r24, 0x80	; 128
     958:	96 e0       	ldi	r25, 0x06	; 6
     95a:	20 e4       	ldi	r18, 0x40	; 64
     95c:	fc 01       	movw	r30, r24
     95e:	22 8b       	std	Z+18, r18	; 0x12
	PORTE.PIN3CTRL=0b01000000;
     960:	80 e8       	ldi	r24, 0x80	; 128
     962:	96 e0       	ldi	r25, 0x06	; 6
     964:	20 e4       	ldi	r18, 0x40	; 64
     966:	fc 01       	movw	r30, r24
     968:	23 8b       	std	Z+19, r18	; 0x13
	
}
     96a:	00 00       	nop
     96c:	df 91       	pop	r29
     96e:	cf 91       	pop	r28
     970:	08 95       	ret

00000972 <SpeakerInit>:
	TCC1.CNT = 0; //set count to 0
	TCC1.PER = (Length*15);//not exactly correct because real value is 15.625 but processor doesn't like floating point operations.
	while(PORTC.DIR & 1){ //this function can not move on because other sounds could overrule the current one
		
	}
}
     972:	cf 93       	push	r28
     974:	df 93       	push	r29
     976:	cd b7       	in	r28, 0x3d	; 61
     978:	de b7       	in	r29, 0x3e	; 62
     97a:	80 e4       	ldi	r24, 0x40	; 64
     97c:	96 e0       	ldi	r25, 0x06	; 6
     97e:	21 e0       	ldi	r18, 0x01	; 1
     980:	fc 01       	movw	r30, r24
     982:	22 83       	std	Z+2, r18	; 0x02
     984:	80 e4       	ldi	r24, 0x40	; 64
     986:	96 e0       	ldi	r25, 0x06	; 6
     988:	20 e1       	ldi	r18, 0x10	; 16
     98a:	fc 01       	movw	r30, r24
     98c:	20 8b       	std	Z+16, r18	; 0x10
     98e:	80 e0       	ldi	r24, 0x00	; 0
     990:	98 e0       	ldi	r25, 0x08	; 8
     992:	fc 01       	movw	r30, r24
     994:	10 82       	st	Z, r1
     996:	80 e0       	ldi	r24, 0x00	; 0
     998:	98 e0       	ldi	r25, 0x08	; 8
     99a:	23 e1       	ldi	r18, 0x13	; 19
     99c:	fc 01       	movw	r30, r24
     99e:	21 83       	std	Z+1, r18	; 0x01
     9a0:	80 e0       	ldi	r24, 0x00	; 0
     9a2:	98 e0       	ldi	r25, 0x08	; 8
     9a4:	fc 01       	movw	r30, r24
     9a6:	13 82       	std	Z+3, r1	; 0x03
     9a8:	80 e0       	ldi	r24, 0x00	; 0
     9aa:	98 e0       	ldi	r25, 0x08	; 8
     9ac:	fc 01       	movw	r30, r24
     9ae:	14 82       	std	Z+4, r1	; 0x04
     9b0:	80 e4       	ldi	r24, 0x40	; 64
     9b2:	98 e0       	ldi	r25, 0x08	; 8
     9b4:	fc 01       	movw	r30, r24
     9b6:	10 82       	st	Z, r1
     9b8:	80 e4       	ldi	r24, 0x40	; 64
     9ba:	98 e0       	ldi	r25, 0x08	; 8
     9bc:	fc 01       	movw	r30, r24
     9be:	11 82       	std	Z+1, r1	; 0x01
     9c0:	80 e4       	ldi	r24, 0x40	; 64
     9c2:	98 e0       	ldi	r25, 0x08	; 8
     9c4:	fc 01       	movw	r30, r24
     9c6:	13 82       	std	Z+3, r1	; 0x03
     9c8:	80 e4       	ldi	r24, 0x40	; 64
     9ca:	98 e0       	ldi	r25, 0x08	; 8
     9cc:	fc 01       	movw	r30, r24
     9ce:	14 82       	std	Z+4, r1	; 0x04
     9d0:	80 e4       	ldi	r24, 0x40	; 64
     9d2:	98 e0       	ldi	r25, 0x08	; 8
     9d4:	23 e0       	ldi	r18, 0x03	; 3
     9d6:	fc 01       	movw	r30, r24
     9d8:	26 83       	std	Z+6, r18	; 0x06
     9da:	00 00       	nop
     9dc:	df 91       	pop	r29
     9de:	cf 91       	pop	r28
     9e0:	08 95       	ret

000009e2 <__vector_20>:

ISR(TCC1_OVF_vect){ //turn pin to input and turn of timers.
     9e2:	1f 92       	push	r1
     9e4:	0f 92       	push	r0
     9e6:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     9ea:	0f 92       	push	r0
     9ec:	11 24       	eor	r1, r1
     9ee:	2f 93       	push	r18
     9f0:	8f 93       	push	r24
     9f2:	9f 93       	push	r25
     9f4:	ef 93       	push	r30
     9f6:	ff 93       	push	r31
     9f8:	cf 93       	push	r28
     9fa:	df 93       	push	r29
     9fc:	cd b7       	in	r28, 0x3d	; 61
     9fe:	de b7       	in	r29, 0x3e	; 62
	PORTC.DIRCLR = 0b00000001; 
     a00:	80 e4       	ldi	r24, 0x40	; 64
     a02:	96 e0       	ldi	r25, 0x06	; 6
     a04:	21 e0       	ldi	r18, 0x01	; 1
     a06:	fc 01       	movw	r30, r24
     a08:	22 83       	std	Z+2, r18	; 0x02
	TCC0.CTRLA = 0;
     a0a:	80 e0       	ldi	r24, 0x00	; 0
     a0c:	98 e0       	ldi	r25, 0x08	; 8
     a0e:	fc 01       	movw	r30, r24
     a10:	10 82       	st	Z, r1
	TCC1.CTRLA = 0;
     a12:	80 e4       	ldi	r24, 0x40	; 64
     a14:	98 e0       	ldi	r25, 0x08	; 8
     a16:	fc 01       	movw	r30, r24
     a18:	10 82       	st	Z, r1
}
     a1a:	00 00       	nop
     a1c:	df 91       	pop	r29
     a1e:	cf 91       	pop	r28
     a20:	ff 91       	pop	r31
     a22:	ef 91       	pop	r30
     a24:	9f 91       	pop	r25
     a26:	8f 91       	pop	r24
     a28:	2f 91       	pop	r18
     a2a:	0f 90       	pop	r0
     a2c:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     a30:	0f 90       	pop	r0
     a32:	1f 90       	pop	r1
     a34:	18 95       	reti

00000a36 <SwitchInit>:
#include "switch.h"
#include <avr/io.h>

void SwitchInit(void)
{
     a36:	cf 93       	push	r28
     a38:	df 93       	push	r29
     a3a:	cd b7       	in	r28, 0x3d	; 61
     a3c:	de b7       	in	r29, 0x3e	; 62
	PORTD.DIRCLR=0b11110001;
     a3e:	80 e6       	ldi	r24, 0x60	; 96
     a40:	96 e0       	ldi	r25, 0x06	; 6
     a42:	21 ef       	ldi	r18, 0xF1	; 241
     a44:	fc 01       	movw	r30, r24
     a46:	22 83       	std	Z+2, r18	; 0x02
	PORTD.PIN0CTRL=0b01011000;
     a48:	80 e6       	ldi	r24, 0x60	; 96
     a4a:	96 e0       	ldi	r25, 0x06	; 6
     a4c:	28 e5       	ldi	r18, 0x58	; 88
     a4e:	fc 01       	movw	r30, r24
     a50:	20 8b       	std	Z+16, r18	; 0x10
	PORTD.PIN4CTRL=0b01011000;
     a52:	80 e6       	ldi	r24, 0x60	; 96
     a54:	96 e0       	ldi	r25, 0x06	; 6
     a56:	28 e5       	ldi	r18, 0x58	; 88
     a58:	fc 01       	movw	r30, r24
     a5a:	24 8b       	std	Z+20, r18	; 0x14
	PORTD.PIN5CTRL=0b01011000;
     a5c:	80 e6       	ldi	r24, 0x60	; 96
     a5e:	96 e0       	ldi	r25, 0x06	; 6
     a60:	28 e5       	ldi	r18, 0x58	; 88
     a62:	fc 01       	movw	r30, r24
     a64:	25 8b       	std	Z+21, r18	; 0x15
	PORTD.PIN6CTRL=0b01011000;
     a66:	80 e6       	ldi	r24, 0x60	; 96
     a68:	96 e0       	ldi	r25, 0x06	; 6
     a6a:	28 e5       	ldi	r18, 0x58	; 88
     a6c:	fc 01       	movw	r30, r24
     a6e:	26 8b       	std	Z+22, r18	; 0x16
	PORTD.PIN7CTRL=0b01011000;
     a70:	80 e6       	ldi	r24, 0x60	; 96
     a72:	96 e0       	ldi	r25, 0x06	; 6
     a74:	28 e5       	ldi	r18, 0x58	; 88
     a76:	fc 01       	movw	r30, r24
     a78:	27 8b       	std	Z+23, r18	; 0x17
}
     a7a:	00 00       	nop
     a7c:	df 91       	pop	r29
     a7e:	cf 91       	pop	r28
     a80:	08 95       	ret

00000a82 <USARTInit>:
 int stdio_putchar(char c, FILE * stream);
 int stdio_getchar(FILE *stream);
static FILE UsartStdio = FDEV_SETUP_STREAM(stdio_putchar, stdio_getchar,_FDEV_SETUP_WRITE);

void USARTInit(void)
{
     a82:	cf 93       	push	r28
     a84:	df 93       	push	r29
     a86:	cd b7       	in	r28, 0x3d	; 61
     a88:	de b7       	in	r29, 0x3e	; 62
	USART_PORT.DIRSET=0b00001000;	//set pin as an output
     a8a:	80 e6       	ldi	r24, 0x60	; 96
     a8c:	96 e0       	ldi	r25, 0x06	; 6
     a8e:	28 e0       	ldi	r18, 0x08	; 8
     a90:	fc 01       	movw	r30, r24
     a92:	21 83       	std	Z+1, r18	; 0x01
	USART_PORT.DIRCLR=0b00000100;	//set pin as input
     a94:	80 e6       	ldi	r24, 0x60	; 96
     a96:	96 e0       	ldi	r25, 0x06	; 6
     a98:	24 e0       	ldi	r18, 0x04	; 4
     a9a:	fc 01       	movw	r30, r24
     a9c:	22 83       	std	Z+2, r18	; 0x02
	
	USART.CTRLA=0b00000000;			//turn of interrupts of usart
     a9e:	80 ea       	ldi	r24, 0xA0	; 160
     aa0:	99 e0       	ldi	r25, 0x09	; 9
     aa2:	fc 01       	movw	r30, r24
     aa4:	13 82       	std	Z+3, r1	; 0x03
	USART.CTRLB=0b00011000;			//turn on receive and transmit 
     aa6:	80 ea       	ldi	r24, 0xA0	; 160
     aa8:	99 e0       	ldi	r25, 0x09	; 9
     aaa:	28 e1       	ldi	r18, 0x18	; 24
     aac:	fc 01       	movw	r30, r24
     aae:	24 83       	std	Z+4, r18	; 0x04
	USART.CTRLC=0b00000011;			//asynchronous mode with no parity, 1 stop bit and an 8-bit size
     ab0:	80 ea       	ldi	r24, 0xA0	; 160
     ab2:	99 e0       	ldi	r25, 0x09	; 9
     ab4:	23 e0       	ldi	r18, 0x03	; 3
     ab6:	fc 01       	movw	r30, r24
     ab8:	25 83       	std	Z+5, r18	; 0x05
	
	USART.BAUDCTRLA=0xD7; //BSEL=3301, BSCALE=-5 9600 baud see matlab code for calculations
     aba:	80 ea       	ldi	r24, 0xA0	; 160
     abc:	99 e0       	ldi	r25, 0x09	; 9
     abe:	27 ed       	ldi	r18, 0xD7	; 215
     ac0:	fc 01       	movw	r30, r24
     ac2:	26 83       	std	Z+6, r18	; 0x06
	USART.BAUDCTRLB=0x93; 
     ac4:	80 ea       	ldi	r24, 0xA0	; 160
     ac6:	99 e0       	ldi	r25, 0x09	; 9
     ac8:	23 e9       	ldi	r18, 0x93	; 147
     aca:	fc 01       	movw	r30, r24
     acc:	27 83       	std	Z+7, r18	; 0x07
	
	stdout=&UsartStdio;
     ace:	80 e0       	ldi	r24, 0x00	; 0
     ad0:	90 e2       	ldi	r25, 0x20	; 32
     ad2:	80 93 8b 20 	sts	0x208B, r24	; 0x80208b <__iob+0x2>
     ad6:	90 93 8c 20 	sts	0x208C, r25	; 0x80208c <__iob+0x3>
	stdin=&UsartStdio;
     ada:	80 e0       	ldi	r24, 0x00	; 0
     adc:	90 e2       	ldi	r25, 0x20	; 32
     ade:	80 93 89 20 	sts	0x2089, r24	; 0x802089 <__iob>
     ae2:	90 93 8a 20 	sts	0x208A, r25	; 0x80208a <__iob+0x1>
}
     ae6:	00 00       	nop
     ae8:	df 91       	pop	r29
     aea:	cf 91       	pop	r28
     aec:	08 95       	ret

00000aee <stdio_putchar>:


int stdio_putchar(char c, FILE * stream)
{
     aee:	cf 93       	push	r28
     af0:	df 93       	push	r29
     af2:	00 d0       	rcall	.+0      	; 0xaf4 <stdio_putchar+0x6>
     af4:	1f 92       	push	r1
     af6:	cd b7       	in	r28, 0x3d	; 61
     af8:	de b7       	in	r29, 0x3e	; 62
     afa:	89 83       	std	Y+1, r24	; 0x01
     afc:	6a 83       	std	Y+2, r22	; 0x02
     afe:	7b 83       	std	Y+3, r23	; 0x03
	USART.DATA = c;
     b00:	80 ea       	ldi	r24, 0xA0	; 160
     b02:	99 e0       	ldi	r25, 0x09	; 9
     b04:	29 81       	ldd	r18, Y+1	; 0x01
     b06:	fc 01       	movw	r30, r24
     b08:	20 83       	st	Z, r18
	while (!(USART.STATUS & 0b01000000)); //wait for transmit complete flag
     b0a:	00 00       	nop
     b0c:	80 ea       	ldi	r24, 0xA0	; 160
     b0e:	99 e0       	ldi	r25, 0x09	; 9
     b10:	fc 01       	movw	r30, r24
     b12:	81 81       	ldd	r24, Z+1	; 0x01
     b14:	88 2f       	mov	r24, r24
     b16:	90 e0       	ldi	r25, 0x00	; 0
     b18:	80 74       	andi	r24, 0x40	; 64
     b1a:	99 27       	eor	r25, r25
     b1c:	89 2b       	or	r24, r25
     b1e:	b1 f3       	breq	.-20     	; 0xb0c <stdio_putchar+0x1e>
	USART.STATUS=0b01000000;
     b20:	80 ea       	ldi	r24, 0xA0	; 160
     b22:	99 e0       	ldi	r25, 0x09	; 9
     b24:	20 e4       	ldi	r18, 0x40	; 64
     b26:	fc 01       	movw	r30, r24
     b28:	21 83       	std	Z+1, r18	; 0x01
	return 0;
     b2a:	80 e0       	ldi	r24, 0x00	; 0
     b2c:	90 e0       	ldi	r25, 0x00	; 0
}
     b2e:	23 96       	adiw	r28, 0x03	; 3
     b30:	cd bf       	out	0x3d, r28	; 61
     b32:	de bf       	out	0x3e, r29	; 62
     b34:	df 91       	pop	r29
     b36:	cf 91       	pop	r28
     b38:	08 95       	ret

00000b3a <stdio_getchar>:
	
int stdio_getchar(FILE *stream)
{
     b3a:	cf 93       	push	r28
     b3c:	df 93       	push	r29
     b3e:	00 d0       	rcall	.+0      	; 0xb40 <stdio_getchar+0x6>
     b40:	cd b7       	in	r28, 0x3d	; 61
     b42:	de b7       	in	r29, 0x3e	; 62
     b44:	89 83       	std	Y+1, r24	; 0x01
     b46:	9a 83       	std	Y+2, r25	; 0x02
	while (!(USART.STATUS & 0b10000000)); //wait for receive complete flag
     b48:	00 00       	nop
     b4a:	80 ea       	ldi	r24, 0xA0	; 160
     b4c:	99 e0       	ldi	r25, 0x09	; 9
     b4e:	fc 01       	movw	r30, r24
     b50:	81 81       	ldd	r24, Z+1	; 0x01
     b52:	88 23       	and	r24, r24
     b54:	d4 f7       	brge	.-12     	; 0xb4a <stdio_getchar+0x10>
	return USART.DATA;
     b56:	80 ea       	ldi	r24, 0xA0	; 160
     b58:	99 e0       	ldi	r25, 0x09	; 9
     b5a:	fc 01       	movw	r30, r24
     b5c:	80 81       	ld	r24, Z
     b5e:	88 2f       	mov	r24, r24
     b60:	90 e0       	ldi	r25, 0x00	; 0
}
     b62:	0f 90       	pop	r0
     b64:	0f 90       	pop	r0
     b66:	df 91       	pop	r29
     b68:	cf 91       	pop	r28
     b6a:	08 95       	ret

00000b6c <__cmpsf2>:
     b6c:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <__fp_cmp>
     b70:	08 f4       	brcc	.+2      	; 0xb74 <__cmpsf2+0x8>
     b72:	81 e0       	ldi	r24, 0x01	; 1
     b74:	08 95       	ret

00000b76 <__fixunssfsi>:
     b76:	0e 94 16 06 	call	0xc2c	; 0xc2c <__fp_splitA>
     b7a:	88 f0       	brcs	.+34     	; 0xb9e <__fixunssfsi+0x28>
     b7c:	9f 57       	subi	r25, 0x7F	; 127
     b7e:	98 f0       	brcs	.+38     	; 0xba6 <__fixunssfsi+0x30>
     b80:	b9 2f       	mov	r27, r25
     b82:	99 27       	eor	r25, r25
     b84:	b7 51       	subi	r27, 0x17	; 23
     b86:	b0 f0       	brcs	.+44     	; 0xbb4 <__fixunssfsi+0x3e>
     b88:	e1 f0       	breq	.+56     	; 0xbc2 <__fixunssfsi+0x4c>
     b8a:	66 0f       	add	r22, r22
     b8c:	77 1f       	adc	r23, r23
     b8e:	88 1f       	adc	r24, r24
     b90:	99 1f       	adc	r25, r25
     b92:	1a f0       	brmi	.+6      	; 0xb9a <__fixunssfsi+0x24>
     b94:	ba 95       	dec	r27
     b96:	c9 f7       	brne	.-14     	; 0xb8a <__fixunssfsi+0x14>
     b98:	14 c0       	rjmp	.+40     	; 0xbc2 <__fixunssfsi+0x4c>
     b9a:	b1 30       	cpi	r27, 0x01	; 1
     b9c:	91 f0       	breq	.+36     	; 0xbc2 <__fixunssfsi+0x4c>
     b9e:	0e 94 30 06 	call	0xc60	; 0xc60 <__fp_zero>
     ba2:	b1 e0       	ldi	r27, 0x01	; 1
     ba4:	08 95       	ret
     ba6:	0c 94 30 06 	jmp	0xc60	; 0xc60 <__fp_zero>
     baa:	67 2f       	mov	r22, r23
     bac:	78 2f       	mov	r23, r24
     bae:	88 27       	eor	r24, r24
     bb0:	b8 5f       	subi	r27, 0xF8	; 248
     bb2:	39 f0       	breq	.+14     	; 0xbc2 <__fixunssfsi+0x4c>
     bb4:	b9 3f       	cpi	r27, 0xF9	; 249
     bb6:	cc f3       	brlt	.-14     	; 0xbaa <__fixunssfsi+0x34>
     bb8:	86 95       	lsr	r24
     bba:	77 95       	ror	r23
     bbc:	67 95       	ror	r22
     bbe:	b3 95       	inc	r27
     bc0:	d9 f7       	brne	.-10     	; 0xbb8 <__fixunssfsi+0x42>
     bc2:	3e f4       	brtc	.+14     	; 0xbd2 <__fixunssfsi+0x5c>
     bc4:	90 95       	com	r25
     bc6:	80 95       	com	r24
     bc8:	70 95       	com	r23
     bca:	61 95       	neg	r22
     bcc:	7f 4f       	sbci	r23, 0xFF	; 255
     bce:	8f 4f       	sbci	r24, 0xFF	; 255
     bd0:	9f 4f       	sbci	r25, 0xFF	; 255
     bd2:	08 95       	ret

00000bd4 <__fp_cmp>:
     bd4:	99 0f       	add	r25, r25
     bd6:	00 08       	sbc	r0, r0
     bd8:	55 0f       	add	r21, r21
     bda:	aa 0b       	sbc	r26, r26
     bdc:	e0 e8       	ldi	r30, 0x80	; 128
     bde:	fe ef       	ldi	r31, 0xFE	; 254
     be0:	16 16       	cp	r1, r22
     be2:	17 06       	cpc	r1, r23
     be4:	e8 07       	cpc	r30, r24
     be6:	f9 07       	cpc	r31, r25
     be8:	c0 f0       	brcs	.+48     	; 0xc1a <__fp_cmp+0x46>
     bea:	12 16       	cp	r1, r18
     bec:	13 06       	cpc	r1, r19
     bee:	e4 07       	cpc	r30, r20
     bf0:	f5 07       	cpc	r31, r21
     bf2:	98 f0       	brcs	.+38     	; 0xc1a <__fp_cmp+0x46>
     bf4:	62 1b       	sub	r22, r18
     bf6:	73 0b       	sbc	r23, r19
     bf8:	84 0b       	sbc	r24, r20
     bfa:	95 0b       	sbc	r25, r21
     bfc:	39 f4       	brne	.+14     	; 0xc0c <__fp_cmp+0x38>
     bfe:	0a 26       	eor	r0, r26
     c00:	61 f0       	breq	.+24     	; 0xc1a <__fp_cmp+0x46>
     c02:	23 2b       	or	r18, r19
     c04:	24 2b       	or	r18, r20
     c06:	25 2b       	or	r18, r21
     c08:	21 f4       	brne	.+8      	; 0xc12 <__fp_cmp+0x3e>
     c0a:	08 95       	ret
     c0c:	0a 26       	eor	r0, r26
     c0e:	09 f4       	brne	.+2      	; 0xc12 <__fp_cmp+0x3e>
     c10:	a1 40       	sbci	r26, 0x01	; 1
     c12:	a6 95       	lsr	r26
     c14:	8f ef       	ldi	r24, 0xFF	; 255
     c16:	81 1d       	adc	r24, r1
     c18:	81 1d       	adc	r24, r1
     c1a:	08 95       	ret

00000c1c <__fp_split3>:
     c1c:	57 fd       	sbrc	r21, 7
     c1e:	90 58       	subi	r25, 0x80	; 128
     c20:	44 0f       	add	r20, r20
     c22:	55 1f       	adc	r21, r21
     c24:	59 f0       	breq	.+22     	; 0xc3c <__fp_splitA+0x10>
     c26:	5f 3f       	cpi	r21, 0xFF	; 255
     c28:	71 f0       	breq	.+28     	; 0xc46 <__fp_splitA+0x1a>
     c2a:	47 95       	ror	r20

00000c2c <__fp_splitA>:
     c2c:	88 0f       	add	r24, r24
     c2e:	97 fb       	bst	r25, 7
     c30:	99 1f       	adc	r25, r25
     c32:	61 f0       	breq	.+24     	; 0xc4c <__fp_splitA+0x20>
     c34:	9f 3f       	cpi	r25, 0xFF	; 255
     c36:	79 f0       	breq	.+30     	; 0xc56 <__fp_splitA+0x2a>
     c38:	87 95       	ror	r24
     c3a:	08 95       	ret
     c3c:	12 16       	cp	r1, r18
     c3e:	13 06       	cpc	r1, r19
     c40:	14 06       	cpc	r1, r20
     c42:	55 1f       	adc	r21, r21
     c44:	f2 cf       	rjmp	.-28     	; 0xc2a <__fp_split3+0xe>
     c46:	46 95       	lsr	r20
     c48:	f1 df       	rcall	.-30     	; 0xc2c <__fp_splitA>
     c4a:	08 c0       	rjmp	.+16     	; 0xc5c <__fp_splitA+0x30>
     c4c:	16 16       	cp	r1, r22
     c4e:	17 06       	cpc	r1, r23
     c50:	18 06       	cpc	r1, r24
     c52:	99 1f       	adc	r25, r25
     c54:	f1 cf       	rjmp	.-30     	; 0xc38 <__fp_splitA+0xc>
     c56:	86 95       	lsr	r24
     c58:	71 05       	cpc	r23, r1
     c5a:	61 05       	cpc	r22, r1
     c5c:	08 94       	sec
     c5e:	08 95       	ret

00000c60 <__fp_zero>:
     c60:	e8 94       	clt

00000c62 <__fp_szero>:
     c62:	bb 27       	eor	r27, r27
     c64:	66 27       	eor	r22, r22
     c66:	77 27       	eor	r23, r23
     c68:	cb 01       	movw	r24, r22
     c6a:	97 f9       	bld	r25, 7
     c6c:	08 95       	ret

00000c6e <__gesf2>:
     c6e:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <__fp_cmp>
     c72:	08 f4       	brcc	.+2      	; 0xc76 <__gesf2+0x8>
     c74:	8f ef       	ldi	r24, 0xFF	; 255
     c76:	08 95       	ret

00000c78 <__mulsf3>:
     c78:	0e 94 4f 06 	call	0xc9e	; 0xc9e <__mulsf3x>
     c7c:	0c 94 c0 06 	jmp	0xd80	; 0xd80 <__fp_round>
     c80:	0e 94 b2 06 	call	0xd64	; 0xd64 <__fp_pscA>
     c84:	38 f0       	brcs	.+14     	; 0xc94 <__mulsf3+0x1c>
     c86:	0e 94 b9 06 	call	0xd72	; 0xd72 <__fp_pscB>
     c8a:	20 f0       	brcs	.+8      	; 0xc94 <__mulsf3+0x1c>
     c8c:	95 23       	and	r25, r21
     c8e:	11 f0       	breq	.+4      	; 0xc94 <__mulsf3+0x1c>
     c90:	0c 94 a9 06 	jmp	0xd52	; 0xd52 <__fp_inf>
     c94:	0c 94 af 06 	jmp	0xd5e	; 0xd5e <__fp_nan>
     c98:	11 24       	eor	r1, r1
     c9a:	0c 94 31 06 	jmp	0xc62	; 0xc62 <__fp_szero>

00000c9e <__mulsf3x>:
     c9e:	0e 94 0e 06 	call	0xc1c	; 0xc1c <__fp_split3>
     ca2:	70 f3       	brcs	.-36     	; 0xc80 <__mulsf3+0x8>

00000ca4 <__mulsf3_pse>:
     ca4:	95 9f       	mul	r25, r21
     ca6:	c1 f3       	breq	.-16     	; 0xc98 <__mulsf3+0x20>
     ca8:	95 0f       	add	r25, r21
     caa:	50 e0       	ldi	r21, 0x00	; 0
     cac:	55 1f       	adc	r21, r21
     cae:	62 9f       	mul	r22, r18
     cb0:	f0 01       	movw	r30, r0
     cb2:	72 9f       	mul	r23, r18
     cb4:	bb 27       	eor	r27, r27
     cb6:	f0 0d       	add	r31, r0
     cb8:	b1 1d       	adc	r27, r1
     cba:	63 9f       	mul	r22, r19
     cbc:	aa 27       	eor	r26, r26
     cbe:	f0 0d       	add	r31, r0
     cc0:	b1 1d       	adc	r27, r1
     cc2:	aa 1f       	adc	r26, r26
     cc4:	64 9f       	mul	r22, r20
     cc6:	66 27       	eor	r22, r22
     cc8:	b0 0d       	add	r27, r0
     cca:	a1 1d       	adc	r26, r1
     ccc:	66 1f       	adc	r22, r22
     cce:	82 9f       	mul	r24, r18
     cd0:	22 27       	eor	r18, r18
     cd2:	b0 0d       	add	r27, r0
     cd4:	a1 1d       	adc	r26, r1
     cd6:	62 1f       	adc	r22, r18
     cd8:	73 9f       	mul	r23, r19
     cda:	b0 0d       	add	r27, r0
     cdc:	a1 1d       	adc	r26, r1
     cde:	62 1f       	adc	r22, r18
     ce0:	83 9f       	mul	r24, r19
     ce2:	a0 0d       	add	r26, r0
     ce4:	61 1d       	adc	r22, r1
     ce6:	22 1f       	adc	r18, r18
     ce8:	74 9f       	mul	r23, r20
     cea:	33 27       	eor	r19, r19
     cec:	a0 0d       	add	r26, r0
     cee:	61 1d       	adc	r22, r1
     cf0:	23 1f       	adc	r18, r19
     cf2:	84 9f       	mul	r24, r20
     cf4:	60 0d       	add	r22, r0
     cf6:	21 1d       	adc	r18, r1
     cf8:	82 2f       	mov	r24, r18
     cfa:	76 2f       	mov	r23, r22
     cfc:	6a 2f       	mov	r22, r26
     cfe:	11 24       	eor	r1, r1
     d00:	9f 57       	subi	r25, 0x7F	; 127
     d02:	50 40       	sbci	r21, 0x00	; 0
     d04:	9a f0       	brmi	.+38     	; 0xd2c <__mulsf3_pse+0x88>
     d06:	f1 f0       	breq	.+60     	; 0xd44 <__mulsf3_pse+0xa0>
     d08:	88 23       	and	r24, r24
     d0a:	4a f0       	brmi	.+18     	; 0xd1e <__mulsf3_pse+0x7a>
     d0c:	ee 0f       	add	r30, r30
     d0e:	ff 1f       	adc	r31, r31
     d10:	bb 1f       	adc	r27, r27
     d12:	66 1f       	adc	r22, r22
     d14:	77 1f       	adc	r23, r23
     d16:	88 1f       	adc	r24, r24
     d18:	91 50       	subi	r25, 0x01	; 1
     d1a:	50 40       	sbci	r21, 0x00	; 0
     d1c:	a9 f7       	brne	.-22     	; 0xd08 <__mulsf3_pse+0x64>
     d1e:	9e 3f       	cpi	r25, 0xFE	; 254
     d20:	51 05       	cpc	r21, r1
     d22:	80 f0       	brcs	.+32     	; 0xd44 <__mulsf3_pse+0xa0>
     d24:	0c 94 a9 06 	jmp	0xd52	; 0xd52 <__fp_inf>
     d28:	0c 94 31 06 	jmp	0xc62	; 0xc62 <__fp_szero>
     d2c:	5f 3f       	cpi	r21, 0xFF	; 255
     d2e:	e4 f3       	brlt	.-8      	; 0xd28 <__mulsf3_pse+0x84>
     d30:	98 3e       	cpi	r25, 0xE8	; 232
     d32:	d4 f3       	brlt	.-12     	; 0xd28 <__mulsf3_pse+0x84>
     d34:	86 95       	lsr	r24
     d36:	77 95       	ror	r23
     d38:	67 95       	ror	r22
     d3a:	b7 95       	ror	r27
     d3c:	f7 95       	ror	r31
     d3e:	e7 95       	ror	r30
     d40:	9f 5f       	subi	r25, 0xFF	; 255
     d42:	c1 f7       	brne	.-16     	; 0xd34 <__mulsf3_pse+0x90>
     d44:	fe 2b       	or	r31, r30
     d46:	88 0f       	add	r24, r24
     d48:	91 1d       	adc	r25, r1
     d4a:	96 95       	lsr	r25
     d4c:	87 95       	ror	r24
     d4e:	97 f9       	bld	r25, 7
     d50:	08 95       	ret

00000d52 <__fp_inf>:
     d52:	97 f9       	bld	r25, 7
     d54:	9f 67       	ori	r25, 0x7F	; 127
     d56:	80 e8       	ldi	r24, 0x80	; 128
     d58:	70 e0       	ldi	r23, 0x00	; 0
     d5a:	60 e0       	ldi	r22, 0x00	; 0
     d5c:	08 95       	ret

00000d5e <__fp_nan>:
     d5e:	9f ef       	ldi	r25, 0xFF	; 255
     d60:	80 ec       	ldi	r24, 0xC0	; 192
     d62:	08 95       	ret

00000d64 <__fp_pscA>:
     d64:	00 24       	eor	r0, r0
     d66:	0a 94       	dec	r0
     d68:	16 16       	cp	r1, r22
     d6a:	17 06       	cpc	r1, r23
     d6c:	18 06       	cpc	r1, r24
     d6e:	09 06       	cpc	r0, r25
     d70:	08 95       	ret

00000d72 <__fp_pscB>:
     d72:	00 24       	eor	r0, r0
     d74:	0a 94       	dec	r0
     d76:	12 16       	cp	r1, r18
     d78:	13 06       	cpc	r1, r19
     d7a:	14 06       	cpc	r1, r20
     d7c:	05 06       	cpc	r0, r21
     d7e:	08 95       	ret

00000d80 <__fp_round>:
     d80:	09 2e       	mov	r0, r25
     d82:	03 94       	inc	r0
     d84:	00 0c       	add	r0, r0
     d86:	11 f4       	brne	.+4      	; 0xd8c <__fp_round+0xc>
     d88:	88 23       	and	r24, r24
     d8a:	52 f0       	brmi	.+20     	; 0xda0 <__fp_round+0x20>
     d8c:	bb 0f       	add	r27, r27
     d8e:	40 f4       	brcc	.+16     	; 0xda0 <__fp_round+0x20>
     d90:	bf 2b       	or	r27, r31
     d92:	11 f4       	brne	.+4      	; 0xd98 <__fp_round+0x18>
     d94:	60 ff       	sbrs	r22, 0
     d96:	04 c0       	rjmp	.+8      	; 0xda0 <__fp_round+0x20>
     d98:	6f 5f       	subi	r22, 0xFF	; 255
     d9a:	7f 4f       	sbci	r23, 0xFF	; 255
     d9c:	8f 4f       	sbci	r24, 0xFF	; 255
     d9e:	9f 4f       	sbci	r25, 0xFF	; 255
     da0:	08 95       	ret

00000da2 <__tablejump2__>:
     da2:	ee 0f       	add	r30, r30
     da4:	ff 1f       	adc	r31, r31
     da6:	05 90       	lpm	r0, Z+
     da8:	f4 91       	lpm	r31, Z
     daa:	e0 2d       	mov	r30, r0
     dac:	09 94       	ijmp

00000dae <puts>:
     dae:	0f 93       	push	r16
     db0:	1f 93       	push	r17
     db2:	cf 93       	push	r28
     db4:	df 93       	push	r29
     db6:	e0 91 8b 20 	lds	r30, 0x208B	; 0x80208b <__iob+0x2>
     dba:	f0 91 8c 20 	lds	r31, 0x208C	; 0x80208c <__iob+0x3>
     dbe:	23 81       	ldd	r18, Z+3	; 0x03
     dc0:	21 ff       	sbrs	r18, 1
     dc2:	1b c0       	rjmp	.+54     	; 0xdfa <puts+0x4c>
     dc4:	8c 01       	movw	r16, r24
     dc6:	d0 e0       	ldi	r29, 0x00	; 0
     dc8:	c0 e0       	ldi	r28, 0x00	; 0
     dca:	f8 01       	movw	r30, r16
     dcc:	81 91       	ld	r24, Z+
     dce:	8f 01       	movw	r16, r30
     dd0:	60 91 8b 20 	lds	r22, 0x208B	; 0x80208b <__iob+0x2>
     dd4:	70 91 8c 20 	lds	r23, 0x208C	; 0x80208c <__iob+0x3>
     dd8:	db 01       	movw	r26, r22
     dda:	18 96       	adiw	r26, 0x08	; 8
     ddc:	ed 91       	ld	r30, X+
     dde:	fc 91       	ld	r31, X
     de0:	19 97       	sbiw	r26, 0x09	; 9
     de2:	88 23       	and	r24, r24
     de4:	31 f0       	breq	.+12     	; 0xdf2 <puts+0x44>
     de6:	09 95       	icall
     de8:	89 2b       	or	r24, r25
     dea:	79 f3       	breq	.-34     	; 0xdca <puts+0x1c>
     dec:	df ef       	ldi	r29, 0xFF	; 255
     dee:	cf ef       	ldi	r28, 0xFF	; 255
     df0:	ec cf       	rjmp	.-40     	; 0xdca <puts+0x1c>
     df2:	8a e0       	ldi	r24, 0x0A	; 10
     df4:	09 95       	icall
     df6:	89 2b       	or	r24, r25
     df8:	19 f0       	breq	.+6      	; 0xe00 <puts+0x52>
     dfa:	8f ef       	ldi	r24, 0xFF	; 255
     dfc:	9f ef       	ldi	r25, 0xFF	; 255
     dfe:	02 c0       	rjmp	.+4      	; 0xe04 <puts+0x56>
     e00:	8d 2f       	mov	r24, r29
     e02:	9c 2f       	mov	r25, r28
     e04:	df 91       	pop	r29
     e06:	cf 91       	pop	r28
     e08:	1f 91       	pop	r17
     e0a:	0f 91       	pop	r16
     e0c:	08 95       	ret

00000e0e <sprintf>:
     e0e:	ae e0       	ldi	r26, 0x0E	; 14
     e10:	b0 e0       	ldi	r27, 0x00	; 0
     e12:	ed e0       	ldi	r30, 0x0D	; 13
     e14:	f7 e0       	ldi	r31, 0x07	; 7
     e16:	0c 94 c8 09 	jmp	0x1390	; 0x1390 <__prologue_saves__+0x1c>
     e1a:	0d 89       	ldd	r16, Y+21	; 0x15
     e1c:	1e 89       	ldd	r17, Y+22	; 0x16
     e1e:	86 e0       	ldi	r24, 0x06	; 6
     e20:	8c 83       	std	Y+4, r24	; 0x04
     e22:	09 83       	std	Y+1, r16	; 0x01
     e24:	1a 83       	std	Y+2, r17	; 0x02
     e26:	8f ef       	ldi	r24, 0xFF	; 255
     e28:	9f e7       	ldi	r25, 0x7F	; 127
     e2a:	8d 83       	std	Y+5, r24	; 0x05
     e2c:	9e 83       	std	Y+6, r25	; 0x06
     e2e:	ae 01       	movw	r20, r28
     e30:	47 5e       	subi	r20, 0xE7	; 231
     e32:	5f 4f       	sbci	r21, 0xFF	; 255
     e34:	6f 89       	ldd	r22, Y+23	; 0x17
     e36:	78 8d       	ldd	r23, Y+24	; 0x18
     e38:	ce 01       	movw	r24, r28
     e3a:	01 96       	adiw	r24, 0x01	; 1
     e3c:	0e 94 29 07 	call	0xe52	; 0xe52 <vfprintf>
     e40:	ef 81       	ldd	r30, Y+7	; 0x07
     e42:	f8 85       	ldd	r31, Y+8	; 0x08
     e44:	e0 0f       	add	r30, r16
     e46:	f1 1f       	adc	r31, r17
     e48:	10 82       	st	Z, r1
     e4a:	2e 96       	adiw	r28, 0x0e	; 14
     e4c:	e4 e0       	ldi	r30, 0x04	; 4
     e4e:	0c 94 e1 09 	jmp	0x13c2	; 0x13c2 <__epilogue_restores__+0x1c>

00000e52 <vfprintf>:
     e52:	ab e0       	ldi	r26, 0x0B	; 11
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	ef e2       	ldi	r30, 0x2F	; 47
     e58:	f7 e0       	ldi	r31, 0x07	; 7
     e5a:	0c 94 ba 09 	jmp	0x1374	; 0x1374 <__prologue_saves__>
     e5e:	6c 01       	movw	r12, r24
     e60:	7b 01       	movw	r14, r22
     e62:	8a 01       	movw	r16, r20
     e64:	fc 01       	movw	r30, r24
     e66:	16 82       	std	Z+6, r1	; 0x06
     e68:	17 82       	std	Z+7, r1	; 0x07
     e6a:	83 81       	ldd	r24, Z+3	; 0x03
     e6c:	81 ff       	sbrs	r24, 1
     e6e:	cc c1       	rjmp	.+920    	; 0x1208 <vfprintf+0x3b6>
     e70:	ce 01       	movw	r24, r28
     e72:	01 96       	adiw	r24, 0x01	; 1
     e74:	3c 01       	movw	r6, r24
     e76:	f6 01       	movw	r30, r12
     e78:	93 81       	ldd	r25, Z+3	; 0x03
     e7a:	f7 01       	movw	r30, r14
     e7c:	93 fd       	sbrc	r25, 3
     e7e:	85 91       	lpm	r24, Z+
     e80:	93 ff       	sbrs	r25, 3
     e82:	81 91       	ld	r24, Z+
     e84:	7f 01       	movw	r14, r30
     e86:	88 23       	and	r24, r24
     e88:	09 f4       	brne	.+2      	; 0xe8c <vfprintf+0x3a>
     e8a:	ba c1       	rjmp	.+884    	; 0x1200 <vfprintf+0x3ae>
     e8c:	85 32       	cpi	r24, 0x25	; 37
     e8e:	39 f4       	brne	.+14     	; 0xe9e <vfprintf+0x4c>
     e90:	93 fd       	sbrc	r25, 3
     e92:	85 91       	lpm	r24, Z+
     e94:	93 ff       	sbrs	r25, 3
     e96:	81 91       	ld	r24, Z+
     e98:	7f 01       	movw	r14, r30
     e9a:	85 32       	cpi	r24, 0x25	; 37
     e9c:	29 f4       	brne	.+10     	; 0xea8 <vfprintf+0x56>
     e9e:	b6 01       	movw	r22, r12
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	0e 94 20 09 	call	0x1240	; 0x1240 <fputc>
     ea6:	e7 cf       	rjmp	.-50     	; 0xe76 <vfprintf+0x24>
     ea8:	91 2c       	mov	r9, r1
     eaa:	21 2c       	mov	r2, r1
     eac:	31 2c       	mov	r3, r1
     eae:	ff e1       	ldi	r31, 0x1F	; 31
     eb0:	f3 15       	cp	r31, r3
     eb2:	d8 f0       	brcs	.+54     	; 0xeea <vfprintf+0x98>
     eb4:	8b 32       	cpi	r24, 0x2B	; 43
     eb6:	79 f0       	breq	.+30     	; 0xed6 <vfprintf+0x84>
     eb8:	38 f4       	brcc	.+14     	; 0xec8 <vfprintf+0x76>
     eba:	80 32       	cpi	r24, 0x20	; 32
     ebc:	79 f0       	breq	.+30     	; 0xedc <vfprintf+0x8a>
     ebe:	83 32       	cpi	r24, 0x23	; 35
     ec0:	a1 f4       	brne	.+40     	; 0xeea <vfprintf+0x98>
     ec2:	23 2d       	mov	r18, r3
     ec4:	20 61       	ori	r18, 0x10	; 16
     ec6:	1d c0       	rjmp	.+58     	; 0xf02 <vfprintf+0xb0>
     ec8:	8d 32       	cpi	r24, 0x2D	; 45
     eca:	61 f0       	breq	.+24     	; 0xee4 <vfprintf+0x92>
     ecc:	80 33       	cpi	r24, 0x30	; 48
     ece:	69 f4       	brne	.+26     	; 0xeea <vfprintf+0x98>
     ed0:	23 2d       	mov	r18, r3
     ed2:	21 60       	ori	r18, 0x01	; 1
     ed4:	16 c0       	rjmp	.+44     	; 0xf02 <vfprintf+0xb0>
     ed6:	83 2d       	mov	r24, r3
     ed8:	82 60       	ori	r24, 0x02	; 2
     eda:	38 2e       	mov	r3, r24
     edc:	e3 2d       	mov	r30, r3
     ede:	e4 60       	ori	r30, 0x04	; 4
     ee0:	3e 2e       	mov	r3, r30
     ee2:	2a c0       	rjmp	.+84     	; 0xf38 <vfprintf+0xe6>
     ee4:	f3 2d       	mov	r31, r3
     ee6:	f8 60       	ori	r31, 0x08	; 8
     ee8:	1d c0       	rjmp	.+58     	; 0xf24 <vfprintf+0xd2>
     eea:	37 fc       	sbrc	r3, 7
     eec:	2d c0       	rjmp	.+90     	; 0xf48 <vfprintf+0xf6>
     eee:	20 ed       	ldi	r18, 0xD0	; 208
     ef0:	28 0f       	add	r18, r24
     ef2:	2a 30       	cpi	r18, 0x0A	; 10
     ef4:	40 f0       	brcs	.+16     	; 0xf06 <vfprintf+0xb4>
     ef6:	8e 32       	cpi	r24, 0x2E	; 46
     ef8:	b9 f4       	brne	.+46     	; 0xf28 <vfprintf+0xd6>
     efa:	36 fc       	sbrc	r3, 6
     efc:	81 c1       	rjmp	.+770    	; 0x1200 <vfprintf+0x3ae>
     efe:	23 2d       	mov	r18, r3
     f00:	20 64       	ori	r18, 0x40	; 64
     f02:	32 2e       	mov	r3, r18
     f04:	19 c0       	rjmp	.+50     	; 0xf38 <vfprintf+0xe6>
     f06:	36 fe       	sbrs	r3, 6
     f08:	06 c0       	rjmp	.+12     	; 0xf16 <vfprintf+0xc4>
     f0a:	8a e0       	ldi	r24, 0x0A	; 10
     f0c:	98 9e       	mul	r9, r24
     f0e:	20 0d       	add	r18, r0
     f10:	11 24       	eor	r1, r1
     f12:	92 2e       	mov	r9, r18
     f14:	11 c0       	rjmp	.+34     	; 0xf38 <vfprintf+0xe6>
     f16:	ea e0       	ldi	r30, 0x0A	; 10
     f18:	2e 9e       	mul	r2, r30
     f1a:	20 0d       	add	r18, r0
     f1c:	11 24       	eor	r1, r1
     f1e:	22 2e       	mov	r2, r18
     f20:	f3 2d       	mov	r31, r3
     f22:	f0 62       	ori	r31, 0x20	; 32
     f24:	3f 2e       	mov	r3, r31
     f26:	08 c0       	rjmp	.+16     	; 0xf38 <vfprintf+0xe6>
     f28:	8c 36       	cpi	r24, 0x6C	; 108
     f2a:	21 f4       	brne	.+8      	; 0xf34 <vfprintf+0xe2>
     f2c:	83 2d       	mov	r24, r3
     f2e:	80 68       	ori	r24, 0x80	; 128
     f30:	38 2e       	mov	r3, r24
     f32:	02 c0       	rjmp	.+4      	; 0xf38 <vfprintf+0xe6>
     f34:	88 36       	cpi	r24, 0x68	; 104
     f36:	41 f4       	brne	.+16     	; 0xf48 <vfprintf+0xf6>
     f38:	f7 01       	movw	r30, r14
     f3a:	93 fd       	sbrc	r25, 3
     f3c:	85 91       	lpm	r24, Z+
     f3e:	93 ff       	sbrs	r25, 3
     f40:	81 91       	ld	r24, Z+
     f42:	7f 01       	movw	r14, r30
     f44:	81 11       	cpse	r24, r1
     f46:	b3 cf       	rjmp	.-154    	; 0xeae <vfprintf+0x5c>
     f48:	98 2f       	mov	r25, r24
     f4a:	9f 7d       	andi	r25, 0xDF	; 223
     f4c:	95 54       	subi	r25, 0x45	; 69
     f4e:	93 30       	cpi	r25, 0x03	; 3
     f50:	28 f4       	brcc	.+10     	; 0xf5c <vfprintf+0x10a>
     f52:	0c 5f       	subi	r16, 0xFC	; 252
     f54:	1f 4f       	sbci	r17, 0xFF	; 255
     f56:	9f e3       	ldi	r25, 0x3F	; 63
     f58:	99 83       	std	Y+1, r25	; 0x01
     f5a:	0d c0       	rjmp	.+26     	; 0xf76 <vfprintf+0x124>
     f5c:	83 36       	cpi	r24, 0x63	; 99
     f5e:	31 f0       	breq	.+12     	; 0xf6c <vfprintf+0x11a>
     f60:	83 37       	cpi	r24, 0x73	; 115
     f62:	71 f0       	breq	.+28     	; 0xf80 <vfprintf+0x12e>
     f64:	83 35       	cpi	r24, 0x53	; 83
     f66:	09 f0       	breq	.+2      	; 0xf6a <vfprintf+0x118>
     f68:	59 c0       	rjmp	.+178    	; 0x101c <vfprintf+0x1ca>
     f6a:	21 c0       	rjmp	.+66     	; 0xfae <vfprintf+0x15c>
     f6c:	f8 01       	movw	r30, r16
     f6e:	80 81       	ld	r24, Z
     f70:	89 83       	std	Y+1, r24	; 0x01
     f72:	0e 5f       	subi	r16, 0xFE	; 254
     f74:	1f 4f       	sbci	r17, 0xFF	; 255
     f76:	88 24       	eor	r8, r8
     f78:	83 94       	inc	r8
     f7a:	91 2c       	mov	r9, r1
     f7c:	53 01       	movw	r10, r6
     f7e:	13 c0       	rjmp	.+38     	; 0xfa6 <vfprintf+0x154>
     f80:	28 01       	movw	r4, r16
     f82:	f2 e0       	ldi	r31, 0x02	; 2
     f84:	4f 0e       	add	r4, r31
     f86:	51 1c       	adc	r5, r1
     f88:	f8 01       	movw	r30, r16
     f8a:	a0 80       	ld	r10, Z
     f8c:	b1 80       	ldd	r11, Z+1	; 0x01
     f8e:	36 fe       	sbrs	r3, 6
     f90:	03 c0       	rjmp	.+6      	; 0xf98 <vfprintf+0x146>
     f92:	69 2d       	mov	r22, r9
     f94:	70 e0       	ldi	r23, 0x00	; 0
     f96:	02 c0       	rjmp	.+4      	; 0xf9c <vfprintf+0x14a>
     f98:	6f ef       	ldi	r22, 0xFF	; 255
     f9a:	7f ef       	ldi	r23, 0xFF	; 255
     f9c:	c5 01       	movw	r24, r10
     f9e:	0e 94 15 09 	call	0x122a	; 0x122a <strnlen>
     fa2:	4c 01       	movw	r8, r24
     fa4:	82 01       	movw	r16, r4
     fa6:	f3 2d       	mov	r31, r3
     fa8:	ff 77       	andi	r31, 0x7F	; 127
     faa:	3f 2e       	mov	r3, r31
     fac:	16 c0       	rjmp	.+44     	; 0xfda <vfprintf+0x188>
     fae:	28 01       	movw	r4, r16
     fb0:	22 e0       	ldi	r18, 0x02	; 2
     fb2:	42 0e       	add	r4, r18
     fb4:	51 1c       	adc	r5, r1
     fb6:	f8 01       	movw	r30, r16
     fb8:	a0 80       	ld	r10, Z
     fba:	b1 80       	ldd	r11, Z+1	; 0x01
     fbc:	36 fe       	sbrs	r3, 6
     fbe:	03 c0       	rjmp	.+6      	; 0xfc6 <vfprintf+0x174>
     fc0:	69 2d       	mov	r22, r9
     fc2:	70 e0       	ldi	r23, 0x00	; 0
     fc4:	02 c0       	rjmp	.+4      	; 0xfca <vfprintf+0x178>
     fc6:	6f ef       	ldi	r22, 0xFF	; 255
     fc8:	7f ef       	ldi	r23, 0xFF	; 255
     fca:	c5 01       	movw	r24, r10
     fcc:	0e 94 0a 09 	call	0x1214	; 0x1214 <strnlen_P>
     fd0:	4c 01       	movw	r8, r24
     fd2:	f3 2d       	mov	r31, r3
     fd4:	f0 68       	ori	r31, 0x80	; 128
     fd6:	3f 2e       	mov	r3, r31
     fd8:	82 01       	movw	r16, r4
     fda:	33 fc       	sbrc	r3, 3
     fdc:	1b c0       	rjmp	.+54     	; 0x1014 <vfprintf+0x1c2>
     fde:	82 2d       	mov	r24, r2
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	88 16       	cp	r8, r24
     fe4:	99 06       	cpc	r9, r25
     fe6:	b0 f4       	brcc	.+44     	; 0x1014 <vfprintf+0x1c2>
     fe8:	b6 01       	movw	r22, r12
     fea:	80 e2       	ldi	r24, 0x20	; 32
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	0e 94 20 09 	call	0x1240	; 0x1240 <fputc>
     ff2:	2a 94       	dec	r2
     ff4:	f4 cf       	rjmp	.-24     	; 0xfde <vfprintf+0x18c>
     ff6:	f5 01       	movw	r30, r10
     ff8:	37 fc       	sbrc	r3, 7
     ffa:	85 91       	lpm	r24, Z+
     ffc:	37 fe       	sbrs	r3, 7
     ffe:	81 91       	ld	r24, Z+
    1000:	5f 01       	movw	r10, r30
    1002:	b6 01       	movw	r22, r12
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	0e 94 20 09 	call	0x1240	; 0x1240 <fputc>
    100a:	21 10       	cpse	r2, r1
    100c:	2a 94       	dec	r2
    100e:	21 e0       	ldi	r18, 0x01	; 1
    1010:	82 1a       	sub	r8, r18
    1012:	91 08       	sbc	r9, r1
    1014:	81 14       	cp	r8, r1
    1016:	91 04       	cpc	r9, r1
    1018:	71 f7       	brne	.-36     	; 0xff6 <vfprintf+0x1a4>
    101a:	e8 c0       	rjmp	.+464    	; 0x11ec <vfprintf+0x39a>
    101c:	84 36       	cpi	r24, 0x64	; 100
    101e:	11 f0       	breq	.+4      	; 0x1024 <vfprintf+0x1d2>
    1020:	89 36       	cpi	r24, 0x69	; 105
    1022:	41 f5       	brne	.+80     	; 0x1074 <vfprintf+0x222>
    1024:	f8 01       	movw	r30, r16
    1026:	37 fe       	sbrs	r3, 7
    1028:	07 c0       	rjmp	.+14     	; 0x1038 <vfprintf+0x1e6>
    102a:	60 81       	ld	r22, Z
    102c:	71 81       	ldd	r23, Z+1	; 0x01
    102e:	82 81       	ldd	r24, Z+2	; 0x02
    1030:	93 81       	ldd	r25, Z+3	; 0x03
    1032:	0c 5f       	subi	r16, 0xFC	; 252
    1034:	1f 4f       	sbci	r17, 0xFF	; 255
    1036:	08 c0       	rjmp	.+16     	; 0x1048 <vfprintf+0x1f6>
    1038:	60 81       	ld	r22, Z
    103a:	71 81       	ldd	r23, Z+1	; 0x01
    103c:	07 2e       	mov	r0, r23
    103e:	00 0c       	add	r0, r0
    1040:	88 0b       	sbc	r24, r24
    1042:	99 0b       	sbc	r25, r25
    1044:	0e 5f       	subi	r16, 0xFE	; 254
    1046:	1f 4f       	sbci	r17, 0xFF	; 255
    1048:	f3 2d       	mov	r31, r3
    104a:	ff 76       	andi	r31, 0x6F	; 111
    104c:	3f 2e       	mov	r3, r31
    104e:	97 ff       	sbrs	r25, 7
    1050:	09 c0       	rjmp	.+18     	; 0x1064 <vfprintf+0x212>
    1052:	90 95       	com	r25
    1054:	80 95       	com	r24
    1056:	70 95       	com	r23
    1058:	61 95       	neg	r22
    105a:	7f 4f       	sbci	r23, 0xFF	; 255
    105c:	8f 4f       	sbci	r24, 0xFF	; 255
    105e:	9f 4f       	sbci	r25, 0xFF	; 255
    1060:	f0 68       	ori	r31, 0x80	; 128
    1062:	3f 2e       	mov	r3, r31
    1064:	2a e0       	ldi	r18, 0x0A	; 10
    1066:	30 e0       	ldi	r19, 0x00	; 0
    1068:	a3 01       	movw	r20, r6
    106a:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <__ultoa_invert>
    106e:	88 2e       	mov	r8, r24
    1070:	86 18       	sub	r8, r6
    1072:	45 c0       	rjmp	.+138    	; 0x10fe <vfprintf+0x2ac>
    1074:	85 37       	cpi	r24, 0x75	; 117
    1076:	31 f4       	brne	.+12     	; 0x1084 <vfprintf+0x232>
    1078:	23 2d       	mov	r18, r3
    107a:	2f 7e       	andi	r18, 0xEF	; 239
    107c:	b2 2e       	mov	r11, r18
    107e:	2a e0       	ldi	r18, 0x0A	; 10
    1080:	30 e0       	ldi	r19, 0x00	; 0
    1082:	25 c0       	rjmp	.+74     	; 0x10ce <vfprintf+0x27c>
    1084:	93 2d       	mov	r25, r3
    1086:	99 7f       	andi	r25, 0xF9	; 249
    1088:	b9 2e       	mov	r11, r25
    108a:	8f 36       	cpi	r24, 0x6F	; 111
    108c:	c1 f0       	breq	.+48     	; 0x10be <vfprintf+0x26c>
    108e:	18 f4       	brcc	.+6      	; 0x1096 <vfprintf+0x244>
    1090:	88 35       	cpi	r24, 0x58	; 88
    1092:	79 f0       	breq	.+30     	; 0x10b2 <vfprintf+0x260>
    1094:	b5 c0       	rjmp	.+362    	; 0x1200 <vfprintf+0x3ae>
    1096:	80 37       	cpi	r24, 0x70	; 112
    1098:	19 f0       	breq	.+6      	; 0x10a0 <vfprintf+0x24e>
    109a:	88 37       	cpi	r24, 0x78	; 120
    109c:	21 f0       	breq	.+8      	; 0x10a6 <vfprintf+0x254>
    109e:	b0 c0       	rjmp	.+352    	; 0x1200 <vfprintf+0x3ae>
    10a0:	e9 2f       	mov	r30, r25
    10a2:	e0 61       	ori	r30, 0x10	; 16
    10a4:	be 2e       	mov	r11, r30
    10a6:	b4 fe       	sbrs	r11, 4
    10a8:	0d c0       	rjmp	.+26     	; 0x10c4 <vfprintf+0x272>
    10aa:	fb 2d       	mov	r31, r11
    10ac:	f4 60       	ori	r31, 0x04	; 4
    10ae:	bf 2e       	mov	r11, r31
    10b0:	09 c0       	rjmp	.+18     	; 0x10c4 <vfprintf+0x272>
    10b2:	34 fe       	sbrs	r3, 4
    10b4:	0a c0       	rjmp	.+20     	; 0x10ca <vfprintf+0x278>
    10b6:	29 2f       	mov	r18, r25
    10b8:	26 60       	ori	r18, 0x06	; 6
    10ba:	b2 2e       	mov	r11, r18
    10bc:	06 c0       	rjmp	.+12     	; 0x10ca <vfprintf+0x278>
    10be:	28 e0       	ldi	r18, 0x08	; 8
    10c0:	30 e0       	ldi	r19, 0x00	; 0
    10c2:	05 c0       	rjmp	.+10     	; 0x10ce <vfprintf+0x27c>
    10c4:	20 e1       	ldi	r18, 0x10	; 16
    10c6:	30 e0       	ldi	r19, 0x00	; 0
    10c8:	02 c0       	rjmp	.+4      	; 0x10ce <vfprintf+0x27c>
    10ca:	20 e1       	ldi	r18, 0x10	; 16
    10cc:	32 e0       	ldi	r19, 0x02	; 2
    10ce:	f8 01       	movw	r30, r16
    10d0:	b7 fe       	sbrs	r11, 7
    10d2:	07 c0       	rjmp	.+14     	; 0x10e2 <vfprintf+0x290>
    10d4:	60 81       	ld	r22, Z
    10d6:	71 81       	ldd	r23, Z+1	; 0x01
    10d8:	82 81       	ldd	r24, Z+2	; 0x02
    10da:	93 81       	ldd	r25, Z+3	; 0x03
    10dc:	0c 5f       	subi	r16, 0xFC	; 252
    10de:	1f 4f       	sbci	r17, 0xFF	; 255
    10e0:	06 c0       	rjmp	.+12     	; 0x10ee <vfprintf+0x29c>
    10e2:	60 81       	ld	r22, Z
    10e4:	71 81       	ldd	r23, Z+1	; 0x01
    10e6:	80 e0       	ldi	r24, 0x00	; 0
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	0e 5f       	subi	r16, 0xFE	; 254
    10ec:	1f 4f       	sbci	r17, 0xFF	; 255
    10ee:	a3 01       	movw	r20, r6
    10f0:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <__ultoa_invert>
    10f4:	88 2e       	mov	r8, r24
    10f6:	86 18       	sub	r8, r6
    10f8:	fb 2d       	mov	r31, r11
    10fa:	ff 77       	andi	r31, 0x7F	; 127
    10fc:	3f 2e       	mov	r3, r31
    10fe:	36 fe       	sbrs	r3, 6
    1100:	0d c0       	rjmp	.+26     	; 0x111c <vfprintf+0x2ca>
    1102:	23 2d       	mov	r18, r3
    1104:	2e 7f       	andi	r18, 0xFE	; 254
    1106:	a2 2e       	mov	r10, r18
    1108:	89 14       	cp	r8, r9
    110a:	58 f4       	brcc	.+22     	; 0x1122 <vfprintf+0x2d0>
    110c:	34 fe       	sbrs	r3, 4
    110e:	0b c0       	rjmp	.+22     	; 0x1126 <vfprintf+0x2d4>
    1110:	32 fc       	sbrc	r3, 2
    1112:	09 c0       	rjmp	.+18     	; 0x1126 <vfprintf+0x2d4>
    1114:	83 2d       	mov	r24, r3
    1116:	8e 7e       	andi	r24, 0xEE	; 238
    1118:	a8 2e       	mov	r10, r24
    111a:	05 c0       	rjmp	.+10     	; 0x1126 <vfprintf+0x2d4>
    111c:	b8 2c       	mov	r11, r8
    111e:	a3 2c       	mov	r10, r3
    1120:	03 c0       	rjmp	.+6      	; 0x1128 <vfprintf+0x2d6>
    1122:	b8 2c       	mov	r11, r8
    1124:	01 c0       	rjmp	.+2      	; 0x1128 <vfprintf+0x2d6>
    1126:	b9 2c       	mov	r11, r9
    1128:	a4 fe       	sbrs	r10, 4
    112a:	0f c0       	rjmp	.+30     	; 0x114a <vfprintf+0x2f8>
    112c:	fe 01       	movw	r30, r28
    112e:	e8 0d       	add	r30, r8
    1130:	f1 1d       	adc	r31, r1
    1132:	80 81       	ld	r24, Z
    1134:	80 33       	cpi	r24, 0x30	; 48
    1136:	21 f4       	brne	.+8      	; 0x1140 <vfprintf+0x2ee>
    1138:	9a 2d       	mov	r25, r10
    113a:	99 7e       	andi	r25, 0xE9	; 233
    113c:	a9 2e       	mov	r10, r25
    113e:	09 c0       	rjmp	.+18     	; 0x1152 <vfprintf+0x300>
    1140:	a2 fe       	sbrs	r10, 2
    1142:	06 c0       	rjmp	.+12     	; 0x1150 <vfprintf+0x2fe>
    1144:	b3 94       	inc	r11
    1146:	b3 94       	inc	r11
    1148:	04 c0       	rjmp	.+8      	; 0x1152 <vfprintf+0x300>
    114a:	8a 2d       	mov	r24, r10
    114c:	86 78       	andi	r24, 0x86	; 134
    114e:	09 f0       	breq	.+2      	; 0x1152 <vfprintf+0x300>
    1150:	b3 94       	inc	r11
    1152:	a3 fc       	sbrc	r10, 3
    1154:	11 c0       	rjmp	.+34     	; 0x1178 <vfprintf+0x326>
    1156:	a0 fe       	sbrs	r10, 0
    1158:	06 c0       	rjmp	.+12     	; 0x1166 <vfprintf+0x314>
    115a:	b2 14       	cp	r11, r2
    115c:	88 f4       	brcc	.+34     	; 0x1180 <vfprintf+0x32e>
    115e:	28 0c       	add	r2, r8
    1160:	92 2c       	mov	r9, r2
    1162:	9b 18       	sub	r9, r11
    1164:	0e c0       	rjmp	.+28     	; 0x1182 <vfprintf+0x330>
    1166:	b2 14       	cp	r11, r2
    1168:	60 f4       	brcc	.+24     	; 0x1182 <vfprintf+0x330>
    116a:	b6 01       	movw	r22, r12
    116c:	80 e2       	ldi	r24, 0x20	; 32
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	0e 94 20 09 	call	0x1240	; 0x1240 <fputc>
    1174:	b3 94       	inc	r11
    1176:	f7 cf       	rjmp	.-18     	; 0x1166 <vfprintf+0x314>
    1178:	b2 14       	cp	r11, r2
    117a:	18 f4       	brcc	.+6      	; 0x1182 <vfprintf+0x330>
    117c:	2b 18       	sub	r2, r11
    117e:	02 c0       	rjmp	.+4      	; 0x1184 <vfprintf+0x332>
    1180:	98 2c       	mov	r9, r8
    1182:	21 2c       	mov	r2, r1
    1184:	a4 fe       	sbrs	r10, 4
    1186:	10 c0       	rjmp	.+32     	; 0x11a8 <vfprintf+0x356>
    1188:	b6 01       	movw	r22, r12
    118a:	80 e3       	ldi	r24, 0x30	; 48
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	0e 94 20 09 	call	0x1240	; 0x1240 <fputc>
    1192:	a2 fe       	sbrs	r10, 2
    1194:	17 c0       	rjmp	.+46     	; 0x11c4 <vfprintf+0x372>
    1196:	a1 fc       	sbrc	r10, 1
    1198:	03 c0       	rjmp	.+6      	; 0x11a0 <vfprintf+0x34e>
    119a:	88 e7       	ldi	r24, 0x78	; 120
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	02 c0       	rjmp	.+4      	; 0x11a4 <vfprintf+0x352>
    11a0:	88 e5       	ldi	r24, 0x58	; 88
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	b6 01       	movw	r22, r12
    11a6:	0c c0       	rjmp	.+24     	; 0x11c0 <vfprintf+0x36e>
    11a8:	8a 2d       	mov	r24, r10
    11aa:	86 78       	andi	r24, 0x86	; 134
    11ac:	59 f0       	breq	.+22     	; 0x11c4 <vfprintf+0x372>
    11ae:	a1 fe       	sbrs	r10, 1
    11b0:	02 c0       	rjmp	.+4      	; 0x11b6 <vfprintf+0x364>
    11b2:	8b e2       	ldi	r24, 0x2B	; 43
    11b4:	01 c0       	rjmp	.+2      	; 0x11b8 <vfprintf+0x366>
    11b6:	80 e2       	ldi	r24, 0x20	; 32
    11b8:	a7 fc       	sbrc	r10, 7
    11ba:	8d e2       	ldi	r24, 0x2D	; 45
    11bc:	b6 01       	movw	r22, r12
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	0e 94 20 09 	call	0x1240	; 0x1240 <fputc>
    11c4:	89 14       	cp	r8, r9
    11c6:	38 f4       	brcc	.+14     	; 0x11d6 <vfprintf+0x384>
    11c8:	b6 01       	movw	r22, r12
    11ca:	80 e3       	ldi	r24, 0x30	; 48
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	0e 94 20 09 	call	0x1240	; 0x1240 <fputc>
    11d2:	9a 94       	dec	r9
    11d4:	f7 cf       	rjmp	.-18     	; 0x11c4 <vfprintf+0x372>
    11d6:	8a 94       	dec	r8
    11d8:	f3 01       	movw	r30, r6
    11da:	e8 0d       	add	r30, r8
    11dc:	f1 1d       	adc	r31, r1
    11de:	80 81       	ld	r24, Z
    11e0:	b6 01       	movw	r22, r12
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	0e 94 20 09 	call	0x1240	; 0x1240 <fputc>
    11e8:	81 10       	cpse	r8, r1
    11ea:	f5 cf       	rjmp	.-22     	; 0x11d6 <vfprintf+0x384>
    11ec:	22 20       	and	r2, r2
    11ee:	09 f4       	brne	.+2      	; 0x11f2 <vfprintf+0x3a0>
    11f0:	42 ce       	rjmp	.-892    	; 0xe76 <vfprintf+0x24>
    11f2:	b6 01       	movw	r22, r12
    11f4:	80 e2       	ldi	r24, 0x20	; 32
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	0e 94 20 09 	call	0x1240	; 0x1240 <fputc>
    11fc:	2a 94       	dec	r2
    11fe:	f6 cf       	rjmp	.-20     	; 0x11ec <vfprintf+0x39a>
    1200:	f6 01       	movw	r30, r12
    1202:	86 81       	ldd	r24, Z+6	; 0x06
    1204:	97 81       	ldd	r25, Z+7	; 0x07
    1206:	02 c0       	rjmp	.+4      	; 0x120c <vfprintf+0x3ba>
    1208:	8f ef       	ldi	r24, 0xFF	; 255
    120a:	9f ef       	ldi	r25, 0xFF	; 255
    120c:	2b 96       	adiw	r28, 0x0b	; 11
    120e:	e2 e1       	ldi	r30, 0x12	; 18
    1210:	0c 94 d3 09 	jmp	0x13a6	; 0x13a6 <__epilogue_restores__>

00001214 <strnlen_P>:
    1214:	fc 01       	movw	r30, r24
    1216:	05 90       	lpm	r0, Z+
    1218:	61 50       	subi	r22, 0x01	; 1
    121a:	70 40       	sbci	r23, 0x00	; 0
    121c:	01 10       	cpse	r0, r1
    121e:	d8 f7       	brcc	.-10     	; 0x1216 <strnlen_P+0x2>
    1220:	80 95       	com	r24
    1222:	90 95       	com	r25
    1224:	8e 0f       	add	r24, r30
    1226:	9f 1f       	adc	r25, r31
    1228:	08 95       	ret

0000122a <strnlen>:
    122a:	fc 01       	movw	r30, r24
    122c:	61 50       	subi	r22, 0x01	; 1
    122e:	70 40       	sbci	r23, 0x00	; 0
    1230:	01 90       	ld	r0, Z+
    1232:	01 10       	cpse	r0, r1
    1234:	d8 f7       	brcc	.-10     	; 0x122c <strnlen+0x2>
    1236:	80 95       	com	r24
    1238:	90 95       	com	r25
    123a:	8e 0f       	add	r24, r30
    123c:	9f 1f       	adc	r25, r31
    123e:	08 95       	ret

00001240 <fputc>:
    1240:	0f 93       	push	r16
    1242:	1f 93       	push	r17
    1244:	cf 93       	push	r28
    1246:	df 93       	push	r29
    1248:	fb 01       	movw	r30, r22
    124a:	23 81       	ldd	r18, Z+3	; 0x03
    124c:	21 fd       	sbrc	r18, 1
    124e:	03 c0       	rjmp	.+6      	; 0x1256 <fputc+0x16>
    1250:	8f ef       	ldi	r24, 0xFF	; 255
    1252:	9f ef       	ldi	r25, 0xFF	; 255
    1254:	2c c0       	rjmp	.+88     	; 0x12ae <fputc+0x6e>
    1256:	22 ff       	sbrs	r18, 2
    1258:	16 c0       	rjmp	.+44     	; 0x1286 <fputc+0x46>
    125a:	46 81       	ldd	r20, Z+6	; 0x06
    125c:	57 81       	ldd	r21, Z+7	; 0x07
    125e:	24 81       	ldd	r18, Z+4	; 0x04
    1260:	35 81       	ldd	r19, Z+5	; 0x05
    1262:	42 17       	cp	r20, r18
    1264:	53 07       	cpc	r21, r19
    1266:	44 f4       	brge	.+16     	; 0x1278 <fputc+0x38>
    1268:	a0 81       	ld	r26, Z
    126a:	b1 81       	ldd	r27, Z+1	; 0x01
    126c:	9d 01       	movw	r18, r26
    126e:	2f 5f       	subi	r18, 0xFF	; 255
    1270:	3f 4f       	sbci	r19, 0xFF	; 255
    1272:	20 83       	st	Z, r18
    1274:	31 83       	std	Z+1, r19	; 0x01
    1276:	8c 93       	st	X, r24
    1278:	26 81       	ldd	r18, Z+6	; 0x06
    127a:	37 81       	ldd	r19, Z+7	; 0x07
    127c:	2f 5f       	subi	r18, 0xFF	; 255
    127e:	3f 4f       	sbci	r19, 0xFF	; 255
    1280:	26 83       	std	Z+6, r18	; 0x06
    1282:	37 83       	std	Z+7, r19	; 0x07
    1284:	14 c0       	rjmp	.+40     	; 0x12ae <fputc+0x6e>
    1286:	8b 01       	movw	r16, r22
    1288:	ec 01       	movw	r28, r24
    128a:	fb 01       	movw	r30, r22
    128c:	00 84       	ldd	r0, Z+8	; 0x08
    128e:	f1 85       	ldd	r31, Z+9	; 0x09
    1290:	e0 2d       	mov	r30, r0
    1292:	09 95       	icall
    1294:	89 2b       	or	r24, r25
    1296:	e1 f6       	brne	.-72     	; 0x1250 <fputc+0x10>
    1298:	d8 01       	movw	r26, r16
    129a:	16 96       	adiw	r26, 0x06	; 6
    129c:	8d 91       	ld	r24, X+
    129e:	9c 91       	ld	r25, X
    12a0:	17 97       	sbiw	r26, 0x07	; 7
    12a2:	01 96       	adiw	r24, 0x01	; 1
    12a4:	16 96       	adiw	r26, 0x06	; 6
    12a6:	8d 93       	st	X+, r24
    12a8:	9c 93       	st	X, r25
    12aa:	17 97       	sbiw	r26, 0x07	; 7
    12ac:	ce 01       	movw	r24, r28
    12ae:	df 91       	pop	r29
    12b0:	cf 91       	pop	r28
    12b2:	1f 91       	pop	r17
    12b4:	0f 91       	pop	r16
    12b6:	08 95       	ret

000012b8 <__ultoa_invert>:
    12b8:	fa 01       	movw	r30, r20
    12ba:	aa 27       	eor	r26, r26
    12bc:	28 30       	cpi	r18, 0x08	; 8
    12be:	51 f1       	breq	.+84     	; 0x1314 <__ultoa_invert+0x5c>
    12c0:	20 31       	cpi	r18, 0x10	; 16
    12c2:	81 f1       	breq	.+96     	; 0x1324 <__ultoa_invert+0x6c>
    12c4:	e8 94       	clt
    12c6:	6f 93       	push	r22
    12c8:	6e 7f       	andi	r22, 0xFE	; 254
    12ca:	6e 5f       	subi	r22, 0xFE	; 254
    12cc:	7f 4f       	sbci	r23, 0xFF	; 255
    12ce:	8f 4f       	sbci	r24, 0xFF	; 255
    12d0:	9f 4f       	sbci	r25, 0xFF	; 255
    12d2:	af 4f       	sbci	r26, 0xFF	; 255
    12d4:	b1 e0       	ldi	r27, 0x01	; 1
    12d6:	3e d0       	rcall	.+124    	; 0x1354 <__ultoa_invert+0x9c>
    12d8:	b4 e0       	ldi	r27, 0x04	; 4
    12da:	3c d0       	rcall	.+120    	; 0x1354 <__ultoa_invert+0x9c>
    12dc:	67 0f       	add	r22, r23
    12de:	78 1f       	adc	r23, r24
    12e0:	89 1f       	adc	r24, r25
    12e2:	9a 1f       	adc	r25, r26
    12e4:	a1 1d       	adc	r26, r1
    12e6:	68 0f       	add	r22, r24
    12e8:	79 1f       	adc	r23, r25
    12ea:	8a 1f       	adc	r24, r26
    12ec:	91 1d       	adc	r25, r1
    12ee:	a1 1d       	adc	r26, r1
    12f0:	6a 0f       	add	r22, r26
    12f2:	71 1d       	adc	r23, r1
    12f4:	81 1d       	adc	r24, r1
    12f6:	91 1d       	adc	r25, r1
    12f8:	a1 1d       	adc	r26, r1
    12fa:	20 d0       	rcall	.+64     	; 0x133c <__ultoa_invert+0x84>
    12fc:	09 f4       	brne	.+2      	; 0x1300 <__ultoa_invert+0x48>
    12fe:	68 94       	set
    1300:	3f 91       	pop	r19
    1302:	2a e0       	ldi	r18, 0x0A	; 10
    1304:	26 9f       	mul	r18, r22
    1306:	11 24       	eor	r1, r1
    1308:	30 19       	sub	r19, r0
    130a:	30 5d       	subi	r19, 0xD0	; 208
    130c:	31 93       	st	Z+, r19
    130e:	de f6       	brtc	.-74     	; 0x12c6 <__ultoa_invert+0xe>
    1310:	cf 01       	movw	r24, r30
    1312:	08 95       	ret
    1314:	46 2f       	mov	r20, r22
    1316:	47 70       	andi	r20, 0x07	; 7
    1318:	40 5d       	subi	r20, 0xD0	; 208
    131a:	41 93       	st	Z+, r20
    131c:	b3 e0       	ldi	r27, 0x03	; 3
    131e:	0f d0       	rcall	.+30     	; 0x133e <__ultoa_invert+0x86>
    1320:	c9 f7       	brne	.-14     	; 0x1314 <__ultoa_invert+0x5c>
    1322:	f6 cf       	rjmp	.-20     	; 0x1310 <__ultoa_invert+0x58>
    1324:	46 2f       	mov	r20, r22
    1326:	4f 70       	andi	r20, 0x0F	; 15
    1328:	40 5d       	subi	r20, 0xD0	; 208
    132a:	4a 33       	cpi	r20, 0x3A	; 58
    132c:	18 f0       	brcs	.+6      	; 0x1334 <__ultoa_invert+0x7c>
    132e:	49 5d       	subi	r20, 0xD9	; 217
    1330:	31 fd       	sbrc	r19, 1
    1332:	40 52       	subi	r20, 0x20	; 32
    1334:	41 93       	st	Z+, r20
    1336:	02 d0       	rcall	.+4      	; 0x133c <__ultoa_invert+0x84>
    1338:	a9 f7       	brne	.-22     	; 0x1324 <__ultoa_invert+0x6c>
    133a:	ea cf       	rjmp	.-44     	; 0x1310 <__ultoa_invert+0x58>
    133c:	b4 e0       	ldi	r27, 0x04	; 4
    133e:	a6 95       	lsr	r26
    1340:	97 95       	ror	r25
    1342:	87 95       	ror	r24
    1344:	77 95       	ror	r23
    1346:	67 95       	ror	r22
    1348:	ba 95       	dec	r27
    134a:	c9 f7       	brne	.-14     	; 0x133e <__ultoa_invert+0x86>
    134c:	00 97       	sbiw	r24, 0x00	; 0
    134e:	61 05       	cpc	r22, r1
    1350:	71 05       	cpc	r23, r1
    1352:	08 95       	ret
    1354:	9b 01       	movw	r18, r22
    1356:	ac 01       	movw	r20, r24
    1358:	0a 2e       	mov	r0, r26
    135a:	06 94       	lsr	r0
    135c:	57 95       	ror	r21
    135e:	47 95       	ror	r20
    1360:	37 95       	ror	r19
    1362:	27 95       	ror	r18
    1364:	ba 95       	dec	r27
    1366:	c9 f7       	brne	.-14     	; 0x135a <__ultoa_invert+0xa2>
    1368:	62 0f       	add	r22, r18
    136a:	73 1f       	adc	r23, r19
    136c:	84 1f       	adc	r24, r20
    136e:	95 1f       	adc	r25, r21
    1370:	a0 1d       	adc	r26, r0
    1372:	08 95       	ret

00001374 <__prologue_saves__>:
    1374:	2f 92       	push	r2
    1376:	3f 92       	push	r3
    1378:	4f 92       	push	r4
    137a:	5f 92       	push	r5
    137c:	6f 92       	push	r6
    137e:	7f 92       	push	r7
    1380:	8f 92       	push	r8
    1382:	9f 92       	push	r9
    1384:	af 92       	push	r10
    1386:	bf 92       	push	r11
    1388:	cf 92       	push	r12
    138a:	df 92       	push	r13
    138c:	ef 92       	push	r14
    138e:	ff 92       	push	r15
    1390:	0f 93       	push	r16
    1392:	1f 93       	push	r17
    1394:	cf 93       	push	r28
    1396:	df 93       	push	r29
    1398:	cd b7       	in	r28, 0x3d	; 61
    139a:	de b7       	in	r29, 0x3e	; 62
    139c:	ca 1b       	sub	r28, r26
    139e:	db 0b       	sbc	r29, r27
    13a0:	cd bf       	out	0x3d, r28	; 61
    13a2:	de bf       	out	0x3e, r29	; 62
    13a4:	09 94       	ijmp

000013a6 <__epilogue_restores__>:
    13a6:	2a 88       	ldd	r2, Y+18	; 0x12
    13a8:	39 88       	ldd	r3, Y+17	; 0x11
    13aa:	48 88       	ldd	r4, Y+16	; 0x10
    13ac:	5f 84       	ldd	r5, Y+15	; 0x0f
    13ae:	6e 84       	ldd	r6, Y+14	; 0x0e
    13b0:	7d 84       	ldd	r7, Y+13	; 0x0d
    13b2:	8c 84       	ldd	r8, Y+12	; 0x0c
    13b4:	9b 84       	ldd	r9, Y+11	; 0x0b
    13b6:	aa 84       	ldd	r10, Y+10	; 0x0a
    13b8:	b9 84       	ldd	r11, Y+9	; 0x09
    13ba:	c8 84       	ldd	r12, Y+8	; 0x08
    13bc:	df 80       	ldd	r13, Y+7	; 0x07
    13be:	ee 80       	ldd	r14, Y+6	; 0x06
    13c0:	fd 80       	ldd	r15, Y+5	; 0x05
    13c2:	0c 81       	ldd	r16, Y+4	; 0x04
    13c4:	1b 81       	ldd	r17, Y+3	; 0x03
    13c6:	aa 81       	ldd	r26, Y+2	; 0x02
    13c8:	b9 81       	ldd	r27, Y+1	; 0x01
    13ca:	ce 0f       	add	r28, r30
    13cc:	d1 1d       	adc	r29, r1
    13ce:	cd bf       	out	0x3d, r28	; 61
    13d0:	de bf       	out	0x3e, r29	; 62
    13d2:	ed 01       	movw	r28, r26
    13d4:	08 95       	ret

000013d6 <_exit>:
    13d6:	f8 94       	cli

000013d8 <__stop_program>:
    13d8:	ff cf       	rjmp	.-2      	; 0x13d8 <__stop_program>
