
gamecontroller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000013f2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00802000  000013f2  00001486  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000006f  00802020  00802020  000014a6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000014a6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001504  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b8  00000000  00000000  00001544  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000287b  00000000  00000000  000016fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009dd  00000000  00000000  00003f77  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001cd4  00000000  00000000  00004954  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004f8  00000000  00000000  00006628  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00014a05  00000000  00000000  00006b20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000900  00000000  00000000  0001b525  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  0001be25  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00006152  00000000  00000000  0001bf4d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__ctors_end>
       4:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
       8:	0c 94 97 02 	jmp	0x52e	; 0x52e <__vector_2>
       c:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__vector_3>
      10:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      14:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      18:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      1c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      20:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      24:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      28:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      2c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      30:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      34:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      38:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      3c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      40:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      44:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      48:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      4c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      50:	0c 94 fd 04 	jmp	0x9fa	; 0x9fa <__vector_20>
      54:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      58:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      5c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      60:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      64:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      68:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      6c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      70:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      74:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      78:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      7c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      80:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      84:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      88:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      8c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      90:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      94:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      98:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      9c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      a0:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      a4:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      a8:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      ac:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      b0:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      b4:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      b8:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      bc:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      c0:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      c4:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      c8:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      cc:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      d0:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      d4:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      d8:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      dc:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      e0:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      e4:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      e8:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      ec:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      f0:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      f4:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      f8:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      fc:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     100:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     104:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     108:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     10c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     110:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     114:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     118:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     11c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     120:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     124:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     128:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     12c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     130:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     134:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     138:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     13c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     140:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     144:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     148:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     14c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     150:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     154:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     158:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     15c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     160:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     164:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     168:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     16c:	c5 03       	fmuls	r20, r21
     16e:	ad 03       	fmulsu	r18, r21
     170:	b3 03       	fmuls	r19, r19
     172:	b9 03       	fmulsu	r19, r17
     174:	b3 03       	fmuls	r19, r19
     176:	c5 03       	fmuls	r20, r21
     178:	bf 03       	fmulsu	r19, r23
     17a:	ad 03       	fmulsu	r18, r21
     17c:	ad 03       	fmulsu	r18, r21
     17e:	bf 03       	fmulsu	r19, r23
     180:	c5 03       	fmuls	r20, r21
     182:	b3 03       	fmuls	r19, r19
     184:	b9 03       	fmulsu	r19, r17
     186:	b3 03       	fmuls	r19, r19
     188:	ad 03       	fmulsu	r18, r21
     18a:	c5 03       	fmuls	r20, r21

0000018c <__ctors_end>:
     18c:	11 24       	eor	r1, r1
     18e:	1f be       	out	0x3f, r1	; 63
     190:	cf ef       	ldi	r28, 0xFF	; 255
     192:	cd bf       	out	0x3d, r28	; 61
     194:	d7 e2       	ldi	r29, 0x27	; 39
     196:	de bf       	out	0x3e, r29	; 62

00000198 <__do_copy_data>:
     198:	10 e2       	ldi	r17, 0x20	; 32
     19a:	a0 e0       	ldi	r26, 0x00	; 0
     19c:	b0 e2       	ldi	r27, 0x20	; 32
     19e:	e2 ef       	ldi	r30, 0xF2	; 242
     1a0:	f3 e1       	ldi	r31, 0x13	; 19
     1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <__do_copy_data+0x10>
     1a4:	05 90       	lpm	r0, Z+
     1a6:	0d 92       	st	X+, r0
     1a8:	a0 32       	cpi	r26, 0x20	; 32
     1aa:	b1 07       	cpc	r27, r17
     1ac:	d9 f7       	brne	.-10     	; 0x1a4 <__do_copy_data+0xc>

000001ae <__do_clear_bss>:
     1ae:	20 e2       	ldi	r18, 0x20	; 32
     1b0:	a0 e2       	ldi	r26, 0x20	; 32
     1b2:	b0 e2       	ldi	r27, 0x20	; 32
     1b4:	01 c0       	rjmp	.+2      	; 0x1b8 <.do_clear_bss_start>

000001b6 <.do_clear_bss_loop>:
     1b6:	1d 92       	st	X+, r1

000001b8 <.do_clear_bss_start>:
     1b8:	af 38       	cpi	r26, 0x8F	; 143
     1ba:	b2 07       	cpc	r27, r18
     1bc:	e1 f7       	brne	.-8      	; 0x1b6 <.do_clear_bss_loop>
     1be:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <main>
     1c2:	0c 94 f7 09 	jmp	0x13ee	; 0x13ee <_exit>

000001c6 <__bad_interrupt>:
     1c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001ca <AccInit>:
#include "acc.h"



void AccInit(void)
{
     1ca:	cf 93       	push	r28
     1cc:	df 93       	push	r29
     1ce:	cd b7       	in	r28, 0x3d	; 61
     1d0:	de b7       	in	r29, 0x3e	; 62
 PORTC.DIRSET = 0b01000000; //set PC6 as output
     1d2:	80 e4       	ldi	r24, 0x40	; 64
     1d4:	96 e0       	ldi	r25, 0x06	; 6
     1d6:	20 e4       	ldi	r18, 0x40	; 64
     1d8:	fc 01       	movw	r30, r24
     1da:	21 83       	std	Z+1, r18	; 0x01
 PORTC.PIN6CTRL = 0b00010000; //totem pole configuration with pull down if we would want to turn the acc off 
     1dc:	80 e4       	ldi	r24, 0x40	; 64
     1de:	96 e0       	ldi	r25, 0x06	; 6
     1e0:	20 e1       	ldi	r18, 0x10	; 16
     1e2:	fc 01       	movw	r30, r24
     1e4:	26 8b       	std	Z+22, r18	; 0x16
 PORTC.OUT |= 0b01000000;//turn on output so chip becomes active
     1e6:	80 e4       	ldi	r24, 0x40	; 64
     1e8:	96 e0       	ldi	r25, 0x06	; 6
     1ea:	20 e4       	ldi	r18, 0x40	; 64
     1ec:	36 e0       	ldi	r19, 0x06	; 6
     1ee:	f9 01       	movw	r30, r18
     1f0:	24 81       	ldd	r18, Z+4	; 0x04
     1f2:	20 64       	ori	r18, 0x40	; 64
     1f4:	fc 01       	movw	r30, r24
     1f6:	24 83       	std	Z+4, r18	; 0x04
 PORTA.PIN0CTRL = 0; //all pins set to totem pole inputs with no resistor for adc measurements. 
     1f8:	80 e0       	ldi	r24, 0x00	; 0
     1fa:	96 e0       	ldi	r25, 0x06	; 6
     1fc:	fc 01       	movw	r30, r24
     1fe:	10 8a       	std	Z+16, r1	; 0x10
 PORTA.PIN1CTRL = 0;
     200:	80 e0       	ldi	r24, 0x00	; 0
     202:	96 e0       	ldi	r25, 0x06	; 6
     204:	fc 01       	movw	r30, r24
     206:	11 8a       	std	Z+17, r1	; 0x11
 PORTA.PIN2CTRL = 0;
     208:	80 e0       	ldi	r24, 0x00	; 0
     20a:	96 e0       	ldi	r25, 0x06	; 6
     20c:	fc 01       	movw	r30, r24
     20e:	12 8a       	std	Z+18, r1	; 0x12
 PORTA.PIN4CTRL = 0;
     210:	80 e0       	ldi	r24, 0x00	; 0
     212:	96 e0       	ldi	r25, 0x06	; 6
     214:	fc 01       	movw	r30, r24
     216:	14 8a       	std	Z+20, r1	; 0x14
 PORTA.DIRCLR = 0b00010111;
     218:	80 e0       	ldi	r24, 0x00	; 0
     21a:	96 e0       	ldi	r25, 0x06	; 6
     21c:	27 e1       	ldi	r18, 0x17	; 23
     21e:	fc 01       	movw	r30, r24
     220:	22 83       	std	Z+2, r18	; 0x02


}
     222:	00 00       	nop
     224:	df 91       	pop	r29
     226:	cf 91       	pop	r28
     228:	08 95       	ret

0000022a <AccGetXAxisRaw>:
unsigned int AccGetXAxisRaw(void)
{
     22a:	cf 93       	push	r28
     22c:	df 93       	push	r29
     22e:	cd b7       	in	r28, 0x3d	; 61
     230:	de b7       	in	r29, 0x3e	; 62
	return abs(AnalogGetCh(0,4));//the abs value wil not introduce any problems because we wil never encounter a negative signal 
     232:	64 e0       	ldi	r22, 0x04	; 4
     234:	70 e0       	ldi	r23, 0x00	; 0
     236:	80 e0       	ldi	r24, 0x00	; 0
     238:	90 e0       	ldi	r25, 0x00	; 0
     23a:	0e 94 a5 01 	call	0x34a	; 0x34a <AnalogGetCh>
     23e:	99 23       	and	r25, r25
     240:	1c f4       	brge	.+6      	; 0x248 <AccGetXAxisRaw+0x1e>
     242:	91 95       	neg	r25
     244:	81 95       	neg	r24
     246:	91 09       	sbc	r25, r1
}
     248:	df 91       	pop	r29
     24a:	cf 91       	pop	r28
     24c:	08 95       	ret

0000024e <AccGetYAxisRaw>:
unsigned int AccGetYAxisRaw(void)
{
     24e:	cf 93       	push	r28
     250:	df 93       	push	r29
     252:	cd b7       	in	r28, 0x3d	; 61
     254:	de b7       	in	r29, 0x3e	; 62
	return abs(AnalogGetCh(1,4));
     256:	64 e0       	ldi	r22, 0x04	; 4
     258:	70 e0       	ldi	r23, 0x00	; 0
     25a:	81 e0       	ldi	r24, 0x01	; 1
     25c:	90 e0       	ldi	r25, 0x00	; 0
     25e:	0e 94 a5 01 	call	0x34a	; 0x34a <AnalogGetCh>
     262:	99 23       	and	r25, r25
     264:	1c f4       	brge	.+6      	; 0x26c <AccGetYAxisRaw+0x1e>
     266:	91 95       	neg	r25
     268:	81 95       	neg	r24
     26a:	91 09       	sbc	r25, r1
}
     26c:	df 91       	pop	r29
     26e:	cf 91       	pop	r28
     270:	08 95       	ret

00000272 <AccGetZAxisRaw>:
unsigned int AccGetZAxisRaw(void)
{
     272:	cf 93       	push	r28
     274:	df 93       	push	r29
     276:	cd b7       	in	r28, 0x3d	; 61
     278:	de b7       	in	r29, 0x3e	; 62
	return abs(AnalogGetCh(2,4));
     27a:	64 e0       	ldi	r22, 0x04	; 4
     27c:	70 e0       	ldi	r23, 0x00	; 0
     27e:	82 e0       	ldi	r24, 0x02	; 2
     280:	90 e0       	ldi	r25, 0x00	; 0
     282:	0e 94 a5 01 	call	0x34a	; 0x34a <AnalogGetCh>
     286:	99 23       	and	r25, r25
     288:	1c f4       	brge	.+6      	; 0x290 <AccGetZAxisRaw+0x1e>
     28a:	91 95       	neg	r25
     28c:	81 95       	neg	r24
     28e:	91 09       	sbc	r25, r1
}
     290:	df 91       	pop	r29
     292:	cf 91       	pop	r28
     294:	08 95       	ret

00000296 <AccGetXAxis>:

int AccGetXAxis(unsigned int AccRaw)
{
     296:	cf 93       	push	r28
     298:	df 93       	push	r29
     29a:	00 d0       	rcall	.+0      	; 0x29c <AccGetXAxis+0x6>
     29c:	cd b7       	in	r28, 0x3d	; 61
     29e:	de b7       	in	r29, 0x3e	; 62
     2a0:	89 83       	std	Y+1, r24	; 0x01
     2a2:	9a 83       	std	Y+2, r25	; 0x02
	return (AccRaw - 300)/4;
     2a4:	89 81       	ldd	r24, Y+1	; 0x01
     2a6:	9a 81       	ldd	r25, Y+2	; 0x02
     2a8:	8c 52       	subi	r24, 0x2C	; 44
     2aa:	91 40       	sbci	r25, 0x01	; 1
     2ac:	96 95       	lsr	r25
     2ae:	87 95       	ror	r24
     2b0:	96 95       	lsr	r25
     2b2:	87 95       	ror	r24
}
     2b4:	0f 90       	pop	r0
     2b6:	0f 90       	pop	r0
     2b8:	df 91       	pop	r29
     2ba:	cf 91       	pop	r28
     2bc:	08 95       	ret

000002be <AccGetYAxis>:

int AccGetYAxis(unsigned int AccRaw)
{
     2be:	cf 93       	push	r28
     2c0:	df 93       	push	r29
     2c2:	00 d0       	rcall	.+0      	; 0x2c4 <AccGetYAxis+0x6>
     2c4:	cd b7       	in	r28, 0x3d	; 61
     2c6:	de b7       	in	r29, 0x3e	; 62
     2c8:	89 83       	std	Y+1, r24	; 0x01
     2ca:	9a 83       	std	Y+2, r25	; 0x02
	return (AccRaw - 350)/4;
     2cc:	89 81       	ldd	r24, Y+1	; 0x01
     2ce:	9a 81       	ldd	r25, Y+2	; 0x02
     2d0:	8e 55       	subi	r24, 0x5E	; 94
     2d2:	91 40       	sbci	r25, 0x01	; 1
     2d4:	96 95       	lsr	r25
     2d6:	87 95       	ror	r24
     2d8:	96 95       	lsr	r25
     2da:	87 95       	ror	r24
}
     2dc:	0f 90       	pop	r0
     2de:	0f 90       	pop	r0
     2e0:	df 91       	pop	r29
     2e2:	cf 91       	pop	r28
     2e4:	08 95       	ret

000002e6 <AccGetZAxis>:

int AccGetZAxis(unsigned int AccRaw)
{
     2e6:	cf 93       	push	r28
     2e8:	df 93       	push	r29
     2ea:	00 d0       	rcall	.+0      	; 0x2ec <AccGetZAxis+0x6>
     2ec:	cd b7       	in	r28, 0x3d	; 61
     2ee:	de b7       	in	r29, 0x3e	; 62
     2f0:	89 83       	std	Y+1, r24	; 0x01
     2f2:	9a 83       	std	Y+2, r25	; 0x02
	return (AccRaw - 200)/4;
     2f4:	89 81       	ldd	r24, Y+1	; 0x01
     2f6:	9a 81       	ldd	r25, Y+2	; 0x02
     2f8:	88 5c       	subi	r24, 0xC8	; 200
     2fa:	91 09       	sbc	r25, r1
     2fc:	96 95       	lsr	r25
     2fe:	87 95       	ror	r24
     300:	96 95       	lsr	r25
     302:	87 95       	ror	r24
}
     304:	0f 90       	pop	r0
     306:	0f 90       	pop	r0
     308:	df 91       	pop	r29
     30a:	cf 91       	pop	r28
     30c:	08 95       	ret

0000030e <AnalogInit>:
#include <inttypes.h>



void AnalogInit(void)
{
     30e:	cf 93       	push	r28
     310:	df 93       	push	r29
     312:	cd b7       	in	r28, 0x3d	; 61
     314:	de b7       	in	r29, 0x3e	; 62
	ADCA.CTRLA = 0;
     316:	80 e0       	ldi	r24, 0x00	; 0
     318:	92 e0       	ldi	r25, 0x02	; 2
     31a:	fc 01       	movw	r30, r24
     31c:	10 82       	st	Z, r1
	ADCA.CTRLB = 0b00010000; //no current limit signed mode 12bit.
     31e:	80 e0       	ldi	r24, 0x00	; 0
     320:	92 e0       	ldi	r25, 0x02	; 2
     322:	20 e1       	ldi	r18, 0x10	; 16
     324:	fc 01       	movw	r30, r24
     326:	21 83       	std	Z+1, r18	; 0x01
	ADCA.REFCTRL = 2; //enable bandgap and set reference to 1v internal source disable temp detection
     328:	80 e0       	ldi	r24, 0x00	; 0
     32a:	92 e0       	ldi	r25, 0x02	; 2
     32c:	22 e0       	ldi	r18, 0x02	; 2
     32e:	fc 01       	movw	r30, r24
     330:	22 83       	std	Z+2, r18	; 0x02
	ADCA.EVCTRL = 0; //no events
     332:	80 e0       	ldi	r24, 0x00	; 0
     334:	92 e0       	ldi	r25, 0x02	; 2
     336:	fc 01       	movw	r30, r24
     338:	13 82       	std	Z+3, r1	; 0x03
	ADCA.PRESCALER = 0; //div 4 prescaler
     33a:	80 e0       	ldi	r24, 0x00	; 0
     33c:	92 e0       	ldi	r25, 0x02	; 2
     33e:	fc 01       	movw	r30, r24
     340:	14 82       	std	Z+4, r1	; 0x04
	
}
     342:	00 00       	nop
     344:	df 91       	pop	r29
     346:	cf 91       	pop	r28
     348:	08 95       	ret

0000034a <AnalogGetCh>:



int AnalogGetCh(int PinPos,int PinNeg)
{
     34a:	cf 93       	push	r28
     34c:	df 93       	push	r29
     34e:	cd b7       	in	r28, 0x3d	; 61
     350:	de b7       	in	r29, 0x3e	; 62
     352:	64 97       	sbiw	r28, 0x14	; 20
     354:	cd bf       	out	0x3d, r28	; 61
     356:	de bf       	out	0x3e, r29	; 62
     358:	89 8b       	std	Y+17, r24	; 0x11
     35a:	9a 8b       	std	Y+18, r25	; 0x12
     35c:	6b 8b       	std	Y+19, r22	; 0x13
     35e:	7c 8b       	std	Y+20, r23	; 0x14
	ADCA.CH0.MUXCTRL = (((uint8_t) PinPos) << 3) | ((uint8_t) PinNeg);
     360:	80 e0       	ldi	r24, 0x00	; 0
     362:	92 e0       	ldi	r25, 0x02	; 2
     364:	29 89       	ldd	r18, Y+17	; 0x11
     366:	3a 89       	ldd	r19, Y+18	; 0x12
     368:	33 27       	eor	r19, r19
     36a:	22 0f       	add	r18, r18
     36c:	33 1f       	adc	r19, r19
     36e:	22 0f       	add	r18, r18
     370:	33 1f       	adc	r19, r19
     372:	22 0f       	add	r18, r18
     374:	33 1f       	adc	r19, r19
     376:	32 2f       	mov	r19, r18
     378:	2b 89       	ldd	r18, Y+19	; 0x13
     37a:	23 2b       	or	r18, r19
     37c:	fc 01       	movw	r30, r24
     37e:	21 a3       	std	Z+33, r18	; 0x21
	ADCA.CTRLA = 7; //flush all data and start measurement enable adc
     380:	80 e0       	ldi	r24, 0x00	; 0
     382:	92 e0       	ldi	r25, 0x02	; 2
     384:	27 e0       	ldi	r18, 0x07	; 7
     386:	fc 01       	movw	r30, r24
     388:	20 83       	st	Z, r18
	ADCA.CH0.CTRL = 0b10000011; //gain 1 difwgain mode
     38a:	80 e0       	ldi	r24, 0x00	; 0
     38c:	92 e0       	ldi	r25, 0x02	; 2
     38e:	23 e8       	ldi	r18, 0x83	; 131
     390:	fc 01       	movw	r30, r24
     392:	20 a3       	std	Z+32, r18	; 0x20
     394:	80 e0       	ldi	r24, 0x00	; 0
     396:	90 e0       	ldi	r25, 0x00	; 0
     398:	a0 e8       	ldi	r26, 0x80	; 128
     39a:	bf e3       	ldi	r27, 0x3F	; 63
     39c:	8b 83       	std	Y+3, r24	; 0x03
     39e:	9c 83       	std	Y+4, r25	; 0x04
     3a0:	ad 83       	std	Y+5, r26	; 0x05
     3a2:	be 83       	std	Y+6, r27	; 0x06

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     3a4:	20 e0       	ldi	r18, 0x00	; 0
     3a6:	30 e0       	ldi	r19, 0x00	; 0
     3a8:	4a e7       	ldi	r20, 0x7A	; 122
     3aa:	53 e4       	ldi	r21, 0x43	; 67
     3ac:	6b 81       	ldd	r22, Y+3	; 0x03
     3ae:	7c 81       	ldd	r23, Y+4	; 0x04
     3b0:	8d 81       	ldd	r24, Y+5	; 0x05
     3b2:	9e 81       	ldd	r25, Y+6	; 0x06
     3b4:	0e 94 48 06 	call	0xc90	; 0xc90 <__mulsf3>
     3b8:	dc 01       	movw	r26, r24
     3ba:	cb 01       	movw	r24, r22
     3bc:	8f 83       	std	Y+7, r24	; 0x07
     3be:	98 87       	std	Y+8, r25	; 0x08
     3c0:	a9 87       	std	Y+9, r26	; 0x09
     3c2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     3c4:	20 e0       	ldi	r18, 0x00	; 0
     3c6:	30 e0       	ldi	r19, 0x00	; 0
     3c8:	40 e8       	ldi	r20, 0x80	; 128
     3ca:	5f e3       	ldi	r21, 0x3F	; 63
     3cc:	6f 81       	ldd	r22, Y+7	; 0x07
     3ce:	78 85       	ldd	r23, Y+8	; 0x08
     3d0:	89 85       	ldd	r24, Y+9	; 0x09
     3d2:	9a 85       	ldd	r25, Y+10	; 0x0a
     3d4:	0e 94 c2 05 	call	0xb84	; 0xb84 <__cmpsf2>
     3d8:	88 23       	and	r24, r24
     3da:	2c f4       	brge	.+10     	; 0x3e6 <AnalogGetCh+0x9c>
		__ticks = 1;
     3dc:	81 e0       	ldi	r24, 0x01	; 1
     3de:	90 e0       	ldi	r25, 0x00	; 0
     3e0:	8b 87       	std	Y+11, r24	; 0x0b
     3e2:	9c 87       	std	Y+12, r25	; 0x0c
     3e4:	3f c0       	rjmp	.+126    	; 0x464 <__FUSE_REGION_LENGTH__+0x64>
	else if (__tmp > 65535)
     3e6:	20 e0       	ldi	r18, 0x00	; 0
     3e8:	3f ef       	ldi	r19, 0xFF	; 255
     3ea:	4f e7       	ldi	r20, 0x7F	; 127
     3ec:	57 e4       	ldi	r21, 0x47	; 71
     3ee:	6f 81       	ldd	r22, Y+7	; 0x07
     3f0:	78 85       	ldd	r23, Y+8	; 0x08
     3f2:	89 85       	ldd	r24, Y+9	; 0x09
     3f4:	9a 85       	ldd	r25, Y+10	; 0x0a
     3f6:	0e 94 43 06 	call	0xc86	; 0xc86 <__gesf2>
     3fa:	18 16       	cp	r1, r24
     3fc:	4c f5       	brge	.+82     	; 0x450 <__FUSE_REGION_LENGTH__+0x50>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     3fe:	20 e0       	ldi	r18, 0x00	; 0
     400:	30 e0       	ldi	r19, 0x00	; 0
     402:	40 e2       	ldi	r20, 0x20	; 32
     404:	51 e4       	ldi	r21, 0x41	; 65
     406:	6b 81       	ldd	r22, Y+3	; 0x03
     408:	7c 81       	ldd	r23, Y+4	; 0x04
     40a:	8d 81       	ldd	r24, Y+5	; 0x05
     40c:	9e 81       	ldd	r25, Y+6	; 0x06
     40e:	0e 94 48 06 	call	0xc90	; 0xc90 <__mulsf3>
     412:	dc 01       	movw	r26, r24
     414:	cb 01       	movw	r24, r22
     416:	bc 01       	movw	r22, r24
     418:	cd 01       	movw	r24, r26
     41a:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__fixunssfsi>
     41e:	dc 01       	movw	r26, r24
     420:	cb 01       	movw	r24, r22
     422:	8b 87       	std	Y+11, r24	; 0x0b
     424:	9c 87       	std	Y+12, r25	; 0x0c
     426:	0f c0       	rjmp	.+30     	; 0x446 <__FUSE_REGION_LENGTH__+0x46>
     428:	89 e1       	ldi	r24, 0x19	; 25
     42a:	90 e0       	ldi	r25, 0x00	; 0
     42c:	8d 87       	std	Y+13, r24	; 0x0d
     42e:	9e 87       	std	Y+14, r25	; 0x0e
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     430:	8d 85       	ldd	r24, Y+13	; 0x0d
     432:	9e 85       	ldd	r25, Y+14	; 0x0e
     434:	01 97       	sbiw	r24, 0x01	; 1
     436:	f1 f7       	brne	.-4      	; 0x434 <__FUSE_REGION_LENGTH__+0x34>
     438:	8d 87       	std	Y+13, r24	; 0x0d
     43a:	9e 87       	std	Y+14, r25	; 0x0e
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     43c:	8b 85       	ldd	r24, Y+11	; 0x0b
     43e:	9c 85       	ldd	r25, Y+12	; 0x0c
     440:	01 97       	sbiw	r24, 0x01	; 1
     442:	8b 87       	std	Y+11, r24	; 0x0b
     444:	9c 87       	std	Y+12, r25	; 0x0c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     446:	8b 85       	ldd	r24, Y+11	; 0x0b
     448:	9c 85       	ldd	r25, Y+12	; 0x0c
     44a:	89 2b       	or	r24, r25
     44c:	69 f7       	brne	.-38     	; 0x428 <__FUSE_REGION_LENGTH__+0x28>
     44e:	14 c0       	rjmp	.+40     	; 0x478 <__FUSE_REGION_LENGTH__+0x78>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     450:	6f 81       	ldd	r22, Y+7	; 0x07
     452:	78 85       	ldd	r23, Y+8	; 0x08
     454:	89 85       	ldd	r24, Y+9	; 0x09
     456:	9a 85       	ldd	r25, Y+10	; 0x0a
     458:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__fixunssfsi>
     45c:	dc 01       	movw	r26, r24
     45e:	cb 01       	movw	r24, r22
     460:	8b 87       	std	Y+11, r24	; 0x0b
     462:	9c 87       	std	Y+12, r25	; 0x0c
     464:	8b 85       	ldd	r24, Y+11	; 0x0b
     466:	9c 85       	ldd	r25, Y+12	; 0x0c
     468:	8f 87       	std	Y+15, r24	; 0x0f
     46a:	98 8b       	std	Y+16, r25	; 0x10
     46c:	8f 85       	ldd	r24, Y+15	; 0x0f
     46e:	98 89       	ldd	r25, Y+16	; 0x10
     470:	01 97       	sbiw	r24, 0x01	; 1
     472:	f1 f7       	brne	.-4      	; 0x470 <__FUSE_REGION_LENGTH__+0x70>
     474:	8f 87       	std	Y+15, r24	; 0x0f
     476:	98 8b       	std	Y+16, r25	; 0x10
	//while(!ADCA.CH0.RES){ //wait for data in the register. can be done with interupt ... (didn't work)
		//
	//}
	_delay_ms(1);//delay to wait for measurement to complete 
	int result = ADCA.CH0.RES;
     478:	80 e0       	ldi	r24, 0x00	; 0
     47a:	92 e0       	ldi	r25, 0x02	; 2
     47c:	fc 01       	movw	r30, r24
     47e:	84 a1       	ldd	r24, Z+36	; 0x24
     480:	95 a1       	ldd	r25, Z+37	; 0x25
     482:	89 83       	std	Y+1, r24	; 0x01
     484:	9a 83       	std	Y+2, r25	; 0x02
	ADCA.CTRLA = 0; //turn of adc
     486:	80 e0       	ldi	r24, 0x00	; 0
     488:	92 e0       	ldi	r25, 0x02	; 2
     48a:	fc 01       	movw	r30, r24
     48c:	10 82       	st	Z, r1
	return result;
     48e:	89 81       	ldd	r24, Y+1	; 0x01
     490:	9a 81       	ldd	r25, Y+2	; 0x02
}
     492:	64 96       	adiw	r28, 0x14	; 20
     494:	cd bf       	out	0x3d, r28	; 61
     496:	de bf       	out	0x3e, r29	; 62
     498:	df 91       	pop	r29
     49a:	cf 91       	pop	r28
     49c:	08 95       	ret

0000049e <ClockInit>:
#pragma GCC push_options
#pragma GCC optimize ("O2") //This function must be optimized to avoid too long time interval betwee CCP write and CLK.CTRL write (4 CLK CYC max)

void ClockInit(void)
{
	OSC.XOSCCTRL=0b11001011; //Clock<=16MHz	
     49e:	8b ec       	ldi	r24, 0xCB	; 203
     4a0:	80 93 52 00 	sts	0x0052, r24	; 0x800052 <__TEXT_REGION_LENGTH__+0x700052>
	OSC.CTRL=0b01000; //Enable oscillator	
     4a4:	88 e0       	ldi	r24, 0x08	; 8
     4a6:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
	while (!(OSC.STATUS&0b1000)); //Wait until XTAL osc is ready
     4aa:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
     4ae:	83 ff       	sbrs	r24, 3
     4b0:	fc cf       	rjmp	.-8      	; 0x4aa <ClockInit+0xc>
	
	//Select XTAL osc as system CLK source
	CCP=0xd8;
     4b2:	88 ed       	ldi	r24, 0xD8	; 216
     4b4:	84 bf       	out	0x34, r24	; 52
    CLK.CTRL=0b0011;
     4b6:	83 e0       	ldi	r24, 0x03	; 3
     4b8:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
     4bc:	08 95       	ret

000004be <EncoderInit>:
	
}
int EncoderGetPos(void)
{
	return encoderPos;
}
     4be:	cf 93       	push	r28
     4c0:	df 93       	push	r29
     4c2:	cd b7       	in	r28, 0x3d	; 61
     4c4:	de b7       	in	r29, 0x3e	; 62
     4c6:	80 e4       	ldi	r24, 0x40	; 64
     4c8:	96 e0       	ldi	r25, 0x06	; 6
     4ca:	20 e4       	ldi	r18, 0x40	; 64
     4cc:	36 e0       	ldi	r19, 0x06	; 6
     4ce:	f9 01       	movw	r30, r18
     4d0:	20 81       	ld	r18, Z
     4d2:	2f 7c       	andi	r18, 0xCF	; 207
     4d4:	fc 01       	movw	r30, r24
     4d6:	20 83       	st	Z, r18
     4d8:	80 e4       	ldi	r24, 0x40	; 64
     4da:	96 e0       	ldi	r25, 0x06	; 6
     4dc:	28 e1       	ldi	r18, 0x18	; 24
     4de:	fc 01       	movw	r30, r24
     4e0:	24 8b       	std	Z+20, r18	; 0x14
     4e2:	80 e4       	ldi	r24, 0x40	; 64
     4e4:	96 e0       	ldi	r25, 0x06	; 6
     4e6:	28 e1       	ldi	r18, 0x18	; 24
     4e8:	fc 01       	movw	r30, r24
     4ea:	25 8b       	std	Z+21, r18	; 0x15
     4ec:	80 e4       	ldi	r24, 0x40	; 64
     4ee:	96 e0       	ldi	r25, 0x06	; 6
     4f0:	2f e0       	ldi	r18, 0x0F	; 15
     4f2:	fc 01       	movw	r30, r24
     4f4:	21 87       	std	Z+9, r18	; 0x09
     4f6:	80 e4       	ldi	r24, 0x40	; 64
     4f8:	96 e0       	ldi	r25, 0x06	; 6
     4fa:	20 e1       	ldi	r18, 0x10	; 16
     4fc:	fc 01       	movw	r30, r24
     4fe:	22 87       	std	Z+10, r18	; 0x0a
     500:	80 e4       	ldi	r24, 0x40	; 64
     502:	96 e0       	ldi	r25, 0x06	; 6
     504:	20 e2       	ldi	r18, 0x20	; 32
     506:	fc 01       	movw	r30, r24
     508:	23 87       	std	Z+11, r18	; 0x0b
     50a:	8f e3       	ldi	r24, 0x3F	; 63
     50c:	90 e0       	ldi	r25, 0x00	; 0
     50e:	2f e3       	ldi	r18, 0x3F	; 63
     510:	30 e0       	ldi	r19, 0x00	; 0
     512:	f9 01       	movw	r30, r18
     514:	20 81       	ld	r18, Z
     516:	20 68       	ori	r18, 0x80	; 128
     518:	fc 01       	movw	r30, r24
     51a:	20 83       	st	Z, r18
     51c:	80 ea       	ldi	r24, 0xA0	; 160
     51e:	90 e0       	ldi	r25, 0x00	; 0
     520:	24 e0       	ldi	r18, 0x04	; 4
     522:	fc 01       	movw	r30, r24
     524:	22 83       	std	Z+2, r18	; 0x02
     526:	00 00       	nop
     528:	df 91       	pop	r29
     52a:	cf 91       	pop	r28
     52c:	08 95       	ret

0000052e <__vector_2>:

ISR(PORTC_INT0_vect){
     52e:	1f 92       	push	r1
     530:	0f 92       	push	r0
     532:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     536:	0f 92       	push	r0
     538:	11 24       	eor	r1, r1
     53a:	2f 93       	push	r18
     53c:	3f 93       	push	r19
     53e:	4f 93       	push	r20
     540:	5f 93       	push	r21
     542:	6f 93       	push	r22
     544:	7f 93       	push	r23
     546:	8f 93       	push	r24
     548:	9f 93       	push	r25
     54a:	af 93       	push	r26
     54c:	bf 93       	push	r27
     54e:	ef 93       	push	r30
     550:	ff 93       	push	r31
     552:	cf 93       	push	r28
     554:	df 93       	push	r29
     556:	cd b7       	in	r28, 0x3d	; 61
     558:	de b7       	in	r29, 0x3e	; 62
	
	encoderPos += readEncoder();
     55a:	0e 94 07 03 	call	0x60e	; 0x60e <readEncoder>
     55e:	9c 01       	movw	r18, r24
     560:	80 91 20 20 	lds	r24, 0x2020	; 0x802020 <__data_end>
     564:	90 91 21 20 	lds	r25, 0x2021	; 0x802021 <__data_end+0x1>
     568:	82 0f       	add	r24, r18
     56a:	93 1f       	adc	r25, r19
     56c:	80 93 20 20 	sts	0x2020, r24	; 0x802020 <__data_end>
     570:	90 93 21 20 	sts	0x2021, r25	; 0x802021 <__data_end+0x1>
}
     574:	00 00       	nop
     576:	df 91       	pop	r29
     578:	cf 91       	pop	r28
     57a:	ff 91       	pop	r31
     57c:	ef 91       	pop	r30
     57e:	bf 91       	pop	r27
     580:	af 91       	pop	r26
     582:	9f 91       	pop	r25
     584:	8f 91       	pop	r24
     586:	7f 91       	pop	r23
     588:	6f 91       	pop	r22
     58a:	5f 91       	pop	r21
     58c:	4f 91       	pop	r20
     58e:	3f 91       	pop	r19
     590:	2f 91       	pop	r18
     592:	0f 90       	pop	r0
     594:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     598:	0f 90       	pop	r0
     59a:	1f 90       	pop	r1
     59c:	18 95       	reti

0000059e <__vector_3>:

ISR(PORTC_INT1_vect){
     59e:	1f 92       	push	r1
     5a0:	0f 92       	push	r0
     5a2:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     5a6:	0f 92       	push	r0
     5a8:	11 24       	eor	r1, r1
     5aa:	2f 93       	push	r18
     5ac:	3f 93       	push	r19
     5ae:	4f 93       	push	r20
     5b0:	5f 93       	push	r21
     5b2:	6f 93       	push	r22
     5b4:	7f 93       	push	r23
     5b6:	8f 93       	push	r24
     5b8:	9f 93       	push	r25
     5ba:	af 93       	push	r26
     5bc:	bf 93       	push	r27
     5be:	ef 93       	push	r30
     5c0:	ff 93       	push	r31
     5c2:	cf 93       	push	r28
     5c4:	df 93       	push	r29
     5c6:	cd b7       	in	r28, 0x3d	; 61
     5c8:	de b7       	in	r29, 0x3e	; 62
	encoderPos += readEncoder();
     5ca:	0e 94 07 03 	call	0x60e	; 0x60e <readEncoder>
     5ce:	9c 01       	movw	r18, r24
     5d0:	80 91 20 20 	lds	r24, 0x2020	; 0x802020 <__data_end>
     5d4:	90 91 21 20 	lds	r25, 0x2021	; 0x802021 <__data_end+0x1>
     5d8:	82 0f       	add	r24, r18
     5da:	93 1f       	adc	r25, r19
     5dc:	80 93 20 20 	sts	0x2020, r24	; 0x802020 <__data_end>
     5e0:	90 93 21 20 	sts	0x2021, r25	; 0x802021 <__data_end+0x1>
}
     5e4:	00 00       	nop
     5e6:	df 91       	pop	r29
     5e8:	cf 91       	pop	r28
     5ea:	ff 91       	pop	r31
     5ec:	ef 91       	pop	r30
     5ee:	bf 91       	pop	r27
     5f0:	af 91       	pop	r26
     5f2:	9f 91       	pop	r25
     5f4:	8f 91       	pop	r24
     5f6:	7f 91       	pop	r23
     5f8:	6f 91       	pop	r22
     5fa:	5f 91       	pop	r21
     5fc:	4f 91       	pop	r20
     5fe:	3f 91       	pop	r19
     600:	2f 91       	pop	r18
     602:	0f 90       	pop	r0
     604:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     608:	0f 90       	pop	r0
     60a:	1f 90       	pop	r1
     60c:	18 95       	reti

0000060e <readEncoder>:
		}
		state = (s >> 2);
	}
*/

int readEncoder(){
     60e:	cf 93       	push	r28
     610:	df 93       	push	r29
     612:	cd b7       	in	r28, 0x3d	; 61
     614:	de b7       	in	r29, 0x3e	; 62
     616:	61 97       	sbiw	r28, 0x11	; 17
     618:	cd bf       	out	0x3d, r28	; 61
     61a:	de bf       	out	0x3e, r29	; 62
     61c:	80 e0       	ldi	r24, 0x00	; 0
     61e:	90 e0       	ldi	r25, 0x00	; 0
     620:	a0 e0       	ldi	r26, 0x00	; 0
     622:	b0 e4       	ldi	r27, 0x40	; 64
     624:	8c 83       	std	Y+4, r24	; 0x04
     626:	9d 83       	std	Y+5, r25	; 0x05
     628:	ae 83       	std	Y+6, r26	; 0x06
     62a:	bf 83       	std	Y+7, r27	; 0x07

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     62c:	20 e0       	ldi	r18, 0x00	; 0
     62e:	30 e0       	ldi	r19, 0x00	; 0
     630:	4a e7       	ldi	r20, 0x7A	; 122
     632:	55 e4       	ldi	r21, 0x45	; 69
     634:	6c 81       	ldd	r22, Y+4	; 0x04
     636:	7d 81       	ldd	r23, Y+5	; 0x05
     638:	8e 81       	ldd	r24, Y+6	; 0x06
     63a:	9f 81       	ldd	r25, Y+7	; 0x07
     63c:	0e 94 48 06 	call	0xc90	; 0xc90 <__mulsf3>
     640:	dc 01       	movw	r26, r24
     642:	cb 01       	movw	r24, r22
     644:	88 87       	std	Y+8, r24	; 0x08
     646:	99 87       	std	Y+9, r25	; 0x09
     648:	aa 87       	std	Y+10, r26	; 0x0a
     64a:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
     64c:	20 e0       	ldi	r18, 0x00	; 0
     64e:	30 e0       	ldi	r19, 0x00	; 0
     650:	40 e8       	ldi	r20, 0x80	; 128
     652:	5f e3       	ldi	r21, 0x3F	; 63
     654:	68 85       	ldd	r22, Y+8	; 0x08
     656:	79 85       	ldd	r23, Y+9	; 0x09
     658:	8a 85       	ldd	r24, Y+10	; 0x0a
     65a:	9b 85       	ldd	r25, Y+11	; 0x0b
     65c:	0e 94 c2 05 	call	0xb84	; 0xb84 <__cmpsf2>
     660:	88 23       	and	r24, r24
     662:	2c f4       	brge	.+10     	; 0x66e <readEncoder+0x60>
		__ticks = 1;
     664:	81 e0       	ldi	r24, 0x01	; 1
     666:	90 e0       	ldi	r25, 0x00	; 0
     668:	8c 87       	std	Y+12, r24	; 0x0c
     66a:	9d 87       	std	Y+13, r25	; 0x0d
     66c:	3f c0       	rjmp	.+126    	; 0x6ec <readEncoder+0xde>
	else if (__tmp > 65535)
     66e:	20 e0       	ldi	r18, 0x00	; 0
     670:	3f ef       	ldi	r19, 0xFF	; 255
     672:	4f e7       	ldi	r20, 0x7F	; 127
     674:	57 e4       	ldi	r21, 0x47	; 71
     676:	68 85       	ldd	r22, Y+8	; 0x08
     678:	79 85       	ldd	r23, Y+9	; 0x09
     67a:	8a 85       	ldd	r24, Y+10	; 0x0a
     67c:	9b 85       	ldd	r25, Y+11	; 0x0b
     67e:	0e 94 43 06 	call	0xc86	; 0xc86 <__gesf2>
     682:	18 16       	cp	r1, r24
     684:	4c f5       	brge	.+82     	; 0x6d8 <readEncoder+0xca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     686:	20 e0       	ldi	r18, 0x00	; 0
     688:	30 e0       	ldi	r19, 0x00	; 0
     68a:	40 e2       	ldi	r20, 0x20	; 32
     68c:	51 e4       	ldi	r21, 0x41	; 65
     68e:	6c 81       	ldd	r22, Y+4	; 0x04
     690:	7d 81       	ldd	r23, Y+5	; 0x05
     692:	8e 81       	ldd	r24, Y+6	; 0x06
     694:	9f 81       	ldd	r25, Y+7	; 0x07
     696:	0e 94 48 06 	call	0xc90	; 0xc90 <__mulsf3>
     69a:	dc 01       	movw	r26, r24
     69c:	cb 01       	movw	r24, r22
     69e:	bc 01       	movw	r22, r24
     6a0:	cd 01       	movw	r24, r26
     6a2:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__fixunssfsi>
     6a6:	dc 01       	movw	r26, r24
     6a8:	cb 01       	movw	r24, r22
     6aa:	8c 87       	std	Y+12, r24	; 0x0c
     6ac:	9d 87       	std	Y+13, r25	; 0x0d
     6ae:	0f c0       	rjmp	.+30     	; 0x6ce <readEncoder+0xc0>
     6b0:	80 e9       	ldi	r24, 0x90	; 144
     6b2:	91 e0       	ldi	r25, 0x01	; 1
     6b4:	8e 87       	std	Y+14, r24	; 0x0e
     6b6:	9f 87       	std	Y+15, r25	; 0x0f
     6b8:	8e 85       	ldd	r24, Y+14	; 0x0e
     6ba:	9f 85       	ldd	r25, Y+15	; 0x0f
     6bc:	01 97       	sbiw	r24, 0x01	; 1
     6be:	f1 f7       	brne	.-4      	; 0x6bc <readEncoder+0xae>
     6c0:	8e 87       	std	Y+14, r24	; 0x0e
     6c2:	9f 87       	std	Y+15, r25	; 0x0f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6c4:	8c 85       	ldd	r24, Y+12	; 0x0c
     6c6:	9d 85       	ldd	r25, Y+13	; 0x0d
     6c8:	01 97       	sbiw	r24, 0x01	; 1
     6ca:	8c 87       	std	Y+12, r24	; 0x0c
     6cc:	9d 87       	std	Y+13, r25	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     6ce:	8c 85       	ldd	r24, Y+12	; 0x0c
     6d0:	9d 85       	ldd	r25, Y+13	; 0x0d
     6d2:	89 2b       	or	r24, r25
     6d4:	69 f7       	brne	.-38     	; 0x6b0 <readEncoder+0xa2>
     6d6:	14 c0       	rjmp	.+40     	; 0x700 <readEncoder+0xf2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     6d8:	68 85       	ldd	r22, Y+8	; 0x08
     6da:	79 85       	ldd	r23, Y+9	; 0x09
     6dc:	8a 85       	ldd	r24, Y+10	; 0x0a
     6de:	9b 85       	ldd	r25, Y+11	; 0x0b
     6e0:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__fixunssfsi>
     6e4:	dc 01       	movw	r26, r24
     6e6:	cb 01       	movw	r24, r22
     6e8:	8c 87       	std	Y+12, r24	; 0x0c
     6ea:	9d 87       	std	Y+13, r25	; 0x0d
     6ec:	8c 85       	ldd	r24, Y+12	; 0x0c
     6ee:	9d 85       	ldd	r25, Y+13	; 0x0d
     6f0:	88 8b       	std	Y+16, r24	; 0x10
     6f2:	99 8b       	std	Y+17, r25	; 0x11
     6f4:	88 89       	ldd	r24, Y+16	; 0x10
     6f6:	99 89       	ldd	r25, Y+17	; 0x11
     6f8:	01 97       	sbiw	r24, 0x01	; 1
     6fa:	f1 f7       	brne	.-4      	; 0x6f8 <readEncoder+0xea>
     6fc:	88 8b       	std	Y+16, r24	; 0x10
     6fe:	99 8b       	std	Y+17, r25	; 0x11
	_delay_ms(2);
	currentPos = (PORTC.IN >> 4) & 3;
     700:	80 e4       	ldi	r24, 0x40	; 64
     702:	96 e0       	ldi	r25, 0x06	; 6
     704:	fc 01       	movw	r30, r24
     706:	80 85       	ldd	r24, Z+8	; 0x08
     708:	82 95       	swap	r24
     70a:	8f 70       	andi	r24, 0x0F	; 15
     70c:	83 70       	andi	r24, 0x03	; 3
     70e:	80 93 22 20 	sts	0x2022, r24	; 0x802022 <currentPos>
	uint8_t s = (currentPos << 2) | prevpos;
     712:	80 91 22 20 	lds	r24, 0x2022	; 0x802022 <currentPos>
     716:	88 2f       	mov	r24, r24
     718:	90 e0       	ldi	r25, 0x00	; 0
     71a:	88 0f       	add	r24, r24
     71c:	99 1f       	adc	r25, r25
     71e:	88 0f       	add	r24, r24
     720:	99 1f       	adc	r25, r25
     722:	98 2f       	mov	r25, r24
     724:	80 91 23 20 	lds	r24, 0x2023	; 0x802023 <prevpos>
     728:	89 2b       	or	r24, r25
     72a:	8b 83       	std	Y+3, r24	; 0x03
	int position = 0;
     72c:	19 82       	std	Y+1, r1	; 0x01
     72e:	1a 82       	std	Y+2, r1	; 0x02
	switch (s) {
     730:	8b 81       	ldd	r24, Y+3	; 0x03
     732:	88 2f       	mov	r24, r24
     734:	90 e0       	ldi	r25, 0x00	; 0
     736:	09 2e       	mov	r0, r25
     738:	00 0c       	add	r0, r0
     73a:	aa 0b       	sbc	r26, r26
     73c:	bb 0b       	sbc	r27, r27
     73e:	40 e0       	ldi	r20, 0x00	; 0
     740:	50 e0       	ldi	r21, 0x00	; 0
     742:	2f e0       	ldi	r18, 0x0F	; 15
     744:	30 e0       	ldi	r19, 0x00	; 0
     746:	84 1b       	sub	r24, r20
     748:	95 0b       	sbc	r25, r21
     74a:	28 17       	cp	r18, r24
     74c:	39 07       	cpc	r19, r25
     74e:	b8 f0       	brcs	.+46     	; 0x77e <readEncoder+0x170>
     750:	8a 54       	subi	r24, 0x4A	; 74
     752:	9f 4f       	sbci	r25, 0xFF	; 255
     754:	fc 01       	movw	r30, r24
     756:	0c 94 dd 06 	jmp	0xdba	; 0xdba <__tablejump2__>
		case 0: case 5: case 10: case 15:
		break;
		case 1: case 7: case 8: case 14:
		position++; break;
     75a:	89 81       	ldd	r24, Y+1	; 0x01
     75c:	9a 81       	ldd	r25, Y+2	; 0x02
     75e:	01 96       	adiw	r24, 0x01	; 1
     760:	89 83       	std	Y+1, r24	; 0x01
     762:	9a 83       	std	Y+2, r25	; 0x02
     764:	13 c0       	rjmp	.+38     	; 0x78c <readEncoder+0x17e>
		case 2: case 4: case 11: case 13:
		position--; break;
     766:	89 81       	ldd	r24, Y+1	; 0x01
     768:	9a 81       	ldd	r25, Y+2	; 0x02
     76a:	01 97       	sbiw	r24, 0x01	; 1
     76c:	89 83       	std	Y+1, r24	; 0x01
     76e:	9a 83       	std	Y+2, r25	; 0x02
     770:	0d c0       	rjmp	.+26     	; 0x78c <readEncoder+0x17e>
		case 3: case 12:
		position += 2; break;
     772:	89 81       	ldd	r24, Y+1	; 0x01
     774:	9a 81       	ldd	r25, Y+2	; 0x02
     776:	02 96       	adiw	r24, 0x02	; 2
     778:	89 83       	std	Y+1, r24	; 0x01
     77a:	9a 83       	std	Y+2, r25	; 0x02
     77c:	07 c0       	rjmp	.+14     	; 0x78c <readEncoder+0x17e>
		default:
		position -= 2; break;
     77e:	89 81       	ldd	r24, Y+1	; 0x01
     780:	9a 81       	ldd	r25, Y+2	; 0x02
     782:	02 97       	sbiw	r24, 0x02	; 2
     784:	89 83       	std	Y+1, r24	; 0x01
     786:	9a 83       	std	Y+2, r25	; 0x02
     788:	01 c0       	rjmp	.+2      	; 0x78c <readEncoder+0x17e>
	currentPos = (PORTC.IN >> 4) & 3;
	uint8_t s = (currentPos << 2) | prevpos;
	int position = 0;
	switch (s) {
		case 0: case 5: case 10: case 15:
		break;
     78a:	00 00       	nop
		case 3: case 12:
		position += 2; break;
		default:
		position -= 2; break;
	}
	prevpos = currentPos;
     78c:	80 91 22 20 	lds	r24, 0x2022	; 0x802022 <currentPos>
     790:	80 93 23 20 	sts	0x2023, r24	; 0x802023 <prevpos>
	return position;
     794:	89 81       	ldd	r24, Y+1	; 0x01
     796:	9a 81       	ldd	r25, Y+2	; 0x02
}
     798:	61 96       	adiw	r28, 0x11	; 17
     79a:	cd bf       	out	0x3d, r28	; 61
     79c:	de bf       	out	0x3e, r29	; 62
     79e:	df 91       	pop	r29
     7a0:	cf 91       	pop	r28
     7a2:	08 95       	ret

000007a4 <main>:
char a;

void SimpleFunction(void);	//A simple function: print a counter (0 to 9) to the terminal

int main(void)
{	
     7a4:	ef 92       	push	r14
     7a6:	ff 92       	push	r15
     7a8:	0f 93       	push	r16
     7aa:	1f 93       	push	r17
     7ac:	cf 93       	push	r28
     7ae:	df 93       	push	r29
     7b0:	cd b7       	in	r28, 0x3d	; 61
     7b2:	de b7       	in	r29, 0x3e	; 62
     7b4:	2e 97       	sbiw	r28, 0x0e	; 14
     7b6:	cd bf       	out	0x3d, r28	; 61
     7b8:	de bf       	out	0x3e, r29	; 62
	//###1###
	 
	//Initialize subsystems
	ClockInit();			//Initialize system clock (16 MHz)
     7ba:	0e 94 4f 02 	call	0x49e	; 0x49e <ClockInit>
	USARTInit();			//Initialize USART and bind to stdout,stdin
     7be:	0e 94 4d 05 	call	0xa9a	; 0xa9a <USARTInit>
	AnalogInit();			//Initialize ADC
     7c2:	0e 94 87 01 	call	0x30e	; 0x30e <AnalogInit>
	AccInit();				//Initialize accelerometer system
     7c6:	0e 94 e5 00 	call	0x1ca	; 0x1ca <AccInit>
	LEDInit();				//Initialize LEDs
     7ca:	0e 94 a4 04 	call	0x948	; 0x948 <LEDInit>
	SwitchInit();			//Initialize switches
     7ce:	0e 94 27 05 	call	0xa4e	; 0xa4e <SwitchInit>
	EncoderInit();			//Initialize encoder
     7d2:	0e 94 5f 02 	call	0x4be	; 0x4be <EncoderInit>
	SpeakerInit();			//Initialize speaker system
     7d6:	0e 94 c5 04 	call	0x98a	; 0x98a <SpeakerInit>
	
	//Enable interrupts
	PMIC.CTRL|=0b00000111;  //Enable low, medium, high priority interrupts
     7da:	80 ea       	ldi	r24, 0xA0	; 160
     7dc:	90 e0       	ldi	r25, 0x00	; 0
     7de:	20 ea       	ldi	r18, 0xA0	; 160
     7e0:	30 e0       	ldi	r19, 0x00	; 0
     7e2:	f9 01       	movw	r30, r18
     7e4:	22 81       	ldd	r18, Z+2	; 0x02
     7e6:	27 60       	ori	r18, 0x07	; 7
     7e8:	fc 01       	movw	r30, r24
     7ea:	22 83       	std	Z+2, r18	; 0x02
	SREG|=0b10000000;		//Global interrupt enable
     7ec:	8f e3       	ldi	r24, 0x3F	; 63
     7ee:	90 e0       	ldi	r25, 0x00	; 0
     7f0:	2f e3       	ldi	r18, 0x3F	; 63
     7f2:	30 e0       	ldi	r19, 0x00	; 0
     7f4:	f9 01       	movw	r30, r18
     7f6:	20 81       	ld	r18, Z
     7f8:	20 68       	ori	r18, 0x80	; 128
     7fa:	fc 01       	movw	r30, r24
     7fc:	20 83       	st	Z, r18
     7fe:	80 e0       	ldi	r24, 0x00	; 0
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	aa ef       	ldi	r26, 0xFA	; 250
     804:	b3 e4       	ldi	r27, 0x43	; 67
     806:	89 83       	std	Y+1, r24	; 0x01
     808:	9a 83       	std	Y+2, r25	; 0x02
     80a:	ab 83       	std	Y+3, r26	; 0x03
     80c:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     80e:	20 e0       	ldi	r18, 0x00	; 0
     810:	30 e0       	ldi	r19, 0x00	; 0
     812:	4a e7       	ldi	r20, 0x7A	; 122
     814:	55 e4       	ldi	r21, 0x45	; 69
     816:	69 81       	ldd	r22, Y+1	; 0x01
     818:	7a 81       	ldd	r23, Y+2	; 0x02
     81a:	8b 81       	ldd	r24, Y+3	; 0x03
     81c:	9c 81       	ldd	r25, Y+4	; 0x04
     81e:	0e 94 48 06 	call	0xc90	; 0xc90 <__mulsf3>
     822:	dc 01       	movw	r26, r24
     824:	cb 01       	movw	r24, r22
     826:	8d 83       	std	Y+5, r24	; 0x05
     828:	9e 83       	std	Y+6, r25	; 0x06
     82a:	af 83       	std	Y+7, r26	; 0x07
     82c:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     82e:	20 e0       	ldi	r18, 0x00	; 0
     830:	30 e0       	ldi	r19, 0x00	; 0
     832:	40 e8       	ldi	r20, 0x80	; 128
     834:	5f e3       	ldi	r21, 0x3F	; 63
     836:	6d 81       	ldd	r22, Y+5	; 0x05
     838:	7e 81       	ldd	r23, Y+6	; 0x06
     83a:	8f 81       	ldd	r24, Y+7	; 0x07
     83c:	98 85       	ldd	r25, Y+8	; 0x08
     83e:	0e 94 c2 05 	call	0xb84	; 0xb84 <__cmpsf2>
     842:	88 23       	and	r24, r24
     844:	2c f4       	brge	.+10     	; 0x850 <main+0xac>
		__ticks = 1;
     846:	81 e0       	ldi	r24, 0x01	; 1
     848:	90 e0       	ldi	r25, 0x00	; 0
     84a:	89 87       	std	Y+9, r24	; 0x09
     84c:	9a 87       	std	Y+10, r25	; 0x0a
     84e:	3f c0       	rjmp	.+126    	; 0x8ce <main+0x12a>
	else if (__tmp > 65535)
     850:	20 e0       	ldi	r18, 0x00	; 0
     852:	3f ef       	ldi	r19, 0xFF	; 255
     854:	4f e7       	ldi	r20, 0x7F	; 127
     856:	57 e4       	ldi	r21, 0x47	; 71
     858:	6d 81       	ldd	r22, Y+5	; 0x05
     85a:	7e 81       	ldd	r23, Y+6	; 0x06
     85c:	8f 81       	ldd	r24, Y+7	; 0x07
     85e:	98 85       	ldd	r25, Y+8	; 0x08
     860:	0e 94 43 06 	call	0xc86	; 0xc86 <__gesf2>
     864:	18 16       	cp	r1, r24
     866:	4c f5       	brge	.+82     	; 0x8ba <main+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     868:	20 e0       	ldi	r18, 0x00	; 0
     86a:	30 e0       	ldi	r19, 0x00	; 0
     86c:	40 e2       	ldi	r20, 0x20	; 32
     86e:	51 e4       	ldi	r21, 0x41	; 65
     870:	69 81       	ldd	r22, Y+1	; 0x01
     872:	7a 81       	ldd	r23, Y+2	; 0x02
     874:	8b 81       	ldd	r24, Y+3	; 0x03
     876:	9c 81       	ldd	r25, Y+4	; 0x04
     878:	0e 94 48 06 	call	0xc90	; 0xc90 <__mulsf3>
     87c:	dc 01       	movw	r26, r24
     87e:	cb 01       	movw	r24, r22
     880:	bc 01       	movw	r22, r24
     882:	cd 01       	movw	r24, r26
     884:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__fixunssfsi>
     888:	dc 01       	movw	r26, r24
     88a:	cb 01       	movw	r24, r22
     88c:	89 87       	std	Y+9, r24	; 0x09
     88e:	9a 87       	std	Y+10, r25	; 0x0a
     890:	0f c0       	rjmp	.+30     	; 0x8b0 <main+0x10c>
     892:	80 e9       	ldi	r24, 0x90	; 144
     894:	91 e0       	ldi	r25, 0x01	; 1
     896:	8b 87       	std	Y+11, r24	; 0x0b
     898:	9c 87       	std	Y+12, r25	; 0x0c
     89a:	8b 85       	ldd	r24, Y+11	; 0x0b
     89c:	9c 85       	ldd	r25, Y+12	; 0x0c
     89e:	01 97       	sbiw	r24, 0x01	; 1
     8a0:	f1 f7       	brne	.-4      	; 0x89e <main+0xfa>
     8a2:	8b 87       	std	Y+11, r24	; 0x0b
     8a4:	9c 87       	std	Y+12, r25	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8a6:	89 85       	ldd	r24, Y+9	; 0x09
     8a8:	9a 85       	ldd	r25, Y+10	; 0x0a
     8aa:	01 97       	sbiw	r24, 0x01	; 1
     8ac:	89 87       	std	Y+9, r24	; 0x09
     8ae:	9a 87       	std	Y+10, r25	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8b0:	89 85       	ldd	r24, Y+9	; 0x09
     8b2:	9a 85       	ldd	r25, Y+10	; 0x0a
     8b4:	89 2b       	or	r24, r25
     8b6:	69 f7       	brne	.-38     	; 0x892 <main+0xee>
     8b8:	14 c0       	rjmp	.+40     	; 0x8e2 <main+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     8ba:	6d 81       	ldd	r22, Y+5	; 0x05
     8bc:	7e 81       	ldd	r23, Y+6	; 0x06
     8be:	8f 81       	ldd	r24, Y+7	; 0x07
     8c0:	98 85       	ldd	r25, Y+8	; 0x08
     8c2:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__fixunssfsi>
     8c6:	dc 01       	movw	r26, r24
     8c8:	cb 01       	movw	r24, r22
     8ca:	89 87       	std	Y+9, r24	; 0x09
     8cc:	9a 87       	std	Y+10, r25	; 0x0a
     8ce:	89 85       	ldd	r24, Y+9	; 0x09
     8d0:	9a 85       	ldd	r25, Y+10	; 0x0a
     8d2:	8d 87       	std	Y+13, r24	; 0x0d
     8d4:	9e 87       	std	Y+14, r25	; 0x0e
     8d6:	8d 85       	ldd	r24, Y+13	; 0x0d
     8d8:	9e 85       	ldd	r25, Y+14	; 0x0e
     8da:	01 97       	sbiw	r24, 0x01	; 1
     8dc:	f1 f7       	brne	.-4      	; 0x8da <main+0x136>
     8de:	8d 87       	std	Y+13, r24	; 0x0d
     8e0:	9e 87       	std	Y+14, r25	; 0x0e
		// Start ADC conversion
		//ADCA.CH0.CTRL |= 0x80;



		sprintf(text, "ACCRAW %d %d %d\r\n",AccGetXAxis(AccGetXAxisRaw()),AccGetYAxis(AccGetYAxisRaw()),AccGetZAxis(AccGetZAxisRaw()));
     8e2:	0e 94 39 01 	call	0x272	; 0x272 <AccGetZAxisRaw>
     8e6:	0e 94 73 01 	call	0x2e6	; 0x2e6 <AccGetZAxis>
     8ea:	7c 01       	movw	r14, r24
     8ec:	0e 94 27 01 	call	0x24e	; 0x24e <AccGetYAxisRaw>
     8f0:	0e 94 5f 01 	call	0x2be	; 0x2be <AccGetYAxis>
     8f4:	8c 01       	movw	r16, r24
     8f6:	0e 94 15 01 	call	0x22a	; 0x22a <AccGetXAxisRaw>
     8fa:	0e 94 4b 01 	call	0x296	; 0x296 <AccGetXAxis>
     8fe:	2f 2d       	mov	r18, r15
     900:	2f 93       	push	r18
     902:	2e 2d       	mov	r18, r14
     904:	2f 93       	push	r18
     906:	21 2f       	mov	r18, r17
     908:	2f 93       	push	r18
     90a:	20 2f       	mov	r18, r16
     90c:	2f 93       	push	r18
     90e:	29 2f       	mov	r18, r25
     910:	2f 93       	push	r18
     912:	8f 93       	push	r24
     914:	8e e0       	ldi	r24, 0x0E	; 14
     916:	90 e2       	ldi	r25, 0x20	; 32
     918:	89 2f       	mov	r24, r25
     91a:	8f 93       	push	r24
     91c:	8e e0       	ldi	r24, 0x0E	; 14
     91e:	90 e2       	ldi	r25, 0x20	; 32
     920:	8f 93       	push	r24
     922:	84 e2       	ldi	r24, 0x24	; 36
     924:	90 e2       	ldi	r25, 0x20	; 32
     926:	89 2f       	mov	r24, r25
     928:	8f 93       	push	r24
     92a:	84 e2       	ldi	r24, 0x24	; 36
     92c:	90 e2       	ldi	r25, 0x20	; 32
     92e:	8f 93       	push	r24
     930:	0e 94 13 07 	call	0xe26	; 0xe26 <sprintf>
     934:	8d b7       	in	r24, 0x3d	; 61
     936:	9e b7       	in	r25, 0x3e	; 62
     938:	0a 96       	adiw	r24, 0x0a	; 10
     93a:	cd bf       	out	0x3d, r28	; 61
     93c:	de bf       	out	0x3e, r29	; 62
		puts(text);
     93e:	84 e2       	ldi	r24, 0x24	; 36
     940:	90 e2       	ldi	r25, 0x20	; 32
     942:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <puts>
		//

		
		
		//putchar('U');
	}
     946:	cd cf       	rjmp	.-102    	; 0x8e2 <main+0x13e>

00000948 <LEDInit>:
#include "LED.h"
#include <avr/io.h>

void LEDInit(void)
{
     948:	cf 93       	push	r28
     94a:	df 93       	push	r29
     94c:	cd b7       	in	r28, 0x3d	; 61
     94e:	de b7       	in	r29, 0x3e	; 62
	PORTE.DIRSET=0b00001111;
     950:	80 e8       	ldi	r24, 0x80	; 128
     952:	96 e0       	ldi	r25, 0x06	; 6
     954:	2f e0       	ldi	r18, 0x0F	; 15
     956:	fc 01       	movw	r30, r24
     958:	21 83       	std	Z+1, r18	; 0x01
	PORTE.PIN0CTRL=0b01000000;
     95a:	80 e8       	ldi	r24, 0x80	; 128
     95c:	96 e0       	ldi	r25, 0x06	; 6
     95e:	20 e4       	ldi	r18, 0x40	; 64
     960:	fc 01       	movw	r30, r24
     962:	20 8b       	std	Z+16, r18	; 0x10
	PORTE.PIN1CTRL=0b01000000;
     964:	80 e8       	ldi	r24, 0x80	; 128
     966:	96 e0       	ldi	r25, 0x06	; 6
     968:	20 e4       	ldi	r18, 0x40	; 64
     96a:	fc 01       	movw	r30, r24
     96c:	21 8b       	std	Z+17, r18	; 0x11
	PORTE.PIN2CTRL=0b01000000;
     96e:	80 e8       	ldi	r24, 0x80	; 128
     970:	96 e0       	ldi	r25, 0x06	; 6
     972:	20 e4       	ldi	r18, 0x40	; 64
     974:	fc 01       	movw	r30, r24
     976:	22 8b       	std	Z+18, r18	; 0x12
	PORTE.PIN3CTRL=0b01000000;
     978:	80 e8       	ldi	r24, 0x80	; 128
     97a:	96 e0       	ldi	r25, 0x06	; 6
     97c:	20 e4       	ldi	r18, 0x40	; 64
     97e:	fc 01       	movw	r30, r24
     980:	23 8b       	std	Z+19, r18	; 0x13
	
}
     982:	00 00       	nop
     984:	df 91       	pop	r29
     986:	cf 91       	pop	r28
     988:	08 95       	ret

0000098a <SpeakerInit>:
	TCC1.CNT = 0; //set count to 0
	TCC1.PER = (Length*15);//not exactly correct because real value is 15.625 but processor doesn't like floating point operations.
	while(PORTC.DIR & 1){ //this function can not move on because other sounds could overrule the current one
		
	}
}
     98a:	cf 93       	push	r28
     98c:	df 93       	push	r29
     98e:	cd b7       	in	r28, 0x3d	; 61
     990:	de b7       	in	r29, 0x3e	; 62
     992:	80 e4       	ldi	r24, 0x40	; 64
     994:	96 e0       	ldi	r25, 0x06	; 6
     996:	21 e0       	ldi	r18, 0x01	; 1
     998:	fc 01       	movw	r30, r24
     99a:	22 83       	std	Z+2, r18	; 0x02
     99c:	80 e4       	ldi	r24, 0x40	; 64
     99e:	96 e0       	ldi	r25, 0x06	; 6
     9a0:	20 e1       	ldi	r18, 0x10	; 16
     9a2:	fc 01       	movw	r30, r24
     9a4:	20 8b       	std	Z+16, r18	; 0x10
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	98 e0       	ldi	r25, 0x08	; 8
     9aa:	fc 01       	movw	r30, r24
     9ac:	10 82       	st	Z, r1
     9ae:	80 e0       	ldi	r24, 0x00	; 0
     9b0:	98 e0       	ldi	r25, 0x08	; 8
     9b2:	23 e1       	ldi	r18, 0x13	; 19
     9b4:	fc 01       	movw	r30, r24
     9b6:	21 83       	std	Z+1, r18	; 0x01
     9b8:	80 e0       	ldi	r24, 0x00	; 0
     9ba:	98 e0       	ldi	r25, 0x08	; 8
     9bc:	fc 01       	movw	r30, r24
     9be:	13 82       	std	Z+3, r1	; 0x03
     9c0:	80 e0       	ldi	r24, 0x00	; 0
     9c2:	98 e0       	ldi	r25, 0x08	; 8
     9c4:	fc 01       	movw	r30, r24
     9c6:	14 82       	std	Z+4, r1	; 0x04
     9c8:	80 e4       	ldi	r24, 0x40	; 64
     9ca:	98 e0       	ldi	r25, 0x08	; 8
     9cc:	fc 01       	movw	r30, r24
     9ce:	10 82       	st	Z, r1
     9d0:	80 e4       	ldi	r24, 0x40	; 64
     9d2:	98 e0       	ldi	r25, 0x08	; 8
     9d4:	fc 01       	movw	r30, r24
     9d6:	11 82       	std	Z+1, r1	; 0x01
     9d8:	80 e4       	ldi	r24, 0x40	; 64
     9da:	98 e0       	ldi	r25, 0x08	; 8
     9dc:	fc 01       	movw	r30, r24
     9de:	13 82       	std	Z+3, r1	; 0x03
     9e0:	80 e4       	ldi	r24, 0x40	; 64
     9e2:	98 e0       	ldi	r25, 0x08	; 8
     9e4:	fc 01       	movw	r30, r24
     9e6:	14 82       	std	Z+4, r1	; 0x04
     9e8:	80 e4       	ldi	r24, 0x40	; 64
     9ea:	98 e0       	ldi	r25, 0x08	; 8
     9ec:	23 e0       	ldi	r18, 0x03	; 3
     9ee:	fc 01       	movw	r30, r24
     9f0:	26 83       	std	Z+6, r18	; 0x06
     9f2:	00 00       	nop
     9f4:	df 91       	pop	r29
     9f6:	cf 91       	pop	r28
     9f8:	08 95       	ret

000009fa <__vector_20>:

ISR(TCC1_OVF_vect){ //turn pin to input and turn of timers.
     9fa:	1f 92       	push	r1
     9fc:	0f 92       	push	r0
     9fe:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     a02:	0f 92       	push	r0
     a04:	11 24       	eor	r1, r1
     a06:	2f 93       	push	r18
     a08:	8f 93       	push	r24
     a0a:	9f 93       	push	r25
     a0c:	ef 93       	push	r30
     a0e:	ff 93       	push	r31
     a10:	cf 93       	push	r28
     a12:	df 93       	push	r29
     a14:	cd b7       	in	r28, 0x3d	; 61
     a16:	de b7       	in	r29, 0x3e	; 62
	PORTC.DIRCLR = 0b00000001; 
     a18:	80 e4       	ldi	r24, 0x40	; 64
     a1a:	96 e0       	ldi	r25, 0x06	; 6
     a1c:	21 e0       	ldi	r18, 0x01	; 1
     a1e:	fc 01       	movw	r30, r24
     a20:	22 83       	std	Z+2, r18	; 0x02
	TCC0.CTRLA = 0;
     a22:	80 e0       	ldi	r24, 0x00	; 0
     a24:	98 e0       	ldi	r25, 0x08	; 8
     a26:	fc 01       	movw	r30, r24
     a28:	10 82       	st	Z, r1
	TCC1.CTRLA = 0;
     a2a:	80 e4       	ldi	r24, 0x40	; 64
     a2c:	98 e0       	ldi	r25, 0x08	; 8
     a2e:	fc 01       	movw	r30, r24
     a30:	10 82       	st	Z, r1
}
     a32:	00 00       	nop
     a34:	df 91       	pop	r29
     a36:	cf 91       	pop	r28
     a38:	ff 91       	pop	r31
     a3a:	ef 91       	pop	r30
     a3c:	9f 91       	pop	r25
     a3e:	8f 91       	pop	r24
     a40:	2f 91       	pop	r18
     a42:	0f 90       	pop	r0
     a44:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     a48:	0f 90       	pop	r0
     a4a:	1f 90       	pop	r1
     a4c:	18 95       	reti

00000a4e <SwitchInit>:
#include "switch.h"
#include <avr/io.h>

void SwitchInit(void)
{
     a4e:	cf 93       	push	r28
     a50:	df 93       	push	r29
     a52:	cd b7       	in	r28, 0x3d	; 61
     a54:	de b7       	in	r29, 0x3e	; 62
	PORTD.DIRCLR=0b11110001;
     a56:	80 e6       	ldi	r24, 0x60	; 96
     a58:	96 e0       	ldi	r25, 0x06	; 6
     a5a:	21 ef       	ldi	r18, 0xF1	; 241
     a5c:	fc 01       	movw	r30, r24
     a5e:	22 83       	std	Z+2, r18	; 0x02
	PORTD.PIN0CTRL=0b01011000;
     a60:	80 e6       	ldi	r24, 0x60	; 96
     a62:	96 e0       	ldi	r25, 0x06	; 6
     a64:	28 e5       	ldi	r18, 0x58	; 88
     a66:	fc 01       	movw	r30, r24
     a68:	20 8b       	std	Z+16, r18	; 0x10
	PORTD.PIN4CTRL=0b01011000;
     a6a:	80 e6       	ldi	r24, 0x60	; 96
     a6c:	96 e0       	ldi	r25, 0x06	; 6
     a6e:	28 e5       	ldi	r18, 0x58	; 88
     a70:	fc 01       	movw	r30, r24
     a72:	24 8b       	std	Z+20, r18	; 0x14
	PORTD.PIN5CTRL=0b01011000;
     a74:	80 e6       	ldi	r24, 0x60	; 96
     a76:	96 e0       	ldi	r25, 0x06	; 6
     a78:	28 e5       	ldi	r18, 0x58	; 88
     a7a:	fc 01       	movw	r30, r24
     a7c:	25 8b       	std	Z+21, r18	; 0x15
	PORTD.PIN6CTRL=0b01011000;
     a7e:	80 e6       	ldi	r24, 0x60	; 96
     a80:	96 e0       	ldi	r25, 0x06	; 6
     a82:	28 e5       	ldi	r18, 0x58	; 88
     a84:	fc 01       	movw	r30, r24
     a86:	26 8b       	std	Z+22, r18	; 0x16
	PORTD.PIN7CTRL=0b01011000;
     a88:	80 e6       	ldi	r24, 0x60	; 96
     a8a:	96 e0       	ldi	r25, 0x06	; 6
     a8c:	28 e5       	ldi	r18, 0x58	; 88
     a8e:	fc 01       	movw	r30, r24
     a90:	27 8b       	std	Z+23, r18	; 0x17
}
     a92:	00 00       	nop
     a94:	df 91       	pop	r29
     a96:	cf 91       	pop	r28
     a98:	08 95       	ret

00000a9a <USARTInit>:
 int stdio_putchar(char c, FILE * stream);
 int stdio_getchar(FILE *stream);
static FILE UsartStdio = FDEV_SETUP_STREAM(stdio_putchar, stdio_getchar,_FDEV_SETUP_WRITE);

void USARTInit(void)
{
     a9a:	cf 93       	push	r28
     a9c:	df 93       	push	r29
     a9e:	cd b7       	in	r28, 0x3d	; 61
     aa0:	de b7       	in	r29, 0x3e	; 62
	USART_PORT.DIRSET=0b00001000;	//set pin as an output
     aa2:	80 e6       	ldi	r24, 0x60	; 96
     aa4:	96 e0       	ldi	r25, 0x06	; 6
     aa6:	28 e0       	ldi	r18, 0x08	; 8
     aa8:	fc 01       	movw	r30, r24
     aaa:	21 83       	std	Z+1, r18	; 0x01
	USART_PORT.DIRCLR=0b00000100;	//set pin as input
     aac:	80 e6       	ldi	r24, 0x60	; 96
     aae:	96 e0       	ldi	r25, 0x06	; 6
     ab0:	24 e0       	ldi	r18, 0x04	; 4
     ab2:	fc 01       	movw	r30, r24
     ab4:	22 83       	std	Z+2, r18	; 0x02
	
	USART.CTRLA=0b00000000;			//turn of interrupts of usart
     ab6:	80 ea       	ldi	r24, 0xA0	; 160
     ab8:	99 e0       	ldi	r25, 0x09	; 9
     aba:	fc 01       	movw	r30, r24
     abc:	13 82       	std	Z+3, r1	; 0x03
	USART.CTRLB=0b00011000;			//turn on receive and transmit 
     abe:	80 ea       	ldi	r24, 0xA0	; 160
     ac0:	99 e0       	ldi	r25, 0x09	; 9
     ac2:	28 e1       	ldi	r18, 0x18	; 24
     ac4:	fc 01       	movw	r30, r24
     ac6:	24 83       	std	Z+4, r18	; 0x04
	USART.CTRLC=0b00000011;			//asynchronous mode with no parity, 1 stop bit and an 8-bit size
     ac8:	80 ea       	ldi	r24, 0xA0	; 160
     aca:	99 e0       	ldi	r25, 0x09	; 9
     acc:	23 e0       	ldi	r18, 0x03	; 3
     ace:	fc 01       	movw	r30, r24
     ad0:	25 83       	std	Z+5, r18	; 0x05
	
	USART.BAUDCTRLA=0xD7; //BSEL=3301, BSCALE=-5 9600 baud see matlab code for calculations
     ad2:	80 ea       	ldi	r24, 0xA0	; 160
     ad4:	99 e0       	ldi	r25, 0x09	; 9
     ad6:	27 ed       	ldi	r18, 0xD7	; 215
     ad8:	fc 01       	movw	r30, r24
     ada:	26 83       	std	Z+6, r18	; 0x06
	USART.BAUDCTRLB=0x93; 
     adc:	80 ea       	ldi	r24, 0xA0	; 160
     ade:	99 e0       	ldi	r25, 0x09	; 9
     ae0:	23 e9       	ldi	r18, 0x93	; 147
     ae2:	fc 01       	movw	r30, r24
     ae4:	27 83       	std	Z+7, r18	; 0x07
	
	stdout=&UsartStdio;
     ae6:	80 e0       	ldi	r24, 0x00	; 0
     ae8:	90 e2       	ldi	r25, 0x20	; 32
     aea:	80 93 8b 20 	sts	0x208B, r24	; 0x80208b <__iob+0x2>
     aee:	90 93 8c 20 	sts	0x208C, r25	; 0x80208c <__iob+0x3>
	stdin=&UsartStdio;
     af2:	80 e0       	ldi	r24, 0x00	; 0
     af4:	90 e2       	ldi	r25, 0x20	; 32
     af6:	80 93 89 20 	sts	0x2089, r24	; 0x802089 <__iob>
     afa:	90 93 8a 20 	sts	0x208A, r25	; 0x80208a <__iob+0x1>
}
     afe:	00 00       	nop
     b00:	df 91       	pop	r29
     b02:	cf 91       	pop	r28
     b04:	08 95       	ret

00000b06 <stdio_putchar>:


int stdio_putchar(char c, FILE * stream)
{
     b06:	cf 93       	push	r28
     b08:	df 93       	push	r29
     b0a:	00 d0       	rcall	.+0      	; 0xb0c <stdio_putchar+0x6>
     b0c:	1f 92       	push	r1
     b0e:	cd b7       	in	r28, 0x3d	; 61
     b10:	de b7       	in	r29, 0x3e	; 62
     b12:	89 83       	std	Y+1, r24	; 0x01
     b14:	6a 83       	std	Y+2, r22	; 0x02
     b16:	7b 83       	std	Y+3, r23	; 0x03
	USART.DATA = c;
     b18:	80 ea       	ldi	r24, 0xA0	; 160
     b1a:	99 e0       	ldi	r25, 0x09	; 9
     b1c:	29 81       	ldd	r18, Y+1	; 0x01
     b1e:	fc 01       	movw	r30, r24
     b20:	20 83       	st	Z, r18
	while (!(USART.STATUS & 0b01000000)); //wait for transmit complete flag
     b22:	00 00       	nop
     b24:	80 ea       	ldi	r24, 0xA0	; 160
     b26:	99 e0       	ldi	r25, 0x09	; 9
     b28:	fc 01       	movw	r30, r24
     b2a:	81 81       	ldd	r24, Z+1	; 0x01
     b2c:	88 2f       	mov	r24, r24
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	80 74       	andi	r24, 0x40	; 64
     b32:	99 27       	eor	r25, r25
     b34:	89 2b       	or	r24, r25
     b36:	b1 f3       	breq	.-20     	; 0xb24 <stdio_putchar+0x1e>
	USART.STATUS=0b01000000;
     b38:	80 ea       	ldi	r24, 0xA0	; 160
     b3a:	99 e0       	ldi	r25, 0x09	; 9
     b3c:	20 e4       	ldi	r18, 0x40	; 64
     b3e:	fc 01       	movw	r30, r24
     b40:	21 83       	std	Z+1, r18	; 0x01
	return 0;
     b42:	80 e0       	ldi	r24, 0x00	; 0
     b44:	90 e0       	ldi	r25, 0x00	; 0
}
     b46:	23 96       	adiw	r28, 0x03	; 3
     b48:	cd bf       	out	0x3d, r28	; 61
     b4a:	de bf       	out	0x3e, r29	; 62
     b4c:	df 91       	pop	r29
     b4e:	cf 91       	pop	r28
     b50:	08 95       	ret

00000b52 <stdio_getchar>:
	
int stdio_getchar(FILE *stream)
{
     b52:	cf 93       	push	r28
     b54:	df 93       	push	r29
     b56:	00 d0       	rcall	.+0      	; 0xb58 <stdio_getchar+0x6>
     b58:	cd b7       	in	r28, 0x3d	; 61
     b5a:	de b7       	in	r29, 0x3e	; 62
     b5c:	89 83       	std	Y+1, r24	; 0x01
     b5e:	9a 83       	std	Y+2, r25	; 0x02
	while (!(USART.STATUS & 0b10000000)); //wait for receive complete flag
     b60:	00 00       	nop
     b62:	80 ea       	ldi	r24, 0xA0	; 160
     b64:	99 e0       	ldi	r25, 0x09	; 9
     b66:	fc 01       	movw	r30, r24
     b68:	81 81       	ldd	r24, Z+1	; 0x01
     b6a:	88 23       	and	r24, r24
     b6c:	d4 f7       	brge	.-12     	; 0xb62 <stdio_getchar+0x10>
	return USART.DATA;
     b6e:	80 ea       	ldi	r24, 0xA0	; 160
     b70:	99 e0       	ldi	r25, 0x09	; 9
     b72:	fc 01       	movw	r30, r24
     b74:	80 81       	ld	r24, Z
     b76:	88 2f       	mov	r24, r24
     b78:	90 e0       	ldi	r25, 0x00	; 0
}
     b7a:	0f 90       	pop	r0
     b7c:	0f 90       	pop	r0
     b7e:	df 91       	pop	r29
     b80:	cf 91       	pop	r28
     b82:	08 95       	ret

00000b84 <__cmpsf2>:
     b84:	0e 94 f6 05 	call	0xbec	; 0xbec <__fp_cmp>
     b88:	08 f4       	brcc	.+2      	; 0xb8c <__cmpsf2+0x8>
     b8a:	81 e0       	ldi	r24, 0x01	; 1
     b8c:	08 95       	ret

00000b8e <__fixunssfsi>:
     b8e:	0e 94 22 06 	call	0xc44	; 0xc44 <__fp_splitA>
     b92:	88 f0       	brcs	.+34     	; 0xbb6 <__fixunssfsi+0x28>
     b94:	9f 57       	subi	r25, 0x7F	; 127
     b96:	98 f0       	brcs	.+38     	; 0xbbe <__fixunssfsi+0x30>
     b98:	b9 2f       	mov	r27, r25
     b9a:	99 27       	eor	r25, r25
     b9c:	b7 51       	subi	r27, 0x17	; 23
     b9e:	b0 f0       	brcs	.+44     	; 0xbcc <__fixunssfsi+0x3e>
     ba0:	e1 f0       	breq	.+56     	; 0xbda <__fixunssfsi+0x4c>
     ba2:	66 0f       	add	r22, r22
     ba4:	77 1f       	adc	r23, r23
     ba6:	88 1f       	adc	r24, r24
     ba8:	99 1f       	adc	r25, r25
     baa:	1a f0       	brmi	.+6      	; 0xbb2 <__fixunssfsi+0x24>
     bac:	ba 95       	dec	r27
     bae:	c9 f7       	brne	.-14     	; 0xba2 <__fixunssfsi+0x14>
     bb0:	14 c0       	rjmp	.+40     	; 0xbda <__fixunssfsi+0x4c>
     bb2:	b1 30       	cpi	r27, 0x01	; 1
     bb4:	91 f0       	breq	.+36     	; 0xbda <__fixunssfsi+0x4c>
     bb6:	0e 94 3c 06 	call	0xc78	; 0xc78 <__fp_zero>
     bba:	b1 e0       	ldi	r27, 0x01	; 1
     bbc:	08 95       	ret
     bbe:	0c 94 3c 06 	jmp	0xc78	; 0xc78 <__fp_zero>
     bc2:	67 2f       	mov	r22, r23
     bc4:	78 2f       	mov	r23, r24
     bc6:	88 27       	eor	r24, r24
     bc8:	b8 5f       	subi	r27, 0xF8	; 248
     bca:	39 f0       	breq	.+14     	; 0xbda <__fixunssfsi+0x4c>
     bcc:	b9 3f       	cpi	r27, 0xF9	; 249
     bce:	cc f3       	brlt	.-14     	; 0xbc2 <__fixunssfsi+0x34>
     bd0:	86 95       	lsr	r24
     bd2:	77 95       	ror	r23
     bd4:	67 95       	ror	r22
     bd6:	b3 95       	inc	r27
     bd8:	d9 f7       	brne	.-10     	; 0xbd0 <__fixunssfsi+0x42>
     bda:	3e f4       	brtc	.+14     	; 0xbea <__fixunssfsi+0x5c>
     bdc:	90 95       	com	r25
     bde:	80 95       	com	r24
     be0:	70 95       	com	r23
     be2:	61 95       	neg	r22
     be4:	7f 4f       	sbci	r23, 0xFF	; 255
     be6:	8f 4f       	sbci	r24, 0xFF	; 255
     be8:	9f 4f       	sbci	r25, 0xFF	; 255
     bea:	08 95       	ret

00000bec <__fp_cmp>:
     bec:	99 0f       	add	r25, r25
     bee:	00 08       	sbc	r0, r0
     bf0:	55 0f       	add	r21, r21
     bf2:	aa 0b       	sbc	r26, r26
     bf4:	e0 e8       	ldi	r30, 0x80	; 128
     bf6:	fe ef       	ldi	r31, 0xFE	; 254
     bf8:	16 16       	cp	r1, r22
     bfa:	17 06       	cpc	r1, r23
     bfc:	e8 07       	cpc	r30, r24
     bfe:	f9 07       	cpc	r31, r25
     c00:	c0 f0       	brcs	.+48     	; 0xc32 <__fp_cmp+0x46>
     c02:	12 16       	cp	r1, r18
     c04:	13 06       	cpc	r1, r19
     c06:	e4 07       	cpc	r30, r20
     c08:	f5 07       	cpc	r31, r21
     c0a:	98 f0       	brcs	.+38     	; 0xc32 <__fp_cmp+0x46>
     c0c:	62 1b       	sub	r22, r18
     c0e:	73 0b       	sbc	r23, r19
     c10:	84 0b       	sbc	r24, r20
     c12:	95 0b       	sbc	r25, r21
     c14:	39 f4       	brne	.+14     	; 0xc24 <__fp_cmp+0x38>
     c16:	0a 26       	eor	r0, r26
     c18:	61 f0       	breq	.+24     	; 0xc32 <__fp_cmp+0x46>
     c1a:	23 2b       	or	r18, r19
     c1c:	24 2b       	or	r18, r20
     c1e:	25 2b       	or	r18, r21
     c20:	21 f4       	brne	.+8      	; 0xc2a <__fp_cmp+0x3e>
     c22:	08 95       	ret
     c24:	0a 26       	eor	r0, r26
     c26:	09 f4       	brne	.+2      	; 0xc2a <__fp_cmp+0x3e>
     c28:	a1 40       	sbci	r26, 0x01	; 1
     c2a:	a6 95       	lsr	r26
     c2c:	8f ef       	ldi	r24, 0xFF	; 255
     c2e:	81 1d       	adc	r24, r1
     c30:	81 1d       	adc	r24, r1
     c32:	08 95       	ret

00000c34 <__fp_split3>:
     c34:	57 fd       	sbrc	r21, 7
     c36:	90 58       	subi	r25, 0x80	; 128
     c38:	44 0f       	add	r20, r20
     c3a:	55 1f       	adc	r21, r21
     c3c:	59 f0       	breq	.+22     	; 0xc54 <__fp_splitA+0x10>
     c3e:	5f 3f       	cpi	r21, 0xFF	; 255
     c40:	71 f0       	breq	.+28     	; 0xc5e <__fp_splitA+0x1a>
     c42:	47 95       	ror	r20

00000c44 <__fp_splitA>:
     c44:	88 0f       	add	r24, r24
     c46:	97 fb       	bst	r25, 7
     c48:	99 1f       	adc	r25, r25
     c4a:	61 f0       	breq	.+24     	; 0xc64 <__fp_splitA+0x20>
     c4c:	9f 3f       	cpi	r25, 0xFF	; 255
     c4e:	79 f0       	breq	.+30     	; 0xc6e <__fp_splitA+0x2a>
     c50:	87 95       	ror	r24
     c52:	08 95       	ret
     c54:	12 16       	cp	r1, r18
     c56:	13 06       	cpc	r1, r19
     c58:	14 06       	cpc	r1, r20
     c5a:	55 1f       	adc	r21, r21
     c5c:	f2 cf       	rjmp	.-28     	; 0xc42 <__fp_split3+0xe>
     c5e:	46 95       	lsr	r20
     c60:	f1 df       	rcall	.-30     	; 0xc44 <__fp_splitA>
     c62:	08 c0       	rjmp	.+16     	; 0xc74 <__fp_splitA+0x30>
     c64:	16 16       	cp	r1, r22
     c66:	17 06       	cpc	r1, r23
     c68:	18 06       	cpc	r1, r24
     c6a:	99 1f       	adc	r25, r25
     c6c:	f1 cf       	rjmp	.-30     	; 0xc50 <__fp_splitA+0xc>
     c6e:	86 95       	lsr	r24
     c70:	71 05       	cpc	r23, r1
     c72:	61 05       	cpc	r22, r1
     c74:	08 94       	sec
     c76:	08 95       	ret

00000c78 <__fp_zero>:
     c78:	e8 94       	clt

00000c7a <__fp_szero>:
     c7a:	bb 27       	eor	r27, r27
     c7c:	66 27       	eor	r22, r22
     c7e:	77 27       	eor	r23, r23
     c80:	cb 01       	movw	r24, r22
     c82:	97 f9       	bld	r25, 7
     c84:	08 95       	ret

00000c86 <__gesf2>:
     c86:	0e 94 f6 05 	call	0xbec	; 0xbec <__fp_cmp>
     c8a:	08 f4       	brcc	.+2      	; 0xc8e <__gesf2+0x8>
     c8c:	8f ef       	ldi	r24, 0xFF	; 255
     c8e:	08 95       	ret

00000c90 <__mulsf3>:
     c90:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__mulsf3x>
     c94:	0c 94 cc 06 	jmp	0xd98	; 0xd98 <__fp_round>
     c98:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fp_pscA>
     c9c:	38 f0       	brcs	.+14     	; 0xcac <__mulsf3+0x1c>
     c9e:	0e 94 c5 06 	call	0xd8a	; 0xd8a <__fp_pscB>
     ca2:	20 f0       	brcs	.+8      	; 0xcac <__mulsf3+0x1c>
     ca4:	95 23       	and	r25, r21
     ca6:	11 f0       	breq	.+4      	; 0xcac <__mulsf3+0x1c>
     ca8:	0c 94 b5 06 	jmp	0xd6a	; 0xd6a <__fp_inf>
     cac:	0c 94 bb 06 	jmp	0xd76	; 0xd76 <__fp_nan>
     cb0:	11 24       	eor	r1, r1
     cb2:	0c 94 3d 06 	jmp	0xc7a	; 0xc7a <__fp_szero>

00000cb6 <__mulsf3x>:
     cb6:	0e 94 1a 06 	call	0xc34	; 0xc34 <__fp_split3>
     cba:	70 f3       	brcs	.-36     	; 0xc98 <__mulsf3+0x8>

00000cbc <__mulsf3_pse>:
     cbc:	95 9f       	mul	r25, r21
     cbe:	c1 f3       	breq	.-16     	; 0xcb0 <__mulsf3+0x20>
     cc0:	95 0f       	add	r25, r21
     cc2:	50 e0       	ldi	r21, 0x00	; 0
     cc4:	55 1f       	adc	r21, r21
     cc6:	62 9f       	mul	r22, r18
     cc8:	f0 01       	movw	r30, r0
     cca:	72 9f       	mul	r23, r18
     ccc:	bb 27       	eor	r27, r27
     cce:	f0 0d       	add	r31, r0
     cd0:	b1 1d       	adc	r27, r1
     cd2:	63 9f       	mul	r22, r19
     cd4:	aa 27       	eor	r26, r26
     cd6:	f0 0d       	add	r31, r0
     cd8:	b1 1d       	adc	r27, r1
     cda:	aa 1f       	adc	r26, r26
     cdc:	64 9f       	mul	r22, r20
     cde:	66 27       	eor	r22, r22
     ce0:	b0 0d       	add	r27, r0
     ce2:	a1 1d       	adc	r26, r1
     ce4:	66 1f       	adc	r22, r22
     ce6:	82 9f       	mul	r24, r18
     ce8:	22 27       	eor	r18, r18
     cea:	b0 0d       	add	r27, r0
     cec:	a1 1d       	adc	r26, r1
     cee:	62 1f       	adc	r22, r18
     cf0:	73 9f       	mul	r23, r19
     cf2:	b0 0d       	add	r27, r0
     cf4:	a1 1d       	adc	r26, r1
     cf6:	62 1f       	adc	r22, r18
     cf8:	83 9f       	mul	r24, r19
     cfa:	a0 0d       	add	r26, r0
     cfc:	61 1d       	adc	r22, r1
     cfe:	22 1f       	adc	r18, r18
     d00:	74 9f       	mul	r23, r20
     d02:	33 27       	eor	r19, r19
     d04:	a0 0d       	add	r26, r0
     d06:	61 1d       	adc	r22, r1
     d08:	23 1f       	adc	r18, r19
     d0a:	84 9f       	mul	r24, r20
     d0c:	60 0d       	add	r22, r0
     d0e:	21 1d       	adc	r18, r1
     d10:	82 2f       	mov	r24, r18
     d12:	76 2f       	mov	r23, r22
     d14:	6a 2f       	mov	r22, r26
     d16:	11 24       	eor	r1, r1
     d18:	9f 57       	subi	r25, 0x7F	; 127
     d1a:	50 40       	sbci	r21, 0x00	; 0
     d1c:	9a f0       	brmi	.+38     	; 0xd44 <__mulsf3_pse+0x88>
     d1e:	f1 f0       	breq	.+60     	; 0xd5c <__mulsf3_pse+0xa0>
     d20:	88 23       	and	r24, r24
     d22:	4a f0       	brmi	.+18     	; 0xd36 <__mulsf3_pse+0x7a>
     d24:	ee 0f       	add	r30, r30
     d26:	ff 1f       	adc	r31, r31
     d28:	bb 1f       	adc	r27, r27
     d2a:	66 1f       	adc	r22, r22
     d2c:	77 1f       	adc	r23, r23
     d2e:	88 1f       	adc	r24, r24
     d30:	91 50       	subi	r25, 0x01	; 1
     d32:	50 40       	sbci	r21, 0x00	; 0
     d34:	a9 f7       	brne	.-22     	; 0xd20 <__mulsf3_pse+0x64>
     d36:	9e 3f       	cpi	r25, 0xFE	; 254
     d38:	51 05       	cpc	r21, r1
     d3a:	80 f0       	brcs	.+32     	; 0xd5c <__mulsf3_pse+0xa0>
     d3c:	0c 94 b5 06 	jmp	0xd6a	; 0xd6a <__fp_inf>
     d40:	0c 94 3d 06 	jmp	0xc7a	; 0xc7a <__fp_szero>
     d44:	5f 3f       	cpi	r21, 0xFF	; 255
     d46:	e4 f3       	brlt	.-8      	; 0xd40 <__mulsf3_pse+0x84>
     d48:	98 3e       	cpi	r25, 0xE8	; 232
     d4a:	d4 f3       	brlt	.-12     	; 0xd40 <__mulsf3_pse+0x84>
     d4c:	86 95       	lsr	r24
     d4e:	77 95       	ror	r23
     d50:	67 95       	ror	r22
     d52:	b7 95       	ror	r27
     d54:	f7 95       	ror	r31
     d56:	e7 95       	ror	r30
     d58:	9f 5f       	subi	r25, 0xFF	; 255
     d5a:	c1 f7       	brne	.-16     	; 0xd4c <__mulsf3_pse+0x90>
     d5c:	fe 2b       	or	r31, r30
     d5e:	88 0f       	add	r24, r24
     d60:	91 1d       	adc	r25, r1
     d62:	96 95       	lsr	r25
     d64:	87 95       	ror	r24
     d66:	97 f9       	bld	r25, 7
     d68:	08 95       	ret

00000d6a <__fp_inf>:
     d6a:	97 f9       	bld	r25, 7
     d6c:	9f 67       	ori	r25, 0x7F	; 127
     d6e:	80 e8       	ldi	r24, 0x80	; 128
     d70:	70 e0       	ldi	r23, 0x00	; 0
     d72:	60 e0       	ldi	r22, 0x00	; 0
     d74:	08 95       	ret

00000d76 <__fp_nan>:
     d76:	9f ef       	ldi	r25, 0xFF	; 255
     d78:	80 ec       	ldi	r24, 0xC0	; 192
     d7a:	08 95       	ret

00000d7c <__fp_pscA>:
     d7c:	00 24       	eor	r0, r0
     d7e:	0a 94       	dec	r0
     d80:	16 16       	cp	r1, r22
     d82:	17 06       	cpc	r1, r23
     d84:	18 06       	cpc	r1, r24
     d86:	09 06       	cpc	r0, r25
     d88:	08 95       	ret

00000d8a <__fp_pscB>:
     d8a:	00 24       	eor	r0, r0
     d8c:	0a 94       	dec	r0
     d8e:	12 16       	cp	r1, r18
     d90:	13 06       	cpc	r1, r19
     d92:	14 06       	cpc	r1, r20
     d94:	05 06       	cpc	r0, r21
     d96:	08 95       	ret

00000d98 <__fp_round>:
     d98:	09 2e       	mov	r0, r25
     d9a:	03 94       	inc	r0
     d9c:	00 0c       	add	r0, r0
     d9e:	11 f4       	brne	.+4      	; 0xda4 <__fp_round+0xc>
     da0:	88 23       	and	r24, r24
     da2:	52 f0       	brmi	.+20     	; 0xdb8 <__fp_round+0x20>
     da4:	bb 0f       	add	r27, r27
     da6:	40 f4       	brcc	.+16     	; 0xdb8 <__fp_round+0x20>
     da8:	bf 2b       	or	r27, r31
     daa:	11 f4       	brne	.+4      	; 0xdb0 <__fp_round+0x18>
     dac:	60 ff       	sbrs	r22, 0
     dae:	04 c0       	rjmp	.+8      	; 0xdb8 <__fp_round+0x20>
     db0:	6f 5f       	subi	r22, 0xFF	; 255
     db2:	7f 4f       	sbci	r23, 0xFF	; 255
     db4:	8f 4f       	sbci	r24, 0xFF	; 255
     db6:	9f 4f       	sbci	r25, 0xFF	; 255
     db8:	08 95       	ret

00000dba <__tablejump2__>:
     dba:	ee 0f       	add	r30, r30
     dbc:	ff 1f       	adc	r31, r31
     dbe:	05 90       	lpm	r0, Z+
     dc0:	f4 91       	lpm	r31, Z
     dc2:	e0 2d       	mov	r30, r0
     dc4:	09 94       	ijmp

00000dc6 <puts>:
     dc6:	0f 93       	push	r16
     dc8:	1f 93       	push	r17
     dca:	cf 93       	push	r28
     dcc:	df 93       	push	r29
     dce:	e0 91 8b 20 	lds	r30, 0x208B	; 0x80208b <__iob+0x2>
     dd2:	f0 91 8c 20 	lds	r31, 0x208C	; 0x80208c <__iob+0x3>
     dd6:	23 81       	ldd	r18, Z+3	; 0x03
     dd8:	21 ff       	sbrs	r18, 1
     dda:	1b c0       	rjmp	.+54     	; 0xe12 <puts+0x4c>
     ddc:	8c 01       	movw	r16, r24
     dde:	d0 e0       	ldi	r29, 0x00	; 0
     de0:	c0 e0       	ldi	r28, 0x00	; 0
     de2:	f8 01       	movw	r30, r16
     de4:	81 91       	ld	r24, Z+
     de6:	8f 01       	movw	r16, r30
     de8:	60 91 8b 20 	lds	r22, 0x208B	; 0x80208b <__iob+0x2>
     dec:	70 91 8c 20 	lds	r23, 0x208C	; 0x80208c <__iob+0x3>
     df0:	db 01       	movw	r26, r22
     df2:	18 96       	adiw	r26, 0x08	; 8
     df4:	ed 91       	ld	r30, X+
     df6:	fc 91       	ld	r31, X
     df8:	19 97       	sbiw	r26, 0x09	; 9
     dfa:	88 23       	and	r24, r24
     dfc:	31 f0       	breq	.+12     	; 0xe0a <puts+0x44>
     dfe:	09 95       	icall
     e00:	89 2b       	or	r24, r25
     e02:	79 f3       	breq	.-34     	; 0xde2 <puts+0x1c>
     e04:	df ef       	ldi	r29, 0xFF	; 255
     e06:	cf ef       	ldi	r28, 0xFF	; 255
     e08:	ec cf       	rjmp	.-40     	; 0xde2 <puts+0x1c>
     e0a:	8a e0       	ldi	r24, 0x0A	; 10
     e0c:	09 95       	icall
     e0e:	89 2b       	or	r24, r25
     e10:	19 f0       	breq	.+6      	; 0xe18 <puts+0x52>
     e12:	8f ef       	ldi	r24, 0xFF	; 255
     e14:	9f ef       	ldi	r25, 0xFF	; 255
     e16:	02 c0       	rjmp	.+4      	; 0xe1c <puts+0x56>
     e18:	8d 2f       	mov	r24, r29
     e1a:	9c 2f       	mov	r25, r28
     e1c:	df 91       	pop	r29
     e1e:	cf 91       	pop	r28
     e20:	1f 91       	pop	r17
     e22:	0f 91       	pop	r16
     e24:	08 95       	ret

00000e26 <sprintf>:
     e26:	ae e0       	ldi	r26, 0x0E	; 14
     e28:	b0 e0       	ldi	r27, 0x00	; 0
     e2a:	e9 e1       	ldi	r30, 0x19	; 25
     e2c:	f7 e0       	ldi	r31, 0x07	; 7
     e2e:	0c 94 d4 09 	jmp	0x13a8	; 0x13a8 <__prologue_saves__+0x1c>
     e32:	0d 89       	ldd	r16, Y+21	; 0x15
     e34:	1e 89       	ldd	r17, Y+22	; 0x16
     e36:	86 e0       	ldi	r24, 0x06	; 6
     e38:	8c 83       	std	Y+4, r24	; 0x04
     e3a:	09 83       	std	Y+1, r16	; 0x01
     e3c:	1a 83       	std	Y+2, r17	; 0x02
     e3e:	8f ef       	ldi	r24, 0xFF	; 255
     e40:	9f e7       	ldi	r25, 0x7F	; 127
     e42:	8d 83       	std	Y+5, r24	; 0x05
     e44:	9e 83       	std	Y+6, r25	; 0x06
     e46:	ae 01       	movw	r20, r28
     e48:	47 5e       	subi	r20, 0xE7	; 231
     e4a:	5f 4f       	sbci	r21, 0xFF	; 255
     e4c:	6f 89       	ldd	r22, Y+23	; 0x17
     e4e:	78 8d       	ldd	r23, Y+24	; 0x18
     e50:	ce 01       	movw	r24, r28
     e52:	01 96       	adiw	r24, 0x01	; 1
     e54:	0e 94 35 07 	call	0xe6a	; 0xe6a <vfprintf>
     e58:	ef 81       	ldd	r30, Y+7	; 0x07
     e5a:	f8 85       	ldd	r31, Y+8	; 0x08
     e5c:	e0 0f       	add	r30, r16
     e5e:	f1 1f       	adc	r31, r17
     e60:	10 82       	st	Z, r1
     e62:	2e 96       	adiw	r28, 0x0e	; 14
     e64:	e4 e0       	ldi	r30, 0x04	; 4
     e66:	0c 94 ed 09 	jmp	0x13da	; 0x13da <__epilogue_restores__+0x1c>

00000e6a <vfprintf>:
     e6a:	ab e0       	ldi	r26, 0x0B	; 11
     e6c:	b0 e0       	ldi	r27, 0x00	; 0
     e6e:	eb e3       	ldi	r30, 0x3B	; 59
     e70:	f7 e0       	ldi	r31, 0x07	; 7
     e72:	0c 94 c6 09 	jmp	0x138c	; 0x138c <__prologue_saves__>
     e76:	6c 01       	movw	r12, r24
     e78:	7b 01       	movw	r14, r22
     e7a:	8a 01       	movw	r16, r20
     e7c:	fc 01       	movw	r30, r24
     e7e:	16 82       	std	Z+6, r1	; 0x06
     e80:	17 82       	std	Z+7, r1	; 0x07
     e82:	83 81       	ldd	r24, Z+3	; 0x03
     e84:	81 ff       	sbrs	r24, 1
     e86:	cc c1       	rjmp	.+920    	; 0x1220 <vfprintf+0x3b6>
     e88:	ce 01       	movw	r24, r28
     e8a:	01 96       	adiw	r24, 0x01	; 1
     e8c:	3c 01       	movw	r6, r24
     e8e:	f6 01       	movw	r30, r12
     e90:	93 81       	ldd	r25, Z+3	; 0x03
     e92:	f7 01       	movw	r30, r14
     e94:	93 fd       	sbrc	r25, 3
     e96:	85 91       	lpm	r24, Z+
     e98:	93 ff       	sbrs	r25, 3
     e9a:	81 91       	ld	r24, Z+
     e9c:	7f 01       	movw	r14, r30
     e9e:	88 23       	and	r24, r24
     ea0:	09 f4       	brne	.+2      	; 0xea4 <vfprintf+0x3a>
     ea2:	ba c1       	rjmp	.+884    	; 0x1218 <vfprintf+0x3ae>
     ea4:	85 32       	cpi	r24, 0x25	; 37
     ea6:	39 f4       	brne	.+14     	; 0xeb6 <vfprintf+0x4c>
     ea8:	93 fd       	sbrc	r25, 3
     eaa:	85 91       	lpm	r24, Z+
     eac:	93 ff       	sbrs	r25, 3
     eae:	81 91       	ld	r24, Z+
     eb0:	7f 01       	movw	r14, r30
     eb2:	85 32       	cpi	r24, 0x25	; 37
     eb4:	29 f4       	brne	.+10     	; 0xec0 <vfprintf+0x56>
     eb6:	b6 01       	movw	r22, r12
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	0e 94 2c 09 	call	0x1258	; 0x1258 <fputc>
     ebe:	e7 cf       	rjmp	.-50     	; 0xe8e <vfprintf+0x24>
     ec0:	91 2c       	mov	r9, r1
     ec2:	21 2c       	mov	r2, r1
     ec4:	31 2c       	mov	r3, r1
     ec6:	ff e1       	ldi	r31, 0x1F	; 31
     ec8:	f3 15       	cp	r31, r3
     eca:	d8 f0       	brcs	.+54     	; 0xf02 <vfprintf+0x98>
     ecc:	8b 32       	cpi	r24, 0x2B	; 43
     ece:	79 f0       	breq	.+30     	; 0xeee <vfprintf+0x84>
     ed0:	38 f4       	brcc	.+14     	; 0xee0 <vfprintf+0x76>
     ed2:	80 32       	cpi	r24, 0x20	; 32
     ed4:	79 f0       	breq	.+30     	; 0xef4 <vfprintf+0x8a>
     ed6:	83 32       	cpi	r24, 0x23	; 35
     ed8:	a1 f4       	brne	.+40     	; 0xf02 <vfprintf+0x98>
     eda:	23 2d       	mov	r18, r3
     edc:	20 61       	ori	r18, 0x10	; 16
     ede:	1d c0       	rjmp	.+58     	; 0xf1a <vfprintf+0xb0>
     ee0:	8d 32       	cpi	r24, 0x2D	; 45
     ee2:	61 f0       	breq	.+24     	; 0xefc <vfprintf+0x92>
     ee4:	80 33       	cpi	r24, 0x30	; 48
     ee6:	69 f4       	brne	.+26     	; 0xf02 <vfprintf+0x98>
     ee8:	23 2d       	mov	r18, r3
     eea:	21 60       	ori	r18, 0x01	; 1
     eec:	16 c0       	rjmp	.+44     	; 0xf1a <vfprintf+0xb0>
     eee:	83 2d       	mov	r24, r3
     ef0:	82 60       	ori	r24, 0x02	; 2
     ef2:	38 2e       	mov	r3, r24
     ef4:	e3 2d       	mov	r30, r3
     ef6:	e4 60       	ori	r30, 0x04	; 4
     ef8:	3e 2e       	mov	r3, r30
     efa:	2a c0       	rjmp	.+84     	; 0xf50 <vfprintf+0xe6>
     efc:	f3 2d       	mov	r31, r3
     efe:	f8 60       	ori	r31, 0x08	; 8
     f00:	1d c0       	rjmp	.+58     	; 0xf3c <vfprintf+0xd2>
     f02:	37 fc       	sbrc	r3, 7
     f04:	2d c0       	rjmp	.+90     	; 0xf60 <vfprintf+0xf6>
     f06:	20 ed       	ldi	r18, 0xD0	; 208
     f08:	28 0f       	add	r18, r24
     f0a:	2a 30       	cpi	r18, 0x0A	; 10
     f0c:	40 f0       	brcs	.+16     	; 0xf1e <vfprintf+0xb4>
     f0e:	8e 32       	cpi	r24, 0x2E	; 46
     f10:	b9 f4       	brne	.+46     	; 0xf40 <vfprintf+0xd6>
     f12:	36 fc       	sbrc	r3, 6
     f14:	81 c1       	rjmp	.+770    	; 0x1218 <vfprintf+0x3ae>
     f16:	23 2d       	mov	r18, r3
     f18:	20 64       	ori	r18, 0x40	; 64
     f1a:	32 2e       	mov	r3, r18
     f1c:	19 c0       	rjmp	.+50     	; 0xf50 <vfprintf+0xe6>
     f1e:	36 fe       	sbrs	r3, 6
     f20:	06 c0       	rjmp	.+12     	; 0xf2e <vfprintf+0xc4>
     f22:	8a e0       	ldi	r24, 0x0A	; 10
     f24:	98 9e       	mul	r9, r24
     f26:	20 0d       	add	r18, r0
     f28:	11 24       	eor	r1, r1
     f2a:	92 2e       	mov	r9, r18
     f2c:	11 c0       	rjmp	.+34     	; 0xf50 <vfprintf+0xe6>
     f2e:	ea e0       	ldi	r30, 0x0A	; 10
     f30:	2e 9e       	mul	r2, r30
     f32:	20 0d       	add	r18, r0
     f34:	11 24       	eor	r1, r1
     f36:	22 2e       	mov	r2, r18
     f38:	f3 2d       	mov	r31, r3
     f3a:	f0 62       	ori	r31, 0x20	; 32
     f3c:	3f 2e       	mov	r3, r31
     f3e:	08 c0       	rjmp	.+16     	; 0xf50 <vfprintf+0xe6>
     f40:	8c 36       	cpi	r24, 0x6C	; 108
     f42:	21 f4       	brne	.+8      	; 0xf4c <vfprintf+0xe2>
     f44:	83 2d       	mov	r24, r3
     f46:	80 68       	ori	r24, 0x80	; 128
     f48:	38 2e       	mov	r3, r24
     f4a:	02 c0       	rjmp	.+4      	; 0xf50 <vfprintf+0xe6>
     f4c:	88 36       	cpi	r24, 0x68	; 104
     f4e:	41 f4       	brne	.+16     	; 0xf60 <vfprintf+0xf6>
     f50:	f7 01       	movw	r30, r14
     f52:	93 fd       	sbrc	r25, 3
     f54:	85 91       	lpm	r24, Z+
     f56:	93 ff       	sbrs	r25, 3
     f58:	81 91       	ld	r24, Z+
     f5a:	7f 01       	movw	r14, r30
     f5c:	81 11       	cpse	r24, r1
     f5e:	b3 cf       	rjmp	.-154    	; 0xec6 <vfprintf+0x5c>
     f60:	98 2f       	mov	r25, r24
     f62:	9f 7d       	andi	r25, 0xDF	; 223
     f64:	95 54       	subi	r25, 0x45	; 69
     f66:	93 30       	cpi	r25, 0x03	; 3
     f68:	28 f4       	brcc	.+10     	; 0xf74 <vfprintf+0x10a>
     f6a:	0c 5f       	subi	r16, 0xFC	; 252
     f6c:	1f 4f       	sbci	r17, 0xFF	; 255
     f6e:	9f e3       	ldi	r25, 0x3F	; 63
     f70:	99 83       	std	Y+1, r25	; 0x01
     f72:	0d c0       	rjmp	.+26     	; 0xf8e <vfprintf+0x124>
     f74:	83 36       	cpi	r24, 0x63	; 99
     f76:	31 f0       	breq	.+12     	; 0xf84 <vfprintf+0x11a>
     f78:	83 37       	cpi	r24, 0x73	; 115
     f7a:	71 f0       	breq	.+28     	; 0xf98 <vfprintf+0x12e>
     f7c:	83 35       	cpi	r24, 0x53	; 83
     f7e:	09 f0       	breq	.+2      	; 0xf82 <vfprintf+0x118>
     f80:	59 c0       	rjmp	.+178    	; 0x1034 <vfprintf+0x1ca>
     f82:	21 c0       	rjmp	.+66     	; 0xfc6 <vfprintf+0x15c>
     f84:	f8 01       	movw	r30, r16
     f86:	80 81       	ld	r24, Z
     f88:	89 83       	std	Y+1, r24	; 0x01
     f8a:	0e 5f       	subi	r16, 0xFE	; 254
     f8c:	1f 4f       	sbci	r17, 0xFF	; 255
     f8e:	88 24       	eor	r8, r8
     f90:	83 94       	inc	r8
     f92:	91 2c       	mov	r9, r1
     f94:	53 01       	movw	r10, r6
     f96:	13 c0       	rjmp	.+38     	; 0xfbe <vfprintf+0x154>
     f98:	28 01       	movw	r4, r16
     f9a:	f2 e0       	ldi	r31, 0x02	; 2
     f9c:	4f 0e       	add	r4, r31
     f9e:	51 1c       	adc	r5, r1
     fa0:	f8 01       	movw	r30, r16
     fa2:	a0 80       	ld	r10, Z
     fa4:	b1 80       	ldd	r11, Z+1	; 0x01
     fa6:	36 fe       	sbrs	r3, 6
     fa8:	03 c0       	rjmp	.+6      	; 0xfb0 <vfprintf+0x146>
     faa:	69 2d       	mov	r22, r9
     fac:	70 e0       	ldi	r23, 0x00	; 0
     fae:	02 c0       	rjmp	.+4      	; 0xfb4 <vfprintf+0x14a>
     fb0:	6f ef       	ldi	r22, 0xFF	; 255
     fb2:	7f ef       	ldi	r23, 0xFF	; 255
     fb4:	c5 01       	movw	r24, r10
     fb6:	0e 94 21 09 	call	0x1242	; 0x1242 <strnlen>
     fba:	4c 01       	movw	r8, r24
     fbc:	82 01       	movw	r16, r4
     fbe:	f3 2d       	mov	r31, r3
     fc0:	ff 77       	andi	r31, 0x7F	; 127
     fc2:	3f 2e       	mov	r3, r31
     fc4:	16 c0       	rjmp	.+44     	; 0xff2 <vfprintf+0x188>
     fc6:	28 01       	movw	r4, r16
     fc8:	22 e0       	ldi	r18, 0x02	; 2
     fca:	42 0e       	add	r4, r18
     fcc:	51 1c       	adc	r5, r1
     fce:	f8 01       	movw	r30, r16
     fd0:	a0 80       	ld	r10, Z
     fd2:	b1 80       	ldd	r11, Z+1	; 0x01
     fd4:	36 fe       	sbrs	r3, 6
     fd6:	03 c0       	rjmp	.+6      	; 0xfde <vfprintf+0x174>
     fd8:	69 2d       	mov	r22, r9
     fda:	70 e0       	ldi	r23, 0x00	; 0
     fdc:	02 c0       	rjmp	.+4      	; 0xfe2 <vfprintf+0x178>
     fde:	6f ef       	ldi	r22, 0xFF	; 255
     fe0:	7f ef       	ldi	r23, 0xFF	; 255
     fe2:	c5 01       	movw	r24, r10
     fe4:	0e 94 16 09 	call	0x122c	; 0x122c <strnlen_P>
     fe8:	4c 01       	movw	r8, r24
     fea:	f3 2d       	mov	r31, r3
     fec:	f0 68       	ori	r31, 0x80	; 128
     fee:	3f 2e       	mov	r3, r31
     ff0:	82 01       	movw	r16, r4
     ff2:	33 fc       	sbrc	r3, 3
     ff4:	1b c0       	rjmp	.+54     	; 0x102c <vfprintf+0x1c2>
     ff6:	82 2d       	mov	r24, r2
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	88 16       	cp	r8, r24
     ffc:	99 06       	cpc	r9, r25
     ffe:	b0 f4       	brcc	.+44     	; 0x102c <vfprintf+0x1c2>
    1000:	b6 01       	movw	r22, r12
    1002:	80 e2       	ldi	r24, 0x20	; 32
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	0e 94 2c 09 	call	0x1258	; 0x1258 <fputc>
    100a:	2a 94       	dec	r2
    100c:	f4 cf       	rjmp	.-24     	; 0xff6 <vfprintf+0x18c>
    100e:	f5 01       	movw	r30, r10
    1010:	37 fc       	sbrc	r3, 7
    1012:	85 91       	lpm	r24, Z+
    1014:	37 fe       	sbrs	r3, 7
    1016:	81 91       	ld	r24, Z+
    1018:	5f 01       	movw	r10, r30
    101a:	b6 01       	movw	r22, r12
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	0e 94 2c 09 	call	0x1258	; 0x1258 <fputc>
    1022:	21 10       	cpse	r2, r1
    1024:	2a 94       	dec	r2
    1026:	21 e0       	ldi	r18, 0x01	; 1
    1028:	82 1a       	sub	r8, r18
    102a:	91 08       	sbc	r9, r1
    102c:	81 14       	cp	r8, r1
    102e:	91 04       	cpc	r9, r1
    1030:	71 f7       	brne	.-36     	; 0x100e <vfprintf+0x1a4>
    1032:	e8 c0       	rjmp	.+464    	; 0x1204 <vfprintf+0x39a>
    1034:	84 36       	cpi	r24, 0x64	; 100
    1036:	11 f0       	breq	.+4      	; 0x103c <vfprintf+0x1d2>
    1038:	89 36       	cpi	r24, 0x69	; 105
    103a:	41 f5       	brne	.+80     	; 0x108c <vfprintf+0x222>
    103c:	f8 01       	movw	r30, r16
    103e:	37 fe       	sbrs	r3, 7
    1040:	07 c0       	rjmp	.+14     	; 0x1050 <vfprintf+0x1e6>
    1042:	60 81       	ld	r22, Z
    1044:	71 81       	ldd	r23, Z+1	; 0x01
    1046:	82 81       	ldd	r24, Z+2	; 0x02
    1048:	93 81       	ldd	r25, Z+3	; 0x03
    104a:	0c 5f       	subi	r16, 0xFC	; 252
    104c:	1f 4f       	sbci	r17, 0xFF	; 255
    104e:	08 c0       	rjmp	.+16     	; 0x1060 <vfprintf+0x1f6>
    1050:	60 81       	ld	r22, Z
    1052:	71 81       	ldd	r23, Z+1	; 0x01
    1054:	07 2e       	mov	r0, r23
    1056:	00 0c       	add	r0, r0
    1058:	88 0b       	sbc	r24, r24
    105a:	99 0b       	sbc	r25, r25
    105c:	0e 5f       	subi	r16, 0xFE	; 254
    105e:	1f 4f       	sbci	r17, 0xFF	; 255
    1060:	f3 2d       	mov	r31, r3
    1062:	ff 76       	andi	r31, 0x6F	; 111
    1064:	3f 2e       	mov	r3, r31
    1066:	97 ff       	sbrs	r25, 7
    1068:	09 c0       	rjmp	.+18     	; 0x107c <vfprintf+0x212>
    106a:	90 95       	com	r25
    106c:	80 95       	com	r24
    106e:	70 95       	com	r23
    1070:	61 95       	neg	r22
    1072:	7f 4f       	sbci	r23, 0xFF	; 255
    1074:	8f 4f       	sbci	r24, 0xFF	; 255
    1076:	9f 4f       	sbci	r25, 0xFF	; 255
    1078:	f0 68       	ori	r31, 0x80	; 128
    107a:	3f 2e       	mov	r3, r31
    107c:	2a e0       	ldi	r18, 0x0A	; 10
    107e:	30 e0       	ldi	r19, 0x00	; 0
    1080:	a3 01       	movw	r20, r6
    1082:	0e 94 68 09 	call	0x12d0	; 0x12d0 <__ultoa_invert>
    1086:	88 2e       	mov	r8, r24
    1088:	86 18       	sub	r8, r6
    108a:	45 c0       	rjmp	.+138    	; 0x1116 <vfprintf+0x2ac>
    108c:	85 37       	cpi	r24, 0x75	; 117
    108e:	31 f4       	brne	.+12     	; 0x109c <vfprintf+0x232>
    1090:	23 2d       	mov	r18, r3
    1092:	2f 7e       	andi	r18, 0xEF	; 239
    1094:	b2 2e       	mov	r11, r18
    1096:	2a e0       	ldi	r18, 0x0A	; 10
    1098:	30 e0       	ldi	r19, 0x00	; 0
    109a:	25 c0       	rjmp	.+74     	; 0x10e6 <vfprintf+0x27c>
    109c:	93 2d       	mov	r25, r3
    109e:	99 7f       	andi	r25, 0xF9	; 249
    10a0:	b9 2e       	mov	r11, r25
    10a2:	8f 36       	cpi	r24, 0x6F	; 111
    10a4:	c1 f0       	breq	.+48     	; 0x10d6 <vfprintf+0x26c>
    10a6:	18 f4       	brcc	.+6      	; 0x10ae <vfprintf+0x244>
    10a8:	88 35       	cpi	r24, 0x58	; 88
    10aa:	79 f0       	breq	.+30     	; 0x10ca <vfprintf+0x260>
    10ac:	b5 c0       	rjmp	.+362    	; 0x1218 <vfprintf+0x3ae>
    10ae:	80 37       	cpi	r24, 0x70	; 112
    10b0:	19 f0       	breq	.+6      	; 0x10b8 <vfprintf+0x24e>
    10b2:	88 37       	cpi	r24, 0x78	; 120
    10b4:	21 f0       	breq	.+8      	; 0x10be <vfprintf+0x254>
    10b6:	b0 c0       	rjmp	.+352    	; 0x1218 <vfprintf+0x3ae>
    10b8:	e9 2f       	mov	r30, r25
    10ba:	e0 61       	ori	r30, 0x10	; 16
    10bc:	be 2e       	mov	r11, r30
    10be:	b4 fe       	sbrs	r11, 4
    10c0:	0d c0       	rjmp	.+26     	; 0x10dc <vfprintf+0x272>
    10c2:	fb 2d       	mov	r31, r11
    10c4:	f4 60       	ori	r31, 0x04	; 4
    10c6:	bf 2e       	mov	r11, r31
    10c8:	09 c0       	rjmp	.+18     	; 0x10dc <vfprintf+0x272>
    10ca:	34 fe       	sbrs	r3, 4
    10cc:	0a c0       	rjmp	.+20     	; 0x10e2 <vfprintf+0x278>
    10ce:	29 2f       	mov	r18, r25
    10d0:	26 60       	ori	r18, 0x06	; 6
    10d2:	b2 2e       	mov	r11, r18
    10d4:	06 c0       	rjmp	.+12     	; 0x10e2 <vfprintf+0x278>
    10d6:	28 e0       	ldi	r18, 0x08	; 8
    10d8:	30 e0       	ldi	r19, 0x00	; 0
    10da:	05 c0       	rjmp	.+10     	; 0x10e6 <vfprintf+0x27c>
    10dc:	20 e1       	ldi	r18, 0x10	; 16
    10de:	30 e0       	ldi	r19, 0x00	; 0
    10e0:	02 c0       	rjmp	.+4      	; 0x10e6 <vfprintf+0x27c>
    10e2:	20 e1       	ldi	r18, 0x10	; 16
    10e4:	32 e0       	ldi	r19, 0x02	; 2
    10e6:	f8 01       	movw	r30, r16
    10e8:	b7 fe       	sbrs	r11, 7
    10ea:	07 c0       	rjmp	.+14     	; 0x10fa <vfprintf+0x290>
    10ec:	60 81       	ld	r22, Z
    10ee:	71 81       	ldd	r23, Z+1	; 0x01
    10f0:	82 81       	ldd	r24, Z+2	; 0x02
    10f2:	93 81       	ldd	r25, Z+3	; 0x03
    10f4:	0c 5f       	subi	r16, 0xFC	; 252
    10f6:	1f 4f       	sbci	r17, 0xFF	; 255
    10f8:	06 c0       	rjmp	.+12     	; 0x1106 <vfprintf+0x29c>
    10fa:	60 81       	ld	r22, Z
    10fc:	71 81       	ldd	r23, Z+1	; 0x01
    10fe:	80 e0       	ldi	r24, 0x00	; 0
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	0e 5f       	subi	r16, 0xFE	; 254
    1104:	1f 4f       	sbci	r17, 0xFF	; 255
    1106:	a3 01       	movw	r20, r6
    1108:	0e 94 68 09 	call	0x12d0	; 0x12d0 <__ultoa_invert>
    110c:	88 2e       	mov	r8, r24
    110e:	86 18       	sub	r8, r6
    1110:	fb 2d       	mov	r31, r11
    1112:	ff 77       	andi	r31, 0x7F	; 127
    1114:	3f 2e       	mov	r3, r31
    1116:	36 fe       	sbrs	r3, 6
    1118:	0d c0       	rjmp	.+26     	; 0x1134 <vfprintf+0x2ca>
    111a:	23 2d       	mov	r18, r3
    111c:	2e 7f       	andi	r18, 0xFE	; 254
    111e:	a2 2e       	mov	r10, r18
    1120:	89 14       	cp	r8, r9
    1122:	58 f4       	brcc	.+22     	; 0x113a <vfprintf+0x2d0>
    1124:	34 fe       	sbrs	r3, 4
    1126:	0b c0       	rjmp	.+22     	; 0x113e <vfprintf+0x2d4>
    1128:	32 fc       	sbrc	r3, 2
    112a:	09 c0       	rjmp	.+18     	; 0x113e <vfprintf+0x2d4>
    112c:	83 2d       	mov	r24, r3
    112e:	8e 7e       	andi	r24, 0xEE	; 238
    1130:	a8 2e       	mov	r10, r24
    1132:	05 c0       	rjmp	.+10     	; 0x113e <vfprintf+0x2d4>
    1134:	b8 2c       	mov	r11, r8
    1136:	a3 2c       	mov	r10, r3
    1138:	03 c0       	rjmp	.+6      	; 0x1140 <vfprintf+0x2d6>
    113a:	b8 2c       	mov	r11, r8
    113c:	01 c0       	rjmp	.+2      	; 0x1140 <vfprintf+0x2d6>
    113e:	b9 2c       	mov	r11, r9
    1140:	a4 fe       	sbrs	r10, 4
    1142:	0f c0       	rjmp	.+30     	; 0x1162 <vfprintf+0x2f8>
    1144:	fe 01       	movw	r30, r28
    1146:	e8 0d       	add	r30, r8
    1148:	f1 1d       	adc	r31, r1
    114a:	80 81       	ld	r24, Z
    114c:	80 33       	cpi	r24, 0x30	; 48
    114e:	21 f4       	brne	.+8      	; 0x1158 <vfprintf+0x2ee>
    1150:	9a 2d       	mov	r25, r10
    1152:	99 7e       	andi	r25, 0xE9	; 233
    1154:	a9 2e       	mov	r10, r25
    1156:	09 c0       	rjmp	.+18     	; 0x116a <vfprintf+0x300>
    1158:	a2 fe       	sbrs	r10, 2
    115a:	06 c0       	rjmp	.+12     	; 0x1168 <vfprintf+0x2fe>
    115c:	b3 94       	inc	r11
    115e:	b3 94       	inc	r11
    1160:	04 c0       	rjmp	.+8      	; 0x116a <vfprintf+0x300>
    1162:	8a 2d       	mov	r24, r10
    1164:	86 78       	andi	r24, 0x86	; 134
    1166:	09 f0       	breq	.+2      	; 0x116a <vfprintf+0x300>
    1168:	b3 94       	inc	r11
    116a:	a3 fc       	sbrc	r10, 3
    116c:	11 c0       	rjmp	.+34     	; 0x1190 <vfprintf+0x326>
    116e:	a0 fe       	sbrs	r10, 0
    1170:	06 c0       	rjmp	.+12     	; 0x117e <vfprintf+0x314>
    1172:	b2 14       	cp	r11, r2
    1174:	88 f4       	brcc	.+34     	; 0x1198 <vfprintf+0x32e>
    1176:	28 0c       	add	r2, r8
    1178:	92 2c       	mov	r9, r2
    117a:	9b 18       	sub	r9, r11
    117c:	0e c0       	rjmp	.+28     	; 0x119a <vfprintf+0x330>
    117e:	b2 14       	cp	r11, r2
    1180:	60 f4       	brcc	.+24     	; 0x119a <vfprintf+0x330>
    1182:	b6 01       	movw	r22, r12
    1184:	80 e2       	ldi	r24, 0x20	; 32
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	0e 94 2c 09 	call	0x1258	; 0x1258 <fputc>
    118c:	b3 94       	inc	r11
    118e:	f7 cf       	rjmp	.-18     	; 0x117e <vfprintf+0x314>
    1190:	b2 14       	cp	r11, r2
    1192:	18 f4       	brcc	.+6      	; 0x119a <vfprintf+0x330>
    1194:	2b 18       	sub	r2, r11
    1196:	02 c0       	rjmp	.+4      	; 0x119c <vfprintf+0x332>
    1198:	98 2c       	mov	r9, r8
    119a:	21 2c       	mov	r2, r1
    119c:	a4 fe       	sbrs	r10, 4
    119e:	10 c0       	rjmp	.+32     	; 0x11c0 <vfprintf+0x356>
    11a0:	b6 01       	movw	r22, r12
    11a2:	80 e3       	ldi	r24, 0x30	; 48
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	0e 94 2c 09 	call	0x1258	; 0x1258 <fputc>
    11aa:	a2 fe       	sbrs	r10, 2
    11ac:	17 c0       	rjmp	.+46     	; 0x11dc <vfprintf+0x372>
    11ae:	a1 fc       	sbrc	r10, 1
    11b0:	03 c0       	rjmp	.+6      	; 0x11b8 <vfprintf+0x34e>
    11b2:	88 e7       	ldi	r24, 0x78	; 120
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	02 c0       	rjmp	.+4      	; 0x11bc <vfprintf+0x352>
    11b8:	88 e5       	ldi	r24, 0x58	; 88
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	b6 01       	movw	r22, r12
    11be:	0c c0       	rjmp	.+24     	; 0x11d8 <vfprintf+0x36e>
    11c0:	8a 2d       	mov	r24, r10
    11c2:	86 78       	andi	r24, 0x86	; 134
    11c4:	59 f0       	breq	.+22     	; 0x11dc <vfprintf+0x372>
    11c6:	a1 fe       	sbrs	r10, 1
    11c8:	02 c0       	rjmp	.+4      	; 0x11ce <vfprintf+0x364>
    11ca:	8b e2       	ldi	r24, 0x2B	; 43
    11cc:	01 c0       	rjmp	.+2      	; 0x11d0 <vfprintf+0x366>
    11ce:	80 e2       	ldi	r24, 0x20	; 32
    11d0:	a7 fc       	sbrc	r10, 7
    11d2:	8d e2       	ldi	r24, 0x2D	; 45
    11d4:	b6 01       	movw	r22, r12
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	0e 94 2c 09 	call	0x1258	; 0x1258 <fputc>
    11dc:	89 14       	cp	r8, r9
    11de:	38 f4       	brcc	.+14     	; 0x11ee <vfprintf+0x384>
    11e0:	b6 01       	movw	r22, r12
    11e2:	80 e3       	ldi	r24, 0x30	; 48
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	0e 94 2c 09 	call	0x1258	; 0x1258 <fputc>
    11ea:	9a 94       	dec	r9
    11ec:	f7 cf       	rjmp	.-18     	; 0x11dc <vfprintf+0x372>
    11ee:	8a 94       	dec	r8
    11f0:	f3 01       	movw	r30, r6
    11f2:	e8 0d       	add	r30, r8
    11f4:	f1 1d       	adc	r31, r1
    11f6:	80 81       	ld	r24, Z
    11f8:	b6 01       	movw	r22, r12
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	0e 94 2c 09 	call	0x1258	; 0x1258 <fputc>
    1200:	81 10       	cpse	r8, r1
    1202:	f5 cf       	rjmp	.-22     	; 0x11ee <vfprintf+0x384>
    1204:	22 20       	and	r2, r2
    1206:	09 f4       	brne	.+2      	; 0x120a <vfprintf+0x3a0>
    1208:	42 ce       	rjmp	.-892    	; 0xe8e <vfprintf+0x24>
    120a:	b6 01       	movw	r22, r12
    120c:	80 e2       	ldi	r24, 0x20	; 32
    120e:	90 e0       	ldi	r25, 0x00	; 0
    1210:	0e 94 2c 09 	call	0x1258	; 0x1258 <fputc>
    1214:	2a 94       	dec	r2
    1216:	f6 cf       	rjmp	.-20     	; 0x1204 <vfprintf+0x39a>
    1218:	f6 01       	movw	r30, r12
    121a:	86 81       	ldd	r24, Z+6	; 0x06
    121c:	97 81       	ldd	r25, Z+7	; 0x07
    121e:	02 c0       	rjmp	.+4      	; 0x1224 <vfprintf+0x3ba>
    1220:	8f ef       	ldi	r24, 0xFF	; 255
    1222:	9f ef       	ldi	r25, 0xFF	; 255
    1224:	2b 96       	adiw	r28, 0x0b	; 11
    1226:	e2 e1       	ldi	r30, 0x12	; 18
    1228:	0c 94 df 09 	jmp	0x13be	; 0x13be <__epilogue_restores__>

0000122c <strnlen_P>:
    122c:	fc 01       	movw	r30, r24
    122e:	05 90       	lpm	r0, Z+
    1230:	61 50       	subi	r22, 0x01	; 1
    1232:	70 40       	sbci	r23, 0x00	; 0
    1234:	01 10       	cpse	r0, r1
    1236:	d8 f7       	brcc	.-10     	; 0x122e <strnlen_P+0x2>
    1238:	80 95       	com	r24
    123a:	90 95       	com	r25
    123c:	8e 0f       	add	r24, r30
    123e:	9f 1f       	adc	r25, r31
    1240:	08 95       	ret

00001242 <strnlen>:
    1242:	fc 01       	movw	r30, r24
    1244:	61 50       	subi	r22, 0x01	; 1
    1246:	70 40       	sbci	r23, 0x00	; 0
    1248:	01 90       	ld	r0, Z+
    124a:	01 10       	cpse	r0, r1
    124c:	d8 f7       	brcc	.-10     	; 0x1244 <strnlen+0x2>
    124e:	80 95       	com	r24
    1250:	90 95       	com	r25
    1252:	8e 0f       	add	r24, r30
    1254:	9f 1f       	adc	r25, r31
    1256:	08 95       	ret

00001258 <fputc>:
    1258:	0f 93       	push	r16
    125a:	1f 93       	push	r17
    125c:	cf 93       	push	r28
    125e:	df 93       	push	r29
    1260:	fb 01       	movw	r30, r22
    1262:	23 81       	ldd	r18, Z+3	; 0x03
    1264:	21 fd       	sbrc	r18, 1
    1266:	03 c0       	rjmp	.+6      	; 0x126e <fputc+0x16>
    1268:	8f ef       	ldi	r24, 0xFF	; 255
    126a:	9f ef       	ldi	r25, 0xFF	; 255
    126c:	2c c0       	rjmp	.+88     	; 0x12c6 <fputc+0x6e>
    126e:	22 ff       	sbrs	r18, 2
    1270:	16 c0       	rjmp	.+44     	; 0x129e <fputc+0x46>
    1272:	46 81       	ldd	r20, Z+6	; 0x06
    1274:	57 81       	ldd	r21, Z+7	; 0x07
    1276:	24 81       	ldd	r18, Z+4	; 0x04
    1278:	35 81       	ldd	r19, Z+5	; 0x05
    127a:	42 17       	cp	r20, r18
    127c:	53 07       	cpc	r21, r19
    127e:	44 f4       	brge	.+16     	; 0x1290 <fputc+0x38>
    1280:	a0 81       	ld	r26, Z
    1282:	b1 81       	ldd	r27, Z+1	; 0x01
    1284:	9d 01       	movw	r18, r26
    1286:	2f 5f       	subi	r18, 0xFF	; 255
    1288:	3f 4f       	sbci	r19, 0xFF	; 255
    128a:	20 83       	st	Z, r18
    128c:	31 83       	std	Z+1, r19	; 0x01
    128e:	8c 93       	st	X, r24
    1290:	26 81       	ldd	r18, Z+6	; 0x06
    1292:	37 81       	ldd	r19, Z+7	; 0x07
    1294:	2f 5f       	subi	r18, 0xFF	; 255
    1296:	3f 4f       	sbci	r19, 0xFF	; 255
    1298:	26 83       	std	Z+6, r18	; 0x06
    129a:	37 83       	std	Z+7, r19	; 0x07
    129c:	14 c0       	rjmp	.+40     	; 0x12c6 <fputc+0x6e>
    129e:	8b 01       	movw	r16, r22
    12a0:	ec 01       	movw	r28, r24
    12a2:	fb 01       	movw	r30, r22
    12a4:	00 84       	ldd	r0, Z+8	; 0x08
    12a6:	f1 85       	ldd	r31, Z+9	; 0x09
    12a8:	e0 2d       	mov	r30, r0
    12aa:	09 95       	icall
    12ac:	89 2b       	or	r24, r25
    12ae:	e1 f6       	brne	.-72     	; 0x1268 <fputc+0x10>
    12b0:	d8 01       	movw	r26, r16
    12b2:	16 96       	adiw	r26, 0x06	; 6
    12b4:	8d 91       	ld	r24, X+
    12b6:	9c 91       	ld	r25, X
    12b8:	17 97       	sbiw	r26, 0x07	; 7
    12ba:	01 96       	adiw	r24, 0x01	; 1
    12bc:	16 96       	adiw	r26, 0x06	; 6
    12be:	8d 93       	st	X+, r24
    12c0:	9c 93       	st	X, r25
    12c2:	17 97       	sbiw	r26, 0x07	; 7
    12c4:	ce 01       	movw	r24, r28
    12c6:	df 91       	pop	r29
    12c8:	cf 91       	pop	r28
    12ca:	1f 91       	pop	r17
    12cc:	0f 91       	pop	r16
    12ce:	08 95       	ret

000012d0 <__ultoa_invert>:
    12d0:	fa 01       	movw	r30, r20
    12d2:	aa 27       	eor	r26, r26
    12d4:	28 30       	cpi	r18, 0x08	; 8
    12d6:	51 f1       	breq	.+84     	; 0x132c <__ultoa_invert+0x5c>
    12d8:	20 31       	cpi	r18, 0x10	; 16
    12da:	81 f1       	breq	.+96     	; 0x133c <__ultoa_invert+0x6c>
    12dc:	e8 94       	clt
    12de:	6f 93       	push	r22
    12e0:	6e 7f       	andi	r22, 0xFE	; 254
    12e2:	6e 5f       	subi	r22, 0xFE	; 254
    12e4:	7f 4f       	sbci	r23, 0xFF	; 255
    12e6:	8f 4f       	sbci	r24, 0xFF	; 255
    12e8:	9f 4f       	sbci	r25, 0xFF	; 255
    12ea:	af 4f       	sbci	r26, 0xFF	; 255
    12ec:	b1 e0       	ldi	r27, 0x01	; 1
    12ee:	3e d0       	rcall	.+124    	; 0x136c <__ultoa_invert+0x9c>
    12f0:	b4 e0       	ldi	r27, 0x04	; 4
    12f2:	3c d0       	rcall	.+120    	; 0x136c <__ultoa_invert+0x9c>
    12f4:	67 0f       	add	r22, r23
    12f6:	78 1f       	adc	r23, r24
    12f8:	89 1f       	adc	r24, r25
    12fa:	9a 1f       	adc	r25, r26
    12fc:	a1 1d       	adc	r26, r1
    12fe:	68 0f       	add	r22, r24
    1300:	79 1f       	adc	r23, r25
    1302:	8a 1f       	adc	r24, r26
    1304:	91 1d       	adc	r25, r1
    1306:	a1 1d       	adc	r26, r1
    1308:	6a 0f       	add	r22, r26
    130a:	71 1d       	adc	r23, r1
    130c:	81 1d       	adc	r24, r1
    130e:	91 1d       	adc	r25, r1
    1310:	a1 1d       	adc	r26, r1
    1312:	20 d0       	rcall	.+64     	; 0x1354 <__ultoa_invert+0x84>
    1314:	09 f4       	brne	.+2      	; 0x1318 <__ultoa_invert+0x48>
    1316:	68 94       	set
    1318:	3f 91       	pop	r19
    131a:	2a e0       	ldi	r18, 0x0A	; 10
    131c:	26 9f       	mul	r18, r22
    131e:	11 24       	eor	r1, r1
    1320:	30 19       	sub	r19, r0
    1322:	30 5d       	subi	r19, 0xD0	; 208
    1324:	31 93       	st	Z+, r19
    1326:	de f6       	brtc	.-74     	; 0x12de <__ultoa_invert+0xe>
    1328:	cf 01       	movw	r24, r30
    132a:	08 95       	ret
    132c:	46 2f       	mov	r20, r22
    132e:	47 70       	andi	r20, 0x07	; 7
    1330:	40 5d       	subi	r20, 0xD0	; 208
    1332:	41 93       	st	Z+, r20
    1334:	b3 e0       	ldi	r27, 0x03	; 3
    1336:	0f d0       	rcall	.+30     	; 0x1356 <__ultoa_invert+0x86>
    1338:	c9 f7       	brne	.-14     	; 0x132c <__ultoa_invert+0x5c>
    133a:	f6 cf       	rjmp	.-20     	; 0x1328 <__ultoa_invert+0x58>
    133c:	46 2f       	mov	r20, r22
    133e:	4f 70       	andi	r20, 0x0F	; 15
    1340:	40 5d       	subi	r20, 0xD0	; 208
    1342:	4a 33       	cpi	r20, 0x3A	; 58
    1344:	18 f0       	brcs	.+6      	; 0x134c <__ultoa_invert+0x7c>
    1346:	49 5d       	subi	r20, 0xD9	; 217
    1348:	31 fd       	sbrc	r19, 1
    134a:	40 52       	subi	r20, 0x20	; 32
    134c:	41 93       	st	Z+, r20
    134e:	02 d0       	rcall	.+4      	; 0x1354 <__ultoa_invert+0x84>
    1350:	a9 f7       	brne	.-22     	; 0x133c <__ultoa_invert+0x6c>
    1352:	ea cf       	rjmp	.-44     	; 0x1328 <__ultoa_invert+0x58>
    1354:	b4 e0       	ldi	r27, 0x04	; 4
    1356:	a6 95       	lsr	r26
    1358:	97 95       	ror	r25
    135a:	87 95       	ror	r24
    135c:	77 95       	ror	r23
    135e:	67 95       	ror	r22
    1360:	ba 95       	dec	r27
    1362:	c9 f7       	brne	.-14     	; 0x1356 <__ultoa_invert+0x86>
    1364:	00 97       	sbiw	r24, 0x00	; 0
    1366:	61 05       	cpc	r22, r1
    1368:	71 05       	cpc	r23, r1
    136a:	08 95       	ret
    136c:	9b 01       	movw	r18, r22
    136e:	ac 01       	movw	r20, r24
    1370:	0a 2e       	mov	r0, r26
    1372:	06 94       	lsr	r0
    1374:	57 95       	ror	r21
    1376:	47 95       	ror	r20
    1378:	37 95       	ror	r19
    137a:	27 95       	ror	r18
    137c:	ba 95       	dec	r27
    137e:	c9 f7       	brne	.-14     	; 0x1372 <__ultoa_invert+0xa2>
    1380:	62 0f       	add	r22, r18
    1382:	73 1f       	adc	r23, r19
    1384:	84 1f       	adc	r24, r20
    1386:	95 1f       	adc	r25, r21
    1388:	a0 1d       	adc	r26, r0
    138a:	08 95       	ret

0000138c <__prologue_saves__>:
    138c:	2f 92       	push	r2
    138e:	3f 92       	push	r3
    1390:	4f 92       	push	r4
    1392:	5f 92       	push	r5
    1394:	6f 92       	push	r6
    1396:	7f 92       	push	r7
    1398:	8f 92       	push	r8
    139a:	9f 92       	push	r9
    139c:	af 92       	push	r10
    139e:	bf 92       	push	r11
    13a0:	cf 92       	push	r12
    13a2:	df 92       	push	r13
    13a4:	ef 92       	push	r14
    13a6:	ff 92       	push	r15
    13a8:	0f 93       	push	r16
    13aa:	1f 93       	push	r17
    13ac:	cf 93       	push	r28
    13ae:	df 93       	push	r29
    13b0:	cd b7       	in	r28, 0x3d	; 61
    13b2:	de b7       	in	r29, 0x3e	; 62
    13b4:	ca 1b       	sub	r28, r26
    13b6:	db 0b       	sbc	r29, r27
    13b8:	cd bf       	out	0x3d, r28	; 61
    13ba:	de bf       	out	0x3e, r29	; 62
    13bc:	09 94       	ijmp

000013be <__epilogue_restores__>:
    13be:	2a 88       	ldd	r2, Y+18	; 0x12
    13c0:	39 88       	ldd	r3, Y+17	; 0x11
    13c2:	48 88       	ldd	r4, Y+16	; 0x10
    13c4:	5f 84       	ldd	r5, Y+15	; 0x0f
    13c6:	6e 84       	ldd	r6, Y+14	; 0x0e
    13c8:	7d 84       	ldd	r7, Y+13	; 0x0d
    13ca:	8c 84       	ldd	r8, Y+12	; 0x0c
    13cc:	9b 84       	ldd	r9, Y+11	; 0x0b
    13ce:	aa 84       	ldd	r10, Y+10	; 0x0a
    13d0:	b9 84       	ldd	r11, Y+9	; 0x09
    13d2:	c8 84       	ldd	r12, Y+8	; 0x08
    13d4:	df 80       	ldd	r13, Y+7	; 0x07
    13d6:	ee 80       	ldd	r14, Y+6	; 0x06
    13d8:	fd 80       	ldd	r15, Y+5	; 0x05
    13da:	0c 81       	ldd	r16, Y+4	; 0x04
    13dc:	1b 81       	ldd	r17, Y+3	; 0x03
    13de:	aa 81       	ldd	r26, Y+2	; 0x02
    13e0:	b9 81       	ldd	r27, Y+1	; 0x01
    13e2:	ce 0f       	add	r28, r30
    13e4:	d1 1d       	adc	r29, r1
    13e6:	cd bf       	out	0x3d, r28	; 61
    13e8:	de bf       	out	0x3e, r29	; 62
    13ea:	ed 01       	movw	r28, r26
    13ec:	08 95       	ret

000013ee <_exit>:
    13ee:	f8 94       	cli

000013f0 <__stop_program>:
    13f0:	ff cf       	rjmp	.-2      	; 0x13f0 <__stop_program>
