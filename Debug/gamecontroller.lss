
gamecontroller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000114c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00802000  0000114c  000011e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001a  0080201a  0080201a  000011fa  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000011fa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001258  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a8  00000000  00000000  00001298  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001b25  00000000  00000000  00001440  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008e1  00000000  00000000  00002f65  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001abd  00000000  00000000  00003846  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000046c  00000000  00000000  00005304  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0001480c  00000000  00000000  00005770  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007bb  00000000  00000000  00019f7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  0001a737  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00005fae  00000000  00000000  0001a84f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__ctors_end>
       4:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
       8:	0c 94 b1 01 	jmp	0x362	; 0x362 <__vector_2>
       c:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <__vector_3>
      10:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      14:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      18:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      1c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      20:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      24:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      28:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      2c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      30:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      34:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      38:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      3c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      40:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      44:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      48:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      4c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      50:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      54:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      58:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      5c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      60:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      64:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      68:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      6c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      70:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      74:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      78:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      7c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      80:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      84:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      88:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      8c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      90:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      94:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      98:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      9c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      a0:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      a4:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      a8:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      ac:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      b0:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      b4:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      b8:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      bc:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      c0:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      c4:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      c8:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      cc:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      d0:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      d4:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      d8:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      dc:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      e0:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      e4:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      e8:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      ec:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      f0:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      f4:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      f8:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      fc:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     100:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     104:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     108:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     10c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     110:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     114:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     118:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     11c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     120:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     124:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     128:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     12c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     130:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     134:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     138:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     13c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     140:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     144:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     148:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     14c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     150:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     154:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     158:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     15c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     160:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     164:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     168:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     16c:	df 02       	muls	r29, r31
     16e:	c7 02       	muls	r28, r23
     170:	cd 02       	muls	r28, r29
     172:	d3 02       	muls	r29, r19
     174:	cd 02       	muls	r28, r29
     176:	df 02       	muls	r29, r31
     178:	d9 02       	muls	r29, r25
     17a:	c7 02       	muls	r28, r23
     17c:	c7 02       	muls	r28, r23
     17e:	d9 02       	muls	r29, r25
     180:	df 02       	muls	r29, r31
     182:	cd 02       	muls	r28, r29
     184:	d3 02       	muls	r29, r19
     186:	cd 02       	muls	r28, r29
     188:	c7 02       	muls	r28, r23
     18a:	df 02       	muls	r29, r31

0000018c <__ctors_end>:
     18c:	11 24       	eor	r1, r1
     18e:	1f be       	out	0x3f, r1	; 63
     190:	cf ef       	ldi	r28, 0xFF	; 255
     192:	cd bf       	out	0x3d, r28	; 61
     194:	d7 e2       	ldi	r29, 0x27	; 39
     196:	de bf       	out	0x3e, r29	; 62

00000198 <__do_copy_data>:
     198:	10 e2       	ldi	r17, 0x20	; 32
     19a:	a0 e0       	ldi	r26, 0x00	; 0
     19c:	b0 e2       	ldi	r27, 0x20	; 32
     19e:	ec e4       	ldi	r30, 0x4C	; 76
     1a0:	f1 e1       	ldi	r31, 0x11	; 17
     1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <__do_copy_data+0x10>
     1a4:	05 90       	lpm	r0, Z+
     1a6:	0d 92       	st	X+, r0
     1a8:	aa 31       	cpi	r26, 0x1A	; 26
     1aa:	b1 07       	cpc	r27, r17
     1ac:	d9 f7       	brne	.-10     	; 0x1a4 <__do_copy_data+0xc>

000001ae <__do_clear_bss>:
     1ae:	20 e2       	ldi	r18, 0x20	; 32
     1b0:	aa e1       	ldi	r26, 0x1A	; 26
     1b2:	b0 e2       	ldi	r27, 0x20	; 32
     1b4:	01 c0       	rjmp	.+2      	; 0x1b8 <.do_clear_bss_start>

000001b6 <.do_clear_bss_loop>:
     1b6:	1d 92       	st	X+, r1

000001b8 <.do_clear_bss_start>:
     1b8:	a4 33       	cpi	r26, 0x34	; 52
     1ba:	b2 07       	cpc	r27, r18
     1bc:	e1 f7       	brne	.-8      	; 0x1b6 <.do_clear_bss_loop>
     1be:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <main>
     1c2:	0c 94 a4 08 	jmp	0x1148	; 0x1148 <_exit>

000001c6 <__bad_interrupt>:
     1c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001ca <AccInit>:
#include "acc.h"



void AccInit(void)
{
     1ca:	cf 93       	push	r28
     1cc:	df 93       	push	r29
     1ce:	cd b7       	in	r28, 0x3d	; 61
     1d0:	de b7       	in	r29, 0x3e	; 62
 PORTC.DIR = (PORTC.DIR | 0b11110000);
     1d2:	80 e4       	ldi	r24, 0x40	; 64
     1d4:	96 e0       	ldi	r25, 0x06	; 6
     1d6:	20 e4       	ldi	r18, 0x40	; 64
     1d8:	36 e0       	ldi	r19, 0x06	; 6
     1da:	f9 01       	movw	r30, r18
     1dc:	20 81       	ld	r18, Z
     1de:	20 6f       	ori	r18, 0xF0	; 240
     1e0:	fc 01       	movw	r30, r24
     1e2:	20 83       	st	Z, r18
 PORTC.PIN6CTRL = 0b00010000;
     1e4:	80 e4       	ldi	r24, 0x40	; 64
     1e6:	96 e0       	ldi	r25, 0x06	; 6
     1e8:	20 e1       	ldi	r18, 0x10	; 16
     1ea:	fc 01       	movw	r30, r24
     1ec:	26 8b       	std	Z+22, r18	; 0x16
PORTA.PIN0CTRL = 0b00000000;
     1ee:	80 e0       	ldi	r24, 0x00	; 0
     1f0:	96 e0       	ldi	r25, 0x06	; 6
     1f2:	fc 01       	movw	r30, r24
     1f4:	10 8a       	std	Z+16, r1	; 0x10
PORTA.PIN1CTRL = 0b00000000;
     1f6:	80 e0       	ldi	r24, 0x00	; 0
     1f8:	96 e0       	ldi	r25, 0x06	; 6
     1fa:	fc 01       	movw	r30, r24
     1fc:	11 8a       	std	Z+17, r1	; 0x11
PORTA.PIN2CTRL = 0b00000000;
     1fe:	80 e0       	ldi	r24, 0x00	; 0
     200:	96 e0       	ldi	r25, 0x06	; 6
     202:	fc 01       	movw	r30, r24
     204:	12 8a       	std	Z+18, r1	; 0x12


}
     206:	00 00       	nop
     208:	df 91       	pop	r29
     20a:	cf 91       	pop	r28
     20c:	08 95       	ret

0000020e <AnalogInit>:
#include <inttypes.h>



void AnalogInit(void)
{
     20e:	cf 93       	push	r28
     210:	df 93       	push	r29
     212:	cd b7       	in	r28, 0x3d	; 61
     214:	de b7       	in	r29, 0x3e	; 62
	// ADC Clock was disabled initially in sysclk_init()
	// Must re-activate the ADC clock before configuring its registers (we're using ADCB)
	PR.PRPA &= ~0x02; // Clear ADC bit in Power Reduction Port B Register
     216:	80 e7       	ldi	r24, 0x70	; 112
     218:	90 e0       	ldi	r25, 0x00	; 0
     21a:	20 e7       	ldi	r18, 0x70	; 112
     21c:	30 e0       	ldi	r19, 0x00	; 0
     21e:	f9 01       	movw	r30, r18
     220:	21 81       	ldd	r18, Z+1	; 0x01
     222:	2d 7f       	andi	r18, 0xFD	; 253
     224:	fc 01       	movw	r30, r24
     226:	21 83       	std	Z+1, r18	; 0x01
	//     0        0       0         0         0         0       0        0
	// Apply no limit to ADC sample rate
	// Put ADC in signed mode
	// Disable Free-run mode (single conversion upon trigger)
	// Resolution set to 12-bit, right justified (11-bit effective in signed mode)
	ADCA.CTRLB = ADC_CONMODE_bm; // 0x10
     228:	80 e0       	ldi	r24, 0x00	; 0
     22a:	92 e0       	ldi	r25, 0x02	; 2
     22c:	20 e1       	ldi	r18, 0x10	; 16
     22e:	fc 01       	movw	r30, r24
     230:	21 83       	std	Z+1, r18	; 0x01
	// The ADC runs off of the CPU_per clock
	// In sys_clk_init() the internal 2MHz RC osc was used to source a 16 MHz PLL
	// The PLL is then divided using Prescalers A, B, and C setting CPU_per to 8 MHz
	// According to AVR1300, the ADC clock should run in the range 100 kHz ~ approx 1.4 MHz
	// Set ADC clock to 125kHz:  CPU_per/64    =>    8MHz/64 = 125kHz
	ADCA.PRESCALER = ADC_PRESCALER2_bm; // 0x04
     232:	80 e0       	ldi	r24, 0x00	; 0
     234:	92 e0       	ldi	r25, 0x02	; 2
     236:	24 e0       	ldi	r18, 0x04	; 4
     238:	fc 01       	movw	r30, r24
     23a:	24 83       	std	Z+4, r18	; 0x04
	//ADCB.REFCTRL
	//     7       6       5       4       3       2        1         0
	// |   -   |      REFSEL[2:0]      |   -   |   -   | BANDGAP | TEMPREF |
	//     0       0       0       0       0       0        0         0
	// Set internal 1V.  
	ADCA.REFCTRL = ADC_REFSEL_INT1V_gc; // 0x10
     23c:	80 e0       	ldi	r24, 0x00	; 0
     23e:	92 e0       	ldi	r25, 0x02	; 2
     240:	fc 01       	movw	r30, r24
     242:	12 82       	std	Z+2, r1	; 0x02
	//ADCB.EVCTRL
	//     7       6       5       4       3       2       1       0
	// |   -   |   -   |   -   |   EVSEL[1:0]  |      EVACT[2:0]       |
	//     0       0       0       0       0       0       0       0
	// Not implementing Event System so ensure EVCTRL is reading zeros
	ADCA.EVCTRL = 0x00;
     244:	80 e0       	ldi	r24, 0x00	; 0
     246:	92 e0       	ldi	r25, 0x02	; 2
     248:	fc 01       	movw	r30, r24
     24a:	13 82       	std	Z+3, r1	; 0x03
	//ADCB.INTFLAGS
	//     7       6       5       4       3       2       1       0
	// |   -   |   -   |   -   |   -   |   -   |   -   |   -   | CH0IF |
	//     0       0       0       0       0       0       0       0
	// Ensure the ADC complete flag is cleared (by writing a '1' to it)
	ADCA.INTFLAGS = ADC_CH0IF_bm; // 0x01
     24c:	80 e0       	ldi	r24, 0x00	; 0
     24e:	92 e0       	ldi	r25, 0x02	; 2
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	fc 01       	movw	r30, r24
     254:	26 83       	std	Z+6, r18	; 0x06
	//ADCB.CH0.INTCTRL
	//     7       6       5       4        3       2       1       0
	// |   -   |   -   |   -   |   -   |  INTMODE[1:0]  |  INTLVL[1:0]  |
	//     0       0       0       0        0       0       0       0
	// Configure interrupt on conversion complete with high priority
	ADCA.CH0.INTCTRL = ADC_CH_INTLVL1_bm | ADC_CH_INTLVL0_bm; // 0x03
     256:	80 e0       	ldi	r24, 0x00	; 0
     258:	92 e0       	ldi	r25, 0x02	; 2
     25a:	23 e0       	ldi	r18, 0x03	; 3
     25c:	fc 01       	movw	r30, r24
     25e:	22 a3       	std	Z+34, r18	; 0x22
	//ADCB.CTRLA
	//     7       6       5       4       3         2        1        0
	// |   -   |   -   |   -   |   -   |   -   | CH0START | FLUSH | ENABLE |
	//     0       0       0       0       0         0        0        0
	// Enable ADC, module B
	ADCA.CTRLA = ADC_ENABLE_bm; // 0x01
     260:	80 e0       	ldi	r24, 0x00	; 0
     262:	92 e0       	ldi	r25, 0x02	; 2
     264:	21 e0       	ldi	r18, 0x01	; 1
     266:	fc 01       	movw	r30, r24
     268:	20 83       	st	Z, r18
	//////////////////////////////////////////////////////////////////////
}
     26a:	00 00       	nop
     26c:	df 91       	pop	r29
     26e:	cf 91       	pop	r28
     270:	08 95       	ret

00000272 <AnalogGetCh>:



int AnalogGetCh(int PinPos,int PinNeg)
{
     272:	cf 93       	push	r28
     274:	df 93       	push	r29
     276:	cd b7       	in	r28, 0x3d	; 61
     278:	de b7       	in	r29, 0x3e	; 62
     27a:	26 97       	sbiw	r28, 0x06	; 6
     27c:	cd bf       	out	0x3d, r28	; 61
     27e:	de bf       	out	0x3e, r29	; 62
     280:	8b 83       	std	Y+3, r24	; 0x03
     282:	9c 83       	std	Y+4, r25	; 0x04
     284:	6d 83       	std	Y+5, r22	; 0x05
     286:	7e 83       	std	Y+6, r23	; 0x06

		PinPos <<=3;
     288:	8b 81       	ldd	r24, Y+3	; 0x03
     28a:	9c 81       	ldd	r25, Y+4	; 0x04
     28c:	88 0f       	add	r24, r24
     28e:	99 1f       	adc	r25, r25
     290:	88 0f       	add	r24, r24
     292:	99 1f       	adc	r25, r25
     294:	88 0f       	add	r24, r24
     296:	99 1f       	adc	r25, r25
     298:	8b 83       	std	Y+3, r24	; 0x03
     29a:	9c 83       	std	Y+4, r25	; 0x04

		//Get analog channel value
		int meting = ADCA_CH0_RES;
     29c:	84 e2       	ldi	r24, 0x24	; 36
     29e:	92 e0       	ldi	r25, 0x02	; 2
     2a0:	fc 01       	movw	r30, r24
     2a2:	80 81       	ld	r24, Z
     2a4:	91 81       	ldd	r25, Z+1	; 0x01
     2a6:	89 83       	std	Y+1, r24	; 0x01
     2a8:	9a 83       	std	Y+2, r25	; 0x02
		//     7        6       5        4        3        2       1       0
		// | START  |   -   |   -   |         GAIN[2:0]        | INPUTMODE[1:0] |
		//     0        0       0        0        0        0       0       0
		// Place ADC channel in single-ended mode
		// Gain set to 1
		ADCA.CH0.CTRL = ADC_CH_INPUTMODE0_bm; // 0x01
     2aa:	80 e0       	ldi	r24, 0x00	; 0
     2ac:	92 e0       	ldi	r25, 0x02	; 2
     2ae:	21 e0       	ldi	r18, 0x01	; 1
     2b0:	fc 01       	movw	r30, r24
     2b2:	20 a3       	std	Z+32, r18	; 0x20
		
		ADCA_CH0_MUXCTRL = PinPos | PinNeg;
     2b4:	81 e2       	ldi	r24, 0x21	; 33
     2b6:	92 e0       	ldi	r25, 0x02	; 2
     2b8:	3b 81       	ldd	r19, Y+3	; 0x03
     2ba:	2d 81       	ldd	r18, Y+5	; 0x05
     2bc:	23 2b       	or	r18, r19
     2be:	fc 01       	movw	r30, r24
     2c0:	20 83       	st	Z, r18
		
		//Single ended mode: write '-1' to select single ended mode
		//Return value:
		//-2048 to 2047 (signed) or 0 to 4095 (unsigned)
		//10000: Invalid pin settings
		return meting;
     2c2:	89 81       	ldd	r24, Y+1	; 0x01
     2c4:	9a 81       	ldd	r25, Y+2	; 0x02
}
     2c6:	26 96       	adiw	r28, 0x06	; 6
     2c8:	cd bf       	out	0x3d, r28	; 61
     2ca:	de bf       	out	0x3e, r29	; 62
     2cc:	df 91       	pop	r29
     2ce:	cf 91       	pop	r28
     2d0:	08 95       	ret

000002d2 <ClockInit>:
#pragma GCC push_options
#pragma GCC optimize ("O2") //This function must be optimized to avoid too long time interval betwee CCP write and CLK.CTRL write (4 CLK CYC max)

void ClockInit(void)
{
	OSC.XOSCCTRL=0b11001011; //Clock<=16MHz	
     2d2:	8b ec       	ldi	r24, 0xCB	; 203
     2d4:	80 93 52 00 	sts	0x0052, r24	; 0x800052 <__TEXT_REGION_LENGTH__+0x700052>
	OSC.CTRL=0b01000; //Enable oscillator	
     2d8:	88 e0       	ldi	r24, 0x08	; 8
     2da:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
	while (!(OSC.STATUS&0b1000)); //Wait until XTAL osc is ready
     2de:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
     2e2:	83 ff       	sbrs	r24, 3
     2e4:	fc cf       	rjmp	.-8      	; 0x2de <ClockInit+0xc>
	
	//Select XTAL osc as system CLK source
	CCP=0xd8;
     2e6:	88 ed       	ldi	r24, 0xD8	; 216
     2e8:	84 bf       	out	0x34, r24	; 52
    CLK.CTRL=0b0011;
     2ea:	83 e0       	ldi	r24, 0x03	; 3
     2ec:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
     2f0:	08 95       	ret

000002f2 <EncoderInit>:
	
}
int EncoderGetPos(void)
{
	return encoderPos;
}
     2f2:	cf 93       	push	r28
     2f4:	df 93       	push	r29
     2f6:	cd b7       	in	r28, 0x3d	; 61
     2f8:	de b7       	in	r29, 0x3e	; 62
     2fa:	80 e4       	ldi	r24, 0x40	; 64
     2fc:	96 e0       	ldi	r25, 0x06	; 6
     2fe:	20 e4       	ldi	r18, 0x40	; 64
     300:	36 e0       	ldi	r19, 0x06	; 6
     302:	f9 01       	movw	r30, r18
     304:	20 81       	ld	r18, Z
     306:	2f 7c       	andi	r18, 0xCF	; 207
     308:	fc 01       	movw	r30, r24
     30a:	20 83       	st	Z, r18
     30c:	80 e4       	ldi	r24, 0x40	; 64
     30e:	96 e0       	ldi	r25, 0x06	; 6
     310:	28 e1       	ldi	r18, 0x18	; 24
     312:	fc 01       	movw	r30, r24
     314:	24 8b       	std	Z+20, r18	; 0x14
     316:	80 e4       	ldi	r24, 0x40	; 64
     318:	96 e0       	ldi	r25, 0x06	; 6
     31a:	28 e1       	ldi	r18, 0x18	; 24
     31c:	fc 01       	movw	r30, r24
     31e:	25 8b       	std	Z+21, r18	; 0x15
     320:	80 e4       	ldi	r24, 0x40	; 64
     322:	96 e0       	ldi	r25, 0x06	; 6
     324:	2f e0       	ldi	r18, 0x0F	; 15
     326:	fc 01       	movw	r30, r24
     328:	21 87       	std	Z+9, r18	; 0x09
     32a:	80 e4       	ldi	r24, 0x40	; 64
     32c:	96 e0       	ldi	r25, 0x06	; 6
     32e:	20 e1       	ldi	r18, 0x10	; 16
     330:	fc 01       	movw	r30, r24
     332:	22 87       	std	Z+10, r18	; 0x0a
     334:	80 e4       	ldi	r24, 0x40	; 64
     336:	96 e0       	ldi	r25, 0x06	; 6
     338:	20 e2       	ldi	r18, 0x20	; 32
     33a:	fc 01       	movw	r30, r24
     33c:	23 87       	std	Z+11, r18	; 0x0b
     33e:	8f e3       	ldi	r24, 0x3F	; 63
     340:	90 e0       	ldi	r25, 0x00	; 0
     342:	2f e3       	ldi	r18, 0x3F	; 63
     344:	30 e0       	ldi	r19, 0x00	; 0
     346:	f9 01       	movw	r30, r18
     348:	20 81       	ld	r18, Z
     34a:	20 68       	ori	r18, 0x80	; 128
     34c:	fc 01       	movw	r30, r24
     34e:	20 83       	st	Z, r18
     350:	80 ea       	ldi	r24, 0xA0	; 160
     352:	90 e0       	ldi	r25, 0x00	; 0
     354:	24 e0       	ldi	r18, 0x04	; 4
     356:	fc 01       	movw	r30, r24
     358:	22 83       	std	Z+2, r18	; 0x02
     35a:	00 00       	nop
     35c:	df 91       	pop	r29
     35e:	cf 91       	pop	r28
     360:	08 95       	ret

00000362 <__vector_2>:

ISR(PORTC_INT0_vect){
     362:	1f 92       	push	r1
     364:	0f 92       	push	r0
     366:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     36a:	0f 92       	push	r0
     36c:	11 24       	eor	r1, r1
     36e:	2f 93       	push	r18
     370:	3f 93       	push	r19
     372:	4f 93       	push	r20
     374:	5f 93       	push	r21
     376:	6f 93       	push	r22
     378:	7f 93       	push	r23
     37a:	8f 93       	push	r24
     37c:	9f 93       	push	r25
     37e:	af 93       	push	r26
     380:	bf 93       	push	r27
     382:	ef 93       	push	r30
     384:	ff 93       	push	r31
     386:	cf 93       	push	r28
     388:	df 93       	push	r29
     38a:	cd b7       	in	r28, 0x3d	; 61
     38c:	de b7       	in	r29, 0x3e	; 62
	
	encoderPos += readEncoder();
     38e:	0e 94 21 02 	call	0x442	; 0x442 <readEncoder>
     392:	9c 01       	movw	r18, r24
     394:	80 91 1a 20 	lds	r24, 0x201A	; 0x80201a <__data_end>
     398:	90 91 1b 20 	lds	r25, 0x201B	; 0x80201b <__data_end+0x1>
     39c:	82 0f       	add	r24, r18
     39e:	93 1f       	adc	r25, r19
     3a0:	80 93 1a 20 	sts	0x201A, r24	; 0x80201a <__data_end>
     3a4:	90 93 1b 20 	sts	0x201B, r25	; 0x80201b <__data_end+0x1>
}
     3a8:	00 00       	nop
     3aa:	df 91       	pop	r29
     3ac:	cf 91       	pop	r28
     3ae:	ff 91       	pop	r31
     3b0:	ef 91       	pop	r30
     3b2:	bf 91       	pop	r27
     3b4:	af 91       	pop	r26
     3b6:	9f 91       	pop	r25
     3b8:	8f 91       	pop	r24
     3ba:	7f 91       	pop	r23
     3bc:	6f 91       	pop	r22
     3be:	5f 91       	pop	r21
     3c0:	4f 91       	pop	r20
     3c2:	3f 91       	pop	r19
     3c4:	2f 91       	pop	r18
     3c6:	0f 90       	pop	r0
     3c8:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     3cc:	0f 90       	pop	r0
     3ce:	1f 90       	pop	r1
     3d0:	18 95       	reti

000003d2 <__vector_3>:

ISR(PORTC_INT1_vect){
     3d2:	1f 92       	push	r1
     3d4:	0f 92       	push	r0
     3d6:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     3da:	0f 92       	push	r0
     3dc:	11 24       	eor	r1, r1
     3de:	2f 93       	push	r18
     3e0:	3f 93       	push	r19
     3e2:	4f 93       	push	r20
     3e4:	5f 93       	push	r21
     3e6:	6f 93       	push	r22
     3e8:	7f 93       	push	r23
     3ea:	8f 93       	push	r24
     3ec:	9f 93       	push	r25
     3ee:	af 93       	push	r26
     3f0:	bf 93       	push	r27
     3f2:	ef 93       	push	r30
     3f4:	ff 93       	push	r31
     3f6:	cf 93       	push	r28
     3f8:	df 93       	push	r29
     3fa:	cd b7       	in	r28, 0x3d	; 61
     3fc:	de b7       	in	r29, 0x3e	; 62
	encoderPos += readEncoder();
     3fe:	0e 94 21 02 	call	0x442	; 0x442 <readEncoder>
     402:	9c 01       	movw	r18, r24
     404:	80 91 1a 20 	lds	r24, 0x201A	; 0x80201a <__data_end>
     408:	90 91 1b 20 	lds	r25, 0x201B	; 0x80201b <__data_end+0x1>
     40c:	82 0f       	add	r24, r18
     40e:	93 1f       	adc	r25, r19
     410:	80 93 1a 20 	sts	0x201A, r24	; 0x80201a <__data_end>
     414:	90 93 1b 20 	sts	0x201B, r25	; 0x80201b <__data_end+0x1>
}
     418:	00 00       	nop
     41a:	df 91       	pop	r29
     41c:	cf 91       	pop	r28
     41e:	ff 91       	pop	r31
     420:	ef 91       	pop	r30
     422:	bf 91       	pop	r27
     424:	af 91       	pop	r26
     426:	9f 91       	pop	r25
     428:	8f 91       	pop	r24
     42a:	7f 91       	pop	r23
     42c:	6f 91       	pop	r22
     42e:	5f 91       	pop	r21
     430:	4f 91       	pop	r20
     432:	3f 91       	pop	r19
     434:	2f 91       	pop	r18
     436:	0f 90       	pop	r0
     438:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     43c:	0f 90       	pop	r0
     43e:	1f 90       	pop	r1
     440:	18 95       	reti

00000442 <readEncoder>:
		}
		state = (s >> 2);
	}
*/

int readEncoder(){
     442:	cf 93       	push	r28
     444:	df 93       	push	r29
     446:	cd b7       	in	r28, 0x3d	; 61
     448:	de b7       	in	r29, 0x3e	; 62
     44a:	61 97       	sbiw	r28, 0x11	; 17
     44c:	cd bf       	out	0x3d, r28	; 61
     44e:	de bf       	out	0x3e, r29	; 62
     450:	80 e0       	ldi	r24, 0x00	; 0
     452:	90 e0       	ldi	r25, 0x00	; 0
     454:	a0 e0       	ldi	r26, 0x00	; 0
     456:	b0 e4       	ldi	r27, 0x40	; 64
     458:	8c 83       	std	Y+4, r24	; 0x04
     45a:	9d 83       	std	Y+5, r25	; 0x05
     45c:	ae 83       	std	Y+6, r26	; 0x06
     45e:	bf 83       	std	Y+7, r27	; 0x07

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     460:	20 e0       	ldi	r18, 0x00	; 0
     462:	30 e0       	ldi	r19, 0x00	; 0
     464:	4a e7       	ldi	r20, 0x7A	; 122
     466:	55 e4       	ldi	r21, 0x45	; 69
     468:	6c 81       	ldd	r22, Y+4	; 0x04
     46a:	7d 81       	ldd	r23, Y+5	; 0x05
     46c:	8e 81       	ldd	r24, Y+6	; 0x06
     46e:	9f 81       	ldd	r25, Y+7	; 0x07
     470:	0e 94 f5 04 	call	0x9ea	; 0x9ea <__mulsf3>
     474:	dc 01       	movw	r26, r24
     476:	cb 01       	movw	r24, r22
     478:	88 87       	std	Y+8, r24	; 0x08
     47a:	99 87       	std	Y+9, r25	; 0x09
     47c:	aa 87       	std	Y+10, r26	; 0x0a
     47e:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
     480:	20 e0       	ldi	r18, 0x00	; 0
     482:	30 e0       	ldi	r19, 0x00	; 0
     484:	40 e8       	ldi	r20, 0x80	; 128
     486:	5f e3       	ldi	r21, 0x3F	; 63
     488:	68 85       	ldd	r22, Y+8	; 0x08
     48a:	79 85       	ldd	r23, Y+9	; 0x09
     48c:	8a 85       	ldd	r24, Y+10	; 0x0a
     48e:	9b 85       	ldd	r25, Y+11	; 0x0b
     490:	0e 94 6f 04 	call	0x8de	; 0x8de <__cmpsf2>
     494:	88 23       	and	r24, r24
     496:	2c f4       	brge	.+10     	; 0x4a2 <readEncoder+0x60>
		__ticks = 1;
     498:	81 e0       	ldi	r24, 0x01	; 1
     49a:	90 e0       	ldi	r25, 0x00	; 0
     49c:	8c 87       	std	Y+12, r24	; 0x0c
     49e:	9d 87       	std	Y+13, r25	; 0x0d
     4a0:	3f c0       	rjmp	.+126    	; 0x520 <readEncoder+0xde>
	else if (__tmp > 65535)
     4a2:	20 e0       	ldi	r18, 0x00	; 0
     4a4:	3f ef       	ldi	r19, 0xFF	; 255
     4a6:	4f e7       	ldi	r20, 0x7F	; 127
     4a8:	57 e4       	ldi	r21, 0x47	; 71
     4aa:	68 85       	ldd	r22, Y+8	; 0x08
     4ac:	79 85       	ldd	r23, Y+9	; 0x09
     4ae:	8a 85       	ldd	r24, Y+10	; 0x0a
     4b0:	9b 85       	ldd	r25, Y+11	; 0x0b
     4b2:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <__gesf2>
     4b6:	18 16       	cp	r1, r24
     4b8:	4c f5       	brge	.+82     	; 0x50c <readEncoder+0xca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     4ba:	20 e0       	ldi	r18, 0x00	; 0
     4bc:	30 e0       	ldi	r19, 0x00	; 0
     4be:	40 e2       	ldi	r20, 0x20	; 32
     4c0:	51 e4       	ldi	r21, 0x41	; 65
     4c2:	6c 81       	ldd	r22, Y+4	; 0x04
     4c4:	7d 81       	ldd	r23, Y+5	; 0x05
     4c6:	8e 81       	ldd	r24, Y+6	; 0x06
     4c8:	9f 81       	ldd	r25, Y+7	; 0x07
     4ca:	0e 94 f5 04 	call	0x9ea	; 0x9ea <__mulsf3>
     4ce:	dc 01       	movw	r26, r24
     4d0:	cb 01       	movw	r24, r22
     4d2:	bc 01       	movw	r22, r24
     4d4:	cd 01       	movw	r24, r26
     4d6:	0e 94 74 04 	call	0x8e8	; 0x8e8 <__fixunssfsi>
     4da:	dc 01       	movw	r26, r24
     4dc:	cb 01       	movw	r24, r22
     4de:	8c 87       	std	Y+12, r24	; 0x0c
     4e0:	9d 87       	std	Y+13, r25	; 0x0d
     4e2:	0f c0       	rjmp	.+30     	; 0x502 <readEncoder+0xc0>
     4e4:	80 e9       	ldi	r24, 0x90	; 144
     4e6:	91 e0       	ldi	r25, 0x01	; 1
     4e8:	8e 87       	std	Y+14, r24	; 0x0e
     4ea:	9f 87       	std	Y+15, r25	; 0x0f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     4ec:	8e 85       	ldd	r24, Y+14	; 0x0e
     4ee:	9f 85       	ldd	r25, Y+15	; 0x0f
     4f0:	01 97       	sbiw	r24, 0x01	; 1
     4f2:	f1 f7       	brne	.-4      	; 0x4f0 <readEncoder+0xae>
     4f4:	8e 87       	std	Y+14, r24	; 0x0e
     4f6:	9f 87       	std	Y+15, r25	; 0x0f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     4f8:	8c 85       	ldd	r24, Y+12	; 0x0c
     4fa:	9d 85       	ldd	r25, Y+13	; 0x0d
     4fc:	01 97       	sbiw	r24, 0x01	; 1
     4fe:	8c 87       	std	Y+12, r24	; 0x0c
     500:	9d 87       	std	Y+13, r25	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     502:	8c 85       	ldd	r24, Y+12	; 0x0c
     504:	9d 85       	ldd	r25, Y+13	; 0x0d
     506:	89 2b       	or	r24, r25
     508:	69 f7       	brne	.-38     	; 0x4e4 <readEncoder+0xa2>
     50a:	14 c0       	rjmp	.+40     	; 0x534 <readEncoder+0xf2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     50c:	68 85       	ldd	r22, Y+8	; 0x08
     50e:	79 85       	ldd	r23, Y+9	; 0x09
     510:	8a 85       	ldd	r24, Y+10	; 0x0a
     512:	9b 85       	ldd	r25, Y+11	; 0x0b
     514:	0e 94 74 04 	call	0x8e8	; 0x8e8 <__fixunssfsi>
     518:	dc 01       	movw	r26, r24
     51a:	cb 01       	movw	r24, r22
     51c:	8c 87       	std	Y+12, r24	; 0x0c
     51e:	9d 87       	std	Y+13, r25	; 0x0d
     520:	8c 85       	ldd	r24, Y+12	; 0x0c
     522:	9d 85       	ldd	r25, Y+13	; 0x0d
     524:	88 8b       	std	Y+16, r24	; 0x10
     526:	99 8b       	std	Y+17, r25	; 0x11
     528:	88 89       	ldd	r24, Y+16	; 0x10
     52a:	99 89       	ldd	r25, Y+17	; 0x11
     52c:	01 97       	sbiw	r24, 0x01	; 1
     52e:	f1 f7       	brne	.-4      	; 0x52c <readEncoder+0xea>
     530:	88 8b       	std	Y+16, r24	; 0x10
     532:	99 8b       	std	Y+17, r25	; 0x11
	_delay_ms(2);
	currentPos = (PORTC.IN >> 4) & 3;
     534:	80 e4       	ldi	r24, 0x40	; 64
     536:	96 e0       	ldi	r25, 0x06	; 6
     538:	fc 01       	movw	r30, r24
     53a:	80 85       	ldd	r24, Z+8	; 0x08
     53c:	82 95       	swap	r24
     53e:	8f 70       	andi	r24, 0x0F	; 15
     540:	83 70       	andi	r24, 0x03	; 3
     542:	80 93 1c 20 	sts	0x201C, r24	; 0x80201c <currentPos>
	uint8_t s = (currentPos << 2) | prevpos;
     546:	80 91 1c 20 	lds	r24, 0x201C	; 0x80201c <currentPos>
     54a:	88 2f       	mov	r24, r24
     54c:	90 e0       	ldi	r25, 0x00	; 0
     54e:	88 0f       	add	r24, r24
     550:	99 1f       	adc	r25, r25
     552:	88 0f       	add	r24, r24
     554:	99 1f       	adc	r25, r25
     556:	98 2f       	mov	r25, r24
     558:	80 91 1d 20 	lds	r24, 0x201D	; 0x80201d <prevpos>
     55c:	89 2b       	or	r24, r25
     55e:	8b 83       	std	Y+3, r24	; 0x03
	int position = 0;
     560:	19 82       	std	Y+1, r1	; 0x01
     562:	1a 82       	std	Y+2, r1	; 0x02
	switch (s) {
     564:	8b 81       	ldd	r24, Y+3	; 0x03
     566:	88 2f       	mov	r24, r24
     568:	90 e0       	ldi	r25, 0x00	; 0
     56a:	09 2e       	mov	r0, r25
     56c:	00 0c       	add	r0, r0
     56e:	aa 0b       	sbc	r26, r26
     570:	bb 0b       	sbc	r27, r27
     572:	40 e0       	ldi	r20, 0x00	; 0
     574:	50 e0       	ldi	r21, 0x00	; 0
     576:	2f e0       	ldi	r18, 0x0F	; 15
     578:	30 e0       	ldi	r19, 0x00	; 0
     57a:	84 1b       	sub	r24, r20
     57c:	95 0b       	sbc	r25, r21
     57e:	28 17       	cp	r18, r24
     580:	39 07       	cpc	r19, r25
     582:	b8 f0       	brcs	.+46     	; 0x5b2 <readEncoder+0x170>
     584:	8a 54       	subi	r24, 0x4A	; 74
     586:	9f 4f       	sbci	r25, 0xFF	; 255
     588:	fc 01       	movw	r30, r24
     58a:	0c 94 8a 05 	jmp	0xb14	; 0xb14 <__tablejump2__>
		case 0: case 5: case 10: case 15:
		break;
		case 1: case 7: case 8: case 14:
		position++; break;
     58e:	89 81       	ldd	r24, Y+1	; 0x01
     590:	9a 81       	ldd	r25, Y+2	; 0x02
     592:	01 96       	adiw	r24, 0x01	; 1
     594:	89 83       	std	Y+1, r24	; 0x01
     596:	9a 83       	std	Y+2, r25	; 0x02
     598:	13 c0       	rjmp	.+38     	; 0x5c0 <readEncoder+0x17e>
		case 2: case 4: case 11: case 13:
		position--; break;
     59a:	89 81       	ldd	r24, Y+1	; 0x01
     59c:	9a 81       	ldd	r25, Y+2	; 0x02
     59e:	01 97       	sbiw	r24, 0x01	; 1
     5a0:	89 83       	std	Y+1, r24	; 0x01
     5a2:	9a 83       	std	Y+2, r25	; 0x02
     5a4:	0d c0       	rjmp	.+26     	; 0x5c0 <readEncoder+0x17e>
		case 3: case 12:
		position += 2; break;
     5a6:	89 81       	ldd	r24, Y+1	; 0x01
     5a8:	9a 81       	ldd	r25, Y+2	; 0x02
     5aa:	02 96       	adiw	r24, 0x02	; 2
     5ac:	89 83       	std	Y+1, r24	; 0x01
     5ae:	9a 83       	std	Y+2, r25	; 0x02
     5b0:	07 c0       	rjmp	.+14     	; 0x5c0 <readEncoder+0x17e>
		default:
		position -= 2; break;
     5b2:	89 81       	ldd	r24, Y+1	; 0x01
     5b4:	9a 81       	ldd	r25, Y+2	; 0x02
     5b6:	02 97       	sbiw	r24, 0x02	; 2
     5b8:	89 83       	std	Y+1, r24	; 0x01
     5ba:	9a 83       	std	Y+2, r25	; 0x02
     5bc:	01 c0       	rjmp	.+2      	; 0x5c0 <readEncoder+0x17e>
	currentPos = (PORTC.IN >> 4) & 3;
	uint8_t s = (currentPos << 2) | prevpos;
	int position = 0;
	switch (s) {
		case 0: case 5: case 10: case 15:
		break;
     5be:	00 00       	nop
		case 3: case 12:
		position += 2; break;
		default:
		position -= 2; break;
	}
	prevpos = currentPos;
     5c0:	80 91 1c 20 	lds	r24, 0x201C	; 0x80201c <currentPos>
     5c4:	80 93 1d 20 	sts	0x201D, r24	; 0x80201d <prevpos>
	return position;
     5c8:	89 81       	ldd	r24, Y+1	; 0x01
     5ca:	9a 81       	ldd	r25, Y+2	; 0x02
}
     5cc:	61 96       	adiw	r28, 0x11	; 17
     5ce:	cd bf       	out	0x3d, r28	; 61
     5d0:	de bf       	out	0x3e, r29	; 62
     5d2:	df 91       	pop	r29
     5d4:	cf 91       	pop	r28
     5d6:	08 95       	ret

000005d8 <main>:
char a;

void SimpleFunction(void);	//A simple function: print a counter (0 to 9) to the terminal

int main(void)
{	
     5d8:	cf 93       	push	r28
     5da:	df 93       	push	r29
     5dc:	cd b7       	in	r28, 0x3d	; 61
     5de:	de b7       	in	r29, 0x3e	; 62
     5e0:	2e 97       	sbiw	r28, 0x0e	; 14
     5e2:	cd bf       	out	0x3d, r28	; 61
     5e4:	de bf       	out	0x3e, r29	; 62
	//###1###
	 
	//Initialize subsystems
	ClockInit();			//Initialize system clock (16 MHz)
     5e6:	0e 94 69 01 	call	0x2d2	; 0x2d2 <ClockInit>
	USARTInit();			//Initialize USART and bind to stdout,stdin
     5ea:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <USARTInit>
	AnalogInit();			//Initialize ADC
     5ee:	0e 94 07 01 	call	0x20e	; 0x20e <AnalogInit>
	AccInit();				//Initialize accelerometer system
     5f2:	0e 94 e5 00 	call	0x1ca	; 0x1ca <AccInit>
	LEDInit();				//Initialize LEDs
     5f6:	0e 94 ab 03 	call	0x756	; 0x756 <LEDInit>
	SwitchInit();			//Initialize switches
     5fa:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <SwitchInit>
	EncoderInit();			//Initialize encoder
     5fe:	0e 94 79 01 	call	0x2f2	; 0x2f2 <EncoderInit>
	SpeakerInit();			//Initialize speaker system
     602:	0e 94 cc 03 	call	0x798	; 0x798 <SpeakerInit>
	
	//Enable interrupts
	PMIC.CTRL|=0b00000111;  //Enable low, medium, high priority interrupts
     606:	80 ea       	ldi	r24, 0xA0	; 160
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	20 ea       	ldi	r18, 0xA0	; 160
     60c:	30 e0       	ldi	r19, 0x00	; 0
     60e:	f9 01       	movw	r30, r18
     610:	22 81       	ldd	r18, Z+2	; 0x02
     612:	27 60       	ori	r18, 0x07	; 7
     614:	fc 01       	movw	r30, r24
     616:	22 83       	std	Z+2, r18	; 0x02
	SREG|=0b10000000;		//Global interrupt enable
     618:	8f e3       	ldi	r24, 0x3F	; 63
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	2f e3       	ldi	r18, 0x3F	; 63
     61e:	30 e0       	ldi	r19, 0x00	; 0
     620:	f9 01       	movw	r30, r18
     622:	20 81       	ld	r18, Z
     624:	20 68       	ori	r18, 0x80	; 128
     626:	fc 01       	movw	r30, r24
     628:	20 83       	st	Z, r18
     62a:	80 e0       	ldi	r24, 0x00	; 0
     62c:	90 e0       	ldi	r25, 0x00	; 0
     62e:	aa ef       	ldi	r26, 0xFA	; 250
     630:	b3 e4       	ldi	r27, 0x43	; 67
     632:	89 83       	std	Y+1, r24	; 0x01
     634:	9a 83       	std	Y+2, r25	; 0x02
     636:	ab 83       	std	Y+3, r26	; 0x03
     638:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     63a:	20 e0       	ldi	r18, 0x00	; 0
     63c:	30 e0       	ldi	r19, 0x00	; 0
     63e:	4a e7       	ldi	r20, 0x7A	; 122
     640:	55 e4       	ldi	r21, 0x45	; 69
     642:	69 81       	ldd	r22, Y+1	; 0x01
     644:	7a 81       	ldd	r23, Y+2	; 0x02
     646:	8b 81       	ldd	r24, Y+3	; 0x03
     648:	9c 81       	ldd	r25, Y+4	; 0x04
     64a:	0e 94 f5 04 	call	0x9ea	; 0x9ea <__mulsf3>
     64e:	dc 01       	movw	r26, r24
     650:	cb 01       	movw	r24, r22
     652:	8d 83       	std	Y+5, r24	; 0x05
     654:	9e 83       	std	Y+6, r25	; 0x06
     656:	af 83       	std	Y+7, r26	; 0x07
     658:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     65a:	20 e0       	ldi	r18, 0x00	; 0
     65c:	30 e0       	ldi	r19, 0x00	; 0
     65e:	40 e8       	ldi	r20, 0x80	; 128
     660:	5f e3       	ldi	r21, 0x3F	; 63
     662:	6d 81       	ldd	r22, Y+5	; 0x05
     664:	7e 81       	ldd	r23, Y+6	; 0x06
     666:	8f 81       	ldd	r24, Y+7	; 0x07
     668:	98 85       	ldd	r25, Y+8	; 0x08
     66a:	0e 94 6f 04 	call	0x8de	; 0x8de <__cmpsf2>
     66e:	88 23       	and	r24, r24
     670:	2c f4       	brge	.+10     	; 0x67c <main+0xa4>
		__ticks = 1;
     672:	81 e0       	ldi	r24, 0x01	; 1
     674:	90 e0       	ldi	r25, 0x00	; 0
     676:	89 87       	std	Y+9, r24	; 0x09
     678:	9a 87       	std	Y+10, r25	; 0x0a
     67a:	3f c0       	rjmp	.+126    	; 0x6fa <main+0x122>
	else if (__tmp > 65535)
     67c:	20 e0       	ldi	r18, 0x00	; 0
     67e:	3f ef       	ldi	r19, 0xFF	; 255
     680:	4f e7       	ldi	r20, 0x7F	; 127
     682:	57 e4       	ldi	r21, 0x47	; 71
     684:	6d 81       	ldd	r22, Y+5	; 0x05
     686:	7e 81       	ldd	r23, Y+6	; 0x06
     688:	8f 81       	ldd	r24, Y+7	; 0x07
     68a:	98 85       	ldd	r25, Y+8	; 0x08
     68c:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <__gesf2>
     690:	18 16       	cp	r1, r24
     692:	4c f5       	brge	.+82     	; 0x6e6 <main+0x10e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     694:	20 e0       	ldi	r18, 0x00	; 0
     696:	30 e0       	ldi	r19, 0x00	; 0
     698:	40 e2       	ldi	r20, 0x20	; 32
     69a:	51 e4       	ldi	r21, 0x41	; 65
     69c:	69 81       	ldd	r22, Y+1	; 0x01
     69e:	7a 81       	ldd	r23, Y+2	; 0x02
     6a0:	8b 81       	ldd	r24, Y+3	; 0x03
     6a2:	9c 81       	ldd	r25, Y+4	; 0x04
     6a4:	0e 94 f5 04 	call	0x9ea	; 0x9ea <__mulsf3>
     6a8:	dc 01       	movw	r26, r24
     6aa:	cb 01       	movw	r24, r22
     6ac:	bc 01       	movw	r22, r24
     6ae:	cd 01       	movw	r24, r26
     6b0:	0e 94 74 04 	call	0x8e8	; 0x8e8 <__fixunssfsi>
     6b4:	dc 01       	movw	r26, r24
     6b6:	cb 01       	movw	r24, r22
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	9a 87       	std	Y+10, r25	; 0x0a
     6bc:	0f c0       	rjmp	.+30     	; 0x6dc <main+0x104>
     6be:	80 e9       	ldi	r24, 0x90	; 144
     6c0:	91 e0       	ldi	r25, 0x01	; 1
     6c2:	8b 87       	std	Y+11, r24	; 0x0b
     6c4:	9c 87       	std	Y+12, r25	; 0x0c
     6c6:	8b 85       	ldd	r24, Y+11	; 0x0b
     6c8:	9c 85       	ldd	r25, Y+12	; 0x0c
     6ca:	01 97       	sbiw	r24, 0x01	; 1
     6cc:	f1 f7       	brne	.-4      	; 0x6ca <main+0xf2>
     6ce:	8b 87       	std	Y+11, r24	; 0x0b
     6d0:	9c 87       	std	Y+12, r25	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	9a 85       	ldd	r25, Y+10	; 0x0a
     6d6:	01 97       	sbiw	r24, 0x01	; 1
     6d8:	89 87       	std	Y+9, r24	; 0x09
     6da:	9a 87       	std	Y+10, r25	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     6dc:	89 85       	ldd	r24, Y+9	; 0x09
     6de:	9a 85       	ldd	r25, Y+10	; 0x0a
     6e0:	89 2b       	or	r24, r25
     6e2:	69 f7       	brne	.-38     	; 0x6be <main+0xe6>
     6e4:	14 c0       	rjmp	.+40     	; 0x70e <main+0x136>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     6e6:	6d 81       	ldd	r22, Y+5	; 0x05
     6e8:	7e 81       	ldd	r23, Y+6	; 0x06
     6ea:	8f 81       	ldd	r24, Y+7	; 0x07
     6ec:	98 85       	ldd	r25, Y+8	; 0x08
     6ee:	0e 94 74 04 	call	0x8e8	; 0x8e8 <__fixunssfsi>
     6f2:	dc 01       	movw	r26, r24
     6f4:	cb 01       	movw	r24, r22
     6f6:	89 87       	std	Y+9, r24	; 0x09
     6f8:	9a 87       	std	Y+10, r25	; 0x0a
     6fa:	89 85       	ldd	r24, Y+9	; 0x09
     6fc:	9a 85       	ldd	r25, Y+10	; 0x0a
     6fe:	8d 87       	std	Y+13, r24	; 0x0d
     700:	9e 87       	std	Y+14, r25	; 0x0e
     702:	8d 85       	ldd	r24, Y+13	; 0x0d
     704:	9e 85       	ldd	r25, Y+14	; 0x0e
     706:	01 97       	sbiw	r24, 0x01	; 1
     708:	f1 f7       	brne	.-4      	; 0x706 <main+0x12e>
     70a:	8d 87       	std	Y+13, r24	; 0x0d
     70c:	9e 87       	std	Y+14, r25	; 0x0e
	
	
	
	while (1){
		// Start ADC conversion
		sprintf(text, "Analog: %d\r",AnalogGetCh(1,2));
     70e:	62 e0       	ldi	r22, 0x02	; 2
     710:	70 e0       	ldi	r23, 0x00	; 0
     712:	81 e0       	ldi	r24, 0x01	; 1
     714:	90 e0       	ldi	r25, 0x00	; 0
     716:	0e 94 39 01 	call	0x272	; 0x272 <AnalogGetCh>
     71a:	29 2f       	mov	r18, r25
     71c:	2f 93       	push	r18
     71e:	8f 93       	push	r24
     720:	8e e0       	ldi	r24, 0x0E	; 14
     722:	90 e2       	ldi	r25, 0x20	; 32
     724:	89 2f       	mov	r24, r25
     726:	8f 93       	push	r24
     728:	8e e0       	ldi	r24, 0x0E	; 14
     72a:	90 e2       	ldi	r25, 0x20	; 32
     72c:	8f 93       	push	r24
     72e:	8e e1       	ldi	r24, 0x1E	; 30
     730:	90 e2       	ldi	r25, 0x20	; 32
     732:	89 2f       	mov	r24, r25
     734:	8f 93       	push	r24
     736:	8e e1       	ldi	r24, 0x1E	; 30
     738:	90 e2       	ldi	r25, 0x20	; 32
     73a:	8f 93       	push	r24
     73c:	0e 94 c0 05 	call	0xb80	; 0xb80 <sprintf>
     740:	0f 90       	pop	r0
     742:	0f 90       	pop	r0
     744:	0f 90       	pop	r0
     746:	0f 90       	pop	r0
     748:	0f 90       	pop	r0
     74a:	0f 90       	pop	r0
		
		puts(text);
     74c:	8e e1       	ldi	r24, 0x1E	; 30
     74e:	90 e2       	ldi	r25, 0x20	; 32
     750:	0e 94 90 05 	call	0xb20	; 0xb20 <puts>
	//	puts(text);

		
		
		//putchar('U');
	}
     754:	dc cf       	rjmp	.-72     	; 0x70e <main+0x136>

00000756 <LEDInit>:
#include "LED.h"
#include <avr/io.h>

void LEDInit(void)
{
     756:	cf 93       	push	r28
     758:	df 93       	push	r29
     75a:	cd b7       	in	r28, 0x3d	; 61
     75c:	de b7       	in	r29, 0x3e	; 62
	PORTE.DIRSET=0b00001111;
     75e:	80 e8       	ldi	r24, 0x80	; 128
     760:	96 e0       	ldi	r25, 0x06	; 6
     762:	2f e0       	ldi	r18, 0x0F	; 15
     764:	fc 01       	movw	r30, r24
     766:	21 83       	std	Z+1, r18	; 0x01
	PORTE.PIN0CTRL=0b01000000;
     768:	80 e8       	ldi	r24, 0x80	; 128
     76a:	96 e0       	ldi	r25, 0x06	; 6
     76c:	20 e4       	ldi	r18, 0x40	; 64
     76e:	fc 01       	movw	r30, r24
     770:	20 8b       	std	Z+16, r18	; 0x10
	PORTE.PIN1CTRL=0b01000000;
     772:	80 e8       	ldi	r24, 0x80	; 128
     774:	96 e0       	ldi	r25, 0x06	; 6
     776:	20 e4       	ldi	r18, 0x40	; 64
     778:	fc 01       	movw	r30, r24
     77a:	21 8b       	std	Z+17, r18	; 0x11
	PORTE.PIN2CTRL=0b01000000;
     77c:	80 e8       	ldi	r24, 0x80	; 128
     77e:	96 e0       	ldi	r25, 0x06	; 6
     780:	20 e4       	ldi	r18, 0x40	; 64
     782:	fc 01       	movw	r30, r24
     784:	22 8b       	std	Z+18, r18	; 0x12
	PORTE.PIN3CTRL=0b01000000;
     786:	80 e8       	ldi	r24, 0x80	; 128
     788:	96 e0       	ldi	r25, 0x06	; 6
     78a:	20 e4       	ldi	r18, 0x40	; 64
     78c:	fc 01       	movw	r30, r24
     78e:	23 8b       	std	Z+19, r18	; 0x13
	
}
     790:	00 00       	nop
     792:	df 91       	pop	r29
     794:	cf 91       	pop	r28
     796:	08 95       	ret

00000798 <SpeakerInit>:
#include <avr/io.h>
#include <avr/interrupt.h>
#include "speaker.h"

void SpeakerInit(void)
{
     798:	cf 93       	push	r28
     79a:	df 93       	push	r29
     79c:	cd b7       	in	r28, 0x3d	; 61
     79e:	de b7       	in	r29, 0x3e	; 62
		//TCC1.CTRLB=
		//TCC1.CTRLC=
		//TCC1.CTRLD=
		//TCC1.CTRLE=
		
}
     7a0:	00 00       	nop
     7a2:	df 91       	pop	r29
     7a4:	cf 91       	pop	r28
     7a6:	08 95       	ret

000007a8 <SwitchInit>:
#include "switch.h"
#include <avr/io.h>

void SwitchInit(void)
{
     7a8:	cf 93       	push	r28
     7aa:	df 93       	push	r29
     7ac:	cd b7       	in	r28, 0x3d	; 61
     7ae:	de b7       	in	r29, 0x3e	; 62
	PORTD.DIRCLR=0b11110001;
     7b0:	80 e6       	ldi	r24, 0x60	; 96
     7b2:	96 e0       	ldi	r25, 0x06	; 6
     7b4:	21 ef       	ldi	r18, 0xF1	; 241
     7b6:	fc 01       	movw	r30, r24
     7b8:	22 83       	std	Z+2, r18	; 0x02
	PORTD.PIN0CTRL=0b01011000;
     7ba:	80 e6       	ldi	r24, 0x60	; 96
     7bc:	96 e0       	ldi	r25, 0x06	; 6
     7be:	28 e5       	ldi	r18, 0x58	; 88
     7c0:	fc 01       	movw	r30, r24
     7c2:	20 8b       	std	Z+16, r18	; 0x10
	PORTD.PIN4CTRL=0b01011000;
     7c4:	80 e6       	ldi	r24, 0x60	; 96
     7c6:	96 e0       	ldi	r25, 0x06	; 6
     7c8:	28 e5       	ldi	r18, 0x58	; 88
     7ca:	fc 01       	movw	r30, r24
     7cc:	24 8b       	std	Z+20, r18	; 0x14
	PORTD.PIN5CTRL=0b01011000;
     7ce:	80 e6       	ldi	r24, 0x60	; 96
     7d0:	96 e0       	ldi	r25, 0x06	; 6
     7d2:	28 e5       	ldi	r18, 0x58	; 88
     7d4:	fc 01       	movw	r30, r24
     7d6:	25 8b       	std	Z+21, r18	; 0x15
	PORTD.PIN6CTRL=0b01011000;
     7d8:	80 e6       	ldi	r24, 0x60	; 96
     7da:	96 e0       	ldi	r25, 0x06	; 6
     7dc:	28 e5       	ldi	r18, 0x58	; 88
     7de:	fc 01       	movw	r30, r24
     7e0:	26 8b       	std	Z+22, r18	; 0x16
	PORTD.PIN7CTRL=0b01011000;
     7e2:	80 e6       	ldi	r24, 0x60	; 96
     7e4:	96 e0       	ldi	r25, 0x06	; 6
     7e6:	28 e5       	ldi	r18, 0x58	; 88
     7e8:	fc 01       	movw	r30, r24
     7ea:	27 8b       	std	Z+23, r18	; 0x17
}
     7ec:	00 00       	nop
     7ee:	df 91       	pop	r29
     7f0:	cf 91       	pop	r28
     7f2:	08 95       	ret

000007f4 <USARTInit>:
 int stdio_putchar(char c, FILE * stream);
 int stdio_getchar(FILE *stream);
static FILE UsartStdio = FDEV_SETUP_STREAM(stdio_putchar, stdio_getchar,_FDEV_SETUP_WRITE);

void USARTInit(void)
{
     7f4:	cf 93       	push	r28
     7f6:	df 93       	push	r29
     7f8:	cd b7       	in	r28, 0x3d	; 61
     7fa:	de b7       	in	r29, 0x3e	; 62
	USART_PORT.DIRSET=0b00001000;	
     7fc:	80 e6       	ldi	r24, 0x60	; 96
     7fe:	96 e0       	ldi	r25, 0x06	; 6
     800:	28 e0       	ldi	r18, 0x08	; 8
     802:	fc 01       	movw	r30, r24
     804:	21 83       	std	Z+1, r18	; 0x01
	USART_PORT.DIRCLR=0b00000100;
     806:	80 e6       	ldi	r24, 0x60	; 96
     808:	96 e0       	ldi	r25, 0x06	; 6
     80a:	24 e0       	ldi	r18, 0x04	; 4
     80c:	fc 01       	movw	r30, r24
     80e:	22 83       	std	Z+2, r18	; 0x02
	
	USART.CTRLA=0b00000000;
     810:	80 ea       	ldi	r24, 0xA0	; 160
     812:	99 e0       	ldi	r25, 0x09	; 9
     814:	fc 01       	movw	r30, r24
     816:	13 82       	std	Z+3, r1	; 0x03
	USART.CTRLB=0b00011000;
     818:	80 ea       	ldi	r24, 0xA0	; 160
     81a:	99 e0       	ldi	r25, 0x09	; 9
     81c:	28 e1       	ldi	r18, 0x18	; 24
     81e:	fc 01       	movw	r30, r24
     820:	24 83       	std	Z+4, r18	; 0x04
	USART.CTRLC=0b00000011;
     822:	80 ea       	ldi	r24, 0xA0	; 160
     824:	99 e0       	ldi	r25, 0x09	; 9
     826:	23 e0       	ldi	r18, 0x03	; 3
     828:	fc 01       	movw	r30, r24
     82a:	25 83       	std	Z+5, r18	; 0x05
	
	USART.BAUDCTRLA=0xD7; //BSEL=3301, BSCALE=-5 9600 baud
     82c:	80 ea       	ldi	r24, 0xA0	; 160
     82e:	99 e0       	ldi	r25, 0x09	; 9
     830:	27 ed       	ldi	r18, 0xD7	; 215
     832:	fc 01       	movw	r30, r24
     834:	26 83       	std	Z+6, r18	; 0x06
	USART.BAUDCTRLB=0x93; 
     836:	80 ea       	ldi	r24, 0xA0	; 160
     838:	99 e0       	ldi	r25, 0x09	; 9
     83a:	23 e9       	ldi	r18, 0x93	; 147
     83c:	fc 01       	movw	r30, r24
     83e:	27 83       	std	Z+7, r18	; 0x07
	
	stdout=&UsartStdio;
     840:	80 e0       	ldi	r24, 0x00	; 0
     842:	90 e2       	ldi	r25, 0x20	; 32
     844:	80 93 30 20 	sts	0x2030, r24	; 0x802030 <__iob+0x2>
     848:	90 93 31 20 	sts	0x2031, r25	; 0x802031 <__iob+0x3>
	stdin=&UsartStdio;
     84c:	80 e0       	ldi	r24, 0x00	; 0
     84e:	90 e2       	ldi	r25, 0x20	; 32
     850:	80 93 2e 20 	sts	0x202E, r24	; 0x80202e <__iob>
     854:	90 93 2f 20 	sts	0x202F, r25	; 0x80202f <__iob+0x1>
}
     858:	00 00       	nop
     85a:	df 91       	pop	r29
     85c:	cf 91       	pop	r28
     85e:	08 95       	ret

00000860 <stdio_putchar>:


int stdio_putchar(char c, FILE * stream)
{
     860:	cf 93       	push	r28
     862:	df 93       	push	r29
     864:	00 d0       	rcall	.+0      	; 0x866 <stdio_putchar+0x6>
     866:	1f 92       	push	r1
     868:	cd b7       	in	r28, 0x3d	; 61
     86a:	de b7       	in	r29, 0x3e	; 62
     86c:	89 83       	std	Y+1, r24	; 0x01
     86e:	6a 83       	std	Y+2, r22	; 0x02
     870:	7b 83       	std	Y+3, r23	; 0x03
	USART.DATA = c;
     872:	80 ea       	ldi	r24, 0xA0	; 160
     874:	99 e0       	ldi	r25, 0x09	; 9
     876:	29 81       	ldd	r18, Y+1	; 0x01
     878:	fc 01       	movw	r30, r24
     87a:	20 83       	st	Z, r18
	while (!(USART.STATUS & 0b01000000));
     87c:	00 00       	nop
     87e:	80 ea       	ldi	r24, 0xA0	; 160
     880:	99 e0       	ldi	r25, 0x09	; 9
     882:	fc 01       	movw	r30, r24
     884:	81 81       	ldd	r24, Z+1	; 0x01
     886:	88 2f       	mov	r24, r24
     888:	90 e0       	ldi	r25, 0x00	; 0
     88a:	80 74       	andi	r24, 0x40	; 64
     88c:	99 27       	eor	r25, r25
     88e:	89 2b       	or	r24, r25
     890:	b1 f3       	breq	.-20     	; 0x87e <stdio_putchar+0x1e>
	USART.STATUS=0b01000000;
     892:	80 ea       	ldi	r24, 0xA0	; 160
     894:	99 e0       	ldi	r25, 0x09	; 9
     896:	20 e4       	ldi	r18, 0x40	; 64
     898:	fc 01       	movw	r30, r24
     89a:	21 83       	std	Z+1, r18	; 0x01
	return 0;
     89c:	80 e0       	ldi	r24, 0x00	; 0
     89e:	90 e0       	ldi	r25, 0x00	; 0
}
     8a0:	23 96       	adiw	r28, 0x03	; 3
     8a2:	cd bf       	out	0x3d, r28	; 61
     8a4:	de bf       	out	0x3e, r29	; 62
     8a6:	df 91       	pop	r29
     8a8:	cf 91       	pop	r28
     8aa:	08 95       	ret

000008ac <stdio_getchar>:
	
int stdio_getchar(FILE *stream)
{
     8ac:	cf 93       	push	r28
     8ae:	df 93       	push	r29
     8b0:	00 d0       	rcall	.+0      	; 0x8b2 <stdio_getchar+0x6>
     8b2:	cd b7       	in	r28, 0x3d	; 61
     8b4:	de b7       	in	r29, 0x3e	; 62
     8b6:	89 83       	std	Y+1, r24	; 0x01
     8b8:	9a 83       	std	Y+2, r25	; 0x02
	while (!(USART.STATUS & 0b10000000));
     8ba:	00 00       	nop
     8bc:	80 ea       	ldi	r24, 0xA0	; 160
     8be:	99 e0       	ldi	r25, 0x09	; 9
     8c0:	fc 01       	movw	r30, r24
     8c2:	81 81       	ldd	r24, Z+1	; 0x01
     8c4:	88 23       	and	r24, r24
     8c6:	d4 f7       	brge	.-12     	; 0x8bc <stdio_getchar+0x10>
	return USART.DATA;
     8c8:	80 ea       	ldi	r24, 0xA0	; 160
     8ca:	99 e0       	ldi	r25, 0x09	; 9
     8cc:	fc 01       	movw	r30, r24
     8ce:	80 81       	ld	r24, Z
     8d0:	88 2f       	mov	r24, r24
     8d2:	90 e0       	ldi	r25, 0x00	; 0
}
     8d4:	0f 90       	pop	r0
     8d6:	0f 90       	pop	r0
     8d8:	df 91       	pop	r29
     8da:	cf 91       	pop	r28
     8dc:	08 95       	ret

000008de <__cmpsf2>:
     8de:	0e 94 a3 04 	call	0x946	; 0x946 <__fp_cmp>
     8e2:	08 f4       	brcc	.+2      	; 0x8e6 <__cmpsf2+0x8>
     8e4:	81 e0       	ldi	r24, 0x01	; 1
     8e6:	08 95       	ret

000008e8 <__fixunssfsi>:
     8e8:	0e 94 cf 04 	call	0x99e	; 0x99e <__fp_splitA>
     8ec:	88 f0       	brcs	.+34     	; 0x910 <__fixunssfsi+0x28>
     8ee:	9f 57       	subi	r25, 0x7F	; 127
     8f0:	98 f0       	brcs	.+38     	; 0x918 <__fixunssfsi+0x30>
     8f2:	b9 2f       	mov	r27, r25
     8f4:	99 27       	eor	r25, r25
     8f6:	b7 51       	subi	r27, 0x17	; 23
     8f8:	b0 f0       	brcs	.+44     	; 0x926 <__fixunssfsi+0x3e>
     8fa:	e1 f0       	breq	.+56     	; 0x934 <__fixunssfsi+0x4c>
     8fc:	66 0f       	add	r22, r22
     8fe:	77 1f       	adc	r23, r23
     900:	88 1f       	adc	r24, r24
     902:	99 1f       	adc	r25, r25
     904:	1a f0       	brmi	.+6      	; 0x90c <__fixunssfsi+0x24>
     906:	ba 95       	dec	r27
     908:	c9 f7       	brne	.-14     	; 0x8fc <__fixunssfsi+0x14>
     90a:	14 c0       	rjmp	.+40     	; 0x934 <__fixunssfsi+0x4c>
     90c:	b1 30       	cpi	r27, 0x01	; 1
     90e:	91 f0       	breq	.+36     	; 0x934 <__fixunssfsi+0x4c>
     910:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <__fp_zero>
     914:	b1 e0       	ldi	r27, 0x01	; 1
     916:	08 95       	ret
     918:	0c 94 e9 04 	jmp	0x9d2	; 0x9d2 <__fp_zero>
     91c:	67 2f       	mov	r22, r23
     91e:	78 2f       	mov	r23, r24
     920:	88 27       	eor	r24, r24
     922:	b8 5f       	subi	r27, 0xF8	; 248
     924:	39 f0       	breq	.+14     	; 0x934 <__fixunssfsi+0x4c>
     926:	b9 3f       	cpi	r27, 0xF9	; 249
     928:	cc f3       	brlt	.-14     	; 0x91c <__fixunssfsi+0x34>
     92a:	86 95       	lsr	r24
     92c:	77 95       	ror	r23
     92e:	67 95       	ror	r22
     930:	b3 95       	inc	r27
     932:	d9 f7       	brne	.-10     	; 0x92a <__fixunssfsi+0x42>
     934:	3e f4       	brtc	.+14     	; 0x944 <__fixunssfsi+0x5c>
     936:	90 95       	com	r25
     938:	80 95       	com	r24
     93a:	70 95       	com	r23
     93c:	61 95       	neg	r22
     93e:	7f 4f       	sbci	r23, 0xFF	; 255
     940:	8f 4f       	sbci	r24, 0xFF	; 255
     942:	9f 4f       	sbci	r25, 0xFF	; 255
     944:	08 95       	ret

00000946 <__fp_cmp>:
     946:	99 0f       	add	r25, r25
     948:	00 08       	sbc	r0, r0
     94a:	55 0f       	add	r21, r21
     94c:	aa 0b       	sbc	r26, r26
     94e:	e0 e8       	ldi	r30, 0x80	; 128
     950:	fe ef       	ldi	r31, 0xFE	; 254
     952:	16 16       	cp	r1, r22
     954:	17 06       	cpc	r1, r23
     956:	e8 07       	cpc	r30, r24
     958:	f9 07       	cpc	r31, r25
     95a:	c0 f0       	brcs	.+48     	; 0x98c <__fp_cmp+0x46>
     95c:	12 16       	cp	r1, r18
     95e:	13 06       	cpc	r1, r19
     960:	e4 07       	cpc	r30, r20
     962:	f5 07       	cpc	r31, r21
     964:	98 f0       	brcs	.+38     	; 0x98c <__fp_cmp+0x46>
     966:	62 1b       	sub	r22, r18
     968:	73 0b       	sbc	r23, r19
     96a:	84 0b       	sbc	r24, r20
     96c:	95 0b       	sbc	r25, r21
     96e:	39 f4       	brne	.+14     	; 0x97e <__fp_cmp+0x38>
     970:	0a 26       	eor	r0, r26
     972:	61 f0       	breq	.+24     	; 0x98c <__fp_cmp+0x46>
     974:	23 2b       	or	r18, r19
     976:	24 2b       	or	r18, r20
     978:	25 2b       	or	r18, r21
     97a:	21 f4       	brne	.+8      	; 0x984 <__fp_cmp+0x3e>
     97c:	08 95       	ret
     97e:	0a 26       	eor	r0, r26
     980:	09 f4       	brne	.+2      	; 0x984 <__fp_cmp+0x3e>
     982:	a1 40       	sbci	r26, 0x01	; 1
     984:	a6 95       	lsr	r26
     986:	8f ef       	ldi	r24, 0xFF	; 255
     988:	81 1d       	adc	r24, r1
     98a:	81 1d       	adc	r24, r1
     98c:	08 95       	ret

0000098e <__fp_split3>:
     98e:	57 fd       	sbrc	r21, 7
     990:	90 58       	subi	r25, 0x80	; 128
     992:	44 0f       	add	r20, r20
     994:	55 1f       	adc	r21, r21
     996:	59 f0       	breq	.+22     	; 0x9ae <__fp_splitA+0x10>
     998:	5f 3f       	cpi	r21, 0xFF	; 255
     99a:	71 f0       	breq	.+28     	; 0x9b8 <__fp_splitA+0x1a>
     99c:	47 95       	ror	r20

0000099e <__fp_splitA>:
     99e:	88 0f       	add	r24, r24
     9a0:	97 fb       	bst	r25, 7
     9a2:	99 1f       	adc	r25, r25
     9a4:	61 f0       	breq	.+24     	; 0x9be <__fp_splitA+0x20>
     9a6:	9f 3f       	cpi	r25, 0xFF	; 255
     9a8:	79 f0       	breq	.+30     	; 0x9c8 <__fp_splitA+0x2a>
     9aa:	87 95       	ror	r24
     9ac:	08 95       	ret
     9ae:	12 16       	cp	r1, r18
     9b0:	13 06       	cpc	r1, r19
     9b2:	14 06       	cpc	r1, r20
     9b4:	55 1f       	adc	r21, r21
     9b6:	f2 cf       	rjmp	.-28     	; 0x99c <__fp_split3+0xe>
     9b8:	46 95       	lsr	r20
     9ba:	f1 df       	rcall	.-30     	; 0x99e <__fp_splitA>
     9bc:	08 c0       	rjmp	.+16     	; 0x9ce <__fp_splitA+0x30>
     9be:	16 16       	cp	r1, r22
     9c0:	17 06       	cpc	r1, r23
     9c2:	18 06       	cpc	r1, r24
     9c4:	99 1f       	adc	r25, r25
     9c6:	f1 cf       	rjmp	.-30     	; 0x9aa <__fp_splitA+0xc>
     9c8:	86 95       	lsr	r24
     9ca:	71 05       	cpc	r23, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	08 94       	sec
     9d0:	08 95       	ret

000009d2 <__fp_zero>:
     9d2:	e8 94       	clt

000009d4 <__fp_szero>:
     9d4:	bb 27       	eor	r27, r27
     9d6:	66 27       	eor	r22, r22
     9d8:	77 27       	eor	r23, r23
     9da:	cb 01       	movw	r24, r22
     9dc:	97 f9       	bld	r25, 7
     9de:	08 95       	ret

000009e0 <__gesf2>:
     9e0:	0e 94 a3 04 	call	0x946	; 0x946 <__fp_cmp>
     9e4:	08 f4       	brcc	.+2      	; 0x9e8 <__gesf2+0x8>
     9e6:	8f ef       	ldi	r24, 0xFF	; 255
     9e8:	08 95       	ret

000009ea <__mulsf3>:
     9ea:	0e 94 08 05 	call	0xa10	; 0xa10 <__mulsf3x>
     9ee:	0c 94 79 05 	jmp	0xaf2	; 0xaf2 <__fp_round>
     9f2:	0e 94 6b 05 	call	0xad6	; 0xad6 <__fp_pscA>
     9f6:	38 f0       	brcs	.+14     	; 0xa06 <__mulsf3+0x1c>
     9f8:	0e 94 72 05 	call	0xae4	; 0xae4 <__fp_pscB>
     9fc:	20 f0       	brcs	.+8      	; 0xa06 <__mulsf3+0x1c>
     9fe:	95 23       	and	r25, r21
     a00:	11 f0       	breq	.+4      	; 0xa06 <__mulsf3+0x1c>
     a02:	0c 94 62 05 	jmp	0xac4	; 0xac4 <__fp_inf>
     a06:	0c 94 68 05 	jmp	0xad0	; 0xad0 <__fp_nan>
     a0a:	11 24       	eor	r1, r1
     a0c:	0c 94 ea 04 	jmp	0x9d4	; 0x9d4 <__fp_szero>

00000a10 <__mulsf3x>:
     a10:	0e 94 c7 04 	call	0x98e	; 0x98e <__fp_split3>
     a14:	70 f3       	brcs	.-36     	; 0x9f2 <__mulsf3+0x8>

00000a16 <__mulsf3_pse>:
     a16:	95 9f       	mul	r25, r21
     a18:	c1 f3       	breq	.-16     	; 0xa0a <__mulsf3+0x20>
     a1a:	95 0f       	add	r25, r21
     a1c:	50 e0       	ldi	r21, 0x00	; 0
     a1e:	55 1f       	adc	r21, r21
     a20:	62 9f       	mul	r22, r18
     a22:	f0 01       	movw	r30, r0
     a24:	72 9f       	mul	r23, r18
     a26:	bb 27       	eor	r27, r27
     a28:	f0 0d       	add	r31, r0
     a2a:	b1 1d       	adc	r27, r1
     a2c:	63 9f       	mul	r22, r19
     a2e:	aa 27       	eor	r26, r26
     a30:	f0 0d       	add	r31, r0
     a32:	b1 1d       	adc	r27, r1
     a34:	aa 1f       	adc	r26, r26
     a36:	64 9f       	mul	r22, r20
     a38:	66 27       	eor	r22, r22
     a3a:	b0 0d       	add	r27, r0
     a3c:	a1 1d       	adc	r26, r1
     a3e:	66 1f       	adc	r22, r22
     a40:	82 9f       	mul	r24, r18
     a42:	22 27       	eor	r18, r18
     a44:	b0 0d       	add	r27, r0
     a46:	a1 1d       	adc	r26, r1
     a48:	62 1f       	adc	r22, r18
     a4a:	73 9f       	mul	r23, r19
     a4c:	b0 0d       	add	r27, r0
     a4e:	a1 1d       	adc	r26, r1
     a50:	62 1f       	adc	r22, r18
     a52:	83 9f       	mul	r24, r19
     a54:	a0 0d       	add	r26, r0
     a56:	61 1d       	adc	r22, r1
     a58:	22 1f       	adc	r18, r18
     a5a:	74 9f       	mul	r23, r20
     a5c:	33 27       	eor	r19, r19
     a5e:	a0 0d       	add	r26, r0
     a60:	61 1d       	adc	r22, r1
     a62:	23 1f       	adc	r18, r19
     a64:	84 9f       	mul	r24, r20
     a66:	60 0d       	add	r22, r0
     a68:	21 1d       	adc	r18, r1
     a6a:	82 2f       	mov	r24, r18
     a6c:	76 2f       	mov	r23, r22
     a6e:	6a 2f       	mov	r22, r26
     a70:	11 24       	eor	r1, r1
     a72:	9f 57       	subi	r25, 0x7F	; 127
     a74:	50 40       	sbci	r21, 0x00	; 0
     a76:	9a f0       	brmi	.+38     	; 0xa9e <__mulsf3_pse+0x88>
     a78:	f1 f0       	breq	.+60     	; 0xab6 <__mulsf3_pse+0xa0>
     a7a:	88 23       	and	r24, r24
     a7c:	4a f0       	brmi	.+18     	; 0xa90 <__mulsf3_pse+0x7a>
     a7e:	ee 0f       	add	r30, r30
     a80:	ff 1f       	adc	r31, r31
     a82:	bb 1f       	adc	r27, r27
     a84:	66 1f       	adc	r22, r22
     a86:	77 1f       	adc	r23, r23
     a88:	88 1f       	adc	r24, r24
     a8a:	91 50       	subi	r25, 0x01	; 1
     a8c:	50 40       	sbci	r21, 0x00	; 0
     a8e:	a9 f7       	brne	.-22     	; 0xa7a <__mulsf3_pse+0x64>
     a90:	9e 3f       	cpi	r25, 0xFE	; 254
     a92:	51 05       	cpc	r21, r1
     a94:	80 f0       	brcs	.+32     	; 0xab6 <__mulsf3_pse+0xa0>
     a96:	0c 94 62 05 	jmp	0xac4	; 0xac4 <__fp_inf>
     a9a:	0c 94 ea 04 	jmp	0x9d4	; 0x9d4 <__fp_szero>
     a9e:	5f 3f       	cpi	r21, 0xFF	; 255
     aa0:	e4 f3       	brlt	.-8      	; 0xa9a <__mulsf3_pse+0x84>
     aa2:	98 3e       	cpi	r25, 0xE8	; 232
     aa4:	d4 f3       	brlt	.-12     	; 0xa9a <__mulsf3_pse+0x84>
     aa6:	86 95       	lsr	r24
     aa8:	77 95       	ror	r23
     aaa:	67 95       	ror	r22
     aac:	b7 95       	ror	r27
     aae:	f7 95       	ror	r31
     ab0:	e7 95       	ror	r30
     ab2:	9f 5f       	subi	r25, 0xFF	; 255
     ab4:	c1 f7       	brne	.-16     	; 0xaa6 <__mulsf3_pse+0x90>
     ab6:	fe 2b       	or	r31, r30
     ab8:	88 0f       	add	r24, r24
     aba:	91 1d       	adc	r25, r1
     abc:	96 95       	lsr	r25
     abe:	87 95       	ror	r24
     ac0:	97 f9       	bld	r25, 7
     ac2:	08 95       	ret

00000ac4 <__fp_inf>:
     ac4:	97 f9       	bld	r25, 7
     ac6:	9f 67       	ori	r25, 0x7F	; 127
     ac8:	80 e8       	ldi	r24, 0x80	; 128
     aca:	70 e0       	ldi	r23, 0x00	; 0
     acc:	60 e0       	ldi	r22, 0x00	; 0
     ace:	08 95       	ret

00000ad0 <__fp_nan>:
     ad0:	9f ef       	ldi	r25, 0xFF	; 255
     ad2:	80 ec       	ldi	r24, 0xC0	; 192
     ad4:	08 95       	ret

00000ad6 <__fp_pscA>:
     ad6:	00 24       	eor	r0, r0
     ad8:	0a 94       	dec	r0
     ada:	16 16       	cp	r1, r22
     adc:	17 06       	cpc	r1, r23
     ade:	18 06       	cpc	r1, r24
     ae0:	09 06       	cpc	r0, r25
     ae2:	08 95       	ret

00000ae4 <__fp_pscB>:
     ae4:	00 24       	eor	r0, r0
     ae6:	0a 94       	dec	r0
     ae8:	12 16       	cp	r1, r18
     aea:	13 06       	cpc	r1, r19
     aec:	14 06       	cpc	r1, r20
     aee:	05 06       	cpc	r0, r21
     af0:	08 95       	ret

00000af2 <__fp_round>:
     af2:	09 2e       	mov	r0, r25
     af4:	03 94       	inc	r0
     af6:	00 0c       	add	r0, r0
     af8:	11 f4       	brne	.+4      	; 0xafe <__fp_round+0xc>
     afa:	88 23       	and	r24, r24
     afc:	52 f0       	brmi	.+20     	; 0xb12 <__fp_round+0x20>
     afe:	bb 0f       	add	r27, r27
     b00:	40 f4       	brcc	.+16     	; 0xb12 <__fp_round+0x20>
     b02:	bf 2b       	or	r27, r31
     b04:	11 f4       	brne	.+4      	; 0xb0a <__fp_round+0x18>
     b06:	60 ff       	sbrs	r22, 0
     b08:	04 c0       	rjmp	.+8      	; 0xb12 <__fp_round+0x20>
     b0a:	6f 5f       	subi	r22, 0xFF	; 255
     b0c:	7f 4f       	sbci	r23, 0xFF	; 255
     b0e:	8f 4f       	sbci	r24, 0xFF	; 255
     b10:	9f 4f       	sbci	r25, 0xFF	; 255
     b12:	08 95       	ret

00000b14 <__tablejump2__>:
     b14:	ee 0f       	add	r30, r30
     b16:	ff 1f       	adc	r31, r31
     b18:	05 90       	lpm	r0, Z+
     b1a:	f4 91       	lpm	r31, Z
     b1c:	e0 2d       	mov	r30, r0
     b1e:	09 94       	ijmp

00000b20 <puts>:
     b20:	0f 93       	push	r16
     b22:	1f 93       	push	r17
     b24:	cf 93       	push	r28
     b26:	df 93       	push	r29
     b28:	e0 91 30 20 	lds	r30, 0x2030	; 0x802030 <__iob+0x2>
     b2c:	f0 91 31 20 	lds	r31, 0x2031	; 0x802031 <__iob+0x3>
     b30:	23 81       	ldd	r18, Z+3	; 0x03
     b32:	21 ff       	sbrs	r18, 1
     b34:	1b c0       	rjmp	.+54     	; 0xb6c <puts+0x4c>
     b36:	8c 01       	movw	r16, r24
     b38:	d0 e0       	ldi	r29, 0x00	; 0
     b3a:	c0 e0       	ldi	r28, 0x00	; 0
     b3c:	f8 01       	movw	r30, r16
     b3e:	81 91       	ld	r24, Z+
     b40:	8f 01       	movw	r16, r30
     b42:	60 91 30 20 	lds	r22, 0x2030	; 0x802030 <__iob+0x2>
     b46:	70 91 31 20 	lds	r23, 0x2031	; 0x802031 <__iob+0x3>
     b4a:	db 01       	movw	r26, r22
     b4c:	18 96       	adiw	r26, 0x08	; 8
     b4e:	ed 91       	ld	r30, X+
     b50:	fc 91       	ld	r31, X
     b52:	19 97       	sbiw	r26, 0x09	; 9
     b54:	88 23       	and	r24, r24
     b56:	31 f0       	breq	.+12     	; 0xb64 <puts+0x44>
     b58:	09 95       	icall
     b5a:	89 2b       	or	r24, r25
     b5c:	79 f3       	breq	.-34     	; 0xb3c <puts+0x1c>
     b5e:	df ef       	ldi	r29, 0xFF	; 255
     b60:	cf ef       	ldi	r28, 0xFF	; 255
     b62:	ec cf       	rjmp	.-40     	; 0xb3c <puts+0x1c>
     b64:	8a e0       	ldi	r24, 0x0A	; 10
     b66:	09 95       	icall
     b68:	89 2b       	or	r24, r25
     b6a:	19 f0       	breq	.+6      	; 0xb72 <puts+0x52>
     b6c:	8f ef       	ldi	r24, 0xFF	; 255
     b6e:	9f ef       	ldi	r25, 0xFF	; 255
     b70:	02 c0       	rjmp	.+4      	; 0xb76 <puts+0x56>
     b72:	8d 2f       	mov	r24, r29
     b74:	9c 2f       	mov	r25, r28
     b76:	df 91       	pop	r29
     b78:	cf 91       	pop	r28
     b7a:	1f 91       	pop	r17
     b7c:	0f 91       	pop	r16
     b7e:	08 95       	ret

00000b80 <sprintf>:
     b80:	ae e0       	ldi	r26, 0x0E	; 14
     b82:	b0 e0       	ldi	r27, 0x00	; 0
     b84:	e6 ec       	ldi	r30, 0xC6	; 198
     b86:	f5 e0       	ldi	r31, 0x05	; 5
     b88:	0c 94 81 08 	jmp	0x1102	; 0x1102 <__prologue_saves__+0x1c>
     b8c:	0d 89       	ldd	r16, Y+21	; 0x15
     b8e:	1e 89       	ldd	r17, Y+22	; 0x16
     b90:	86 e0       	ldi	r24, 0x06	; 6
     b92:	8c 83       	std	Y+4, r24	; 0x04
     b94:	09 83       	std	Y+1, r16	; 0x01
     b96:	1a 83       	std	Y+2, r17	; 0x02
     b98:	8f ef       	ldi	r24, 0xFF	; 255
     b9a:	9f e7       	ldi	r25, 0x7F	; 127
     b9c:	8d 83       	std	Y+5, r24	; 0x05
     b9e:	9e 83       	std	Y+6, r25	; 0x06
     ba0:	ae 01       	movw	r20, r28
     ba2:	47 5e       	subi	r20, 0xE7	; 231
     ba4:	5f 4f       	sbci	r21, 0xFF	; 255
     ba6:	6f 89       	ldd	r22, Y+23	; 0x17
     ba8:	78 8d       	ldd	r23, Y+24	; 0x18
     baa:	ce 01       	movw	r24, r28
     bac:	01 96       	adiw	r24, 0x01	; 1
     bae:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <vfprintf>
     bb2:	ef 81       	ldd	r30, Y+7	; 0x07
     bb4:	f8 85       	ldd	r31, Y+8	; 0x08
     bb6:	e0 0f       	add	r30, r16
     bb8:	f1 1f       	adc	r31, r17
     bba:	10 82       	st	Z, r1
     bbc:	2e 96       	adiw	r28, 0x0e	; 14
     bbe:	e4 e0       	ldi	r30, 0x04	; 4
     bc0:	0c 94 9a 08 	jmp	0x1134	; 0x1134 <__epilogue_restores__+0x1c>

00000bc4 <vfprintf>:
     bc4:	ab e0       	ldi	r26, 0x0B	; 11
     bc6:	b0 e0       	ldi	r27, 0x00	; 0
     bc8:	e8 ee       	ldi	r30, 0xE8	; 232
     bca:	f5 e0       	ldi	r31, 0x05	; 5
     bcc:	0c 94 73 08 	jmp	0x10e6	; 0x10e6 <__prologue_saves__>
     bd0:	6c 01       	movw	r12, r24
     bd2:	7b 01       	movw	r14, r22
     bd4:	8a 01       	movw	r16, r20
     bd6:	fc 01       	movw	r30, r24
     bd8:	16 82       	std	Z+6, r1	; 0x06
     bda:	17 82       	std	Z+7, r1	; 0x07
     bdc:	83 81       	ldd	r24, Z+3	; 0x03
     bde:	81 ff       	sbrs	r24, 1
     be0:	cc c1       	rjmp	.+920    	; 0xf7a <vfprintf+0x3b6>
     be2:	ce 01       	movw	r24, r28
     be4:	01 96       	adiw	r24, 0x01	; 1
     be6:	3c 01       	movw	r6, r24
     be8:	f6 01       	movw	r30, r12
     bea:	93 81       	ldd	r25, Z+3	; 0x03
     bec:	f7 01       	movw	r30, r14
     bee:	93 fd       	sbrc	r25, 3
     bf0:	85 91       	lpm	r24, Z+
     bf2:	93 ff       	sbrs	r25, 3
     bf4:	81 91       	ld	r24, Z+
     bf6:	7f 01       	movw	r14, r30
     bf8:	88 23       	and	r24, r24
     bfa:	09 f4       	brne	.+2      	; 0xbfe <vfprintf+0x3a>
     bfc:	ba c1       	rjmp	.+884    	; 0xf72 <vfprintf+0x3ae>
     bfe:	85 32       	cpi	r24, 0x25	; 37
     c00:	39 f4       	brne	.+14     	; 0xc10 <vfprintf+0x4c>
     c02:	93 fd       	sbrc	r25, 3
     c04:	85 91       	lpm	r24, Z+
     c06:	93 ff       	sbrs	r25, 3
     c08:	81 91       	ld	r24, Z+
     c0a:	7f 01       	movw	r14, r30
     c0c:	85 32       	cpi	r24, 0x25	; 37
     c0e:	29 f4       	brne	.+10     	; 0xc1a <vfprintf+0x56>
     c10:	b6 01       	movw	r22, r12
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <fputc>
     c18:	e7 cf       	rjmp	.-50     	; 0xbe8 <vfprintf+0x24>
     c1a:	91 2c       	mov	r9, r1
     c1c:	21 2c       	mov	r2, r1
     c1e:	31 2c       	mov	r3, r1
     c20:	ff e1       	ldi	r31, 0x1F	; 31
     c22:	f3 15       	cp	r31, r3
     c24:	d8 f0       	brcs	.+54     	; 0xc5c <vfprintf+0x98>
     c26:	8b 32       	cpi	r24, 0x2B	; 43
     c28:	79 f0       	breq	.+30     	; 0xc48 <vfprintf+0x84>
     c2a:	38 f4       	brcc	.+14     	; 0xc3a <vfprintf+0x76>
     c2c:	80 32       	cpi	r24, 0x20	; 32
     c2e:	79 f0       	breq	.+30     	; 0xc4e <vfprintf+0x8a>
     c30:	83 32       	cpi	r24, 0x23	; 35
     c32:	a1 f4       	brne	.+40     	; 0xc5c <vfprintf+0x98>
     c34:	23 2d       	mov	r18, r3
     c36:	20 61       	ori	r18, 0x10	; 16
     c38:	1d c0       	rjmp	.+58     	; 0xc74 <vfprintf+0xb0>
     c3a:	8d 32       	cpi	r24, 0x2D	; 45
     c3c:	61 f0       	breq	.+24     	; 0xc56 <vfprintf+0x92>
     c3e:	80 33       	cpi	r24, 0x30	; 48
     c40:	69 f4       	brne	.+26     	; 0xc5c <vfprintf+0x98>
     c42:	23 2d       	mov	r18, r3
     c44:	21 60       	ori	r18, 0x01	; 1
     c46:	16 c0       	rjmp	.+44     	; 0xc74 <vfprintf+0xb0>
     c48:	83 2d       	mov	r24, r3
     c4a:	82 60       	ori	r24, 0x02	; 2
     c4c:	38 2e       	mov	r3, r24
     c4e:	e3 2d       	mov	r30, r3
     c50:	e4 60       	ori	r30, 0x04	; 4
     c52:	3e 2e       	mov	r3, r30
     c54:	2a c0       	rjmp	.+84     	; 0xcaa <vfprintf+0xe6>
     c56:	f3 2d       	mov	r31, r3
     c58:	f8 60       	ori	r31, 0x08	; 8
     c5a:	1d c0       	rjmp	.+58     	; 0xc96 <vfprintf+0xd2>
     c5c:	37 fc       	sbrc	r3, 7
     c5e:	2d c0       	rjmp	.+90     	; 0xcba <vfprintf+0xf6>
     c60:	20 ed       	ldi	r18, 0xD0	; 208
     c62:	28 0f       	add	r18, r24
     c64:	2a 30       	cpi	r18, 0x0A	; 10
     c66:	40 f0       	brcs	.+16     	; 0xc78 <vfprintf+0xb4>
     c68:	8e 32       	cpi	r24, 0x2E	; 46
     c6a:	b9 f4       	brne	.+46     	; 0xc9a <vfprintf+0xd6>
     c6c:	36 fc       	sbrc	r3, 6
     c6e:	81 c1       	rjmp	.+770    	; 0xf72 <vfprintf+0x3ae>
     c70:	23 2d       	mov	r18, r3
     c72:	20 64       	ori	r18, 0x40	; 64
     c74:	32 2e       	mov	r3, r18
     c76:	19 c0       	rjmp	.+50     	; 0xcaa <vfprintf+0xe6>
     c78:	36 fe       	sbrs	r3, 6
     c7a:	06 c0       	rjmp	.+12     	; 0xc88 <vfprintf+0xc4>
     c7c:	8a e0       	ldi	r24, 0x0A	; 10
     c7e:	98 9e       	mul	r9, r24
     c80:	20 0d       	add	r18, r0
     c82:	11 24       	eor	r1, r1
     c84:	92 2e       	mov	r9, r18
     c86:	11 c0       	rjmp	.+34     	; 0xcaa <vfprintf+0xe6>
     c88:	ea e0       	ldi	r30, 0x0A	; 10
     c8a:	2e 9e       	mul	r2, r30
     c8c:	20 0d       	add	r18, r0
     c8e:	11 24       	eor	r1, r1
     c90:	22 2e       	mov	r2, r18
     c92:	f3 2d       	mov	r31, r3
     c94:	f0 62       	ori	r31, 0x20	; 32
     c96:	3f 2e       	mov	r3, r31
     c98:	08 c0       	rjmp	.+16     	; 0xcaa <vfprintf+0xe6>
     c9a:	8c 36       	cpi	r24, 0x6C	; 108
     c9c:	21 f4       	brne	.+8      	; 0xca6 <vfprintf+0xe2>
     c9e:	83 2d       	mov	r24, r3
     ca0:	80 68       	ori	r24, 0x80	; 128
     ca2:	38 2e       	mov	r3, r24
     ca4:	02 c0       	rjmp	.+4      	; 0xcaa <vfprintf+0xe6>
     ca6:	88 36       	cpi	r24, 0x68	; 104
     ca8:	41 f4       	brne	.+16     	; 0xcba <vfprintf+0xf6>
     caa:	f7 01       	movw	r30, r14
     cac:	93 fd       	sbrc	r25, 3
     cae:	85 91       	lpm	r24, Z+
     cb0:	93 ff       	sbrs	r25, 3
     cb2:	81 91       	ld	r24, Z+
     cb4:	7f 01       	movw	r14, r30
     cb6:	81 11       	cpse	r24, r1
     cb8:	b3 cf       	rjmp	.-154    	; 0xc20 <vfprintf+0x5c>
     cba:	98 2f       	mov	r25, r24
     cbc:	9f 7d       	andi	r25, 0xDF	; 223
     cbe:	95 54       	subi	r25, 0x45	; 69
     cc0:	93 30       	cpi	r25, 0x03	; 3
     cc2:	28 f4       	brcc	.+10     	; 0xcce <vfprintf+0x10a>
     cc4:	0c 5f       	subi	r16, 0xFC	; 252
     cc6:	1f 4f       	sbci	r17, 0xFF	; 255
     cc8:	9f e3       	ldi	r25, 0x3F	; 63
     cca:	99 83       	std	Y+1, r25	; 0x01
     ccc:	0d c0       	rjmp	.+26     	; 0xce8 <vfprintf+0x124>
     cce:	83 36       	cpi	r24, 0x63	; 99
     cd0:	31 f0       	breq	.+12     	; 0xcde <vfprintf+0x11a>
     cd2:	83 37       	cpi	r24, 0x73	; 115
     cd4:	71 f0       	breq	.+28     	; 0xcf2 <vfprintf+0x12e>
     cd6:	83 35       	cpi	r24, 0x53	; 83
     cd8:	09 f0       	breq	.+2      	; 0xcdc <vfprintf+0x118>
     cda:	59 c0       	rjmp	.+178    	; 0xd8e <vfprintf+0x1ca>
     cdc:	21 c0       	rjmp	.+66     	; 0xd20 <vfprintf+0x15c>
     cde:	f8 01       	movw	r30, r16
     ce0:	80 81       	ld	r24, Z
     ce2:	89 83       	std	Y+1, r24	; 0x01
     ce4:	0e 5f       	subi	r16, 0xFE	; 254
     ce6:	1f 4f       	sbci	r17, 0xFF	; 255
     ce8:	88 24       	eor	r8, r8
     cea:	83 94       	inc	r8
     cec:	91 2c       	mov	r9, r1
     cee:	53 01       	movw	r10, r6
     cf0:	13 c0       	rjmp	.+38     	; 0xd18 <vfprintf+0x154>
     cf2:	28 01       	movw	r4, r16
     cf4:	f2 e0       	ldi	r31, 0x02	; 2
     cf6:	4f 0e       	add	r4, r31
     cf8:	51 1c       	adc	r5, r1
     cfa:	f8 01       	movw	r30, r16
     cfc:	a0 80       	ld	r10, Z
     cfe:	b1 80       	ldd	r11, Z+1	; 0x01
     d00:	36 fe       	sbrs	r3, 6
     d02:	03 c0       	rjmp	.+6      	; 0xd0a <vfprintf+0x146>
     d04:	69 2d       	mov	r22, r9
     d06:	70 e0       	ldi	r23, 0x00	; 0
     d08:	02 c0       	rjmp	.+4      	; 0xd0e <vfprintf+0x14a>
     d0a:	6f ef       	ldi	r22, 0xFF	; 255
     d0c:	7f ef       	ldi	r23, 0xFF	; 255
     d0e:	c5 01       	movw	r24, r10
     d10:	0e 94 ce 07 	call	0xf9c	; 0xf9c <strnlen>
     d14:	4c 01       	movw	r8, r24
     d16:	82 01       	movw	r16, r4
     d18:	f3 2d       	mov	r31, r3
     d1a:	ff 77       	andi	r31, 0x7F	; 127
     d1c:	3f 2e       	mov	r3, r31
     d1e:	16 c0       	rjmp	.+44     	; 0xd4c <vfprintf+0x188>
     d20:	28 01       	movw	r4, r16
     d22:	22 e0       	ldi	r18, 0x02	; 2
     d24:	42 0e       	add	r4, r18
     d26:	51 1c       	adc	r5, r1
     d28:	f8 01       	movw	r30, r16
     d2a:	a0 80       	ld	r10, Z
     d2c:	b1 80       	ldd	r11, Z+1	; 0x01
     d2e:	36 fe       	sbrs	r3, 6
     d30:	03 c0       	rjmp	.+6      	; 0xd38 <vfprintf+0x174>
     d32:	69 2d       	mov	r22, r9
     d34:	70 e0       	ldi	r23, 0x00	; 0
     d36:	02 c0       	rjmp	.+4      	; 0xd3c <vfprintf+0x178>
     d38:	6f ef       	ldi	r22, 0xFF	; 255
     d3a:	7f ef       	ldi	r23, 0xFF	; 255
     d3c:	c5 01       	movw	r24, r10
     d3e:	0e 94 c3 07 	call	0xf86	; 0xf86 <strnlen_P>
     d42:	4c 01       	movw	r8, r24
     d44:	f3 2d       	mov	r31, r3
     d46:	f0 68       	ori	r31, 0x80	; 128
     d48:	3f 2e       	mov	r3, r31
     d4a:	82 01       	movw	r16, r4
     d4c:	33 fc       	sbrc	r3, 3
     d4e:	1b c0       	rjmp	.+54     	; 0xd86 <vfprintf+0x1c2>
     d50:	82 2d       	mov	r24, r2
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	88 16       	cp	r8, r24
     d56:	99 06       	cpc	r9, r25
     d58:	b0 f4       	brcc	.+44     	; 0xd86 <vfprintf+0x1c2>
     d5a:	b6 01       	movw	r22, r12
     d5c:	80 e2       	ldi	r24, 0x20	; 32
     d5e:	90 e0       	ldi	r25, 0x00	; 0
     d60:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <fputc>
     d64:	2a 94       	dec	r2
     d66:	f4 cf       	rjmp	.-24     	; 0xd50 <vfprintf+0x18c>
     d68:	f5 01       	movw	r30, r10
     d6a:	37 fc       	sbrc	r3, 7
     d6c:	85 91       	lpm	r24, Z+
     d6e:	37 fe       	sbrs	r3, 7
     d70:	81 91       	ld	r24, Z+
     d72:	5f 01       	movw	r10, r30
     d74:	b6 01       	movw	r22, r12
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <fputc>
     d7c:	21 10       	cpse	r2, r1
     d7e:	2a 94       	dec	r2
     d80:	21 e0       	ldi	r18, 0x01	; 1
     d82:	82 1a       	sub	r8, r18
     d84:	91 08       	sbc	r9, r1
     d86:	81 14       	cp	r8, r1
     d88:	91 04       	cpc	r9, r1
     d8a:	71 f7       	brne	.-36     	; 0xd68 <vfprintf+0x1a4>
     d8c:	e8 c0       	rjmp	.+464    	; 0xf5e <vfprintf+0x39a>
     d8e:	84 36       	cpi	r24, 0x64	; 100
     d90:	11 f0       	breq	.+4      	; 0xd96 <vfprintf+0x1d2>
     d92:	89 36       	cpi	r24, 0x69	; 105
     d94:	41 f5       	brne	.+80     	; 0xde6 <vfprintf+0x222>
     d96:	f8 01       	movw	r30, r16
     d98:	37 fe       	sbrs	r3, 7
     d9a:	07 c0       	rjmp	.+14     	; 0xdaa <vfprintf+0x1e6>
     d9c:	60 81       	ld	r22, Z
     d9e:	71 81       	ldd	r23, Z+1	; 0x01
     da0:	82 81       	ldd	r24, Z+2	; 0x02
     da2:	93 81       	ldd	r25, Z+3	; 0x03
     da4:	0c 5f       	subi	r16, 0xFC	; 252
     da6:	1f 4f       	sbci	r17, 0xFF	; 255
     da8:	08 c0       	rjmp	.+16     	; 0xdba <vfprintf+0x1f6>
     daa:	60 81       	ld	r22, Z
     dac:	71 81       	ldd	r23, Z+1	; 0x01
     dae:	07 2e       	mov	r0, r23
     db0:	00 0c       	add	r0, r0
     db2:	88 0b       	sbc	r24, r24
     db4:	99 0b       	sbc	r25, r25
     db6:	0e 5f       	subi	r16, 0xFE	; 254
     db8:	1f 4f       	sbci	r17, 0xFF	; 255
     dba:	f3 2d       	mov	r31, r3
     dbc:	ff 76       	andi	r31, 0x6F	; 111
     dbe:	3f 2e       	mov	r3, r31
     dc0:	97 ff       	sbrs	r25, 7
     dc2:	09 c0       	rjmp	.+18     	; 0xdd6 <vfprintf+0x212>
     dc4:	90 95       	com	r25
     dc6:	80 95       	com	r24
     dc8:	70 95       	com	r23
     dca:	61 95       	neg	r22
     dcc:	7f 4f       	sbci	r23, 0xFF	; 255
     dce:	8f 4f       	sbci	r24, 0xFF	; 255
     dd0:	9f 4f       	sbci	r25, 0xFF	; 255
     dd2:	f0 68       	ori	r31, 0x80	; 128
     dd4:	3f 2e       	mov	r3, r31
     dd6:	2a e0       	ldi	r18, 0x0A	; 10
     dd8:	30 e0       	ldi	r19, 0x00	; 0
     dda:	a3 01       	movw	r20, r6
     ddc:	0e 94 15 08 	call	0x102a	; 0x102a <__ultoa_invert>
     de0:	88 2e       	mov	r8, r24
     de2:	86 18       	sub	r8, r6
     de4:	45 c0       	rjmp	.+138    	; 0xe70 <vfprintf+0x2ac>
     de6:	85 37       	cpi	r24, 0x75	; 117
     de8:	31 f4       	brne	.+12     	; 0xdf6 <vfprintf+0x232>
     dea:	23 2d       	mov	r18, r3
     dec:	2f 7e       	andi	r18, 0xEF	; 239
     dee:	b2 2e       	mov	r11, r18
     df0:	2a e0       	ldi	r18, 0x0A	; 10
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	25 c0       	rjmp	.+74     	; 0xe40 <vfprintf+0x27c>
     df6:	93 2d       	mov	r25, r3
     df8:	99 7f       	andi	r25, 0xF9	; 249
     dfa:	b9 2e       	mov	r11, r25
     dfc:	8f 36       	cpi	r24, 0x6F	; 111
     dfe:	c1 f0       	breq	.+48     	; 0xe30 <vfprintf+0x26c>
     e00:	18 f4       	brcc	.+6      	; 0xe08 <vfprintf+0x244>
     e02:	88 35       	cpi	r24, 0x58	; 88
     e04:	79 f0       	breq	.+30     	; 0xe24 <vfprintf+0x260>
     e06:	b5 c0       	rjmp	.+362    	; 0xf72 <vfprintf+0x3ae>
     e08:	80 37       	cpi	r24, 0x70	; 112
     e0a:	19 f0       	breq	.+6      	; 0xe12 <vfprintf+0x24e>
     e0c:	88 37       	cpi	r24, 0x78	; 120
     e0e:	21 f0       	breq	.+8      	; 0xe18 <vfprintf+0x254>
     e10:	b0 c0       	rjmp	.+352    	; 0xf72 <vfprintf+0x3ae>
     e12:	e9 2f       	mov	r30, r25
     e14:	e0 61       	ori	r30, 0x10	; 16
     e16:	be 2e       	mov	r11, r30
     e18:	b4 fe       	sbrs	r11, 4
     e1a:	0d c0       	rjmp	.+26     	; 0xe36 <vfprintf+0x272>
     e1c:	fb 2d       	mov	r31, r11
     e1e:	f4 60       	ori	r31, 0x04	; 4
     e20:	bf 2e       	mov	r11, r31
     e22:	09 c0       	rjmp	.+18     	; 0xe36 <vfprintf+0x272>
     e24:	34 fe       	sbrs	r3, 4
     e26:	0a c0       	rjmp	.+20     	; 0xe3c <vfprintf+0x278>
     e28:	29 2f       	mov	r18, r25
     e2a:	26 60       	ori	r18, 0x06	; 6
     e2c:	b2 2e       	mov	r11, r18
     e2e:	06 c0       	rjmp	.+12     	; 0xe3c <vfprintf+0x278>
     e30:	28 e0       	ldi	r18, 0x08	; 8
     e32:	30 e0       	ldi	r19, 0x00	; 0
     e34:	05 c0       	rjmp	.+10     	; 0xe40 <vfprintf+0x27c>
     e36:	20 e1       	ldi	r18, 0x10	; 16
     e38:	30 e0       	ldi	r19, 0x00	; 0
     e3a:	02 c0       	rjmp	.+4      	; 0xe40 <vfprintf+0x27c>
     e3c:	20 e1       	ldi	r18, 0x10	; 16
     e3e:	32 e0       	ldi	r19, 0x02	; 2
     e40:	f8 01       	movw	r30, r16
     e42:	b7 fe       	sbrs	r11, 7
     e44:	07 c0       	rjmp	.+14     	; 0xe54 <vfprintf+0x290>
     e46:	60 81       	ld	r22, Z
     e48:	71 81       	ldd	r23, Z+1	; 0x01
     e4a:	82 81       	ldd	r24, Z+2	; 0x02
     e4c:	93 81       	ldd	r25, Z+3	; 0x03
     e4e:	0c 5f       	subi	r16, 0xFC	; 252
     e50:	1f 4f       	sbci	r17, 0xFF	; 255
     e52:	06 c0       	rjmp	.+12     	; 0xe60 <vfprintf+0x29c>
     e54:	60 81       	ld	r22, Z
     e56:	71 81       	ldd	r23, Z+1	; 0x01
     e58:	80 e0       	ldi	r24, 0x00	; 0
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	0e 5f       	subi	r16, 0xFE	; 254
     e5e:	1f 4f       	sbci	r17, 0xFF	; 255
     e60:	a3 01       	movw	r20, r6
     e62:	0e 94 15 08 	call	0x102a	; 0x102a <__ultoa_invert>
     e66:	88 2e       	mov	r8, r24
     e68:	86 18       	sub	r8, r6
     e6a:	fb 2d       	mov	r31, r11
     e6c:	ff 77       	andi	r31, 0x7F	; 127
     e6e:	3f 2e       	mov	r3, r31
     e70:	36 fe       	sbrs	r3, 6
     e72:	0d c0       	rjmp	.+26     	; 0xe8e <vfprintf+0x2ca>
     e74:	23 2d       	mov	r18, r3
     e76:	2e 7f       	andi	r18, 0xFE	; 254
     e78:	a2 2e       	mov	r10, r18
     e7a:	89 14       	cp	r8, r9
     e7c:	58 f4       	brcc	.+22     	; 0xe94 <vfprintf+0x2d0>
     e7e:	34 fe       	sbrs	r3, 4
     e80:	0b c0       	rjmp	.+22     	; 0xe98 <vfprintf+0x2d4>
     e82:	32 fc       	sbrc	r3, 2
     e84:	09 c0       	rjmp	.+18     	; 0xe98 <vfprintf+0x2d4>
     e86:	83 2d       	mov	r24, r3
     e88:	8e 7e       	andi	r24, 0xEE	; 238
     e8a:	a8 2e       	mov	r10, r24
     e8c:	05 c0       	rjmp	.+10     	; 0xe98 <vfprintf+0x2d4>
     e8e:	b8 2c       	mov	r11, r8
     e90:	a3 2c       	mov	r10, r3
     e92:	03 c0       	rjmp	.+6      	; 0xe9a <vfprintf+0x2d6>
     e94:	b8 2c       	mov	r11, r8
     e96:	01 c0       	rjmp	.+2      	; 0xe9a <vfprintf+0x2d6>
     e98:	b9 2c       	mov	r11, r9
     e9a:	a4 fe       	sbrs	r10, 4
     e9c:	0f c0       	rjmp	.+30     	; 0xebc <vfprintf+0x2f8>
     e9e:	fe 01       	movw	r30, r28
     ea0:	e8 0d       	add	r30, r8
     ea2:	f1 1d       	adc	r31, r1
     ea4:	80 81       	ld	r24, Z
     ea6:	80 33       	cpi	r24, 0x30	; 48
     ea8:	21 f4       	brne	.+8      	; 0xeb2 <vfprintf+0x2ee>
     eaa:	9a 2d       	mov	r25, r10
     eac:	99 7e       	andi	r25, 0xE9	; 233
     eae:	a9 2e       	mov	r10, r25
     eb0:	09 c0       	rjmp	.+18     	; 0xec4 <vfprintf+0x300>
     eb2:	a2 fe       	sbrs	r10, 2
     eb4:	06 c0       	rjmp	.+12     	; 0xec2 <vfprintf+0x2fe>
     eb6:	b3 94       	inc	r11
     eb8:	b3 94       	inc	r11
     eba:	04 c0       	rjmp	.+8      	; 0xec4 <vfprintf+0x300>
     ebc:	8a 2d       	mov	r24, r10
     ebe:	86 78       	andi	r24, 0x86	; 134
     ec0:	09 f0       	breq	.+2      	; 0xec4 <vfprintf+0x300>
     ec2:	b3 94       	inc	r11
     ec4:	a3 fc       	sbrc	r10, 3
     ec6:	11 c0       	rjmp	.+34     	; 0xeea <vfprintf+0x326>
     ec8:	a0 fe       	sbrs	r10, 0
     eca:	06 c0       	rjmp	.+12     	; 0xed8 <vfprintf+0x314>
     ecc:	b2 14       	cp	r11, r2
     ece:	88 f4       	brcc	.+34     	; 0xef2 <vfprintf+0x32e>
     ed0:	28 0c       	add	r2, r8
     ed2:	92 2c       	mov	r9, r2
     ed4:	9b 18       	sub	r9, r11
     ed6:	0e c0       	rjmp	.+28     	; 0xef4 <vfprintf+0x330>
     ed8:	b2 14       	cp	r11, r2
     eda:	60 f4       	brcc	.+24     	; 0xef4 <vfprintf+0x330>
     edc:	b6 01       	movw	r22, r12
     ede:	80 e2       	ldi	r24, 0x20	; 32
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <fputc>
     ee6:	b3 94       	inc	r11
     ee8:	f7 cf       	rjmp	.-18     	; 0xed8 <vfprintf+0x314>
     eea:	b2 14       	cp	r11, r2
     eec:	18 f4       	brcc	.+6      	; 0xef4 <vfprintf+0x330>
     eee:	2b 18       	sub	r2, r11
     ef0:	02 c0       	rjmp	.+4      	; 0xef6 <vfprintf+0x332>
     ef2:	98 2c       	mov	r9, r8
     ef4:	21 2c       	mov	r2, r1
     ef6:	a4 fe       	sbrs	r10, 4
     ef8:	10 c0       	rjmp	.+32     	; 0xf1a <vfprintf+0x356>
     efa:	b6 01       	movw	r22, r12
     efc:	80 e3       	ldi	r24, 0x30	; 48
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <fputc>
     f04:	a2 fe       	sbrs	r10, 2
     f06:	17 c0       	rjmp	.+46     	; 0xf36 <vfprintf+0x372>
     f08:	a1 fc       	sbrc	r10, 1
     f0a:	03 c0       	rjmp	.+6      	; 0xf12 <vfprintf+0x34e>
     f0c:	88 e7       	ldi	r24, 0x78	; 120
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	02 c0       	rjmp	.+4      	; 0xf16 <vfprintf+0x352>
     f12:	88 e5       	ldi	r24, 0x58	; 88
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	b6 01       	movw	r22, r12
     f18:	0c c0       	rjmp	.+24     	; 0xf32 <vfprintf+0x36e>
     f1a:	8a 2d       	mov	r24, r10
     f1c:	86 78       	andi	r24, 0x86	; 134
     f1e:	59 f0       	breq	.+22     	; 0xf36 <vfprintf+0x372>
     f20:	a1 fe       	sbrs	r10, 1
     f22:	02 c0       	rjmp	.+4      	; 0xf28 <vfprintf+0x364>
     f24:	8b e2       	ldi	r24, 0x2B	; 43
     f26:	01 c0       	rjmp	.+2      	; 0xf2a <vfprintf+0x366>
     f28:	80 e2       	ldi	r24, 0x20	; 32
     f2a:	a7 fc       	sbrc	r10, 7
     f2c:	8d e2       	ldi	r24, 0x2D	; 45
     f2e:	b6 01       	movw	r22, r12
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <fputc>
     f36:	89 14       	cp	r8, r9
     f38:	38 f4       	brcc	.+14     	; 0xf48 <vfprintf+0x384>
     f3a:	b6 01       	movw	r22, r12
     f3c:	80 e3       	ldi	r24, 0x30	; 48
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <fputc>
     f44:	9a 94       	dec	r9
     f46:	f7 cf       	rjmp	.-18     	; 0xf36 <vfprintf+0x372>
     f48:	8a 94       	dec	r8
     f4a:	f3 01       	movw	r30, r6
     f4c:	e8 0d       	add	r30, r8
     f4e:	f1 1d       	adc	r31, r1
     f50:	80 81       	ld	r24, Z
     f52:	b6 01       	movw	r22, r12
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <fputc>
     f5a:	81 10       	cpse	r8, r1
     f5c:	f5 cf       	rjmp	.-22     	; 0xf48 <vfprintf+0x384>
     f5e:	22 20       	and	r2, r2
     f60:	09 f4       	brne	.+2      	; 0xf64 <vfprintf+0x3a0>
     f62:	42 ce       	rjmp	.-892    	; 0xbe8 <vfprintf+0x24>
     f64:	b6 01       	movw	r22, r12
     f66:	80 e2       	ldi	r24, 0x20	; 32
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <fputc>
     f6e:	2a 94       	dec	r2
     f70:	f6 cf       	rjmp	.-20     	; 0xf5e <vfprintf+0x39a>
     f72:	f6 01       	movw	r30, r12
     f74:	86 81       	ldd	r24, Z+6	; 0x06
     f76:	97 81       	ldd	r25, Z+7	; 0x07
     f78:	02 c0       	rjmp	.+4      	; 0xf7e <vfprintf+0x3ba>
     f7a:	8f ef       	ldi	r24, 0xFF	; 255
     f7c:	9f ef       	ldi	r25, 0xFF	; 255
     f7e:	2b 96       	adiw	r28, 0x0b	; 11
     f80:	e2 e1       	ldi	r30, 0x12	; 18
     f82:	0c 94 8c 08 	jmp	0x1118	; 0x1118 <__epilogue_restores__>

00000f86 <strnlen_P>:
     f86:	fc 01       	movw	r30, r24
     f88:	05 90       	lpm	r0, Z+
     f8a:	61 50       	subi	r22, 0x01	; 1
     f8c:	70 40       	sbci	r23, 0x00	; 0
     f8e:	01 10       	cpse	r0, r1
     f90:	d8 f7       	brcc	.-10     	; 0xf88 <strnlen_P+0x2>
     f92:	80 95       	com	r24
     f94:	90 95       	com	r25
     f96:	8e 0f       	add	r24, r30
     f98:	9f 1f       	adc	r25, r31
     f9a:	08 95       	ret

00000f9c <strnlen>:
     f9c:	fc 01       	movw	r30, r24
     f9e:	61 50       	subi	r22, 0x01	; 1
     fa0:	70 40       	sbci	r23, 0x00	; 0
     fa2:	01 90       	ld	r0, Z+
     fa4:	01 10       	cpse	r0, r1
     fa6:	d8 f7       	brcc	.-10     	; 0xf9e <strnlen+0x2>
     fa8:	80 95       	com	r24
     faa:	90 95       	com	r25
     fac:	8e 0f       	add	r24, r30
     fae:	9f 1f       	adc	r25, r31
     fb0:	08 95       	ret

00000fb2 <fputc>:
     fb2:	0f 93       	push	r16
     fb4:	1f 93       	push	r17
     fb6:	cf 93       	push	r28
     fb8:	df 93       	push	r29
     fba:	fb 01       	movw	r30, r22
     fbc:	23 81       	ldd	r18, Z+3	; 0x03
     fbe:	21 fd       	sbrc	r18, 1
     fc0:	03 c0       	rjmp	.+6      	; 0xfc8 <fputc+0x16>
     fc2:	8f ef       	ldi	r24, 0xFF	; 255
     fc4:	9f ef       	ldi	r25, 0xFF	; 255
     fc6:	2c c0       	rjmp	.+88     	; 0x1020 <fputc+0x6e>
     fc8:	22 ff       	sbrs	r18, 2
     fca:	16 c0       	rjmp	.+44     	; 0xff8 <fputc+0x46>
     fcc:	46 81       	ldd	r20, Z+6	; 0x06
     fce:	57 81       	ldd	r21, Z+7	; 0x07
     fd0:	24 81       	ldd	r18, Z+4	; 0x04
     fd2:	35 81       	ldd	r19, Z+5	; 0x05
     fd4:	42 17       	cp	r20, r18
     fd6:	53 07       	cpc	r21, r19
     fd8:	44 f4       	brge	.+16     	; 0xfea <fputc+0x38>
     fda:	a0 81       	ld	r26, Z
     fdc:	b1 81       	ldd	r27, Z+1	; 0x01
     fde:	9d 01       	movw	r18, r26
     fe0:	2f 5f       	subi	r18, 0xFF	; 255
     fe2:	3f 4f       	sbci	r19, 0xFF	; 255
     fe4:	20 83       	st	Z, r18
     fe6:	31 83       	std	Z+1, r19	; 0x01
     fe8:	8c 93       	st	X, r24
     fea:	26 81       	ldd	r18, Z+6	; 0x06
     fec:	37 81       	ldd	r19, Z+7	; 0x07
     fee:	2f 5f       	subi	r18, 0xFF	; 255
     ff0:	3f 4f       	sbci	r19, 0xFF	; 255
     ff2:	26 83       	std	Z+6, r18	; 0x06
     ff4:	37 83       	std	Z+7, r19	; 0x07
     ff6:	14 c0       	rjmp	.+40     	; 0x1020 <fputc+0x6e>
     ff8:	8b 01       	movw	r16, r22
     ffa:	ec 01       	movw	r28, r24
     ffc:	fb 01       	movw	r30, r22
     ffe:	00 84       	ldd	r0, Z+8	; 0x08
    1000:	f1 85       	ldd	r31, Z+9	; 0x09
    1002:	e0 2d       	mov	r30, r0
    1004:	09 95       	icall
    1006:	89 2b       	or	r24, r25
    1008:	e1 f6       	brne	.-72     	; 0xfc2 <fputc+0x10>
    100a:	d8 01       	movw	r26, r16
    100c:	16 96       	adiw	r26, 0x06	; 6
    100e:	8d 91       	ld	r24, X+
    1010:	9c 91       	ld	r25, X
    1012:	17 97       	sbiw	r26, 0x07	; 7
    1014:	01 96       	adiw	r24, 0x01	; 1
    1016:	16 96       	adiw	r26, 0x06	; 6
    1018:	8d 93       	st	X+, r24
    101a:	9c 93       	st	X, r25
    101c:	17 97       	sbiw	r26, 0x07	; 7
    101e:	ce 01       	movw	r24, r28
    1020:	df 91       	pop	r29
    1022:	cf 91       	pop	r28
    1024:	1f 91       	pop	r17
    1026:	0f 91       	pop	r16
    1028:	08 95       	ret

0000102a <__ultoa_invert>:
    102a:	fa 01       	movw	r30, r20
    102c:	aa 27       	eor	r26, r26
    102e:	28 30       	cpi	r18, 0x08	; 8
    1030:	51 f1       	breq	.+84     	; 0x1086 <__ultoa_invert+0x5c>
    1032:	20 31       	cpi	r18, 0x10	; 16
    1034:	81 f1       	breq	.+96     	; 0x1096 <__ultoa_invert+0x6c>
    1036:	e8 94       	clt
    1038:	6f 93       	push	r22
    103a:	6e 7f       	andi	r22, 0xFE	; 254
    103c:	6e 5f       	subi	r22, 0xFE	; 254
    103e:	7f 4f       	sbci	r23, 0xFF	; 255
    1040:	8f 4f       	sbci	r24, 0xFF	; 255
    1042:	9f 4f       	sbci	r25, 0xFF	; 255
    1044:	af 4f       	sbci	r26, 0xFF	; 255
    1046:	b1 e0       	ldi	r27, 0x01	; 1
    1048:	3e d0       	rcall	.+124    	; 0x10c6 <__ultoa_invert+0x9c>
    104a:	b4 e0       	ldi	r27, 0x04	; 4
    104c:	3c d0       	rcall	.+120    	; 0x10c6 <__ultoa_invert+0x9c>
    104e:	67 0f       	add	r22, r23
    1050:	78 1f       	adc	r23, r24
    1052:	89 1f       	adc	r24, r25
    1054:	9a 1f       	adc	r25, r26
    1056:	a1 1d       	adc	r26, r1
    1058:	68 0f       	add	r22, r24
    105a:	79 1f       	adc	r23, r25
    105c:	8a 1f       	adc	r24, r26
    105e:	91 1d       	adc	r25, r1
    1060:	a1 1d       	adc	r26, r1
    1062:	6a 0f       	add	r22, r26
    1064:	71 1d       	adc	r23, r1
    1066:	81 1d       	adc	r24, r1
    1068:	91 1d       	adc	r25, r1
    106a:	a1 1d       	adc	r26, r1
    106c:	20 d0       	rcall	.+64     	; 0x10ae <__ultoa_invert+0x84>
    106e:	09 f4       	brne	.+2      	; 0x1072 <__ultoa_invert+0x48>
    1070:	68 94       	set
    1072:	3f 91       	pop	r19
    1074:	2a e0       	ldi	r18, 0x0A	; 10
    1076:	26 9f       	mul	r18, r22
    1078:	11 24       	eor	r1, r1
    107a:	30 19       	sub	r19, r0
    107c:	30 5d       	subi	r19, 0xD0	; 208
    107e:	31 93       	st	Z+, r19
    1080:	de f6       	brtc	.-74     	; 0x1038 <__ultoa_invert+0xe>
    1082:	cf 01       	movw	r24, r30
    1084:	08 95       	ret
    1086:	46 2f       	mov	r20, r22
    1088:	47 70       	andi	r20, 0x07	; 7
    108a:	40 5d       	subi	r20, 0xD0	; 208
    108c:	41 93       	st	Z+, r20
    108e:	b3 e0       	ldi	r27, 0x03	; 3
    1090:	0f d0       	rcall	.+30     	; 0x10b0 <__ultoa_invert+0x86>
    1092:	c9 f7       	brne	.-14     	; 0x1086 <__ultoa_invert+0x5c>
    1094:	f6 cf       	rjmp	.-20     	; 0x1082 <__ultoa_invert+0x58>
    1096:	46 2f       	mov	r20, r22
    1098:	4f 70       	andi	r20, 0x0F	; 15
    109a:	40 5d       	subi	r20, 0xD0	; 208
    109c:	4a 33       	cpi	r20, 0x3A	; 58
    109e:	18 f0       	brcs	.+6      	; 0x10a6 <__ultoa_invert+0x7c>
    10a0:	49 5d       	subi	r20, 0xD9	; 217
    10a2:	31 fd       	sbrc	r19, 1
    10a4:	40 52       	subi	r20, 0x20	; 32
    10a6:	41 93       	st	Z+, r20
    10a8:	02 d0       	rcall	.+4      	; 0x10ae <__ultoa_invert+0x84>
    10aa:	a9 f7       	brne	.-22     	; 0x1096 <__ultoa_invert+0x6c>
    10ac:	ea cf       	rjmp	.-44     	; 0x1082 <__ultoa_invert+0x58>
    10ae:	b4 e0       	ldi	r27, 0x04	; 4
    10b0:	a6 95       	lsr	r26
    10b2:	97 95       	ror	r25
    10b4:	87 95       	ror	r24
    10b6:	77 95       	ror	r23
    10b8:	67 95       	ror	r22
    10ba:	ba 95       	dec	r27
    10bc:	c9 f7       	brne	.-14     	; 0x10b0 <__ultoa_invert+0x86>
    10be:	00 97       	sbiw	r24, 0x00	; 0
    10c0:	61 05       	cpc	r22, r1
    10c2:	71 05       	cpc	r23, r1
    10c4:	08 95       	ret
    10c6:	9b 01       	movw	r18, r22
    10c8:	ac 01       	movw	r20, r24
    10ca:	0a 2e       	mov	r0, r26
    10cc:	06 94       	lsr	r0
    10ce:	57 95       	ror	r21
    10d0:	47 95       	ror	r20
    10d2:	37 95       	ror	r19
    10d4:	27 95       	ror	r18
    10d6:	ba 95       	dec	r27
    10d8:	c9 f7       	brne	.-14     	; 0x10cc <__ultoa_invert+0xa2>
    10da:	62 0f       	add	r22, r18
    10dc:	73 1f       	adc	r23, r19
    10de:	84 1f       	adc	r24, r20
    10e0:	95 1f       	adc	r25, r21
    10e2:	a0 1d       	adc	r26, r0
    10e4:	08 95       	ret

000010e6 <__prologue_saves__>:
    10e6:	2f 92       	push	r2
    10e8:	3f 92       	push	r3
    10ea:	4f 92       	push	r4
    10ec:	5f 92       	push	r5
    10ee:	6f 92       	push	r6
    10f0:	7f 92       	push	r7
    10f2:	8f 92       	push	r8
    10f4:	9f 92       	push	r9
    10f6:	af 92       	push	r10
    10f8:	bf 92       	push	r11
    10fa:	cf 92       	push	r12
    10fc:	df 92       	push	r13
    10fe:	ef 92       	push	r14
    1100:	ff 92       	push	r15
    1102:	0f 93       	push	r16
    1104:	1f 93       	push	r17
    1106:	cf 93       	push	r28
    1108:	df 93       	push	r29
    110a:	cd b7       	in	r28, 0x3d	; 61
    110c:	de b7       	in	r29, 0x3e	; 62
    110e:	ca 1b       	sub	r28, r26
    1110:	db 0b       	sbc	r29, r27
    1112:	cd bf       	out	0x3d, r28	; 61
    1114:	de bf       	out	0x3e, r29	; 62
    1116:	09 94       	ijmp

00001118 <__epilogue_restores__>:
    1118:	2a 88       	ldd	r2, Y+18	; 0x12
    111a:	39 88       	ldd	r3, Y+17	; 0x11
    111c:	48 88       	ldd	r4, Y+16	; 0x10
    111e:	5f 84       	ldd	r5, Y+15	; 0x0f
    1120:	6e 84       	ldd	r6, Y+14	; 0x0e
    1122:	7d 84       	ldd	r7, Y+13	; 0x0d
    1124:	8c 84       	ldd	r8, Y+12	; 0x0c
    1126:	9b 84       	ldd	r9, Y+11	; 0x0b
    1128:	aa 84       	ldd	r10, Y+10	; 0x0a
    112a:	b9 84       	ldd	r11, Y+9	; 0x09
    112c:	c8 84       	ldd	r12, Y+8	; 0x08
    112e:	df 80       	ldd	r13, Y+7	; 0x07
    1130:	ee 80       	ldd	r14, Y+6	; 0x06
    1132:	fd 80       	ldd	r15, Y+5	; 0x05
    1134:	0c 81       	ldd	r16, Y+4	; 0x04
    1136:	1b 81       	ldd	r17, Y+3	; 0x03
    1138:	aa 81       	ldd	r26, Y+2	; 0x02
    113a:	b9 81       	ldd	r27, Y+1	; 0x01
    113c:	ce 0f       	add	r28, r30
    113e:	d1 1d       	adc	r29, r1
    1140:	cd bf       	out	0x3d, r28	; 61
    1142:	de bf       	out	0x3e, r29	; 62
    1144:	ed 01       	movw	r28, r26
    1146:	08 95       	ret

00001148 <_exit>:
    1148:	f8 94       	cli

0000114a <__stop_program>:
    114a:	ff cf       	rjmp	.-2      	; 0x114a <__stop_program>
