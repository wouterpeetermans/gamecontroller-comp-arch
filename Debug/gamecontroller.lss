
gamecontroller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001412  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00802000  00001412  000014a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000006f  0080201c  0080201c  000014c2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000014c2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001520  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b0  00000000  00000000  00001560  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000299d  00000000  00000000  00001710  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000098f  00000000  00000000  000040ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001c4f  00000000  00000000  00004a3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004b8  00000000  00000000  0000668c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00014a8c  00000000  00000000  00006b44  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000086b  00000000  00000000  0001b5d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000120  00000000  00000000  0001be3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00005fd0  00000000  00000000  0001bf5b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__ctors_end>
       4:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
       8:	0c 94 81 01 	jmp	0x302	; 0x302 <__vector_2>
       c:	0c 94 b9 01 	jmp	0x372	; 0x372 <__vector_3>
      10:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      14:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      18:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      1c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      20:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      24:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      28:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      2c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      30:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      34:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      38:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      3c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      40:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      44:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      48:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      4c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      50:	0c 94 cc 04 	jmp	0x998	; 0x998 <__vector_20>
      54:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      58:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      5c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      60:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      64:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      68:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      6c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      70:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      74:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      78:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      7c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      80:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      84:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      88:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      8c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      90:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      94:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      98:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      9c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      a0:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      a4:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      a8:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      ac:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      b0:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      b4:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      b8:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      bc:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      c0:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      c4:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      c8:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      cc:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      d0:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      d4:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      d8:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      dc:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      e0:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      e4:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      e8:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      ec:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      f0:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      f4:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      f8:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      fc:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     100:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     104:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     108:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     10c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     110:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     114:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     118:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     11c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     120:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     124:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     128:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     12c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     130:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     134:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     138:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     13c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     140:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     144:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     148:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     14c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     150:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     154:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     158:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     15c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     160:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     164:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     168:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     16c:	af 02       	muls	r26, r31
     16e:	97 02       	muls	r25, r23
     170:	9d 02       	muls	r25, r29
     172:	a3 02       	muls	r26, r19
     174:	9d 02       	muls	r25, r29
     176:	af 02       	muls	r26, r31
     178:	a9 02       	muls	r26, r25
     17a:	97 02       	muls	r25, r23
     17c:	97 02       	muls	r25, r23
     17e:	a9 02       	muls	r26, r25
     180:	af 02       	muls	r26, r31
     182:	9d 02       	muls	r25, r29
     184:	a3 02       	muls	r26, r19
     186:	9d 02       	muls	r25, r29
     188:	97 02       	muls	r25, r23
     18a:	af 02       	muls	r26, r31

0000018c <__ctors_end>:
     18c:	11 24       	eor	r1, r1
     18e:	1f be       	out	0x3f, r1	; 63
     190:	cf ef       	ldi	r28, 0xFF	; 255
     192:	cd bf       	out	0x3d, r28	; 61
     194:	d7 e2       	ldi	r29, 0x27	; 39
     196:	de bf       	out	0x3e, r29	; 62

00000198 <__do_copy_data>:
     198:	10 e2       	ldi	r17, 0x20	; 32
     19a:	a0 e0       	ldi	r26, 0x00	; 0
     19c:	b0 e2       	ldi	r27, 0x20	; 32
     19e:	e2 e1       	ldi	r30, 0x12	; 18
     1a0:	f4 e1       	ldi	r31, 0x14	; 20
     1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <__do_copy_data+0x10>
     1a4:	05 90       	lpm	r0, Z+
     1a6:	0d 92       	st	X+, r0
     1a8:	ac 31       	cpi	r26, 0x1C	; 28
     1aa:	b1 07       	cpc	r27, r17
     1ac:	d9 f7       	brne	.-10     	; 0x1a4 <__do_copy_data+0xc>

000001ae <__do_clear_bss>:
     1ae:	20 e2       	ldi	r18, 0x20	; 32
     1b0:	ac e1       	ldi	r26, 0x1C	; 28
     1b2:	b0 e2       	ldi	r27, 0x20	; 32
     1b4:	01 c0       	rjmp	.+2      	; 0x1b8 <.do_clear_bss_start>

000001b6 <.do_clear_bss_loop>:
     1b6:	1d 92       	st	X+, r1

000001b8 <.do_clear_bss_start>:
     1b8:	ab 38       	cpi	r26, 0x8B	; 139
     1ba:	b2 07       	cpc	r27, r18
     1bc:	e1 f7       	brne	.-8      	; 0x1b6 <.do_clear_bss_loop>
     1be:	0e 94 bc 02 	call	0x578	; 0x578 <main>
     1c2:	0c 94 07 0a 	jmp	0x140e	; 0x140e <_exit>

000001c6 <__bad_interrupt>:
     1c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001ca <AccInit>:
#include "acc.h"



void AccInit(void)
{
     1ca:	cf 93       	push	r28
     1cc:	df 93       	push	r29
     1ce:	cd b7       	in	r28, 0x3d	; 61
     1d0:	de b7       	in	r29, 0x3e	; 62
 PORTC.DIR = (PORTC.DIR | 0b11110000);
     1d2:	80 e4       	ldi	r24, 0x40	; 64
     1d4:	96 e0       	ldi	r25, 0x06	; 6
     1d6:	20 e4       	ldi	r18, 0x40	; 64
     1d8:	36 e0       	ldi	r19, 0x06	; 6
     1da:	f9 01       	movw	r30, r18
     1dc:	20 81       	ld	r18, Z
     1de:	20 6f       	ori	r18, 0xF0	; 240
     1e0:	fc 01       	movw	r30, r24
     1e2:	20 83       	st	Z, r18
 PORTC.PIN6CTRL = 0b00010000;
     1e4:	80 e4       	ldi	r24, 0x40	; 64
     1e6:	96 e0       	ldi	r25, 0x06	; 6
     1e8:	20 e1       	ldi	r18, 0x10	; 16
     1ea:	fc 01       	movw	r30, r24
     1ec:	26 8b       	std	Z+22, r18	; 0x16
PORTA.PIN0CTRL = 0b00000000;
     1ee:	80 e0       	ldi	r24, 0x00	; 0
     1f0:	96 e0       	ldi	r25, 0x06	; 6
     1f2:	fc 01       	movw	r30, r24
     1f4:	10 8a       	std	Z+16, r1	; 0x10
PORTA.PIN1CTRL = 0b00000000;
     1f6:	80 e0       	ldi	r24, 0x00	; 0
     1f8:	96 e0       	ldi	r25, 0x06	; 6
     1fa:	fc 01       	movw	r30, r24
     1fc:	11 8a       	std	Z+17, r1	; 0x11
PORTA.PIN2CTRL = 0b00000000;
     1fe:	80 e0       	ldi	r24, 0x00	; 0
     200:	96 e0       	ldi	r25, 0x06	; 6
     202:	fc 01       	movw	r30, r24
     204:	12 8a       	std	Z+18, r1	; 0x12


}
     206:	00 00       	nop
     208:	df 91       	pop	r29
     20a:	cf 91       	pop	r28
     20c:	08 95       	ret

0000020e <AnalogInit>:
#include <inttypes.h>



void AnalogInit(void)
{
     20e:	cf 93       	push	r28
     210:	df 93       	push	r29
     212:	cd b7       	in	r28, 0x3d	; 61
     214:	de b7       	in	r29, 0x3e	; 62
	// ADC Clock was disabled initially in sysclk_init()
	// Must re-activate the ADC clock before configuring its registers (we're using ADCB)
	PR.PRPA &= ~0x02; // Clear ADC bit in Power Reduction Port B Register
     216:	80 e7       	ldi	r24, 0x70	; 112
     218:	90 e0       	ldi	r25, 0x00	; 0
     21a:	20 e7       	ldi	r18, 0x70	; 112
     21c:	30 e0       	ldi	r19, 0x00	; 0
     21e:	f9 01       	movw	r30, r18
     220:	21 81       	ldd	r18, Z+1	; 0x01
     222:	2d 7f       	andi	r18, 0xFD	; 253
     224:	fc 01       	movw	r30, r24
     226:	21 83       	std	Z+1, r18	; 0x01
	//     0        0       0         0         0         0       0        0
	// Apply no limit to ADC sample rate
	// Put ADC in signed mode
	// Disable Free-run mode (single conversion upon trigger)
	// Resolution set to 12-bit, right justified (11-bit effective in signed mode)
	ADCA.CTRLB = ADC_CONMODE_bm; // 0x10
     228:	80 e0       	ldi	r24, 0x00	; 0
     22a:	92 e0       	ldi	r25, 0x02	; 2
     22c:	20 e1       	ldi	r18, 0x10	; 16
     22e:	fc 01       	movw	r30, r24
     230:	21 83       	std	Z+1, r18	; 0x01
	// The ADC runs off of the CPU_per clock
	// In sys_clk_init() the internal 2MHz RC osc was used to source a 16 MHz PLL
	// The PLL is then divided using Prescalers A, B, and C setting CPU_per to 8 MHz
	// According to AVR1300, the ADC clock should run in the range 100 kHz ~ approx 1.4 MHz
	// Set ADC clock to 125kHz:  CPU_per/64    =>    8MHz/64 = 125kHz
	ADCA.PRESCALER = ADC_PRESCALER2_bm; // 0x04
     232:	80 e0       	ldi	r24, 0x00	; 0
     234:	92 e0       	ldi	r25, 0x02	; 2
     236:	24 e0       	ldi	r18, 0x04	; 4
     238:	fc 01       	movw	r30, r24
     23a:	24 83       	std	Z+4, r18	; 0x04
	//ADCB.REFCTRL
	//     7       6       5       4       3       2        1         0
	// |   -   |      REFSEL[2:0]      |   -   |   -   | BANDGAP | TEMPREF |
	//     0       0       0       0       0       0        0         0
	// Set internal 1V.  
	ADCA.REFCTRL = ADC_REFSEL_INT1V_gc; // 0x10
     23c:	80 e0       	ldi	r24, 0x00	; 0
     23e:	92 e0       	ldi	r25, 0x02	; 2
     240:	fc 01       	movw	r30, r24
     242:	12 82       	std	Z+2, r1	; 0x02
	//ADCB.EVCTRL
	//     7       6       5       4       3       2       1       0
	// |   -   |   -   |   -   |   EVSEL[1:0]  |      EVACT[2:0]       |
	//     0       0       0       0       0       0       0       0
	// Not implementing Event System so ensure EVCTRL is reading zeros
	ADCA.EVCTRL = 0x00;
     244:	80 e0       	ldi	r24, 0x00	; 0
     246:	92 e0       	ldi	r25, 0x02	; 2
     248:	fc 01       	movw	r30, r24
     24a:	13 82       	std	Z+3, r1	; 0x03
	//ADCB.INTFLAGS
	//     7       6       5       4       3       2       1       0
	// |   -   |   -   |   -   |   -   |   -   |   -   |   -   | CH0IF |
	//     0       0       0       0       0       0       0       0
	// Ensure the ADC complete flag is cleared (by writing a '1' to it)
	ADCA.INTFLAGS = ADC_CH0IF_bm; // 0x01
     24c:	80 e0       	ldi	r24, 0x00	; 0
     24e:	92 e0       	ldi	r25, 0x02	; 2
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	fc 01       	movw	r30, r24
     254:	26 83       	std	Z+6, r18	; 0x06
	//ADCB.CH0.INTCTRL
	//     7       6       5       4        3       2       1       0
	// |   -   |   -   |   -   |   -   |  INTMODE[1:0]  |  INTLVL[1:0]  |
	//     0       0       0       0        0       0       0       0
	// Configure interrupt on conversion complete with high priority
	ADCA.CH0.INTCTRL = ADC_CH_INTLVL1_bm | ADC_CH_INTLVL0_bm; // 0x03
     256:	80 e0       	ldi	r24, 0x00	; 0
     258:	92 e0       	ldi	r25, 0x02	; 2
     25a:	23 e0       	ldi	r18, 0x03	; 3
     25c:	fc 01       	movw	r30, r24
     25e:	22 a3       	std	Z+34, r18	; 0x22
	//ADCB.CTRLA
	//     7       6       5       4       3         2        1        0
	// |   -   |   -   |   -   |   -   |   -   | CH0START | FLUSH | ENABLE |
	//     0       0       0       0       0         0        0        0
	// Enable ADC, module B
	ADCA.CTRLA = ADC_ENABLE_bm; // 0x01
     260:	80 e0       	ldi	r24, 0x00	; 0
     262:	92 e0       	ldi	r25, 0x02	; 2
     264:	21 e0       	ldi	r18, 0x01	; 1
     266:	fc 01       	movw	r30, r24
     268:	20 83       	st	Z, r18
	//////////////////////////////////////////////////////////////////////
}
     26a:	00 00       	nop
     26c:	df 91       	pop	r29
     26e:	cf 91       	pop	r28
     270:	08 95       	ret

00000272 <ClockInit>:
#pragma GCC push_options
#pragma GCC optimize ("O2") //This function must be optimized to avoid too long time interval betwee CCP write and CLK.CTRL write (4 CLK CYC max)

void ClockInit(void)
{
	OSC.XOSCCTRL=0b11001011; //Clock<=16MHz	
     272:	8b ec       	ldi	r24, 0xCB	; 203
     274:	80 93 52 00 	sts	0x0052, r24	; 0x800052 <__TEXT_REGION_LENGTH__+0x700052>
	OSC.CTRL=0b01000; //Enable oscillator	
     278:	88 e0       	ldi	r24, 0x08	; 8
     27a:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
	while (!(OSC.STATUS&0b1000)); //Wait until XTAL osc is ready
     27e:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
     282:	83 ff       	sbrs	r24, 3
     284:	fc cf       	rjmp	.-8      	; 0x27e <ClockInit+0xc>
	
	//Select XTAL osc as system CLK source
	CCP=0xd8;
     286:	88 ed       	ldi	r24, 0xD8	; 216
     288:	84 bf       	out	0x34, r24	; 52
    CLK.CTRL=0b0011;
     28a:	83 e0       	ldi	r24, 0x03	; 3
     28c:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
     290:	08 95       	ret

00000292 <EncoderInit>:
	
}
int EncoderGetPos(void)
{
	return encoderPos;
}
     292:	cf 93       	push	r28
     294:	df 93       	push	r29
     296:	cd b7       	in	r28, 0x3d	; 61
     298:	de b7       	in	r29, 0x3e	; 62
     29a:	80 e4       	ldi	r24, 0x40	; 64
     29c:	96 e0       	ldi	r25, 0x06	; 6
     29e:	20 e4       	ldi	r18, 0x40	; 64
     2a0:	36 e0       	ldi	r19, 0x06	; 6
     2a2:	f9 01       	movw	r30, r18
     2a4:	20 81       	ld	r18, Z
     2a6:	2f 7c       	andi	r18, 0xCF	; 207
     2a8:	fc 01       	movw	r30, r24
     2aa:	20 83       	st	Z, r18
     2ac:	80 e4       	ldi	r24, 0x40	; 64
     2ae:	96 e0       	ldi	r25, 0x06	; 6
     2b0:	28 e1       	ldi	r18, 0x18	; 24
     2b2:	fc 01       	movw	r30, r24
     2b4:	24 8b       	std	Z+20, r18	; 0x14
     2b6:	80 e4       	ldi	r24, 0x40	; 64
     2b8:	96 e0       	ldi	r25, 0x06	; 6
     2ba:	28 e1       	ldi	r18, 0x18	; 24
     2bc:	fc 01       	movw	r30, r24
     2be:	25 8b       	std	Z+21, r18	; 0x15
     2c0:	80 e4       	ldi	r24, 0x40	; 64
     2c2:	96 e0       	ldi	r25, 0x06	; 6
     2c4:	2f e0       	ldi	r18, 0x0F	; 15
     2c6:	fc 01       	movw	r30, r24
     2c8:	21 87       	std	Z+9, r18	; 0x09
     2ca:	80 e4       	ldi	r24, 0x40	; 64
     2cc:	96 e0       	ldi	r25, 0x06	; 6
     2ce:	20 e1       	ldi	r18, 0x10	; 16
     2d0:	fc 01       	movw	r30, r24
     2d2:	22 87       	std	Z+10, r18	; 0x0a
     2d4:	80 e4       	ldi	r24, 0x40	; 64
     2d6:	96 e0       	ldi	r25, 0x06	; 6
     2d8:	20 e2       	ldi	r18, 0x20	; 32
     2da:	fc 01       	movw	r30, r24
     2dc:	23 87       	std	Z+11, r18	; 0x0b
     2de:	8f e3       	ldi	r24, 0x3F	; 63
     2e0:	90 e0       	ldi	r25, 0x00	; 0
     2e2:	2f e3       	ldi	r18, 0x3F	; 63
     2e4:	30 e0       	ldi	r19, 0x00	; 0
     2e6:	f9 01       	movw	r30, r18
     2e8:	20 81       	ld	r18, Z
     2ea:	20 68       	ori	r18, 0x80	; 128
     2ec:	fc 01       	movw	r30, r24
     2ee:	20 83       	st	Z, r18
     2f0:	80 ea       	ldi	r24, 0xA0	; 160
     2f2:	90 e0       	ldi	r25, 0x00	; 0
     2f4:	24 e0       	ldi	r18, 0x04	; 4
     2f6:	fc 01       	movw	r30, r24
     2f8:	22 83       	std	Z+2, r18	; 0x02
     2fa:	00 00       	nop
     2fc:	df 91       	pop	r29
     2fe:	cf 91       	pop	r28
     300:	08 95       	ret

00000302 <__vector_2>:

ISR(PORTC_INT0_vect){
     302:	1f 92       	push	r1
     304:	0f 92       	push	r0
     306:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     30a:	0f 92       	push	r0
     30c:	11 24       	eor	r1, r1
     30e:	2f 93       	push	r18
     310:	3f 93       	push	r19
     312:	4f 93       	push	r20
     314:	5f 93       	push	r21
     316:	6f 93       	push	r22
     318:	7f 93       	push	r23
     31a:	8f 93       	push	r24
     31c:	9f 93       	push	r25
     31e:	af 93       	push	r26
     320:	bf 93       	push	r27
     322:	ef 93       	push	r30
     324:	ff 93       	push	r31
     326:	cf 93       	push	r28
     328:	df 93       	push	r29
     32a:	cd b7       	in	r28, 0x3d	; 61
     32c:	de b7       	in	r29, 0x3e	; 62
	
	encoderPos += readEncoder();
     32e:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <readEncoder>
     332:	9c 01       	movw	r18, r24
     334:	80 91 1c 20 	lds	r24, 0x201C	; 0x80201c <__data_end>
     338:	90 91 1d 20 	lds	r25, 0x201D	; 0x80201d <__data_end+0x1>
     33c:	82 0f       	add	r24, r18
     33e:	93 1f       	adc	r25, r19
     340:	80 93 1c 20 	sts	0x201C, r24	; 0x80201c <__data_end>
     344:	90 93 1d 20 	sts	0x201D, r25	; 0x80201d <__data_end+0x1>
}
     348:	00 00       	nop
     34a:	df 91       	pop	r29
     34c:	cf 91       	pop	r28
     34e:	ff 91       	pop	r31
     350:	ef 91       	pop	r30
     352:	bf 91       	pop	r27
     354:	af 91       	pop	r26
     356:	9f 91       	pop	r25
     358:	8f 91       	pop	r24
     35a:	7f 91       	pop	r23
     35c:	6f 91       	pop	r22
     35e:	5f 91       	pop	r21
     360:	4f 91       	pop	r20
     362:	3f 91       	pop	r19
     364:	2f 91       	pop	r18
     366:	0f 90       	pop	r0
     368:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     36c:	0f 90       	pop	r0
     36e:	1f 90       	pop	r1
     370:	18 95       	reti

00000372 <__vector_3>:

ISR(PORTC_INT1_vect){
     372:	1f 92       	push	r1
     374:	0f 92       	push	r0
     376:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     37a:	0f 92       	push	r0
     37c:	11 24       	eor	r1, r1
     37e:	2f 93       	push	r18
     380:	3f 93       	push	r19
     382:	4f 93       	push	r20
     384:	5f 93       	push	r21
     386:	6f 93       	push	r22
     388:	7f 93       	push	r23
     38a:	8f 93       	push	r24
     38c:	9f 93       	push	r25
     38e:	af 93       	push	r26
     390:	bf 93       	push	r27
     392:	ef 93       	push	r30
     394:	ff 93       	push	r31
     396:	cf 93       	push	r28
     398:	df 93       	push	r29
     39a:	cd b7       	in	r28, 0x3d	; 61
     39c:	de b7       	in	r29, 0x3e	; 62
	encoderPos += readEncoder();
     39e:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <readEncoder>
     3a2:	9c 01       	movw	r18, r24
     3a4:	80 91 1c 20 	lds	r24, 0x201C	; 0x80201c <__data_end>
     3a8:	90 91 1d 20 	lds	r25, 0x201D	; 0x80201d <__data_end+0x1>
     3ac:	82 0f       	add	r24, r18
     3ae:	93 1f       	adc	r25, r19
     3b0:	80 93 1c 20 	sts	0x201C, r24	; 0x80201c <__data_end>
     3b4:	90 93 1d 20 	sts	0x201D, r25	; 0x80201d <__data_end+0x1>
}
     3b8:	00 00       	nop
     3ba:	df 91       	pop	r29
     3bc:	cf 91       	pop	r28
     3be:	ff 91       	pop	r31
     3c0:	ef 91       	pop	r30
     3c2:	bf 91       	pop	r27
     3c4:	af 91       	pop	r26
     3c6:	9f 91       	pop	r25
     3c8:	8f 91       	pop	r24
     3ca:	7f 91       	pop	r23
     3cc:	6f 91       	pop	r22
     3ce:	5f 91       	pop	r21
     3d0:	4f 91       	pop	r20
     3d2:	3f 91       	pop	r19
     3d4:	2f 91       	pop	r18
     3d6:	0f 90       	pop	r0
     3d8:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     3dc:	0f 90       	pop	r0
     3de:	1f 90       	pop	r1
     3e0:	18 95       	reti

000003e2 <readEncoder>:
		}
		state = (s >> 2);
	}
*/

int readEncoder(){
     3e2:	cf 93       	push	r28
     3e4:	df 93       	push	r29
     3e6:	cd b7       	in	r28, 0x3d	; 61
     3e8:	de b7       	in	r29, 0x3e	; 62
     3ea:	61 97       	sbiw	r28, 0x11	; 17
     3ec:	cd bf       	out	0x3d, r28	; 61
     3ee:	de bf       	out	0x3e, r29	; 62
     3f0:	80 e0       	ldi	r24, 0x00	; 0
     3f2:	90 e0       	ldi	r25, 0x00	; 0
     3f4:	a0 e0       	ldi	r26, 0x00	; 0
     3f6:	b0 e4       	ldi	r27, 0x40	; 64
     3f8:	8c 83       	std	Y+4, r24	; 0x04
     3fa:	9d 83       	std	Y+5, r25	; 0x05
     3fc:	ae 83       	std	Y+6, r26	; 0x06
     3fe:	bf 83       	std	Y+7, r27	; 0x07

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     400:	20 e0       	ldi	r18, 0x00	; 0
     402:	30 e0       	ldi	r19, 0x00	; 0
     404:	4a e7       	ldi	r20, 0x7A	; 122
     406:	55 e4       	ldi	r21, 0x45	; 69
     408:	6c 81       	ldd	r22, Y+4	; 0x04
     40a:	7d 81       	ldd	r23, Y+5	; 0x05
     40c:	8e 81       	ldd	r24, Y+6	; 0x06
     40e:	9f 81       	ldd	r25, Y+7	; 0x07
     410:	0e 94 17 06 	call	0xc2e	; 0xc2e <__mulsf3>
     414:	dc 01       	movw	r26, r24
     416:	cb 01       	movw	r24, r22
     418:	88 87       	std	Y+8, r24	; 0x08
     41a:	99 87       	std	Y+9, r25	; 0x09
     41c:	aa 87       	std	Y+10, r26	; 0x0a
     41e:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
     420:	20 e0       	ldi	r18, 0x00	; 0
     422:	30 e0       	ldi	r19, 0x00	; 0
     424:	40 e8       	ldi	r20, 0x80	; 128
     426:	5f e3       	ldi	r21, 0x3F	; 63
     428:	68 85       	ldd	r22, Y+8	; 0x08
     42a:	79 85       	ldd	r23, Y+9	; 0x09
     42c:	8a 85       	ldd	r24, Y+10	; 0x0a
     42e:	9b 85       	ldd	r25, Y+11	; 0x0b
     430:	0e 94 91 05 	call	0xb22	; 0xb22 <__cmpsf2>
     434:	88 23       	and	r24, r24
     436:	2c f4       	brge	.+10     	; 0x442 <__FUSE_REGION_LENGTH__+0x42>
		__ticks = 1;
     438:	81 e0       	ldi	r24, 0x01	; 1
     43a:	90 e0       	ldi	r25, 0x00	; 0
     43c:	8c 87       	std	Y+12, r24	; 0x0c
     43e:	9d 87       	std	Y+13, r25	; 0x0d
     440:	3f c0       	rjmp	.+126    	; 0x4c0 <__FUSE_REGION_LENGTH__+0xc0>
	else if (__tmp > 65535)
     442:	20 e0       	ldi	r18, 0x00	; 0
     444:	3f ef       	ldi	r19, 0xFF	; 255
     446:	4f e7       	ldi	r20, 0x7F	; 127
     448:	57 e4       	ldi	r21, 0x47	; 71
     44a:	68 85       	ldd	r22, Y+8	; 0x08
     44c:	79 85       	ldd	r23, Y+9	; 0x09
     44e:	8a 85       	ldd	r24, Y+10	; 0x0a
     450:	9b 85       	ldd	r25, Y+11	; 0x0b
     452:	0e 94 12 06 	call	0xc24	; 0xc24 <__gesf2>
     456:	18 16       	cp	r1, r24
     458:	4c f5       	brge	.+82     	; 0x4ac <__FUSE_REGION_LENGTH__+0xac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     45a:	20 e0       	ldi	r18, 0x00	; 0
     45c:	30 e0       	ldi	r19, 0x00	; 0
     45e:	40 e2       	ldi	r20, 0x20	; 32
     460:	51 e4       	ldi	r21, 0x41	; 65
     462:	6c 81       	ldd	r22, Y+4	; 0x04
     464:	7d 81       	ldd	r23, Y+5	; 0x05
     466:	8e 81       	ldd	r24, Y+6	; 0x06
     468:	9f 81       	ldd	r25, Y+7	; 0x07
     46a:	0e 94 17 06 	call	0xc2e	; 0xc2e <__mulsf3>
     46e:	dc 01       	movw	r26, r24
     470:	cb 01       	movw	r24, r22
     472:	bc 01       	movw	r22, r24
     474:	cd 01       	movw	r24, r26
     476:	0e 94 96 05 	call	0xb2c	; 0xb2c <__fixunssfsi>
     47a:	dc 01       	movw	r26, r24
     47c:	cb 01       	movw	r24, r22
     47e:	8c 87       	std	Y+12, r24	; 0x0c
     480:	9d 87       	std	Y+13, r25	; 0x0d
     482:	0f c0       	rjmp	.+30     	; 0x4a2 <__FUSE_REGION_LENGTH__+0xa2>
     484:	80 e9       	ldi	r24, 0x90	; 144
     486:	91 e0       	ldi	r25, 0x01	; 1
     488:	8e 87       	std	Y+14, r24	; 0x0e
     48a:	9f 87       	std	Y+15, r25	; 0x0f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     48c:	8e 85       	ldd	r24, Y+14	; 0x0e
     48e:	9f 85       	ldd	r25, Y+15	; 0x0f
     490:	01 97       	sbiw	r24, 0x01	; 1
     492:	f1 f7       	brne	.-4      	; 0x490 <__FUSE_REGION_LENGTH__+0x90>
     494:	8e 87       	std	Y+14, r24	; 0x0e
     496:	9f 87       	std	Y+15, r25	; 0x0f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     498:	8c 85       	ldd	r24, Y+12	; 0x0c
     49a:	9d 85       	ldd	r25, Y+13	; 0x0d
     49c:	01 97       	sbiw	r24, 0x01	; 1
     49e:	8c 87       	std	Y+12, r24	; 0x0c
     4a0:	9d 87       	std	Y+13, r25	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     4a2:	8c 85       	ldd	r24, Y+12	; 0x0c
     4a4:	9d 85       	ldd	r25, Y+13	; 0x0d
     4a6:	89 2b       	or	r24, r25
     4a8:	69 f7       	brne	.-38     	; 0x484 <__FUSE_REGION_LENGTH__+0x84>
     4aa:	14 c0       	rjmp	.+40     	; 0x4d4 <__FUSE_REGION_LENGTH__+0xd4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     4ac:	68 85       	ldd	r22, Y+8	; 0x08
     4ae:	79 85       	ldd	r23, Y+9	; 0x09
     4b0:	8a 85       	ldd	r24, Y+10	; 0x0a
     4b2:	9b 85       	ldd	r25, Y+11	; 0x0b
     4b4:	0e 94 96 05 	call	0xb2c	; 0xb2c <__fixunssfsi>
     4b8:	dc 01       	movw	r26, r24
     4ba:	cb 01       	movw	r24, r22
     4bc:	8c 87       	std	Y+12, r24	; 0x0c
     4be:	9d 87       	std	Y+13, r25	; 0x0d
     4c0:	8c 85       	ldd	r24, Y+12	; 0x0c
     4c2:	9d 85       	ldd	r25, Y+13	; 0x0d
     4c4:	88 8b       	std	Y+16, r24	; 0x10
     4c6:	99 8b       	std	Y+17, r25	; 0x11
     4c8:	88 89       	ldd	r24, Y+16	; 0x10
     4ca:	99 89       	ldd	r25, Y+17	; 0x11
     4cc:	01 97       	sbiw	r24, 0x01	; 1
     4ce:	f1 f7       	brne	.-4      	; 0x4cc <__FUSE_REGION_LENGTH__+0xcc>
     4d0:	88 8b       	std	Y+16, r24	; 0x10
     4d2:	99 8b       	std	Y+17, r25	; 0x11
	_delay_ms(2);
	currentPos = (PORTC.IN >> 4) & 3;
     4d4:	80 e4       	ldi	r24, 0x40	; 64
     4d6:	96 e0       	ldi	r25, 0x06	; 6
     4d8:	fc 01       	movw	r30, r24
     4da:	80 85       	ldd	r24, Z+8	; 0x08
     4dc:	82 95       	swap	r24
     4de:	8f 70       	andi	r24, 0x0F	; 15
     4e0:	83 70       	andi	r24, 0x03	; 3
     4e2:	80 93 1e 20 	sts	0x201E, r24	; 0x80201e <currentPos>
	uint8_t s = (currentPos << 2) | prevpos;
     4e6:	80 91 1e 20 	lds	r24, 0x201E	; 0x80201e <currentPos>
     4ea:	88 2f       	mov	r24, r24
     4ec:	90 e0       	ldi	r25, 0x00	; 0
     4ee:	88 0f       	add	r24, r24
     4f0:	99 1f       	adc	r25, r25
     4f2:	88 0f       	add	r24, r24
     4f4:	99 1f       	adc	r25, r25
     4f6:	98 2f       	mov	r25, r24
     4f8:	80 91 1f 20 	lds	r24, 0x201F	; 0x80201f <prevpos>
     4fc:	89 2b       	or	r24, r25
     4fe:	8b 83       	std	Y+3, r24	; 0x03
	int position = 0;
     500:	19 82       	std	Y+1, r1	; 0x01
     502:	1a 82       	std	Y+2, r1	; 0x02
	switch (s) {
     504:	8b 81       	ldd	r24, Y+3	; 0x03
     506:	88 2f       	mov	r24, r24
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	09 2e       	mov	r0, r25
     50c:	00 0c       	add	r0, r0
     50e:	aa 0b       	sbc	r26, r26
     510:	bb 0b       	sbc	r27, r27
     512:	40 e0       	ldi	r20, 0x00	; 0
     514:	50 e0       	ldi	r21, 0x00	; 0
     516:	2f e0       	ldi	r18, 0x0F	; 15
     518:	30 e0       	ldi	r19, 0x00	; 0
     51a:	84 1b       	sub	r24, r20
     51c:	95 0b       	sbc	r25, r21
     51e:	28 17       	cp	r18, r24
     520:	39 07       	cpc	r19, r25
     522:	b8 f0       	brcs	.+46     	; 0x552 <__FUSE_REGION_LENGTH__+0x152>
     524:	8a 54       	subi	r24, 0x4A	; 74
     526:	9f 4f       	sbci	r25, 0xFF	; 255
     528:	fc 01       	movw	r30, r24
     52a:	0c 94 cb 06 	jmp	0xd96	; 0xd96 <__tablejump2__>
		case 0: case 5: case 10: case 15:
		break;
		case 1: case 7: case 8: case 14:
		position++; break;
     52e:	89 81       	ldd	r24, Y+1	; 0x01
     530:	9a 81       	ldd	r25, Y+2	; 0x02
     532:	01 96       	adiw	r24, 0x01	; 1
     534:	89 83       	std	Y+1, r24	; 0x01
     536:	9a 83       	std	Y+2, r25	; 0x02
     538:	13 c0       	rjmp	.+38     	; 0x560 <__FUSE_REGION_LENGTH__+0x160>
		case 2: case 4: case 11: case 13:
		position--; break;
     53a:	89 81       	ldd	r24, Y+1	; 0x01
     53c:	9a 81       	ldd	r25, Y+2	; 0x02
     53e:	01 97       	sbiw	r24, 0x01	; 1
     540:	89 83       	std	Y+1, r24	; 0x01
     542:	9a 83       	std	Y+2, r25	; 0x02
     544:	0d c0       	rjmp	.+26     	; 0x560 <__FUSE_REGION_LENGTH__+0x160>
		case 3: case 12:
		position += 2; break;
     546:	89 81       	ldd	r24, Y+1	; 0x01
     548:	9a 81       	ldd	r25, Y+2	; 0x02
     54a:	02 96       	adiw	r24, 0x02	; 2
     54c:	89 83       	std	Y+1, r24	; 0x01
     54e:	9a 83       	std	Y+2, r25	; 0x02
     550:	07 c0       	rjmp	.+14     	; 0x560 <__FUSE_REGION_LENGTH__+0x160>
		default:
		position -= 2; break;
     552:	89 81       	ldd	r24, Y+1	; 0x01
     554:	9a 81       	ldd	r25, Y+2	; 0x02
     556:	02 97       	sbiw	r24, 0x02	; 2
     558:	89 83       	std	Y+1, r24	; 0x01
     55a:	9a 83       	std	Y+2, r25	; 0x02
     55c:	01 c0       	rjmp	.+2      	; 0x560 <__FUSE_REGION_LENGTH__+0x160>
	currentPos = (PORTC.IN >> 4) & 3;
	uint8_t s = (currentPos << 2) | prevpos;
	int position = 0;
	switch (s) {
		case 0: case 5: case 10: case 15:
		break;
     55e:	00 00       	nop
		case 3: case 12:
		position += 2; break;
		default:
		position -= 2; break;
	}
	prevpos = currentPos;
     560:	80 91 1e 20 	lds	r24, 0x201E	; 0x80201e <currentPos>
     564:	80 93 1f 20 	sts	0x201F, r24	; 0x80201f <prevpos>
	return position;
     568:	89 81       	ldd	r24, Y+1	; 0x01
     56a:	9a 81       	ldd	r25, Y+2	; 0x02
}
     56c:	61 96       	adiw	r28, 0x11	; 17
     56e:	cd bf       	out	0x3d, r28	; 61
     570:	de bf       	out	0x3e, r29	; 62
     572:	df 91       	pop	r29
     574:	cf 91       	pop	r28
     576:	08 95       	ret

00000578 <main>:
char a;

void SimpleFunction(void);	//A simple function: print a counter (0 to 9) to the terminal

int main(void)
{	
     578:	cf 93       	push	r28
     57a:	df 93       	push	r29
     57c:	cd b7       	in	r28, 0x3d	; 61
     57e:	de b7       	in	r29, 0x3e	; 62
     580:	6e 97       	sbiw	r28, 0x1e	; 30
     582:	cd bf       	out	0x3d, r28	; 61
     584:	de bf       	out	0x3e, r29	; 62
	//###1###
	 
	//Initialize subsystems
	ClockInit();			//Initialize system clock (16 MHz)
     586:	0e 94 39 01 	call	0x272	; 0x272 <ClockInit>
	USARTInit();			//Initialize USART and bind to stdout,stdin
     58a:	0e 94 1c 05 	call	0xa38	; 0xa38 <USARTInit>
	AnalogInit();			//Initialize ADC
     58e:	0e 94 07 01 	call	0x20e	; 0x20e <AnalogInit>
	AccInit();				//Initialize accelerometer system
     592:	0e 94 e5 00 	call	0x1ca	; 0x1ca <AccInit>
	LEDInit();				//Initialize LEDs
     596:	0e 94 0b 04 	call	0x816	; 0x816 <LEDInit>
	SwitchInit();			//Initialize switches
     59a:	0e 94 f6 04 	call	0x9ec	; 0x9ec <SwitchInit>
	EncoderInit();			//Initialize encoder
     59e:	0e 94 49 01 	call	0x292	; 0x292 <EncoderInit>
	SpeakerInit();			//Initialize speaker system
     5a2:	0e 94 2c 04 	call	0x858	; 0x858 <SpeakerInit>
	
	//Enable interrupts
	PMIC.CTRL|=0b00000111;  //Enable low, medium, high priority interrupts
     5a6:	80 ea       	ldi	r24, 0xA0	; 160
     5a8:	90 e0       	ldi	r25, 0x00	; 0
     5aa:	20 ea       	ldi	r18, 0xA0	; 160
     5ac:	30 e0       	ldi	r19, 0x00	; 0
     5ae:	f9 01       	movw	r30, r18
     5b0:	22 81       	ldd	r18, Z+2	; 0x02
     5b2:	27 60       	ori	r18, 0x07	; 7
     5b4:	fc 01       	movw	r30, r24
     5b6:	22 83       	std	Z+2, r18	; 0x02
	SREG|=0b10000000;		//Global interrupt enable
     5b8:	8f e3       	ldi	r24, 0x3F	; 63
     5ba:	90 e0       	ldi	r25, 0x00	; 0
     5bc:	2f e3       	ldi	r18, 0x3F	; 63
     5be:	30 e0       	ldi	r19, 0x00	; 0
     5c0:	f9 01       	movw	r30, r18
     5c2:	20 81       	ld	r18, Z
     5c4:	20 68       	ori	r18, 0x80	; 128
     5c6:	fc 01       	movw	r30, r24
     5c8:	20 83       	st	Z, r18
     5ca:	80 e0       	ldi	r24, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	aa ef       	ldi	r26, 0xFA	; 250
     5d0:	b3 e4       	ldi	r27, 0x43	; 67
     5d2:	8f 83       	std	Y+7, r24	; 0x07
     5d4:	98 87       	std	Y+8, r25	; 0x08
     5d6:	a9 87       	std	Y+9, r26	; 0x09
     5d8:	ba 87       	std	Y+10, r27	; 0x0a

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     5da:	20 e0       	ldi	r18, 0x00	; 0
     5dc:	30 e0       	ldi	r19, 0x00	; 0
     5de:	4a e7       	ldi	r20, 0x7A	; 122
     5e0:	55 e4       	ldi	r21, 0x45	; 69
     5e2:	6f 81       	ldd	r22, Y+7	; 0x07
     5e4:	78 85       	ldd	r23, Y+8	; 0x08
     5e6:	89 85       	ldd	r24, Y+9	; 0x09
     5e8:	9a 85       	ldd	r25, Y+10	; 0x0a
     5ea:	0e 94 17 06 	call	0xc2e	; 0xc2e <__mulsf3>
     5ee:	dc 01       	movw	r26, r24
     5f0:	cb 01       	movw	r24, r22
     5f2:	8b 87       	std	Y+11, r24	; 0x0b
     5f4:	9c 87       	std	Y+12, r25	; 0x0c
     5f6:	ad 87       	std	Y+13, r26	; 0x0d
     5f8:	be 87       	std	Y+14, r27	; 0x0e
	if (__tmp < 1.0)
     5fa:	20 e0       	ldi	r18, 0x00	; 0
     5fc:	30 e0       	ldi	r19, 0x00	; 0
     5fe:	40 e8       	ldi	r20, 0x80	; 128
     600:	5f e3       	ldi	r21, 0x3F	; 63
     602:	6b 85       	ldd	r22, Y+11	; 0x0b
     604:	7c 85       	ldd	r23, Y+12	; 0x0c
     606:	8d 85       	ldd	r24, Y+13	; 0x0d
     608:	9e 85       	ldd	r25, Y+14	; 0x0e
     60a:	0e 94 91 05 	call	0xb22	; 0xb22 <__cmpsf2>
     60e:	88 23       	and	r24, r24
     610:	2c f4       	brge	.+10     	; 0x61c <main+0xa4>
		__ticks = 1;
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	90 e0       	ldi	r25, 0x00	; 0
     616:	8f 87       	std	Y+15, r24	; 0x0f
     618:	98 8b       	std	Y+16, r25	; 0x10
     61a:	3f c0       	rjmp	.+126    	; 0x69a <main+0x122>
	else if (__tmp > 65535)
     61c:	20 e0       	ldi	r18, 0x00	; 0
     61e:	3f ef       	ldi	r19, 0xFF	; 255
     620:	4f e7       	ldi	r20, 0x7F	; 127
     622:	57 e4       	ldi	r21, 0x47	; 71
     624:	6b 85       	ldd	r22, Y+11	; 0x0b
     626:	7c 85       	ldd	r23, Y+12	; 0x0c
     628:	8d 85       	ldd	r24, Y+13	; 0x0d
     62a:	9e 85       	ldd	r25, Y+14	; 0x0e
     62c:	0e 94 12 06 	call	0xc24	; 0xc24 <__gesf2>
     630:	18 16       	cp	r1, r24
     632:	4c f5       	brge	.+82     	; 0x686 <main+0x10e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     634:	20 e0       	ldi	r18, 0x00	; 0
     636:	30 e0       	ldi	r19, 0x00	; 0
     638:	40 e2       	ldi	r20, 0x20	; 32
     63a:	51 e4       	ldi	r21, 0x41	; 65
     63c:	6f 81       	ldd	r22, Y+7	; 0x07
     63e:	78 85       	ldd	r23, Y+8	; 0x08
     640:	89 85       	ldd	r24, Y+9	; 0x09
     642:	9a 85       	ldd	r25, Y+10	; 0x0a
     644:	0e 94 17 06 	call	0xc2e	; 0xc2e <__mulsf3>
     648:	dc 01       	movw	r26, r24
     64a:	cb 01       	movw	r24, r22
     64c:	bc 01       	movw	r22, r24
     64e:	cd 01       	movw	r24, r26
     650:	0e 94 96 05 	call	0xb2c	; 0xb2c <__fixunssfsi>
     654:	dc 01       	movw	r26, r24
     656:	cb 01       	movw	r24, r22
     658:	8f 87       	std	Y+15, r24	; 0x0f
     65a:	98 8b       	std	Y+16, r25	; 0x10
     65c:	0f c0       	rjmp	.+30     	; 0x67c <main+0x104>
     65e:	80 e9       	ldi	r24, 0x90	; 144
     660:	91 e0       	ldi	r25, 0x01	; 1
     662:	89 8b       	std	Y+17, r24	; 0x11
     664:	9a 8b       	std	Y+18, r25	; 0x12
     666:	89 89       	ldd	r24, Y+17	; 0x11
     668:	9a 89       	ldd	r25, Y+18	; 0x12
     66a:	01 97       	sbiw	r24, 0x01	; 1
     66c:	f1 f7       	brne	.-4      	; 0x66a <main+0xf2>
     66e:	89 8b       	std	Y+17, r24	; 0x11
     670:	9a 8b       	std	Y+18, r25	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     672:	8f 85       	ldd	r24, Y+15	; 0x0f
     674:	98 89       	ldd	r25, Y+16	; 0x10
     676:	01 97       	sbiw	r24, 0x01	; 1
     678:	8f 87       	std	Y+15, r24	; 0x0f
     67a:	98 8b       	std	Y+16, r25	; 0x10
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     67c:	8f 85       	ldd	r24, Y+15	; 0x0f
     67e:	98 89       	ldd	r25, Y+16	; 0x10
     680:	89 2b       	or	r24, r25
     682:	69 f7       	brne	.-38     	; 0x65e <main+0xe6>
     684:	14 c0       	rjmp	.+40     	; 0x6ae <main+0x136>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     686:	6b 85       	ldd	r22, Y+11	; 0x0b
     688:	7c 85       	ldd	r23, Y+12	; 0x0c
     68a:	8d 85       	ldd	r24, Y+13	; 0x0d
     68c:	9e 85       	ldd	r25, Y+14	; 0x0e
     68e:	0e 94 96 05 	call	0xb2c	; 0xb2c <__fixunssfsi>
     692:	dc 01       	movw	r26, r24
     694:	cb 01       	movw	r24, r22
     696:	8f 87       	std	Y+15, r24	; 0x0f
     698:	98 8b       	std	Y+16, r25	; 0x10
     69a:	8f 85       	ldd	r24, Y+15	; 0x0f
     69c:	98 89       	ldd	r25, Y+16	; 0x10
     69e:	8b 8b       	std	Y+19, r24	; 0x13
     6a0:	9c 8b       	std	Y+20, r25	; 0x14
     6a2:	8b 89       	ldd	r24, Y+19	; 0x13
     6a4:	9c 89       	ldd	r25, Y+20	; 0x14
     6a6:	01 97       	sbiw	r24, 0x01	; 1
     6a8:	f1 f7       	brne	.-4      	; 0x6a6 <main+0x12e>
     6aa:	8b 8b       	std	Y+19, r24	; 0x13
     6ac:	9c 8b       	std	Y+20, r25	; 0x14
	while (1){
		// Start ADC conversion
		//ADCA.CH0.CTRL |= 0x80;


		sprintf(text, "encoder: %d\r",(int)PORTC.DIR);
     6ae:	80 e4       	ldi	r24, 0x40	; 64
     6b0:	96 e0       	ldi	r25, 0x06	; 6
     6b2:	fc 01       	movw	r30, r24
     6b4:	80 81       	ld	r24, Z
     6b6:	88 2f       	mov	r24, r24
     6b8:	90 e0       	ldi	r25, 0x00	; 0
     6ba:	29 2f       	mov	r18, r25
     6bc:	2f 93       	push	r18
     6be:	8f 93       	push	r24
     6c0:	8e e0       	ldi	r24, 0x0E	; 14
     6c2:	90 e2       	ldi	r25, 0x20	; 32
     6c4:	89 2f       	mov	r24, r25
     6c6:	8f 93       	push	r24
     6c8:	8e e0       	ldi	r24, 0x0E	; 14
     6ca:	90 e2       	ldi	r25, 0x20	; 32
     6cc:	8f 93       	push	r24
     6ce:	80 e2       	ldi	r24, 0x20	; 32
     6d0:	90 e2       	ldi	r25, 0x20	; 32
     6d2:	89 2f       	mov	r24, r25
     6d4:	8f 93       	push	r24
     6d6:	80 e2       	ldi	r24, 0x20	; 32
     6d8:	90 e2       	ldi	r25, 0x20	; 32
     6da:	8f 93       	push	r24
     6dc:	0e 94 23 07 	call	0xe46	; 0xe46 <sprintf>
     6e0:	0f 90       	pop	r0
     6e2:	0f 90       	pop	r0
     6e4:	0f 90       	pop	r0
     6e6:	0f 90       	pop	r0
     6e8:	0f 90       	pop	r0
     6ea:	0f 90       	pop	r0
		puts(text);
     6ec:	80 e2       	ldi	r24, 0x20	; 32
     6ee:	90 e2       	ldi	r25, 0x20	; 32
     6f0:	0e 94 f3 06 	call	0xde6	; 0xde6 <puts>
		
		
		//SpeakerBeep(500,1000);
		//SpeakerBeep(1000,1000);
		//SpeakerBeep(1500,1000);
		for (int i = 1; i<4; i++)
     6f4:	81 e0       	ldi	r24, 0x01	; 1
     6f6:	90 e0       	ldi	r25, 0x00	; 0
     6f8:	89 83       	std	Y+1, r24	; 0x01
     6fa:	9a 83       	std	Y+2, r25	; 0x02
     6fc:	15 c0       	rjmp	.+42     	; 0x728 <main+0x1b0>
		{
			SpeakerBeep(i*500,1000);
     6fe:	29 81       	ldd	r18, Y+1	; 0x01
     700:	3a 81       	ldd	r19, Y+2	; 0x02
     702:	84 ef       	ldi	r24, 0xF4	; 244
     704:	91 e0       	ldi	r25, 0x01	; 1
     706:	28 9f       	mul	r18, r24
     708:	a0 01       	movw	r20, r0
     70a:	29 9f       	mul	r18, r25
     70c:	50 0d       	add	r21, r0
     70e:	38 9f       	mul	r19, r24
     710:	50 0d       	add	r21, r0
     712:	11 24       	eor	r1, r1
     714:	68 ee       	ldi	r22, 0xE8	; 232
     716:	73 e0       	ldi	r23, 0x03	; 3
     718:	ca 01       	movw	r24, r20
     71a:	0e 94 64 04 	call	0x8c8	; 0x8c8 <SpeakerBeep>
		
		
		//SpeakerBeep(500,1000);
		//SpeakerBeep(1000,1000);
		//SpeakerBeep(1500,1000);
		for (int i = 1; i<4; i++)
     71e:	89 81       	ldd	r24, Y+1	; 0x01
     720:	9a 81       	ldd	r25, Y+2	; 0x02
     722:	01 96       	adiw	r24, 0x01	; 1
     724:	89 83       	std	Y+1, r24	; 0x01
     726:	9a 83       	std	Y+2, r25	; 0x02
     728:	89 81       	ldd	r24, Y+1	; 0x01
     72a:	9a 81       	ldd	r25, Y+2	; 0x02
     72c:	04 97       	sbiw	r24, 0x04	; 4
     72e:	3c f3       	brlt	.-50     	; 0x6fe <main+0x186>
     730:	80 e0       	ldi	r24, 0x00	; 0
     732:	90 e4       	ldi	r25, 0x40	; 64
     734:	ac e1       	ldi	r26, 0x1C	; 28
     736:	b6 e4       	ldi	r27, 0x46	; 70
     738:	8b 83       	std	Y+3, r24	; 0x03
     73a:	9c 83       	std	Y+4, r25	; 0x04
     73c:	ad 83       	std	Y+5, r26	; 0x05
     73e:	be 83       	std	Y+6, r27	; 0x06

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     740:	20 e0       	ldi	r18, 0x00	; 0
     742:	30 e0       	ldi	r19, 0x00	; 0
     744:	4a e7       	ldi	r20, 0x7A	; 122
     746:	55 e4       	ldi	r21, 0x45	; 69
     748:	6b 81       	ldd	r22, Y+3	; 0x03
     74a:	7c 81       	ldd	r23, Y+4	; 0x04
     74c:	8d 81       	ldd	r24, Y+5	; 0x05
     74e:	9e 81       	ldd	r25, Y+6	; 0x06
     750:	0e 94 17 06 	call	0xc2e	; 0xc2e <__mulsf3>
     754:	dc 01       	movw	r26, r24
     756:	cb 01       	movw	r24, r22
     758:	8d 8b       	std	Y+21, r24	; 0x15
     75a:	9e 8b       	std	Y+22, r25	; 0x16
     75c:	af 8b       	std	Y+23, r26	; 0x17
     75e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     760:	20 e0       	ldi	r18, 0x00	; 0
     762:	30 e0       	ldi	r19, 0x00	; 0
     764:	40 e8       	ldi	r20, 0x80	; 128
     766:	5f e3       	ldi	r21, 0x3F	; 63
     768:	6d 89       	ldd	r22, Y+21	; 0x15
     76a:	7e 89       	ldd	r23, Y+22	; 0x16
     76c:	8f 89       	ldd	r24, Y+23	; 0x17
     76e:	98 8d       	ldd	r25, Y+24	; 0x18
     770:	0e 94 91 05 	call	0xb22	; 0xb22 <__cmpsf2>
     774:	88 23       	and	r24, r24
     776:	2c f4       	brge	.+10     	; 0x782 <main+0x20a>
		__ticks = 1;
     778:	81 e0       	ldi	r24, 0x01	; 1
     77a:	90 e0       	ldi	r25, 0x00	; 0
     77c:	89 8f       	std	Y+25, r24	; 0x19
     77e:	9a 8f       	std	Y+26, r25	; 0x1a
     780:	3f c0       	rjmp	.+126    	; 0x800 <main+0x288>
	else if (__tmp > 65535)
     782:	20 e0       	ldi	r18, 0x00	; 0
     784:	3f ef       	ldi	r19, 0xFF	; 255
     786:	4f e7       	ldi	r20, 0x7F	; 127
     788:	57 e4       	ldi	r21, 0x47	; 71
     78a:	6d 89       	ldd	r22, Y+21	; 0x15
     78c:	7e 89       	ldd	r23, Y+22	; 0x16
     78e:	8f 89       	ldd	r24, Y+23	; 0x17
     790:	98 8d       	ldd	r25, Y+24	; 0x18
     792:	0e 94 12 06 	call	0xc24	; 0xc24 <__gesf2>
     796:	18 16       	cp	r1, r24
     798:	4c f5       	brge	.+82     	; 0x7ec <main+0x274>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     79a:	20 e0       	ldi	r18, 0x00	; 0
     79c:	30 e0       	ldi	r19, 0x00	; 0
     79e:	40 e2       	ldi	r20, 0x20	; 32
     7a0:	51 e4       	ldi	r21, 0x41	; 65
     7a2:	6b 81       	ldd	r22, Y+3	; 0x03
     7a4:	7c 81       	ldd	r23, Y+4	; 0x04
     7a6:	8d 81       	ldd	r24, Y+5	; 0x05
     7a8:	9e 81       	ldd	r25, Y+6	; 0x06
     7aa:	0e 94 17 06 	call	0xc2e	; 0xc2e <__mulsf3>
     7ae:	dc 01       	movw	r26, r24
     7b0:	cb 01       	movw	r24, r22
     7b2:	bc 01       	movw	r22, r24
     7b4:	cd 01       	movw	r24, r26
     7b6:	0e 94 96 05 	call	0xb2c	; 0xb2c <__fixunssfsi>
     7ba:	dc 01       	movw	r26, r24
     7bc:	cb 01       	movw	r24, r22
     7be:	89 8f       	std	Y+25, r24	; 0x19
     7c0:	9a 8f       	std	Y+26, r25	; 0x1a
     7c2:	0f c0       	rjmp	.+30     	; 0x7e2 <main+0x26a>
     7c4:	80 e9       	ldi	r24, 0x90	; 144
     7c6:	91 e0       	ldi	r25, 0x01	; 1
     7c8:	8b 8f       	std	Y+27, r24	; 0x1b
     7ca:	9c 8f       	std	Y+28, r25	; 0x1c
     7cc:	8b 8d       	ldd	r24, Y+27	; 0x1b
     7ce:	9c 8d       	ldd	r25, Y+28	; 0x1c
     7d0:	01 97       	sbiw	r24, 0x01	; 1
     7d2:	f1 f7       	brne	.-4      	; 0x7d0 <main+0x258>
     7d4:	8b 8f       	std	Y+27, r24	; 0x1b
     7d6:	9c 8f       	std	Y+28, r25	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     7d8:	89 8d       	ldd	r24, Y+25	; 0x19
     7da:	9a 8d       	ldd	r25, Y+26	; 0x1a
     7dc:	01 97       	sbiw	r24, 0x01	; 1
     7de:	89 8f       	std	Y+25, r24	; 0x19
     7e0:	9a 8f       	std	Y+26, r25	; 0x1a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7e2:	89 8d       	ldd	r24, Y+25	; 0x19
     7e4:	9a 8d       	ldd	r25, Y+26	; 0x1a
     7e6:	89 2b       	or	r24, r25
     7e8:	69 f7       	brne	.-38     	; 0x7c4 <main+0x24c>
     7ea:	14 c0       	rjmp	.+40     	; 0x814 <main+0x29c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     7ec:	6d 89       	ldd	r22, Y+21	; 0x15
     7ee:	7e 89       	ldd	r23, Y+22	; 0x16
     7f0:	8f 89       	ldd	r24, Y+23	; 0x17
     7f2:	98 8d       	ldd	r25, Y+24	; 0x18
     7f4:	0e 94 96 05 	call	0xb2c	; 0xb2c <__fixunssfsi>
     7f8:	dc 01       	movw	r26, r24
     7fa:	cb 01       	movw	r24, r22
     7fc:	89 8f       	std	Y+25, r24	; 0x19
     7fe:	9a 8f       	std	Y+26, r25	; 0x1a
     800:	89 8d       	ldd	r24, Y+25	; 0x19
     802:	9a 8d       	ldd	r25, Y+26	; 0x1a
     804:	8d 8f       	std	Y+29, r24	; 0x1d
     806:	9e 8f       	std	Y+30, r25	; 0x1e
     808:	8d 8d       	ldd	r24, Y+29	; 0x1d
     80a:	9e 8d       	ldd	r25, Y+30	; 0x1e
     80c:	01 97       	sbiw	r24, 0x01	; 1
     80e:	f1 f7       	brne	.-4      	; 0x80c <main+0x294>
     810:	8d 8f       	std	Y+29, r24	; 0x1d
     812:	9e 8f       	std	Y+30, r25	; 0x1e
		

		
		
		//putchar('U');
	}
     814:	4c cf       	rjmp	.-360    	; 0x6ae <main+0x136>

00000816 <LEDInit>:
#include "LED.h"
#include <avr/io.h>

void LEDInit(void)
{
     816:	cf 93       	push	r28
     818:	df 93       	push	r29
     81a:	cd b7       	in	r28, 0x3d	; 61
     81c:	de b7       	in	r29, 0x3e	; 62
	PORTE.DIRSET=0b00001111;
     81e:	80 e8       	ldi	r24, 0x80	; 128
     820:	96 e0       	ldi	r25, 0x06	; 6
     822:	2f e0       	ldi	r18, 0x0F	; 15
     824:	fc 01       	movw	r30, r24
     826:	21 83       	std	Z+1, r18	; 0x01
	PORTE.PIN0CTRL=0b01000000;
     828:	80 e8       	ldi	r24, 0x80	; 128
     82a:	96 e0       	ldi	r25, 0x06	; 6
     82c:	20 e4       	ldi	r18, 0x40	; 64
     82e:	fc 01       	movw	r30, r24
     830:	20 8b       	std	Z+16, r18	; 0x10
	PORTE.PIN1CTRL=0b01000000;
     832:	80 e8       	ldi	r24, 0x80	; 128
     834:	96 e0       	ldi	r25, 0x06	; 6
     836:	20 e4       	ldi	r18, 0x40	; 64
     838:	fc 01       	movw	r30, r24
     83a:	21 8b       	std	Z+17, r18	; 0x11
	PORTE.PIN2CTRL=0b01000000;
     83c:	80 e8       	ldi	r24, 0x80	; 128
     83e:	96 e0       	ldi	r25, 0x06	; 6
     840:	20 e4       	ldi	r18, 0x40	; 64
     842:	fc 01       	movw	r30, r24
     844:	22 8b       	std	Z+18, r18	; 0x12
	PORTE.PIN3CTRL=0b01000000;
     846:	80 e8       	ldi	r24, 0x80	; 128
     848:	96 e0       	ldi	r25, 0x06	; 6
     84a:	20 e4       	ldi	r18, 0x40	; 64
     84c:	fc 01       	movw	r30, r24
     84e:	23 8b       	std	Z+19, r18	; 0x13
	
}
     850:	00 00       	nop
     852:	df 91       	pop	r29
     854:	cf 91       	pop	r28
     856:	08 95       	ret

00000858 <SpeakerInit>:
#include "speaker.h"

//All calculations for timers are based on the external 16MHz base clock. 

void SpeakerInit(void)
{
     858:	cf 93       	push	r28
     85a:	df 93       	push	r29
     85c:	cd b7       	in	r28, 0x3d	; 61
     85e:	de b7       	in	r29, 0x3e	; 62
		//Setup IO
		PORTC.DIRCLR= 0b00000001; //set pin as input so no signal comes trough
     860:	80 e4       	ldi	r24, 0x40	; 64
     862:	96 e0       	ldi	r25, 0x06	; 6
     864:	21 e0       	ldi	r18, 0x01	; 1
     866:	fc 01       	movw	r30, r24
     868:	22 83       	std	Z+2, r18	; 0x02
		PORTC.PIN0CTRL = 0b00010000; 
     86a:	80 e4       	ldi	r24, 0x40	; 64
     86c:	96 e0       	ldi	r25, 0x06	; 6
     86e:	20 e1       	ldi	r18, 0x10	; 16
     870:	fc 01       	movw	r30, r24
     872:	20 8b       	std	Z+16, r18	; 0x10
		
		//Setup TC for frequency generation
		TCC0.CTRLA= 0; //turn counter of
     874:	80 e0       	ldi	r24, 0x00	; 0
     876:	98 e0       	ldi	r25, 0x08	; 8
     878:	fc 01       	movw	r30, r24
     87a:	10 82       	st	Z, r1
		TCC0.CTRLB= 0b00010011; //set counter in single slope pwm mode and overwrite the first pin of the port with the pwm signal.
     87c:	80 e0       	ldi	r24, 0x00	; 0
     87e:	98 e0       	ldi	r25, 0x08	; 8
     880:	23 e1       	ldi	r18, 0x13	; 19
     882:	fc 01       	movw	r30, r24
     884:	21 83       	std	Z+1, r18	; 0x01
		//TCC0.CTRLC=  //nothing to see here
		TCC0.CTRLD= 0; //random settings not important just turn of
     886:	80 e0       	ldi	r24, 0x00	; 0
     888:	98 e0       	ldi	r25, 0x08	; 8
     88a:	fc 01       	movw	r30, r24
     88c:	13 82       	std	Z+3, r1	; 0x03
		TCC0.CTRLE= 0;
     88e:	80 e0       	ldi	r24, 0x00	; 0
     890:	98 e0       	ldi	r25, 0x08	; 8
     892:	fc 01       	movw	r30, r24
     894:	14 82       	std	Z+4, r1	; 0x04
		
		//Setup TC for duration timing
		TCC1.CTRLA= 0; //turn counter off
     896:	80 e4       	ldi	r24, 0x40	; 64
     898:	98 e0       	ldi	r25, 0x08	; 8
     89a:	fc 01       	movw	r30, r24
     89c:	10 82       	st	Z, r1
		TCC1.CTRLB= 0; //nothing to set here
     89e:	80 e4       	ldi	r24, 0x40	; 64
     8a0:	98 e0       	ldi	r25, 0x08	; 8
     8a2:	fc 01       	movw	r30, r24
     8a4:	11 82       	std	Z+1, r1	; 0x01
		//TCC1.CTRLC=
		TCC1.CTRLD= 0;
     8a6:	80 e4       	ldi	r24, 0x40	; 64
     8a8:	98 e0       	ldi	r25, 0x08	; 8
     8aa:	fc 01       	movw	r30, r24
     8ac:	13 82       	std	Z+3, r1	; 0x03
		TCC1.CTRLE= 0;
     8ae:	80 e4       	ldi	r24, 0x40	; 64
     8b0:	98 e0       	ldi	r25, 0x08	; 8
     8b2:	fc 01       	movw	r30, r24
     8b4:	14 82       	std	Z+4, r1	; 0x04
		TCC1.INTCTRLA = 0b00000011; //set overflow interrupt to top level
     8b6:	80 e4       	ldi	r24, 0x40	; 64
     8b8:	98 e0       	ldi	r25, 0x08	; 8
     8ba:	23 e0       	ldi	r18, 0x03	; 3
     8bc:	fc 01       	movw	r30, r24
     8be:	26 83       	std	Z+6, r18	; 0x06
		
		
}
     8c0:	00 00       	nop
     8c2:	df 91       	pop	r29
     8c4:	cf 91       	pop	r28
     8c6:	08 95       	ret

000008c8 <SpeakerBeep>:
void SpeakerBeep(int Frequency,int Length)
{
     8c8:	0f 93       	push	r16
     8ca:	1f 93       	push	r17
     8cc:	cf 93       	push	r28
     8ce:	df 93       	push	r29
     8d0:	00 d0       	rcall	.+0      	; 0x8d2 <SpeakerBeep+0xa>
     8d2:	00 d0       	rcall	.+0      	; 0x8d4 <SpeakerBeep+0xc>
     8d4:	cd b7       	in	r28, 0x3d	; 61
     8d6:	de b7       	in	r29, 0x3e	; 62
     8d8:	89 83       	std	Y+1, r24	; 0x01
     8da:	9a 83       	std	Y+2, r25	; 0x02
     8dc:	6b 83       	std	Y+3, r22	; 0x03
     8de:	7c 83       	std	Y+4, r23	; 0x04
	TCC0.CTRLA= 0b00000101; //turn on timer with prescaler divide by 64
     8e0:	80 e0       	ldi	r24, 0x00	; 0
     8e2:	98 e0       	ldi	r25, 0x08	; 8
     8e4:	25 e0       	ldi	r18, 0x05	; 5
     8e6:	fc 01       	movw	r30, r24
     8e8:	20 83       	st	Z, r18
	TCC0.CNT = 0; //set count to 0
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	98 e0       	ldi	r25, 0x08	; 8
     8ee:	fc 01       	movw	r30, r24
     8f0:	10 a2       	std	Z+32, r1	; 0x20
     8f2:	11 a2       	std	Z+33, r1	; 0x21
	TCC0.PER = 250000/Frequency; //set period of the pwm signal
     8f4:	00 e0       	ldi	r16, 0x00	; 0
     8f6:	18 e0       	ldi	r17, 0x08	; 8
     8f8:	89 81       	ldd	r24, Y+1	; 0x01
     8fa:	9a 81       	ldd	r25, Y+2	; 0x02
     8fc:	9c 01       	movw	r18, r24
     8fe:	99 0f       	add	r25, r25
     900:	44 0b       	sbc	r20, r20
     902:	55 0b       	sbc	r21, r21
     904:	80 e9       	ldi	r24, 0x90	; 144
     906:	90 ed       	ldi	r25, 0xD0	; 208
     908:	a3 e0       	ldi	r26, 0x03	; 3
     90a:	b0 e0       	ldi	r27, 0x00	; 0
     90c:	bc 01       	movw	r22, r24
     90e:	cd 01       	movw	r24, r26
     910:	0e 94 ac 06 	call	0xd58	; 0xd58 <__divmodsi4>
     914:	da 01       	movw	r26, r20
     916:	c9 01       	movw	r24, r18
     918:	f8 01       	movw	r30, r16
     91a:	86 a3       	std	Z+38, r24	; 0x26
     91c:	97 a3       	std	Z+39, r25	; 0x27
	TCC0.CCA = TCC0.PER / 2; //duty cycle 0.5
     91e:	80 e0       	ldi	r24, 0x00	; 0
     920:	98 e0       	ldi	r25, 0x08	; 8
     922:	20 e0       	ldi	r18, 0x00	; 0
     924:	38 e0       	ldi	r19, 0x08	; 8
     926:	f9 01       	movw	r30, r18
     928:	26 a1       	ldd	r18, Z+38	; 0x26
     92a:	37 a1       	ldd	r19, Z+39	; 0x27
     92c:	36 95       	lsr	r19
     92e:	27 95       	ror	r18
     930:	fc 01       	movw	r30, r24
     932:	20 a7       	std	Z+40, r18	; 0x28
     934:	31 a7       	std	Z+41, r19	; 0x29
	PORTC.DIRSET = 0b00000001; //turn port as output
     936:	80 e4       	ldi	r24, 0x40	; 64
     938:	96 e0       	ldi	r25, 0x06	; 6
     93a:	21 e0       	ldi	r18, 0x01	; 1
     93c:	fc 01       	movw	r30, r24
     93e:	21 83       	std	Z+1, r18	; 0x01
	TCC1.CTRLA= 0b00000111; //turn on counter2 with prescaler divide by 1024 for a max time of 2 sec
     940:	80 e4       	ldi	r24, 0x40	; 64
     942:	98 e0       	ldi	r25, 0x08	; 8
     944:	27 e0       	ldi	r18, 0x07	; 7
     946:	fc 01       	movw	r30, r24
     948:	20 83       	st	Z, r18
	TCC1.CNT = 0; //set count to 0
     94a:	80 e4       	ldi	r24, 0x40	; 64
     94c:	98 e0       	ldi	r25, 0x08	; 8
     94e:	fc 01       	movw	r30, r24
     950:	10 a2       	std	Z+32, r1	; 0x20
     952:	11 a2       	std	Z+33, r1	; 0x21
	TCC1.PER = (Length*15);//not exactly correct because real value is 15.625 but processor doesn't like floating point operations.
     954:	80 e4       	ldi	r24, 0x40	; 64
     956:	98 e0       	ldi	r25, 0x08	; 8
     958:	2b 81       	ldd	r18, Y+3	; 0x03
     95a:	3c 81       	ldd	r19, Y+4	; 0x04
     95c:	6f e0       	ldi	r22, 0x0F	; 15
     95e:	62 9f       	mul	r22, r18
     960:	a0 01       	movw	r20, r0
     962:	63 9f       	mul	r22, r19
     964:	50 0d       	add	r21, r0
     966:	11 24       	eor	r1, r1
     968:	9a 01       	movw	r18, r20
     96a:	fc 01       	movw	r30, r24
     96c:	26 a3       	std	Z+38, r18	; 0x26
     96e:	37 a3       	std	Z+39, r19	; 0x27
	while(PORTC.DIR & 1){ //this function can not move on because other sounds could overrule the current one
     970:	00 00       	nop
     972:	80 e4       	ldi	r24, 0x40	; 64
     974:	96 e0       	ldi	r25, 0x06	; 6
     976:	fc 01       	movw	r30, r24
     978:	80 81       	ld	r24, Z
     97a:	88 2f       	mov	r24, r24
     97c:	90 e0       	ldi	r25, 0x00	; 0
     97e:	81 70       	andi	r24, 0x01	; 1
     980:	99 27       	eor	r25, r25
     982:	89 2b       	or	r24, r25
     984:	b1 f7       	brne	.-20     	; 0x972 <SpeakerBeep+0xaa>
		
	}
}
     986:	00 00       	nop
     988:	24 96       	adiw	r28, 0x04	; 4
     98a:	cd bf       	out	0x3d, r28	; 61
     98c:	de bf       	out	0x3e, r29	; 62
     98e:	df 91       	pop	r29
     990:	cf 91       	pop	r28
     992:	1f 91       	pop	r17
     994:	0f 91       	pop	r16
     996:	08 95       	ret

00000998 <__vector_20>:

ISR(TCC1_OVF_vect){ //turn pin to input and turn of timers.
     998:	1f 92       	push	r1
     99a:	0f 92       	push	r0
     99c:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     9a0:	0f 92       	push	r0
     9a2:	11 24       	eor	r1, r1
     9a4:	2f 93       	push	r18
     9a6:	8f 93       	push	r24
     9a8:	9f 93       	push	r25
     9aa:	ef 93       	push	r30
     9ac:	ff 93       	push	r31
     9ae:	cf 93       	push	r28
     9b0:	df 93       	push	r29
     9b2:	cd b7       	in	r28, 0x3d	; 61
     9b4:	de b7       	in	r29, 0x3e	; 62
	PORTC.DIRCLR = 0b00000001; 
     9b6:	80 e4       	ldi	r24, 0x40	; 64
     9b8:	96 e0       	ldi	r25, 0x06	; 6
     9ba:	21 e0       	ldi	r18, 0x01	; 1
     9bc:	fc 01       	movw	r30, r24
     9be:	22 83       	std	Z+2, r18	; 0x02
	TCC0.CTRLA = 0;
     9c0:	80 e0       	ldi	r24, 0x00	; 0
     9c2:	98 e0       	ldi	r25, 0x08	; 8
     9c4:	fc 01       	movw	r30, r24
     9c6:	10 82       	st	Z, r1
	TCC1.CTRLA = 0;
     9c8:	80 e4       	ldi	r24, 0x40	; 64
     9ca:	98 e0       	ldi	r25, 0x08	; 8
     9cc:	fc 01       	movw	r30, r24
     9ce:	10 82       	st	Z, r1
}
     9d0:	00 00       	nop
     9d2:	df 91       	pop	r29
     9d4:	cf 91       	pop	r28
     9d6:	ff 91       	pop	r31
     9d8:	ef 91       	pop	r30
     9da:	9f 91       	pop	r25
     9dc:	8f 91       	pop	r24
     9de:	2f 91       	pop	r18
     9e0:	0f 90       	pop	r0
     9e2:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     9e6:	0f 90       	pop	r0
     9e8:	1f 90       	pop	r1
     9ea:	18 95       	reti

000009ec <SwitchInit>:
#include "switch.h"
#include <avr/io.h>

void SwitchInit(void)
{
     9ec:	cf 93       	push	r28
     9ee:	df 93       	push	r29
     9f0:	cd b7       	in	r28, 0x3d	; 61
     9f2:	de b7       	in	r29, 0x3e	; 62
	PORTD.DIRCLR=0b11110001;
     9f4:	80 e6       	ldi	r24, 0x60	; 96
     9f6:	96 e0       	ldi	r25, 0x06	; 6
     9f8:	21 ef       	ldi	r18, 0xF1	; 241
     9fa:	fc 01       	movw	r30, r24
     9fc:	22 83       	std	Z+2, r18	; 0x02
	PORTD.PIN0CTRL=0b01011000;
     9fe:	80 e6       	ldi	r24, 0x60	; 96
     a00:	96 e0       	ldi	r25, 0x06	; 6
     a02:	28 e5       	ldi	r18, 0x58	; 88
     a04:	fc 01       	movw	r30, r24
     a06:	20 8b       	std	Z+16, r18	; 0x10
	PORTD.PIN4CTRL=0b01011000;
     a08:	80 e6       	ldi	r24, 0x60	; 96
     a0a:	96 e0       	ldi	r25, 0x06	; 6
     a0c:	28 e5       	ldi	r18, 0x58	; 88
     a0e:	fc 01       	movw	r30, r24
     a10:	24 8b       	std	Z+20, r18	; 0x14
	PORTD.PIN5CTRL=0b01011000;
     a12:	80 e6       	ldi	r24, 0x60	; 96
     a14:	96 e0       	ldi	r25, 0x06	; 6
     a16:	28 e5       	ldi	r18, 0x58	; 88
     a18:	fc 01       	movw	r30, r24
     a1a:	25 8b       	std	Z+21, r18	; 0x15
	PORTD.PIN6CTRL=0b01011000;
     a1c:	80 e6       	ldi	r24, 0x60	; 96
     a1e:	96 e0       	ldi	r25, 0x06	; 6
     a20:	28 e5       	ldi	r18, 0x58	; 88
     a22:	fc 01       	movw	r30, r24
     a24:	26 8b       	std	Z+22, r18	; 0x16
	PORTD.PIN7CTRL=0b01011000;
     a26:	80 e6       	ldi	r24, 0x60	; 96
     a28:	96 e0       	ldi	r25, 0x06	; 6
     a2a:	28 e5       	ldi	r18, 0x58	; 88
     a2c:	fc 01       	movw	r30, r24
     a2e:	27 8b       	std	Z+23, r18	; 0x17
}
     a30:	00 00       	nop
     a32:	df 91       	pop	r29
     a34:	cf 91       	pop	r28
     a36:	08 95       	ret

00000a38 <USARTInit>:
 int stdio_putchar(char c, FILE * stream);
 int stdio_getchar(FILE *stream);
static FILE UsartStdio = FDEV_SETUP_STREAM(stdio_putchar, stdio_getchar,_FDEV_SETUP_WRITE);

void USARTInit(void)
{
     a38:	cf 93       	push	r28
     a3a:	df 93       	push	r29
     a3c:	cd b7       	in	r28, 0x3d	; 61
     a3e:	de b7       	in	r29, 0x3e	; 62
	USART_PORT.DIRSET=0b00001000;	
     a40:	80 e6       	ldi	r24, 0x60	; 96
     a42:	96 e0       	ldi	r25, 0x06	; 6
     a44:	28 e0       	ldi	r18, 0x08	; 8
     a46:	fc 01       	movw	r30, r24
     a48:	21 83       	std	Z+1, r18	; 0x01
	USART_PORT.DIRCLR=0b00000100;
     a4a:	80 e6       	ldi	r24, 0x60	; 96
     a4c:	96 e0       	ldi	r25, 0x06	; 6
     a4e:	24 e0       	ldi	r18, 0x04	; 4
     a50:	fc 01       	movw	r30, r24
     a52:	22 83       	std	Z+2, r18	; 0x02
	
	USART.CTRLA=0b00000000;
     a54:	80 ea       	ldi	r24, 0xA0	; 160
     a56:	99 e0       	ldi	r25, 0x09	; 9
     a58:	fc 01       	movw	r30, r24
     a5a:	13 82       	std	Z+3, r1	; 0x03
	USART.CTRLB=0b00011000;
     a5c:	80 ea       	ldi	r24, 0xA0	; 160
     a5e:	99 e0       	ldi	r25, 0x09	; 9
     a60:	28 e1       	ldi	r18, 0x18	; 24
     a62:	fc 01       	movw	r30, r24
     a64:	24 83       	std	Z+4, r18	; 0x04
	USART.CTRLC=0b00000011;
     a66:	80 ea       	ldi	r24, 0xA0	; 160
     a68:	99 e0       	ldi	r25, 0x09	; 9
     a6a:	23 e0       	ldi	r18, 0x03	; 3
     a6c:	fc 01       	movw	r30, r24
     a6e:	25 83       	std	Z+5, r18	; 0x05
	
	USART.BAUDCTRLA=0xD7; //BSEL=3301, BSCALE=-5 9600 baud
     a70:	80 ea       	ldi	r24, 0xA0	; 160
     a72:	99 e0       	ldi	r25, 0x09	; 9
     a74:	27 ed       	ldi	r18, 0xD7	; 215
     a76:	fc 01       	movw	r30, r24
     a78:	26 83       	std	Z+6, r18	; 0x06
	USART.BAUDCTRLB=0x93; 
     a7a:	80 ea       	ldi	r24, 0xA0	; 160
     a7c:	99 e0       	ldi	r25, 0x09	; 9
     a7e:	23 e9       	ldi	r18, 0x93	; 147
     a80:	fc 01       	movw	r30, r24
     a82:	27 83       	std	Z+7, r18	; 0x07
	
	stdout=&UsartStdio;
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	90 e2       	ldi	r25, 0x20	; 32
     a88:	80 93 87 20 	sts	0x2087, r24	; 0x802087 <__iob+0x2>
     a8c:	90 93 88 20 	sts	0x2088, r25	; 0x802088 <__iob+0x3>
	stdin=&UsartStdio;
     a90:	80 e0       	ldi	r24, 0x00	; 0
     a92:	90 e2       	ldi	r25, 0x20	; 32
     a94:	80 93 85 20 	sts	0x2085, r24	; 0x802085 <__iob>
     a98:	90 93 86 20 	sts	0x2086, r25	; 0x802086 <__iob+0x1>
}
     a9c:	00 00       	nop
     a9e:	df 91       	pop	r29
     aa0:	cf 91       	pop	r28
     aa2:	08 95       	ret

00000aa4 <stdio_putchar>:


int stdio_putchar(char c, FILE * stream)
{
     aa4:	cf 93       	push	r28
     aa6:	df 93       	push	r29
     aa8:	00 d0       	rcall	.+0      	; 0xaaa <stdio_putchar+0x6>
     aaa:	1f 92       	push	r1
     aac:	cd b7       	in	r28, 0x3d	; 61
     aae:	de b7       	in	r29, 0x3e	; 62
     ab0:	89 83       	std	Y+1, r24	; 0x01
     ab2:	6a 83       	std	Y+2, r22	; 0x02
     ab4:	7b 83       	std	Y+3, r23	; 0x03
	USART.DATA = c;
     ab6:	80 ea       	ldi	r24, 0xA0	; 160
     ab8:	99 e0       	ldi	r25, 0x09	; 9
     aba:	29 81       	ldd	r18, Y+1	; 0x01
     abc:	fc 01       	movw	r30, r24
     abe:	20 83       	st	Z, r18
	while (!(USART.STATUS & 0b01000000));
     ac0:	00 00       	nop
     ac2:	80 ea       	ldi	r24, 0xA0	; 160
     ac4:	99 e0       	ldi	r25, 0x09	; 9
     ac6:	fc 01       	movw	r30, r24
     ac8:	81 81       	ldd	r24, Z+1	; 0x01
     aca:	88 2f       	mov	r24, r24
     acc:	90 e0       	ldi	r25, 0x00	; 0
     ace:	80 74       	andi	r24, 0x40	; 64
     ad0:	99 27       	eor	r25, r25
     ad2:	89 2b       	or	r24, r25
     ad4:	b1 f3       	breq	.-20     	; 0xac2 <stdio_putchar+0x1e>
	USART.STATUS=0b01000000;
     ad6:	80 ea       	ldi	r24, 0xA0	; 160
     ad8:	99 e0       	ldi	r25, 0x09	; 9
     ada:	20 e4       	ldi	r18, 0x40	; 64
     adc:	fc 01       	movw	r30, r24
     ade:	21 83       	std	Z+1, r18	; 0x01
	return 0;
     ae0:	80 e0       	ldi	r24, 0x00	; 0
     ae2:	90 e0       	ldi	r25, 0x00	; 0
}
     ae4:	23 96       	adiw	r28, 0x03	; 3
     ae6:	cd bf       	out	0x3d, r28	; 61
     ae8:	de bf       	out	0x3e, r29	; 62
     aea:	df 91       	pop	r29
     aec:	cf 91       	pop	r28
     aee:	08 95       	ret

00000af0 <stdio_getchar>:
	
int stdio_getchar(FILE *stream)
{
     af0:	cf 93       	push	r28
     af2:	df 93       	push	r29
     af4:	00 d0       	rcall	.+0      	; 0xaf6 <stdio_getchar+0x6>
     af6:	cd b7       	in	r28, 0x3d	; 61
     af8:	de b7       	in	r29, 0x3e	; 62
     afa:	89 83       	std	Y+1, r24	; 0x01
     afc:	9a 83       	std	Y+2, r25	; 0x02
	while (!(USART.STATUS & 0b10000000));
     afe:	00 00       	nop
     b00:	80 ea       	ldi	r24, 0xA0	; 160
     b02:	99 e0       	ldi	r25, 0x09	; 9
     b04:	fc 01       	movw	r30, r24
     b06:	81 81       	ldd	r24, Z+1	; 0x01
     b08:	88 23       	and	r24, r24
     b0a:	d4 f7       	brge	.-12     	; 0xb00 <stdio_getchar+0x10>
	return USART.DATA;
     b0c:	80 ea       	ldi	r24, 0xA0	; 160
     b0e:	99 e0       	ldi	r25, 0x09	; 9
     b10:	fc 01       	movw	r30, r24
     b12:	80 81       	ld	r24, Z
     b14:	88 2f       	mov	r24, r24
     b16:	90 e0       	ldi	r25, 0x00	; 0
}
     b18:	0f 90       	pop	r0
     b1a:	0f 90       	pop	r0
     b1c:	df 91       	pop	r29
     b1e:	cf 91       	pop	r28
     b20:	08 95       	ret

00000b22 <__cmpsf2>:
     b22:	0e 94 c5 05 	call	0xb8a	; 0xb8a <__fp_cmp>
     b26:	08 f4       	brcc	.+2      	; 0xb2a <__cmpsf2+0x8>
     b28:	81 e0       	ldi	r24, 0x01	; 1
     b2a:	08 95       	ret

00000b2c <__fixunssfsi>:
     b2c:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <__fp_splitA>
     b30:	88 f0       	brcs	.+34     	; 0xb54 <__fixunssfsi+0x28>
     b32:	9f 57       	subi	r25, 0x7F	; 127
     b34:	98 f0       	brcs	.+38     	; 0xb5c <__fixunssfsi+0x30>
     b36:	b9 2f       	mov	r27, r25
     b38:	99 27       	eor	r25, r25
     b3a:	b7 51       	subi	r27, 0x17	; 23
     b3c:	b0 f0       	brcs	.+44     	; 0xb6a <__fixunssfsi+0x3e>
     b3e:	e1 f0       	breq	.+56     	; 0xb78 <__fixunssfsi+0x4c>
     b40:	66 0f       	add	r22, r22
     b42:	77 1f       	adc	r23, r23
     b44:	88 1f       	adc	r24, r24
     b46:	99 1f       	adc	r25, r25
     b48:	1a f0       	brmi	.+6      	; 0xb50 <__fixunssfsi+0x24>
     b4a:	ba 95       	dec	r27
     b4c:	c9 f7       	brne	.-14     	; 0xb40 <__fixunssfsi+0x14>
     b4e:	14 c0       	rjmp	.+40     	; 0xb78 <__fixunssfsi+0x4c>
     b50:	b1 30       	cpi	r27, 0x01	; 1
     b52:	91 f0       	breq	.+36     	; 0xb78 <__fixunssfsi+0x4c>
     b54:	0e 94 0b 06 	call	0xc16	; 0xc16 <__fp_zero>
     b58:	b1 e0       	ldi	r27, 0x01	; 1
     b5a:	08 95       	ret
     b5c:	0c 94 0b 06 	jmp	0xc16	; 0xc16 <__fp_zero>
     b60:	67 2f       	mov	r22, r23
     b62:	78 2f       	mov	r23, r24
     b64:	88 27       	eor	r24, r24
     b66:	b8 5f       	subi	r27, 0xF8	; 248
     b68:	39 f0       	breq	.+14     	; 0xb78 <__fixunssfsi+0x4c>
     b6a:	b9 3f       	cpi	r27, 0xF9	; 249
     b6c:	cc f3       	brlt	.-14     	; 0xb60 <__fixunssfsi+0x34>
     b6e:	86 95       	lsr	r24
     b70:	77 95       	ror	r23
     b72:	67 95       	ror	r22
     b74:	b3 95       	inc	r27
     b76:	d9 f7       	brne	.-10     	; 0xb6e <__fixunssfsi+0x42>
     b78:	3e f4       	brtc	.+14     	; 0xb88 <__fixunssfsi+0x5c>
     b7a:	90 95       	com	r25
     b7c:	80 95       	com	r24
     b7e:	70 95       	com	r23
     b80:	61 95       	neg	r22
     b82:	7f 4f       	sbci	r23, 0xFF	; 255
     b84:	8f 4f       	sbci	r24, 0xFF	; 255
     b86:	9f 4f       	sbci	r25, 0xFF	; 255
     b88:	08 95       	ret

00000b8a <__fp_cmp>:
     b8a:	99 0f       	add	r25, r25
     b8c:	00 08       	sbc	r0, r0
     b8e:	55 0f       	add	r21, r21
     b90:	aa 0b       	sbc	r26, r26
     b92:	e0 e8       	ldi	r30, 0x80	; 128
     b94:	fe ef       	ldi	r31, 0xFE	; 254
     b96:	16 16       	cp	r1, r22
     b98:	17 06       	cpc	r1, r23
     b9a:	e8 07       	cpc	r30, r24
     b9c:	f9 07       	cpc	r31, r25
     b9e:	c0 f0       	brcs	.+48     	; 0xbd0 <__fp_cmp+0x46>
     ba0:	12 16       	cp	r1, r18
     ba2:	13 06       	cpc	r1, r19
     ba4:	e4 07       	cpc	r30, r20
     ba6:	f5 07       	cpc	r31, r21
     ba8:	98 f0       	brcs	.+38     	; 0xbd0 <__fp_cmp+0x46>
     baa:	62 1b       	sub	r22, r18
     bac:	73 0b       	sbc	r23, r19
     bae:	84 0b       	sbc	r24, r20
     bb0:	95 0b       	sbc	r25, r21
     bb2:	39 f4       	brne	.+14     	; 0xbc2 <__fp_cmp+0x38>
     bb4:	0a 26       	eor	r0, r26
     bb6:	61 f0       	breq	.+24     	; 0xbd0 <__fp_cmp+0x46>
     bb8:	23 2b       	or	r18, r19
     bba:	24 2b       	or	r18, r20
     bbc:	25 2b       	or	r18, r21
     bbe:	21 f4       	brne	.+8      	; 0xbc8 <__fp_cmp+0x3e>
     bc0:	08 95       	ret
     bc2:	0a 26       	eor	r0, r26
     bc4:	09 f4       	brne	.+2      	; 0xbc8 <__fp_cmp+0x3e>
     bc6:	a1 40       	sbci	r26, 0x01	; 1
     bc8:	a6 95       	lsr	r26
     bca:	8f ef       	ldi	r24, 0xFF	; 255
     bcc:	81 1d       	adc	r24, r1
     bce:	81 1d       	adc	r24, r1
     bd0:	08 95       	ret

00000bd2 <__fp_split3>:
     bd2:	57 fd       	sbrc	r21, 7
     bd4:	90 58       	subi	r25, 0x80	; 128
     bd6:	44 0f       	add	r20, r20
     bd8:	55 1f       	adc	r21, r21
     bda:	59 f0       	breq	.+22     	; 0xbf2 <__fp_splitA+0x10>
     bdc:	5f 3f       	cpi	r21, 0xFF	; 255
     bde:	71 f0       	breq	.+28     	; 0xbfc <__fp_splitA+0x1a>
     be0:	47 95       	ror	r20

00000be2 <__fp_splitA>:
     be2:	88 0f       	add	r24, r24
     be4:	97 fb       	bst	r25, 7
     be6:	99 1f       	adc	r25, r25
     be8:	61 f0       	breq	.+24     	; 0xc02 <__fp_splitA+0x20>
     bea:	9f 3f       	cpi	r25, 0xFF	; 255
     bec:	79 f0       	breq	.+30     	; 0xc0c <__fp_splitA+0x2a>
     bee:	87 95       	ror	r24
     bf0:	08 95       	ret
     bf2:	12 16       	cp	r1, r18
     bf4:	13 06       	cpc	r1, r19
     bf6:	14 06       	cpc	r1, r20
     bf8:	55 1f       	adc	r21, r21
     bfa:	f2 cf       	rjmp	.-28     	; 0xbe0 <__fp_split3+0xe>
     bfc:	46 95       	lsr	r20
     bfe:	f1 df       	rcall	.-30     	; 0xbe2 <__fp_splitA>
     c00:	08 c0       	rjmp	.+16     	; 0xc12 <__fp_splitA+0x30>
     c02:	16 16       	cp	r1, r22
     c04:	17 06       	cpc	r1, r23
     c06:	18 06       	cpc	r1, r24
     c08:	99 1f       	adc	r25, r25
     c0a:	f1 cf       	rjmp	.-30     	; 0xbee <__fp_splitA+0xc>
     c0c:	86 95       	lsr	r24
     c0e:	71 05       	cpc	r23, r1
     c10:	61 05       	cpc	r22, r1
     c12:	08 94       	sec
     c14:	08 95       	ret

00000c16 <__fp_zero>:
     c16:	e8 94       	clt

00000c18 <__fp_szero>:
     c18:	bb 27       	eor	r27, r27
     c1a:	66 27       	eor	r22, r22
     c1c:	77 27       	eor	r23, r23
     c1e:	cb 01       	movw	r24, r22
     c20:	97 f9       	bld	r25, 7
     c22:	08 95       	ret

00000c24 <__gesf2>:
     c24:	0e 94 c5 05 	call	0xb8a	; 0xb8a <__fp_cmp>
     c28:	08 f4       	brcc	.+2      	; 0xc2c <__gesf2+0x8>
     c2a:	8f ef       	ldi	r24, 0xFF	; 255
     c2c:	08 95       	ret

00000c2e <__mulsf3>:
     c2e:	0e 94 2a 06 	call	0xc54	; 0xc54 <__mulsf3x>
     c32:	0c 94 9b 06 	jmp	0xd36	; 0xd36 <__fp_round>
     c36:	0e 94 8d 06 	call	0xd1a	; 0xd1a <__fp_pscA>
     c3a:	38 f0       	brcs	.+14     	; 0xc4a <__mulsf3+0x1c>
     c3c:	0e 94 94 06 	call	0xd28	; 0xd28 <__fp_pscB>
     c40:	20 f0       	brcs	.+8      	; 0xc4a <__mulsf3+0x1c>
     c42:	95 23       	and	r25, r21
     c44:	11 f0       	breq	.+4      	; 0xc4a <__mulsf3+0x1c>
     c46:	0c 94 84 06 	jmp	0xd08	; 0xd08 <__fp_inf>
     c4a:	0c 94 8a 06 	jmp	0xd14	; 0xd14 <__fp_nan>
     c4e:	11 24       	eor	r1, r1
     c50:	0c 94 0c 06 	jmp	0xc18	; 0xc18 <__fp_szero>

00000c54 <__mulsf3x>:
     c54:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <__fp_split3>
     c58:	70 f3       	brcs	.-36     	; 0xc36 <__mulsf3+0x8>

00000c5a <__mulsf3_pse>:
     c5a:	95 9f       	mul	r25, r21
     c5c:	c1 f3       	breq	.-16     	; 0xc4e <__mulsf3+0x20>
     c5e:	95 0f       	add	r25, r21
     c60:	50 e0       	ldi	r21, 0x00	; 0
     c62:	55 1f       	adc	r21, r21
     c64:	62 9f       	mul	r22, r18
     c66:	f0 01       	movw	r30, r0
     c68:	72 9f       	mul	r23, r18
     c6a:	bb 27       	eor	r27, r27
     c6c:	f0 0d       	add	r31, r0
     c6e:	b1 1d       	adc	r27, r1
     c70:	63 9f       	mul	r22, r19
     c72:	aa 27       	eor	r26, r26
     c74:	f0 0d       	add	r31, r0
     c76:	b1 1d       	adc	r27, r1
     c78:	aa 1f       	adc	r26, r26
     c7a:	64 9f       	mul	r22, r20
     c7c:	66 27       	eor	r22, r22
     c7e:	b0 0d       	add	r27, r0
     c80:	a1 1d       	adc	r26, r1
     c82:	66 1f       	adc	r22, r22
     c84:	82 9f       	mul	r24, r18
     c86:	22 27       	eor	r18, r18
     c88:	b0 0d       	add	r27, r0
     c8a:	a1 1d       	adc	r26, r1
     c8c:	62 1f       	adc	r22, r18
     c8e:	73 9f       	mul	r23, r19
     c90:	b0 0d       	add	r27, r0
     c92:	a1 1d       	adc	r26, r1
     c94:	62 1f       	adc	r22, r18
     c96:	83 9f       	mul	r24, r19
     c98:	a0 0d       	add	r26, r0
     c9a:	61 1d       	adc	r22, r1
     c9c:	22 1f       	adc	r18, r18
     c9e:	74 9f       	mul	r23, r20
     ca0:	33 27       	eor	r19, r19
     ca2:	a0 0d       	add	r26, r0
     ca4:	61 1d       	adc	r22, r1
     ca6:	23 1f       	adc	r18, r19
     ca8:	84 9f       	mul	r24, r20
     caa:	60 0d       	add	r22, r0
     cac:	21 1d       	adc	r18, r1
     cae:	82 2f       	mov	r24, r18
     cb0:	76 2f       	mov	r23, r22
     cb2:	6a 2f       	mov	r22, r26
     cb4:	11 24       	eor	r1, r1
     cb6:	9f 57       	subi	r25, 0x7F	; 127
     cb8:	50 40       	sbci	r21, 0x00	; 0
     cba:	9a f0       	brmi	.+38     	; 0xce2 <__mulsf3_pse+0x88>
     cbc:	f1 f0       	breq	.+60     	; 0xcfa <__mulsf3_pse+0xa0>
     cbe:	88 23       	and	r24, r24
     cc0:	4a f0       	brmi	.+18     	; 0xcd4 <__mulsf3_pse+0x7a>
     cc2:	ee 0f       	add	r30, r30
     cc4:	ff 1f       	adc	r31, r31
     cc6:	bb 1f       	adc	r27, r27
     cc8:	66 1f       	adc	r22, r22
     cca:	77 1f       	adc	r23, r23
     ccc:	88 1f       	adc	r24, r24
     cce:	91 50       	subi	r25, 0x01	; 1
     cd0:	50 40       	sbci	r21, 0x00	; 0
     cd2:	a9 f7       	brne	.-22     	; 0xcbe <__mulsf3_pse+0x64>
     cd4:	9e 3f       	cpi	r25, 0xFE	; 254
     cd6:	51 05       	cpc	r21, r1
     cd8:	80 f0       	brcs	.+32     	; 0xcfa <__mulsf3_pse+0xa0>
     cda:	0c 94 84 06 	jmp	0xd08	; 0xd08 <__fp_inf>
     cde:	0c 94 0c 06 	jmp	0xc18	; 0xc18 <__fp_szero>
     ce2:	5f 3f       	cpi	r21, 0xFF	; 255
     ce4:	e4 f3       	brlt	.-8      	; 0xcde <__mulsf3_pse+0x84>
     ce6:	98 3e       	cpi	r25, 0xE8	; 232
     ce8:	d4 f3       	brlt	.-12     	; 0xcde <__mulsf3_pse+0x84>
     cea:	86 95       	lsr	r24
     cec:	77 95       	ror	r23
     cee:	67 95       	ror	r22
     cf0:	b7 95       	ror	r27
     cf2:	f7 95       	ror	r31
     cf4:	e7 95       	ror	r30
     cf6:	9f 5f       	subi	r25, 0xFF	; 255
     cf8:	c1 f7       	brne	.-16     	; 0xcea <__mulsf3_pse+0x90>
     cfa:	fe 2b       	or	r31, r30
     cfc:	88 0f       	add	r24, r24
     cfe:	91 1d       	adc	r25, r1
     d00:	96 95       	lsr	r25
     d02:	87 95       	ror	r24
     d04:	97 f9       	bld	r25, 7
     d06:	08 95       	ret

00000d08 <__fp_inf>:
     d08:	97 f9       	bld	r25, 7
     d0a:	9f 67       	ori	r25, 0x7F	; 127
     d0c:	80 e8       	ldi	r24, 0x80	; 128
     d0e:	70 e0       	ldi	r23, 0x00	; 0
     d10:	60 e0       	ldi	r22, 0x00	; 0
     d12:	08 95       	ret

00000d14 <__fp_nan>:
     d14:	9f ef       	ldi	r25, 0xFF	; 255
     d16:	80 ec       	ldi	r24, 0xC0	; 192
     d18:	08 95       	ret

00000d1a <__fp_pscA>:
     d1a:	00 24       	eor	r0, r0
     d1c:	0a 94       	dec	r0
     d1e:	16 16       	cp	r1, r22
     d20:	17 06       	cpc	r1, r23
     d22:	18 06       	cpc	r1, r24
     d24:	09 06       	cpc	r0, r25
     d26:	08 95       	ret

00000d28 <__fp_pscB>:
     d28:	00 24       	eor	r0, r0
     d2a:	0a 94       	dec	r0
     d2c:	12 16       	cp	r1, r18
     d2e:	13 06       	cpc	r1, r19
     d30:	14 06       	cpc	r1, r20
     d32:	05 06       	cpc	r0, r21
     d34:	08 95       	ret

00000d36 <__fp_round>:
     d36:	09 2e       	mov	r0, r25
     d38:	03 94       	inc	r0
     d3a:	00 0c       	add	r0, r0
     d3c:	11 f4       	brne	.+4      	; 0xd42 <__fp_round+0xc>
     d3e:	88 23       	and	r24, r24
     d40:	52 f0       	brmi	.+20     	; 0xd56 <__fp_round+0x20>
     d42:	bb 0f       	add	r27, r27
     d44:	40 f4       	brcc	.+16     	; 0xd56 <__fp_round+0x20>
     d46:	bf 2b       	or	r27, r31
     d48:	11 f4       	brne	.+4      	; 0xd4e <__fp_round+0x18>
     d4a:	60 ff       	sbrs	r22, 0
     d4c:	04 c0       	rjmp	.+8      	; 0xd56 <__fp_round+0x20>
     d4e:	6f 5f       	subi	r22, 0xFF	; 255
     d50:	7f 4f       	sbci	r23, 0xFF	; 255
     d52:	8f 4f       	sbci	r24, 0xFF	; 255
     d54:	9f 4f       	sbci	r25, 0xFF	; 255
     d56:	08 95       	ret

00000d58 <__divmodsi4>:
     d58:	05 2e       	mov	r0, r21
     d5a:	97 fb       	bst	r25, 7
     d5c:	1e f4       	brtc	.+6      	; 0xd64 <__divmodsi4+0xc>
     d5e:	00 94       	com	r0
     d60:	0e 94 c3 06 	call	0xd86	; 0xd86 <__negsi2>
     d64:	57 fd       	sbrc	r21, 7
     d66:	07 d0       	rcall	.+14     	; 0xd76 <__divmodsi4_neg2>
     d68:	0e 94 d1 06 	call	0xda2	; 0xda2 <__udivmodsi4>
     d6c:	07 fc       	sbrc	r0, 7
     d6e:	03 d0       	rcall	.+6      	; 0xd76 <__divmodsi4_neg2>
     d70:	4e f4       	brtc	.+18     	; 0xd84 <__divmodsi4_exit>
     d72:	0c 94 c3 06 	jmp	0xd86	; 0xd86 <__negsi2>

00000d76 <__divmodsi4_neg2>:
     d76:	50 95       	com	r21
     d78:	40 95       	com	r20
     d7a:	30 95       	com	r19
     d7c:	21 95       	neg	r18
     d7e:	3f 4f       	sbci	r19, 0xFF	; 255
     d80:	4f 4f       	sbci	r20, 0xFF	; 255
     d82:	5f 4f       	sbci	r21, 0xFF	; 255

00000d84 <__divmodsi4_exit>:
     d84:	08 95       	ret

00000d86 <__negsi2>:
     d86:	90 95       	com	r25
     d88:	80 95       	com	r24
     d8a:	70 95       	com	r23
     d8c:	61 95       	neg	r22
     d8e:	7f 4f       	sbci	r23, 0xFF	; 255
     d90:	8f 4f       	sbci	r24, 0xFF	; 255
     d92:	9f 4f       	sbci	r25, 0xFF	; 255
     d94:	08 95       	ret

00000d96 <__tablejump2__>:
     d96:	ee 0f       	add	r30, r30
     d98:	ff 1f       	adc	r31, r31
     d9a:	05 90       	lpm	r0, Z+
     d9c:	f4 91       	lpm	r31, Z
     d9e:	e0 2d       	mov	r30, r0
     da0:	09 94       	ijmp

00000da2 <__udivmodsi4>:
     da2:	a1 e2       	ldi	r26, 0x21	; 33
     da4:	1a 2e       	mov	r1, r26
     da6:	aa 1b       	sub	r26, r26
     da8:	bb 1b       	sub	r27, r27
     daa:	fd 01       	movw	r30, r26
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <__udivmodsi4_ep>

00000dae <__udivmodsi4_loop>:
     dae:	aa 1f       	adc	r26, r26
     db0:	bb 1f       	adc	r27, r27
     db2:	ee 1f       	adc	r30, r30
     db4:	ff 1f       	adc	r31, r31
     db6:	a2 17       	cp	r26, r18
     db8:	b3 07       	cpc	r27, r19
     dba:	e4 07       	cpc	r30, r20
     dbc:	f5 07       	cpc	r31, r21
     dbe:	20 f0       	brcs	.+8      	; 0xdc8 <__udivmodsi4_ep>
     dc0:	a2 1b       	sub	r26, r18
     dc2:	b3 0b       	sbc	r27, r19
     dc4:	e4 0b       	sbc	r30, r20
     dc6:	f5 0b       	sbc	r31, r21

00000dc8 <__udivmodsi4_ep>:
     dc8:	66 1f       	adc	r22, r22
     dca:	77 1f       	adc	r23, r23
     dcc:	88 1f       	adc	r24, r24
     dce:	99 1f       	adc	r25, r25
     dd0:	1a 94       	dec	r1
     dd2:	69 f7       	brne	.-38     	; 0xdae <__udivmodsi4_loop>
     dd4:	60 95       	com	r22
     dd6:	70 95       	com	r23
     dd8:	80 95       	com	r24
     dda:	90 95       	com	r25
     ddc:	9b 01       	movw	r18, r22
     dde:	ac 01       	movw	r20, r24
     de0:	bd 01       	movw	r22, r26
     de2:	cf 01       	movw	r24, r30
     de4:	08 95       	ret

00000de6 <puts>:
     de6:	0f 93       	push	r16
     de8:	1f 93       	push	r17
     dea:	cf 93       	push	r28
     dec:	df 93       	push	r29
     dee:	e0 91 87 20 	lds	r30, 0x2087	; 0x802087 <__iob+0x2>
     df2:	f0 91 88 20 	lds	r31, 0x2088	; 0x802088 <__iob+0x3>
     df6:	23 81       	ldd	r18, Z+3	; 0x03
     df8:	21 ff       	sbrs	r18, 1
     dfa:	1b c0       	rjmp	.+54     	; 0xe32 <puts+0x4c>
     dfc:	8c 01       	movw	r16, r24
     dfe:	d0 e0       	ldi	r29, 0x00	; 0
     e00:	c0 e0       	ldi	r28, 0x00	; 0
     e02:	f8 01       	movw	r30, r16
     e04:	81 91       	ld	r24, Z+
     e06:	8f 01       	movw	r16, r30
     e08:	60 91 87 20 	lds	r22, 0x2087	; 0x802087 <__iob+0x2>
     e0c:	70 91 88 20 	lds	r23, 0x2088	; 0x802088 <__iob+0x3>
     e10:	db 01       	movw	r26, r22
     e12:	18 96       	adiw	r26, 0x08	; 8
     e14:	ed 91       	ld	r30, X+
     e16:	fc 91       	ld	r31, X
     e18:	19 97       	sbiw	r26, 0x09	; 9
     e1a:	88 23       	and	r24, r24
     e1c:	31 f0       	breq	.+12     	; 0xe2a <puts+0x44>
     e1e:	09 95       	icall
     e20:	89 2b       	or	r24, r25
     e22:	79 f3       	breq	.-34     	; 0xe02 <puts+0x1c>
     e24:	df ef       	ldi	r29, 0xFF	; 255
     e26:	cf ef       	ldi	r28, 0xFF	; 255
     e28:	ec cf       	rjmp	.-40     	; 0xe02 <puts+0x1c>
     e2a:	8a e0       	ldi	r24, 0x0A	; 10
     e2c:	09 95       	icall
     e2e:	89 2b       	or	r24, r25
     e30:	19 f0       	breq	.+6      	; 0xe38 <puts+0x52>
     e32:	8f ef       	ldi	r24, 0xFF	; 255
     e34:	9f ef       	ldi	r25, 0xFF	; 255
     e36:	02 c0       	rjmp	.+4      	; 0xe3c <puts+0x56>
     e38:	8d 2f       	mov	r24, r29
     e3a:	9c 2f       	mov	r25, r28
     e3c:	df 91       	pop	r29
     e3e:	cf 91       	pop	r28
     e40:	1f 91       	pop	r17
     e42:	0f 91       	pop	r16
     e44:	08 95       	ret

00000e46 <sprintf>:
     e46:	ae e0       	ldi	r26, 0x0E	; 14
     e48:	b0 e0       	ldi	r27, 0x00	; 0
     e4a:	e9 e2       	ldi	r30, 0x29	; 41
     e4c:	f7 e0       	ldi	r31, 0x07	; 7
     e4e:	0c 94 e4 09 	jmp	0x13c8	; 0x13c8 <__prologue_saves__+0x1c>
     e52:	0d 89       	ldd	r16, Y+21	; 0x15
     e54:	1e 89       	ldd	r17, Y+22	; 0x16
     e56:	86 e0       	ldi	r24, 0x06	; 6
     e58:	8c 83       	std	Y+4, r24	; 0x04
     e5a:	09 83       	std	Y+1, r16	; 0x01
     e5c:	1a 83       	std	Y+2, r17	; 0x02
     e5e:	8f ef       	ldi	r24, 0xFF	; 255
     e60:	9f e7       	ldi	r25, 0x7F	; 127
     e62:	8d 83       	std	Y+5, r24	; 0x05
     e64:	9e 83       	std	Y+6, r25	; 0x06
     e66:	ae 01       	movw	r20, r28
     e68:	47 5e       	subi	r20, 0xE7	; 231
     e6a:	5f 4f       	sbci	r21, 0xFF	; 255
     e6c:	6f 89       	ldd	r22, Y+23	; 0x17
     e6e:	78 8d       	ldd	r23, Y+24	; 0x18
     e70:	ce 01       	movw	r24, r28
     e72:	01 96       	adiw	r24, 0x01	; 1
     e74:	0e 94 45 07 	call	0xe8a	; 0xe8a <vfprintf>
     e78:	ef 81       	ldd	r30, Y+7	; 0x07
     e7a:	f8 85       	ldd	r31, Y+8	; 0x08
     e7c:	e0 0f       	add	r30, r16
     e7e:	f1 1f       	adc	r31, r17
     e80:	10 82       	st	Z, r1
     e82:	2e 96       	adiw	r28, 0x0e	; 14
     e84:	e4 e0       	ldi	r30, 0x04	; 4
     e86:	0c 94 fd 09 	jmp	0x13fa	; 0x13fa <__epilogue_restores__+0x1c>

00000e8a <vfprintf>:
     e8a:	ab e0       	ldi	r26, 0x0B	; 11
     e8c:	b0 e0       	ldi	r27, 0x00	; 0
     e8e:	eb e4       	ldi	r30, 0x4B	; 75
     e90:	f7 e0       	ldi	r31, 0x07	; 7
     e92:	0c 94 d6 09 	jmp	0x13ac	; 0x13ac <__prologue_saves__>
     e96:	6c 01       	movw	r12, r24
     e98:	7b 01       	movw	r14, r22
     e9a:	8a 01       	movw	r16, r20
     e9c:	fc 01       	movw	r30, r24
     e9e:	16 82       	std	Z+6, r1	; 0x06
     ea0:	17 82       	std	Z+7, r1	; 0x07
     ea2:	83 81       	ldd	r24, Z+3	; 0x03
     ea4:	81 ff       	sbrs	r24, 1
     ea6:	cc c1       	rjmp	.+920    	; 0x1240 <vfprintf+0x3b6>
     ea8:	ce 01       	movw	r24, r28
     eaa:	01 96       	adiw	r24, 0x01	; 1
     eac:	3c 01       	movw	r6, r24
     eae:	f6 01       	movw	r30, r12
     eb0:	93 81       	ldd	r25, Z+3	; 0x03
     eb2:	f7 01       	movw	r30, r14
     eb4:	93 fd       	sbrc	r25, 3
     eb6:	85 91       	lpm	r24, Z+
     eb8:	93 ff       	sbrs	r25, 3
     eba:	81 91       	ld	r24, Z+
     ebc:	7f 01       	movw	r14, r30
     ebe:	88 23       	and	r24, r24
     ec0:	09 f4       	brne	.+2      	; 0xec4 <vfprintf+0x3a>
     ec2:	ba c1       	rjmp	.+884    	; 0x1238 <vfprintf+0x3ae>
     ec4:	85 32       	cpi	r24, 0x25	; 37
     ec6:	39 f4       	brne	.+14     	; 0xed6 <vfprintf+0x4c>
     ec8:	93 fd       	sbrc	r25, 3
     eca:	85 91       	lpm	r24, Z+
     ecc:	93 ff       	sbrs	r25, 3
     ece:	81 91       	ld	r24, Z+
     ed0:	7f 01       	movw	r14, r30
     ed2:	85 32       	cpi	r24, 0x25	; 37
     ed4:	29 f4       	brne	.+10     	; 0xee0 <vfprintf+0x56>
     ed6:	b6 01       	movw	r22, r12
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	0e 94 3c 09 	call	0x1278	; 0x1278 <fputc>
     ede:	e7 cf       	rjmp	.-50     	; 0xeae <vfprintf+0x24>
     ee0:	91 2c       	mov	r9, r1
     ee2:	21 2c       	mov	r2, r1
     ee4:	31 2c       	mov	r3, r1
     ee6:	ff e1       	ldi	r31, 0x1F	; 31
     ee8:	f3 15       	cp	r31, r3
     eea:	d8 f0       	brcs	.+54     	; 0xf22 <vfprintf+0x98>
     eec:	8b 32       	cpi	r24, 0x2B	; 43
     eee:	79 f0       	breq	.+30     	; 0xf0e <vfprintf+0x84>
     ef0:	38 f4       	brcc	.+14     	; 0xf00 <vfprintf+0x76>
     ef2:	80 32       	cpi	r24, 0x20	; 32
     ef4:	79 f0       	breq	.+30     	; 0xf14 <vfprintf+0x8a>
     ef6:	83 32       	cpi	r24, 0x23	; 35
     ef8:	a1 f4       	brne	.+40     	; 0xf22 <vfprintf+0x98>
     efa:	23 2d       	mov	r18, r3
     efc:	20 61       	ori	r18, 0x10	; 16
     efe:	1d c0       	rjmp	.+58     	; 0xf3a <vfprintf+0xb0>
     f00:	8d 32       	cpi	r24, 0x2D	; 45
     f02:	61 f0       	breq	.+24     	; 0xf1c <vfprintf+0x92>
     f04:	80 33       	cpi	r24, 0x30	; 48
     f06:	69 f4       	brne	.+26     	; 0xf22 <vfprintf+0x98>
     f08:	23 2d       	mov	r18, r3
     f0a:	21 60       	ori	r18, 0x01	; 1
     f0c:	16 c0       	rjmp	.+44     	; 0xf3a <vfprintf+0xb0>
     f0e:	83 2d       	mov	r24, r3
     f10:	82 60       	ori	r24, 0x02	; 2
     f12:	38 2e       	mov	r3, r24
     f14:	e3 2d       	mov	r30, r3
     f16:	e4 60       	ori	r30, 0x04	; 4
     f18:	3e 2e       	mov	r3, r30
     f1a:	2a c0       	rjmp	.+84     	; 0xf70 <vfprintf+0xe6>
     f1c:	f3 2d       	mov	r31, r3
     f1e:	f8 60       	ori	r31, 0x08	; 8
     f20:	1d c0       	rjmp	.+58     	; 0xf5c <vfprintf+0xd2>
     f22:	37 fc       	sbrc	r3, 7
     f24:	2d c0       	rjmp	.+90     	; 0xf80 <vfprintf+0xf6>
     f26:	20 ed       	ldi	r18, 0xD0	; 208
     f28:	28 0f       	add	r18, r24
     f2a:	2a 30       	cpi	r18, 0x0A	; 10
     f2c:	40 f0       	brcs	.+16     	; 0xf3e <vfprintf+0xb4>
     f2e:	8e 32       	cpi	r24, 0x2E	; 46
     f30:	b9 f4       	brne	.+46     	; 0xf60 <vfprintf+0xd6>
     f32:	36 fc       	sbrc	r3, 6
     f34:	81 c1       	rjmp	.+770    	; 0x1238 <vfprintf+0x3ae>
     f36:	23 2d       	mov	r18, r3
     f38:	20 64       	ori	r18, 0x40	; 64
     f3a:	32 2e       	mov	r3, r18
     f3c:	19 c0       	rjmp	.+50     	; 0xf70 <vfprintf+0xe6>
     f3e:	36 fe       	sbrs	r3, 6
     f40:	06 c0       	rjmp	.+12     	; 0xf4e <vfprintf+0xc4>
     f42:	8a e0       	ldi	r24, 0x0A	; 10
     f44:	98 9e       	mul	r9, r24
     f46:	20 0d       	add	r18, r0
     f48:	11 24       	eor	r1, r1
     f4a:	92 2e       	mov	r9, r18
     f4c:	11 c0       	rjmp	.+34     	; 0xf70 <vfprintf+0xe6>
     f4e:	ea e0       	ldi	r30, 0x0A	; 10
     f50:	2e 9e       	mul	r2, r30
     f52:	20 0d       	add	r18, r0
     f54:	11 24       	eor	r1, r1
     f56:	22 2e       	mov	r2, r18
     f58:	f3 2d       	mov	r31, r3
     f5a:	f0 62       	ori	r31, 0x20	; 32
     f5c:	3f 2e       	mov	r3, r31
     f5e:	08 c0       	rjmp	.+16     	; 0xf70 <vfprintf+0xe6>
     f60:	8c 36       	cpi	r24, 0x6C	; 108
     f62:	21 f4       	brne	.+8      	; 0xf6c <vfprintf+0xe2>
     f64:	83 2d       	mov	r24, r3
     f66:	80 68       	ori	r24, 0x80	; 128
     f68:	38 2e       	mov	r3, r24
     f6a:	02 c0       	rjmp	.+4      	; 0xf70 <vfprintf+0xe6>
     f6c:	88 36       	cpi	r24, 0x68	; 104
     f6e:	41 f4       	brne	.+16     	; 0xf80 <vfprintf+0xf6>
     f70:	f7 01       	movw	r30, r14
     f72:	93 fd       	sbrc	r25, 3
     f74:	85 91       	lpm	r24, Z+
     f76:	93 ff       	sbrs	r25, 3
     f78:	81 91       	ld	r24, Z+
     f7a:	7f 01       	movw	r14, r30
     f7c:	81 11       	cpse	r24, r1
     f7e:	b3 cf       	rjmp	.-154    	; 0xee6 <vfprintf+0x5c>
     f80:	98 2f       	mov	r25, r24
     f82:	9f 7d       	andi	r25, 0xDF	; 223
     f84:	95 54       	subi	r25, 0x45	; 69
     f86:	93 30       	cpi	r25, 0x03	; 3
     f88:	28 f4       	brcc	.+10     	; 0xf94 <vfprintf+0x10a>
     f8a:	0c 5f       	subi	r16, 0xFC	; 252
     f8c:	1f 4f       	sbci	r17, 0xFF	; 255
     f8e:	9f e3       	ldi	r25, 0x3F	; 63
     f90:	99 83       	std	Y+1, r25	; 0x01
     f92:	0d c0       	rjmp	.+26     	; 0xfae <vfprintf+0x124>
     f94:	83 36       	cpi	r24, 0x63	; 99
     f96:	31 f0       	breq	.+12     	; 0xfa4 <vfprintf+0x11a>
     f98:	83 37       	cpi	r24, 0x73	; 115
     f9a:	71 f0       	breq	.+28     	; 0xfb8 <vfprintf+0x12e>
     f9c:	83 35       	cpi	r24, 0x53	; 83
     f9e:	09 f0       	breq	.+2      	; 0xfa2 <vfprintf+0x118>
     fa0:	59 c0       	rjmp	.+178    	; 0x1054 <vfprintf+0x1ca>
     fa2:	21 c0       	rjmp	.+66     	; 0xfe6 <vfprintf+0x15c>
     fa4:	f8 01       	movw	r30, r16
     fa6:	80 81       	ld	r24, Z
     fa8:	89 83       	std	Y+1, r24	; 0x01
     faa:	0e 5f       	subi	r16, 0xFE	; 254
     fac:	1f 4f       	sbci	r17, 0xFF	; 255
     fae:	88 24       	eor	r8, r8
     fb0:	83 94       	inc	r8
     fb2:	91 2c       	mov	r9, r1
     fb4:	53 01       	movw	r10, r6
     fb6:	13 c0       	rjmp	.+38     	; 0xfde <vfprintf+0x154>
     fb8:	28 01       	movw	r4, r16
     fba:	f2 e0       	ldi	r31, 0x02	; 2
     fbc:	4f 0e       	add	r4, r31
     fbe:	51 1c       	adc	r5, r1
     fc0:	f8 01       	movw	r30, r16
     fc2:	a0 80       	ld	r10, Z
     fc4:	b1 80       	ldd	r11, Z+1	; 0x01
     fc6:	36 fe       	sbrs	r3, 6
     fc8:	03 c0       	rjmp	.+6      	; 0xfd0 <vfprintf+0x146>
     fca:	69 2d       	mov	r22, r9
     fcc:	70 e0       	ldi	r23, 0x00	; 0
     fce:	02 c0       	rjmp	.+4      	; 0xfd4 <vfprintf+0x14a>
     fd0:	6f ef       	ldi	r22, 0xFF	; 255
     fd2:	7f ef       	ldi	r23, 0xFF	; 255
     fd4:	c5 01       	movw	r24, r10
     fd6:	0e 94 31 09 	call	0x1262	; 0x1262 <strnlen>
     fda:	4c 01       	movw	r8, r24
     fdc:	82 01       	movw	r16, r4
     fde:	f3 2d       	mov	r31, r3
     fe0:	ff 77       	andi	r31, 0x7F	; 127
     fe2:	3f 2e       	mov	r3, r31
     fe4:	16 c0       	rjmp	.+44     	; 0x1012 <vfprintf+0x188>
     fe6:	28 01       	movw	r4, r16
     fe8:	22 e0       	ldi	r18, 0x02	; 2
     fea:	42 0e       	add	r4, r18
     fec:	51 1c       	adc	r5, r1
     fee:	f8 01       	movw	r30, r16
     ff0:	a0 80       	ld	r10, Z
     ff2:	b1 80       	ldd	r11, Z+1	; 0x01
     ff4:	36 fe       	sbrs	r3, 6
     ff6:	03 c0       	rjmp	.+6      	; 0xffe <vfprintf+0x174>
     ff8:	69 2d       	mov	r22, r9
     ffa:	70 e0       	ldi	r23, 0x00	; 0
     ffc:	02 c0       	rjmp	.+4      	; 0x1002 <vfprintf+0x178>
     ffe:	6f ef       	ldi	r22, 0xFF	; 255
    1000:	7f ef       	ldi	r23, 0xFF	; 255
    1002:	c5 01       	movw	r24, r10
    1004:	0e 94 26 09 	call	0x124c	; 0x124c <strnlen_P>
    1008:	4c 01       	movw	r8, r24
    100a:	f3 2d       	mov	r31, r3
    100c:	f0 68       	ori	r31, 0x80	; 128
    100e:	3f 2e       	mov	r3, r31
    1010:	82 01       	movw	r16, r4
    1012:	33 fc       	sbrc	r3, 3
    1014:	1b c0       	rjmp	.+54     	; 0x104c <vfprintf+0x1c2>
    1016:	82 2d       	mov	r24, r2
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	88 16       	cp	r8, r24
    101c:	99 06       	cpc	r9, r25
    101e:	b0 f4       	brcc	.+44     	; 0x104c <vfprintf+0x1c2>
    1020:	b6 01       	movw	r22, r12
    1022:	80 e2       	ldi	r24, 0x20	; 32
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	0e 94 3c 09 	call	0x1278	; 0x1278 <fputc>
    102a:	2a 94       	dec	r2
    102c:	f4 cf       	rjmp	.-24     	; 0x1016 <vfprintf+0x18c>
    102e:	f5 01       	movw	r30, r10
    1030:	37 fc       	sbrc	r3, 7
    1032:	85 91       	lpm	r24, Z+
    1034:	37 fe       	sbrs	r3, 7
    1036:	81 91       	ld	r24, Z+
    1038:	5f 01       	movw	r10, r30
    103a:	b6 01       	movw	r22, r12
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	0e 94 3c 09 	call	0x1278	; 0x1278 <fputc>
    1042:	21 10       	cpse	r2, r1
    1044:	2a 94       	dec	r2
    1046:	21 e0       	ldi	r18, 0x01	; 1
    1048:	82 1a       	sub	r8, r18
    104a:	91 08       	sbc	r9, r1
    104c:	81 14       	cp	r8, r1
    104e:	91 04       	cpc	r9, r1
    1050:	71 f7       	brne	.-36     	; 0x102e <vfprintf+0x1a4>
    1052:	e8 c0       	rjmp	.+464    	; 0x1224 <vfprintf+0x39a>
    1054:	84 36       	cpi	r24, 0x64	; 100
    1056:	11 f0       	breq	.+4      	; 0x105c <vfprintf+0x1d2>
    1058:	89 36       	cpi	r24, 0x69	; 105
    105a:	41 f5       	brne	.+80     	; 0x10ac <vfprintf+0x222>
    105c:	f8 01       	movw	r30, r16
    105e:	37 fe       	sbrs	r3, 7
    1060:	07 c0       	rjmp	.+14     	; 0x1070 <vfprintf+0x1e6>
    1062:	60 81       	ld	r22, Z
    1064:	71 81       	ldd	r23, Z+1	; 0x01
    1066:	82 81       	ldd	r24, Z+2	; 0x02
    1068:	93 81       	ldd	r25, Z+3	; 0x03
    106a:	0c 5f       	subi	r16, 0xFC	; 252
    106c:	1f 4f       	sbci	r17, 0xFF	; 255
    106e:	08 c0       	rjmp	.+16     	; 0x1080 <vfprintf+0x1f6>
    1070:	60 81       	ld	r22, Z
    1072:	71 81       	ldd	r23, Z+1	; 0x01
    1074:	07 2e       	mov	r0, r23
    1076:	00 0c       	add	r0, r0
    1078:	88 0b       	sbc	r24, r24
    107a:	99 0b       	sbc	r25, r25
    107c:	0e 5f       	subi	r16, 0xFE	; 254
    107e:	1f 4f       	sbci	r17, 0xFF	; 255
    1080:	f3 2d       	mov	r31, r3
    1082:	ff 76       	andi	r31, 0x6F	; 111
    1084:	3f 2e       	mov	r3, r31
    1086:	97 ff       	sbrs	r25, 7
    1088:	09 c0       	rjmp	.+18     	; 0x109c <vfprintf+0x212>
    108a:	90 95       	com	r25
    108c:	80 95       	com	r24
    108e:	70 95       	com	r23
    1090:	61 95       	neg	r22
    1092:	7f 4f       	sbci	r23, 0xFF	; 255
    1094:	8f 4f       	sbci	r24, 0xFF	; 255
    1096:	9f 4f       	sbci	r25, 0xFF	; 255
    1098:	f0 68       	ori	r31, 0x80	; 128
    109a:	3f 2e       	mov	r3, r31
    109c:	2a e0       	ldi	r18, 0x0A	; 10
    109e:	30 e0       	ldi	r19, 0x00	; 0
    10a0:	a3 01       	movw	r20, r6
    10a2:	0e 94 78 09 	call	0x12f0	; 0x12f0 <__ultoa_invert>
    10a6:	88 2e       	mov	r8, r24
    10a8:	86 18       	sub	r8, r6
    10aa:	45 c0       	rjmp	.+138    	; 0x1136 <vfprintf+0x2ac>
    10ac:	85 37       	cpi	r24, 0x75	; 117
    10ae:	31 f4       	brne	.+12     	; 0x10bc <vfprintf+0x232>
    10b0:	23 2d       	mov	r18, r3
    10b2:	2f 7e       	andi	r18, 0xEF	; 239
    10b4:	b2 2e       	mov	r11, r18
    10b6:	2a e0       	ldi	r18, 0x0A	; 10
    10b8:	30 e0       	ldi	r19, 0x00	; 0
    10ba:	25 c0       	rjmp	.+74     	; 0x1106 <vfprintf+0x27c>
    10bc:	93 2d       	mov	r25, r3
    10be:	99 7f       	andi	r25, 0xF9	; 249
    10c0:	b9 2e       	mov	r11, r25
    10c2:	8f 36       	cpi	r24, 0x6F	; 111
    10c4:	c1 f0       	breq	.+48     	; 0x10f6 <vfprintf+0x26c>
    10c6:	18 f4       	brcc	.+6      	; 0x10ce <vfprintf+0x244>
    10c8:	88 35       	cpi	r24, 0x58	; 88
    10ca:	79 f0       	breq	.+30     	; 0x10ea <vfprintf+0x260>
    10cc:	b5 c0       	rjmp	.+362    	; 0x1238 <vfprintf+0x3ae>
    10ce:	80 37       	cpi	r24, 0x70	; 112
    10d0:	19 f0       	breq	.+6      	; 0x10d8 <vfprintf+0x24e>
    10d2:	88 37       	cpi	r24, 0x78	; 120
    10d4:	21 f0       	breq	.+8      	; 0x10de <vfprintf+0x254>
    10d6:	b0 c0       	rjmp	.+352    	; 0x1238 <vfprintf+0x3ae>
    10d8:	e9 2f       	mov	r30, r25
    10da:	e0 61       	ori	r30, 0x10	; 16
    10dc:	be 2e       	mov	r11, r30
    10de:	b4 fe       	sbrs	r11, 4
    10e0:	0d c0       	rjmp	.+26     	; 0x10fc <vfprintf+0x272>
    10e2:	fb 2d       	mov	r31, r11
    10e4:	f4 60       	ori	r31, 0x04	; 4
    10e6:	bf 2e       	mov	r11, r31
    10e8:	09 c0       	rjmp	.+18     	; 0x10fc <vfprintf+0x272>
    10ea:	34 fe       	sbrs	r3, 4
    10ec:	0a c0       	rjmp	.+20     	; 0x1102 <vfprintf+0x278>
    10ee:	29 2f       	mov	r18, r25
    10f0:	26 60       	ori	r18, 0x06	; 6
    10f2:	b2 2e       	mov	r11, r18
    10f4:	06 c0       	rjmp	.+12     	; 0x1102 <vfprintf+0x278>
    10f6:	28 e0       	ldi	r18, 0x08	; 8
    10f8:	30 e0       	ldi	r19, 0x00	; 0
    10fa:	05 c0       	rjmp	.+10     	; 0x1106 <vfprintf+0x27c>
    10fc:	20 e1       	ldi	r18, 0x10	; 16
    10fe:	30 e0       	ldi	r19, 0x00	; 0
    1100:	02 c0       	rjmp	.+4      	; 0x1106 <vfprintf+0x27c>
    1102:	20 e1       	ldi	r18, 0x10	; 16
    1104:	32 e0       	ldi	r19, 0x02	; 2
    1106:	f8 01       	movw	r30, r16
    1108:	b7 fe       	sbrs	r11, 7
    110a:	07 c0       	rjmp	.+14     	; 0x111a <vfprintf+0x290>
    110c:	60 81       	ld	r22, Z
    110e:	71 81       	ldd	r23, Z+1	; 0x01
    1110:	82 81       	ldd	r24, Z+2	; 0x02
    1112:	93 81       	ldd	r25, Z+3	; 0x03
    1114:	0c 5f       	subi	r16, 0xFC	; 252
    1116:	1f 4f       	sbci	r17, 0xFF	; 255
    1118:	06 c0       	rjmp	.+12     	; 0x1126 <vfprintf+0x29c>
    111a:	60 81       	ld	r22, Z
    111c:	71 81       	ldd	r23, Z+1	; 0x01
    111e:	80 e0       	ldi	r24, 0x00	; 0
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	0e 5f       	subi	r16, 0xFE	; 254
    1124:	1f 4f       	sbci	r17, 0xFF	; 255
    1126:	a3 01       	movw	r20, r6
    1128:	0e 94 78 09 	call	0x12f0	; 0x12f0 <__ultoa_invert>
    112c:	88 2e       	mov	r8, r24
    112e:	86 18       	sub	r8, r6
    1130:	fb 2d       	mov	r31, r11
    1132:	ff 77       	andi	r31, 0x7F	; 127
    1134:	3f 2e       	mov	r3, r31
    1136:	36 fe       	sbrs	r3, 6
    1138:	0d c0       	rjmp	.+26     	; 0x1154 <vfprintf+0x2ca>
    113a:	23 2d       	mov	r18, r3
    113c:	2e 7f       	andi	r18, 0xFE	; 254
    113e:	a2 2e       	mov	r10, r18
    1140:	89 14       	cp	r8, r9
    1142:	58 f4       	brcc	.+22     	; 0x115a <vfprintf+0x2d0>
    1144:	34 fe       	sbrs	r3, 4
    1146:	0b c0       	rjmp	.+22     	; 0x115e <vfprintf+0x2d4>
    1148:	32 fc       	sbrc	r3, 2
    114a:	09 c0       	rjmp	.+18     	; 0x115e <vfprintf+0x2d4>
    114c:	83 2d       	mov	r24, r3
    114e:	8e 7e       	andi	r24, 0xEE	; 238
    1150:	a8 2e       	mov	r10, r24
    1152:	05 c0       	rjmp	.+10     	; 0x115e <vfprintf+0x2d4>
    1154:	b8 2c       	mov	r11, r8
    1156:	a3 2c       	mov	r10, r3
    1158:	03 c0       	rjmp	.+6      	; 0x1160 <vfprintf+0x2d6>
    115a:	b8 2c       	mov	r11, r8
    115c:	01 c0       	rjmp	.+2      	; 0x1160 <vfprintf+0x2d6>
    115e:	b9 2c       	mov	r11, r9
    1160:	a4 fe       	sbrs	r10, 4
    1162:	0f c0       	rjmp	.+30     	; 0x1182 <vfprintf+0x2f8>
    1164:	fe 01       	movw	r30, r28
    1166:	e8 0d       	add	r30, r8
    1168:	f1 1d       	adc	r31, r1
    116a:	80 81       	ld	r24, Z
    116c:	80 33       	cpi	r24, 0x30	; 48
    116e:	21 f4       	brne	.+8      	; 0x1178 <vfprintf+0x2ee>
    1170:	9a 2d       	mov	r25, r10
    1172:	99 7e       	andi	r25, 0xE9	; 233
    1174:	a9 2e       	mov	r10, r25
    1176:	09 c0       	rjmp	.+18     	; 0x118a <vfprintf+0x300>
    1178:	a2 fe       	sbrs	r10, 2
    117a:	06 c0       	rjmp	.+12     	; 0x1188 <vfprintf+0x2fe>
    117c:	b3 94       	inc	r11
    117e:	b3 94       	inc	r11
    1180:	04 c0       	rjmp	.+8      	; 0x118a <vfprintf+0x300>
    1182:	8a 2d       	mov	r24, r10
    1184:	86 78       	andi	r24, 0x86	; 134
    1186:	09 f0       	breq	.+2      	; 0x118a <vfprintf+0x300>
    1188:	b3 94       	inc	r11
    118a:	a3 fc       	sbrc	r10, 3
    118c:	11 c0       	rjmp	.+34     	; 0x11b0 <vfprintf+0x326>
    118e:	a0 fe       	sbrs	r10, 0
    1190:	06 c0       	rjmp	.+12     	; 0x119e <vfprintf+0x314>
    1192:	b2 14       	cp	r11, r2
    1194:	88 f4       	brcc	.+34     	; 0x11b8 <vfprintf+0x32e>
    1196:	28 0c       	add	r2, r8
    1198:	92 2c       	mov	r9, r2
    119a:	9b 18       	sub	r9, r11
    119c:	0e c0       	rjmp	.+28     	; 0x11ba <vfprintf+0x330>
    119e:	b2 14       	cp	r11, r2
    11a0:	60 f4       	brcc	.+24     	; 0x11ba <vfprintf+0x330>
    11a2:	b6 01       	movw	r22, r12
    11a4:	80 e2       	ldi	r24, 0x20	; 32
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	0e 94 3c 09 	call	0x1278	; 0x1278 <fputc>
    11ac:	b3 94       	inc	r11
    11ae:	f7 cf       	rjmp	.-18     	; 0x119e <vfprintf+0x314>
    11b0:	b2 14       	cp	r11, r2
    11b2:	18 f4       	brcc	.+6      	; 0x11ba <vfprintf+0x330>
    11b4:	2b 18       	sub	r2, r11
    11b6:	02 c0       	rjmp	.+4      	; 0x11bc <vfprintf+0x332>
    11b8:	98 2c       	mov	r9, r8
    11ba:	21 2c       	mov	r2, r1
    11bc:	a4 fe       	sbrs	r10, 4
    11be:	10 c0       	rjmp	.+32     	; 0x11e0 <vfprintf+0x356>
    11c0:	b6 01       	movw	r22, r12
    11c2:	80 e3       	ldi	r24, 0x30	; 48
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	0e 94 3c 09 	call	0x1278	; 0x1278 <fputc>
    11ca:	a2 fe       	sbrs	r10, 2
    11cc:	17 c0       	rjmp	.+46     	; 0x11fc <vfprintf+0x372>
    11ce:	a1 fc       	sbrc	r10, 1
    11d0:	03 c0       	rjmp	.+6      	; 0x11d8 <vfprintf+0x34e>
    11d2:	88 e7       	ldi	r24, 0x78	; 120
    11d4:	90 e0       	ldi	r25, 0x00	; 0
    11d6:	02 c0       	rjmp	.+4      	; 0x11dc <vfprintf+0x352>
    11d8:	88 e5       	ldi	r24, 0x58	; 88
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	b6 01       	movw	r22, r12
    11de:	0c c0       	rjmp	.+24     	; 0x11f8 <vfprintf+0x36e>
    11e0:	8a 2d       	mov	r24, r10
    11e2:	86 78       	andi	r24, 0x86	; 134
    11e4:	59 f0       	breq	.+22     	; 0x11fc <vfprintf+0x372>
    11e6:	a1 fe       	sbrs	r10, 1
    11e8:	02 c0       	rjmp	.+4      	; 0x11ee <vfprintf+0x364>
    11ea:	8b e2       	ldi	r24, 0x2B	; 43
    11ec:	01 c0       	rjmp	.+2      	; 0x11f0 <vfprintf+0x366>
    11ee:	80 e2       	ldi	r24, 0x20	; 32
    11f0:	a7 fc       	sbrc	r10, 7
    11f2:	8d e2       	ldi	r24, 0x2D	; 45
    11f4:	b6 01       	movw	r22, r12
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	0e 94 3c 09 	call	0x1278	; 0x1278 <fputc>
    11fc:	89 14       	cp	r8, r9
    11fe:	38 f4       	brcc	.+14     	; 0x120e <vfprintf+0x384>
    1200:	b6 01       	movw	r22, r12
    1202:	80 e3       	ldi	r24, 0x30	; 48
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	0e 94 3c 09 	call	0x1278	; 0x1278 <fputc>
    120a:	9a 94       	dec	r9
    120c:	f7 cf       	rjmp	.-18     	; 0x11fc <vfprintf+0x372>
    120e:	8a 94       	dec	r8
    1210:	f3 01       	movw	r30, r6
    1212:	e8 0d       	add	r30, r8
    1214:	f1 1d       	adc	r31, r1
    1216:	80 81       	ld	r24, Z
    1218:	b6 01       	movw	r22, r12
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	0e 94 3c 09 	call	0x1278	; 0x1278 <fputc>
    1220:	81 10       	cpse	r8, r1
    1222:	f5 cf       	rjmp	.-22     	; 0x120e <vfprintf+0x384>
    1224:	22 20       	and	r2, r2
    1226:	09 f4       	brne	.+2      	; 0x122a <vfprintf+0x3a0>
    1228:	42 ce       	rjmp	.-892    	; 0xeae <vfprintf+0x24>
    122a:	b6 01       	movw	r22, r12
    122c:	80 e2       	ldi	r24, 0x20	; 32
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	0e 94 3c 09 	call	0x1278	; 0x1278 <fputc>
    1234:	2a 94       	dec	r2
    1236:	f6 cf       	rjmp	.-20     	; 0x1224 <vfprintf+0x39a>
    1238:	f6 01       	movw	r30, r12
    123a:	86 81       	ldd	r24, Z+6	; 0x06
    123c:	97 81       	ldd	r25, Z+7	; 0x07
    123e:	02 c0       	rjmp	.+4      	; 0x1244 <vfprintf+0x3ba>
    1240:	8f ef       	ldi	r24, 0xFF	; 255
    1242:	9f ef       	ldi	r25, 0xFF	; 255
    1244:	2b 96       	adiw	r28, 0x0b	; 11
    1246:	e2 e1       	ldi	r30, 0x12	; 18
    1248:	0c 94 ef 09 	jmp	0x13de	; 0x13de <__epilogue_restores__>

0000124c <strnlen_P>:
    124c:	fc 01       	movw	r30, r24
    124e:	05 90       	lpm	r0, Z+
    1250:	61 50       	subi	r22, 0x01	; 1
    1252:	70 40       	sbci	r23, 0x00	; 0
    1254:	01 10       	cpse	r0, r1
    1256:	d8 f7       	brcc	.-10     	; 0x124e <strnlen_P+0x2>
    1258:	80 95       	com	r24
    125a:	90 95       	com	r25
    125c:	8e 0f       	add	r24, r30
    125e:	9f 1f       	adc	r25, r31
    1260:	08 95       	ret

00001262 <strnlen>:
    1262:	fc 01       	movw	r30, r24
    1264:	61 50       	subi	r22, 0x01	; 1
    1266:	70 40       	sbci	r23, 0x00	; 0
    1268:	01 90       	ld	r0, Z+
    126a:	01 10       	cpse	r0, r1
    126c:	d8 f7       	brcc	.-10     	; 0x1264 <strnlen+0x2>
    126e:	80 95       	com	r24
    1270:	90 95       	com	r25
    1272:	8e 0f       	add	r24, r30
    1274:	9f 1f       	adc	r25, r31
    1276:	08 95       	ret

00001278 <fputc>:
    1278:	0f 93       	push	r16
    127a:	1f 93       	push	r17
    127c:	cf 93       	push	r28
    127e:	df 93       	push	r29
    1280:	fb 01       	movw	r30, r22
    1282:	23 81       	ldd	r18, Z+3	; 0x03
    1284:	21 fd       	sbrc	r18, 1
    1286:	03 c0       	rjmp	.+6      	; 0x128e <fputc+0x16>
    1288:	8f ef       	ldi	r24, 0xFF	; 255
    128a:	9f ef       	ldi	r25, 0xFF	; 255
    128c:	2c c0       	rjmp	.+88     	; 0x12e6 <fputc+0x6e>
    128e:	22 ff       	sbrs	r18, 2
    1290:	16 c0       	rjmp	.+44     	; 0x12be <fputc+0x46>
    1292:	46 81       	ldd	r20, Z+6	; 0x06
    1294:	57 81       	ldd	r21, Z+7	; 0x07
    1296:	24 81       	ldd	r18, Z+4	; 0x04
    1298:	35 81       	ldd	r19, Z+5	; 0x05
    129a:	42 17       	cp	r20, r18
    129c:	53 07       	cpc	r21, r19
    129e:	44 f4       	brge	.+16     	; 0x12b0 <fputc+0x38>
    12a0:	a0 81       	ld	r26, Z
    12a2:	b1 81       	ldd	r27, Z+1	; 0x01
    12a4:	9d 01       	movw	r18, r26
    12a6:	2f 5f       	subi	r18, 0xFF	; 255
    12a8:	3f 4f       	sbci	r19, 0xFF	; 255
    12aa:	20 83       	st	Z, r18
    12ac:	31 83       	std	Z+1, r19	; 0x01
    12ae:	8c 93       	st	X, r24
    12b0:	26 81       	ldd	r18, Z+6	; 0x06
    12b2:	37 81       	ldd	r19, Z+7	; 0x07
    12b4:	2f 5f       	subi	r18, 0xFF	; 255
    12b6:	3f 4f       	sbci	r19, 0xFF	; 255
    12b8:	26 83       	std	Z+6, r18	; 0x06
    12ba:	37 83       	std	Z+7, r19	; 0x07
    12bc:	14 c0       	rjmp	.+40     	; 0x12e6 <fputc+0x6e>
    12be:	8b 01       	movw	r16, r22
    12c0:	ec 01       	movw	r28, r24
    12c2:	fb 01       	movw	r30, r22
    12c4:	00 84       	ldd	r0, Z+8	; 0x08
    12c6:	f1 85       	ldd	r31, Z+9	; 0x09
    12c8:	e0 2d       	mov	r30, r0
    12ca:	09 95       	icall
    12cc:	89 2b       	or	r24, r25
    12ce:	e1 f6       	brne	.-72     	; 0x1288 <fputc+0x10>
    12d0:	d8 01       	movw	r26, r16
    12d2:	16 96       	adiw	r26, 0x06	; 6
    12d4:	8d 91       	ld	r24, X+
    12d6:	9c 91       	ld	r25, X
    12d8:	17 97       	sbiw	r26, 0x07	; 7
    12da:	01 96       	adiw	r24, 0x01	; 1
    12dc:	16 96       	adiw	r26, 0x06	; 6
    12de:	8d 93       	st	X+, r24
    12e0:	9c 93       	st	X, r25
    12e2:	17 97       	sbiw	r26, 0x07	; 7
    12e4:	ce 01       	movw	r24, r28
    12e6:	df 91       	pop	r29
    12e8:	cf 91       	pop	r28
    12ea:	1f 91       	pop	r17
    12ec:	0f 91       	pop	r16
    12ee:	08 95       	ret

000012f0 <__ultoa_invert>:
    12f0:	fa 01       	movw	r30, r20
    12f2:	aa 27       	eor	r26, r26
    12f4:	28 30       	cpi	r18, 0x08	; 8
    12f6:	51 f1       	breq	.+84     	; 0x134c <__ultoa_invert+0x5c>
    12f8:	20 31       	cpi	r18, 0x10	; 16
    12fa:	81 f1       	breq	.+96     	; 0x135c <__ultoa_invert+0x6c>
    12fc:	e8 94       	clt
    12fe:	6f 93       	push	r22
    1300:	6e 7f       	andi	r22, 0xFE	; 254
    1302:	6e 5f       	subi	r22, 0xFE	; 254
    1304:	7f 4f       	sbci	r23, 0xFF	; 255
    1306:	8f 4f       	sbci	r24, 0xFF	; 255
    1308:	9f 4f       	sbci	r25, 0xFF	; 255
    130a:	af 4f       	sbci	r26, 0xFF	; 255
    130c:	b1 e0       	ldi	r27, 0x01	; 1
    130e:	3e d0       	rcall	.+124    	; 0x138c <__ultoa_invert+0x9c>
    1310:	b4 e0       	ldi	r27, 0x04	; 4
    1312:	3c d0       	rcall	.+120    	; 0x138c <__ultoa_invert+0x9c>
    1314:	67 0f       	add	r22, r23
    1316:	78 1f       	adc	r23, r24
    1318:	89 1f       	adc	r24, r25
    131a:	9a 1f       	adc	r25, r26
    131c:	a1 1d       	adc	r26, r1
    131e:	68 0f       	add	r22, r24
    1320:	79 1f       	adc	r23, r25
    1322:	8a 1f       	adc	r24, r26
    1324:	91 1d       	adc	r25, r1
    1326:	a1 1d       	adc	r26, r1
    1328:	6a 0f       	add	r22, r26
    132a:	71 1d       	adc	r23, r1
    132c:	81 1d       	adc	r24, r1
    132e:	91 1d       	adc	r25, r1
    1330:	a1 1d       	adc	r26, r1
    1332:	20 d0       	rcall	.+64     	; 0x1374 <__ultoa_invert+0x84>
    1334:	09 f4       	brne	.+2      	; 0x1338 <__ultoa_invert+0x48>
    1336:	68 94       	set
    1338:	3f 91       	pop	r19
    133a:	2a e0       	ldi	r18, 0x0A	; 10
    133c:	26 9f       	mul	r18, r22
    133e:	11 24       	eor	r1, r1
    1340:	30 19       	sub	r19, r0
    1342:	30 5d       	subi	r19, 0xD0	; 208
    1344:	31 93       	st	Z+, r19
    1346:	de f6       	brtc	.-74     	; 0x12fe <__ultoa_invert+0xe>
    1348:	cf 01       	movw	r24, r30
    134a:	08 95       	ret
    134c:	46 2f       	mov	r20, r22
    134e:	47 70       	andi	r20, 0x07	; 7
    1350:	40 5d       	subi	r20, 0xD0	; 208
    1352:	41 93       	st	Z+, r20
    1354:	b3 e0       	ldi	r27, 0x03	; 3
    1356:	0f d0       	rcall	.+30     	; 0x1376 <__ultoa_invert+0x86>
    1358:	c9 f7       	brne	.-14     	; 0x134c <__ultoa_invert+0x5c>
    135a:	f6 cf       	rjmp	.-20     	; 0x1348 <__ultoa_invert+0x58>
    135c:	46 2f       	mov	r20, r22
    135e:	4f 70       	andi	r20, 0x0F	; 15
    1360:	40 5d       	subi	r20, 0xD0	; 208
    1362:	4a 33       	cpi	r20, 0x3A	; 58
    1364:	18 f0       	brcs	.+6      	; 0x136c <__ultoa_invert+0x7c>
    1366:	49 5d       	subi	r20, 0xD9	; 217
    1368:	31 fd       	sbrc	r19, 1
    136a:	40 52       	subi	r20, 0x20	; 32
    136c:	41 93       	st	Z+, r20
    136e:	02 d0       	rcall	.+4      	; 0x1374 <__ultoa_invert+0x84>
    1370:	a9 f7       	brne	.-22     	; 0x135c <__ultoa_invert+0x6c>
    1372:	ea cf       	rjmp	.-44     	; 0x1348 <__ultoa_invert+0x58>
    1374:	b4 e0       	ldi	r27, 0x04	; 4
    1376:	a6 95       	lsr	r26
    1378:	97 95       	ror	r25
    137a:	87 95       	ror	r24
    137c:	77 95       	ror	r23
    137e:	67 95       	ror	r22
    1380:	ba 95       	dec	r27
    1382:	c9 f7       	brne	.-14     	; 0x1376 <__ultoa_invert+0x86>
    1384:	00 97       	sbiw	r24, 0x00	; 0
    1386:	61 05       	cpc	r22, r1
    1388:	71 05       	cpc	r23, r1
    138a:	08 95       	ret
    138c:	9b 01       	movw	r18, r22
    138e:	ac 01       	movw	r20, r24
    1390:	0a 2e       	mov	r0, r26
    1392:	06 94       	lsr	r0
    1394:	57 95       	ror	r21
    1396:	47 95       	ror	r20
    1398:	37 95       	ror	r19
    139a:	27 95       	ror	r18
    139c:	ba 95       	dec	r27
    139e:	c9 f7       	brne	.-14     	; 0x1392 <__ultoa_invert+0xa2>
    13a0:	62 0f       	add	r22, r18
    13a2:	73 1f       	adc	r23, r19
    13a4:	84 1f       	adc	r24, r20
    13a6:	95 1f       	adc	r25, r21
    13a8:	a0 1d       	adc	r26, r0
    13aa:	08 95       	ret

000013ac <__prologue_saves__>:
    13ac:	2f 92       	push	r2
    13ae:	3f 92       	push	r3
    13b0:	4f 92       	push	r4
    13b2:	5f 92       	push	r5
    13b4:	6f 92       	push	r6
    13b6:	7f 92       	push	r7
    13b8:	8f 92       	push	r8
    13ba:	9f 92       	push	r9
    13bc:	af 92       	push	r10
    13be:	bf 92       	push	r11
    13c0:	cf 92       	push	r12
    13c2:	df 92       	push	r13
    13c4:	ef 92       	push	r14
    13c6:	ff 92       	push	r15
    13c8:	0f 93       	push	r16
    13ca:	1f 93       	push	r17
    13cc:	cf 93       	push	r28
    13ce:	df 93       	push	r29
    13d0:	cd b7       	in	r28, 0x3d	; 61
    13d2:	de b7       	in	r29, 0x3e	; 62
    13d4:	ca 1b       	sub	r28, r26
    13d6:	db 0b       	sbc	r29, r27
    13d8:	cd bf       	out	0x3d, r28	; 61
    13da:	de bf       	out	0x3e, r29	; 62
    13dc:	09 94       	ijmp

000013de <__epilogue_restores__>:
    13de:	2a 88       	ldd	r2, Y+18	; 0x12
    13e0:	39 88       	ldd	r3, Y+17	; 0x11
    13e2:	48 88       	ldd	r4, Y+16	; 0x10
    13e4:	5f 84       	ldd	r5, Y+15	; 0x0f
    13e6:	6e 84       	ldd	r6, Y+14	; 0x0e
    13e8:	7d 84       	ldd	r7, Y+13	; 0x0d
    13ea:	8c 84       	ldd	r8, Y+12	; 0x0c
    13ec:	9b 84       	ldd	r9, Y+11	; 0x0b
    13ee:	aa 84       	ldd	r10, Y+10	; 0x0a
    13f0:	b9 84       	ldd	r11, Y+9	; 0x09
    13f2:	c8 84       	ldd	r12, Y+8	; 0x08
    13f4:	df 80       	ldd	r13, Y+7	; 0x07
    13f6:	ee 80       	ldd	r14, Y+6	; 0x06
    13f8:	fd 80       	ldd	r15, Y+5	; 0x05
    13fa:	0c 81       	ldd	r16, Y+4	; 0x04
    13fc:	1b 81       	ldd	r17, Y+3	; 0x03
    13fe:	aa 81       	ldd	r26, Y+2	; 0x02
    1400:	b9 81       	ldd	r27, Y+1	; 0x01
    1402:	ce 0f       	add	r28, r30
    1404:	d1 1d       	adc	r29, r1
    1406:	cd bf       	out	0x3d, r28	; 61
    1408:	de bf       	out	0x3e, r29	; 62
    140a:	ed 01       	movw	r28, r26
    140c:	08 95       	ret

0000140e <_exit>:
    140e:	f8 94       	cli

00001410 <__stop_program>:
    1410:	ff cf       	rjmp	.-2      	; 0x1410 <__stop_program>
