
gamecontroller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000009a4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00802000  000009a4  00000a38  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  0080200e  0080200e  00000a46  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a46  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a78  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b0  00000000  00000000  00000ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001952  00000000  00000000  00000c68  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000825  00000000  00000000  000025ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001aa3  00000000  00000000  00002ddf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000048c  00000000  00000000  00004884  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00014b6f  00000000  00000000  00004d10  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000803  00000000  00000000  0001987f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000120  00000000  00000000  0001a082  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00005fae  00000000  00000000  0001a1a2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__ctors_end>
   4:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
   8:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <__vector_2>
   c:	0c 94 b1 01 	jmp	0x362	; 0x362 <__vector_3>
  10:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  14:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  18:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  1c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  20:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  24:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  28:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  2c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  30:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  34:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  38:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  3c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  40:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  44:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  48:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  4c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  50:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  54:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  58:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  5c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  60:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  64:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  68:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  6c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  70:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  74:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  78:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  7c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  80:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  84:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  88:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  8c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  90:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  94:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  98:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  9c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  a0:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  a4:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  a8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  ac:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  b0:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  b4:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  b8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  bc:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  c0:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  c4:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  c8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  cc:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  d0:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  d4:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  d8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  dc:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  e0:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  e4:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  e8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  ec:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  f0:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  f4:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  f8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  fc:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 100:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 104:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 108:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 10c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 110:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 114:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 118:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 11c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 120:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 124:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 128:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 12c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 130:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 134:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 138:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 13c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 140:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 144:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 148:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 14c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 150:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 154:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 158:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 15c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 160:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 164:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 168:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>

0000016c <__ctors_end>:
 16c:	11 24       	eor	r1, r1
 16e:	1f be       	out	0x3f, r1	; 63
 170:	cf ef       	ldi	r28, 0xFF	; 255
 172:	cd bf       	out	0x3d, r28	; 61
 174:	d7 e2       	ldi	r29, 0x27	; 39
 176:	de bf       	out	0x3e, r29	; 62

00000178 <__do_copy_data>:
 178:	10 e2       	ldi	r17, 0x20	; 32
 17a:	a0 e0       	ldi	r26, 0x00	; 0
 17c:	b0 e2       	ldi	r27, 0x20	; 32
 17e:	e4 ea       	ldi	r30, 0xA4	; 164
 180:	f9 e0       	ldi	r31, 0x09	; 9
 182:	02 c0       	rjmp	.+4      	; 0x188 <__do_copy_data+0x10>
 184:	05 90       	lpm	r0, Z+
 186:	0d 92       	st	X+, r0
 188:	ae 30       	cpi	r26, 0x0E	; 14
 18a:	b1 07       	cpc	r27, r17
 18c:	d9 f7       	brne	.-10     	; 0x184 <__do_copy_data+0xc>

0000018e <__do_clear_bss>:
 18e:	20 e2       	ldi	r18, 0x20	; 32
 190:	ae e0       	ldi	r26, 0x0E	; 14
 192:	b0 e2       	ldi	r27, 0x20	; 32
 194:	01 c0       	rjmp	.+2      	; 0x198 <.do_clear_bss_start>

00000196 <.do_clear_bss_loop>:
 196:	1d 92       	st	X+, r1

00000198 <.do_clear_bss_start>:
 198:	a7 31       	cpi	r26, 0x17	; 23
 19a:	b2 07       	cpc	r27, r18
 19c:	e1 f7       	brne	.-8      	; 0x196 <.do_clear_bss_loop>
 19e:	0e 94 4f 02 	call	0x49e	; 0x49e <main>
 1a2:	0c 94 d0 04 	jmp	0x9a0	; 0x9a0 <_exit>

000001a6 <__bad_interrupt>:
 1a6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001aa <AccInit>:
#include "acc.h"



void AccInit(void)
{
 1aa:	cf 93       	push	r28
 1ac:	df 93       	push	r29
 1ae:	cd b7       	in	r28, 0x3d	; 61
 1b0:	de b7       	in	r29, 0x3e	; 62

	
}
 1b2:	00 00       	nop
 1b4:	df 91       	pop	r29
 1b6:	cf 91       	pop	r28
 1b8:	08 95       	ret

000001ba <AnalogInit>:
	result = pgm_read_byte(index);
	
	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
	
	return result;
}
 1ba:	cf 93       	push	r28
 1bc:	df 93       	push	r29
 1be:	cd b7       	in	r28, 0x3d	; 61
 1c0:	de b7       	in	r29, 0x3e	; 62
 1c2:	80 e0       	ldi	r24, 0x00	; 0
 1c4:	92 e0       	ldi	r25, 0x02	; 2
 1c6:	28 e0       	ldi	r18, 0x08	; 8
 1c8:	fc 01       	movw	r30, r24
 1ca:	21 a3       	std	Z+33, r18	; 0x21
 1cc:	80 e0       	ldi	r24, 0x00	; 0
 1ce:	92 e0       	ldi	r25, 0x02	; 2
 1d0:	20 e1       	ldi	r18, 0x10	; 16
 1d2:	fc 01       	movw	r30, r24
 1d4:	21 83       	std	Z+1, r18	; 0x01
 1d6:	80 e0       	ldi	r24, 0x00	; 0
 1d8:	92 e0       	ldi	r25, 0x02	; 2
 1da:	24 e0       	ldi	r18, 0x04	; 4
 1dc:	fc 01       	movw	r30, r24
 1de:	24 83       	std	Z+4, r18	; 0x04
 1e0:	80 e0       	ldi	r24, 0x00	; 0
 1e2:	92 e0       	ldi	r25, 0x02	; 2
 1e4:	fc 01       	movw	r30, r24
 1e6:	12 82       	std	Z+2, r1	; 0x02
 1e8:	80 e0       	ldi	r24, 0x00	; 0
 1ea:	92 e0       	ldi	r25, 0x02	; 2
 1ec:	fc 01       	movw	r30, r24
 1ee:	13 82       	std	Z+3, r1	; 0x03
 1f0:	80 e0       	ldi	r24, 0x00	; 0
 1f2:	92 e0       	ldi	r25, 0x02	; 2
 1f4:	21 e0       	ldi	r18, 0x01	; 1
 1f6:	fc 01       	movw	r30, r24
 1f8:	26 83       	std	Z+6, r18	; 0x06
 1fa:	80 e0       	ldi	r24, 0x00	; 0
 1fc:	92 e0       	ldi	r25, 0x02	; 2
 1fe:	23 e0       	ldi	r18, 0x03	; 3
 200:	fc 01       	movw	r30, r24
 202:	22 a3       	std	Z+34, r18	; 0x22
 204:	80 e0       	ldi	r24, 0x00	; 0
 206:	92 e0       	ldi	r25, 0x02	; 2
 208:	21 e0       	ldi	r18, 0x01	; 1
 20a:	fc 01       	movw	r30, r24
 20c:	20 83       	st	Z, r18
 20e:	00 00       	nop
 210:	df 91       	pop	r29
 212:	cf 91       	pop	r28
 214:	08 95       	ret

00000216 <AnalogGetCh>:

int AnalogGetCh(int PinPos,int PinNeg)
{
 216:	cf 93       	push	r28
 218:	df 93       	push	r29
 21a:	cd b7       	in	r28, 0x3d	; 61
 21c:	de b7       	in	r29, 0x3e	; 62
 21e:	26 97       	sbiw	r28, 0x06	; 6
 220:	cd bf       	out	0x3d, r28	; 61
 222:	de bf       	out	0x3e, r29	; 62
 224:	8b 83       	std	Y+3, r24	; 0x03
 226:	9c 83       	std	Y+4, r25	; 0x04
 228:	6d 83       	std	Y+5, r22	; 0x05
 22a:	7e 83       	std	Y+6, r23	; 0x06

		PinPos <<=3;
 22c:	8b 81       	ldd	r24, Y+3	; 0x03
 22e:	9c 81       	ldd	r25, Y+4	; 0x04
 230:	88 0f       	add	r24, r24
 232:	99 1f       	adc	r25, r25
 234:	88 0f       	add	r24, r24
 236:	99 1f       	adc	r25, r25
 238:	88 0f       	add	r24, r24
 23a:	99 1f       	adc	r25, r25
 23c:	8b 83       	std	Y+3, r24	; 0x03
 23e:	9c 83       	std	Y+4, r25	; 0x04

		//Get analog channel value
		int meting = ADCA_CH0_RES;
 240:	84 e2       	ldi	r24, 0x24	; 36
 242:	92 e0       	ldi	r25, 0x02	; 2
 244:	fc 01       	movw	r30, r24
 246:	80 81       	ld	r24, Z
 248:	91 81       	ldd	r25, Z+1	; 0x01
 24a:	89 83       	std	Y+1, r24	; 0x01
 24c:	9a 83       	std	Y+2, r25	; 0x02
		//     7        6       5        4        3        2       1       0
		// | START  |   -   |   -   |         GAIN[2:0]        | INPUTMODE[1:0] |
		//     0        0       0        0        0        0       0       0
		// Place ADC channel in single-ended mode
		// Gain set to 1
		ADCA.CH0.CTRL = ADC_CH_INPUTMODE0_bm; // 0x01
 24e:	80 e0       	ldi	r24, 0x00	; 0
 250:	92 e0       	ldi	r25, 0x02	; 2
 252:	21 e0       	ldi	r18, 0x01	; 1
 254:	fc 01       	movw	r30, r24
 256:	20 a3       	std	Z+32, r18	; 0x20
		
		ADCA_CH0_MUXCTRL = PinPos | PinNeg;
 258:	81 e2       	ldi	r24, 0x21	; 33
 25a:	92 e0       	ldi	r25, 0x02	; 2
 25c:	3b 81       	ldd	r19, Y+3	; 0x03
 25e:	2d 81       	ldd	r18, Y+5	; 0x05
 260:	23 2b       	or	r18, r19
 262:	fc 01       	movw	r30, r24
 264:	20 83       	st	Z, r18
		
		//Single ended mode: write '-1' to select single ended mode
		//Return value:
		//-2048 to 2047 (signed) or 0 to 4095 (unsigned)
		//10000: Invalid pin settings
		return meting;
 266:	89 81       	ldd	r24, Y+1	; 0x01
 268:	9a 81       	ldd	r25, Y+2	; 0x02
}
 26a:	26 96       	adiw	r28, 0x06	; 6
 26c:	cd bf       	out	0x3d, r28	; 61
 26e:	de bf       	out	0x3e, r29	; 62
 270:	df 91       	pop	r29
 272:	cf 91       	pop	r28
 274:	08 95       	ret

00000276 <ClockInit>:
#pragma GCC push_options
#pragma GCC optimize ("O2") //This function must be optimized to avoid too long time interval betwee CCP write and CLK.CTRL write (4 CLK CYC max)

void ClockInit(void)
{
	OSC.XOSCCTRL=0b11001011; //Clock<=16MHz	
 276:	8b ec       	ldi	r24, 0xCB	; 203
 278:	80 93 52 00 	sts	0x0052, r24	; 0x800052 <__TEXT_REGION_LENGTH__+0x700052>
	OSC.CTRL=0b01000; //Enable oscillator	
 27c:	88 e0       	ldi	r24, 0x08	; 8
 27e:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
	while (!(OSC.STATUS&0b1000)); //Wait until XTAL osc is ready
 282:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
 286:	83 ff       	sbrs	r24, 3
 288:	fc cf       	rjmp	.-8      	; 0x282 <ClockInit+0xc>
	
	//Select XTAL osc as system CLK source
	CCP=0xd8;
 28a:	88 ed       	ldi	r24, 0xD8	; 216
 28c:	84 bf       	out	0x34, r24	; 52
    CLK.CTRL=0b0011;
 28e:	83 e0       	ldi	r24, 0x03	; 3
 290:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
 294:	08 95       	ret

00000296 <EncoderInit>:
 296:	cf 93       	push	r28
 298:	df 93       	push	r29
 29a:	cd b7       	in	r28, 0x3d	; 61
 29c:	de b7       	in	r29, 0x3e	; 62
 29e:	80 e4       	ldi	r24, 0x40	; 64
 2a0:	96 e0       	ldi	r25, 0x06	; 6
 2a2:	20 e4       	ldi	r18, 0x40	; 64
 2a4:	36 e0       	ldi	r19, 0x06	; 6
 2a6:	f9 01       	movw	r30, r18
 2a8:	20 81       	ld	r18, Z
 2aa:	2f 7c       	andi	r18, 0xCF	; 207
 2ac:	fc 01       	movw	r30, r24
 2ae:	20 83       	st	Z, r18
 2b0:	80 e4       	ldi	r24, 0x40	; 64
 2b2:	96 e0       	ldi	r25, 0x06	; 6
 2b4:	2f e0       	ldi	r18, 0x0F	; 15
 2b6:	fc 01       	movw	r30, r24
 2b8:	21 87       	std	Z+9, r18	; 0x09
 2ba:	80 e4       	ldi	r24, 0x40	; 64
 2bc:	96 e0       	ldi	r25, 0x06	; 6
 2be:	20 e1       	ldi	r18, 0x10	; 16
 2c0:	fc 01       	movw	r30, r24
 2c2:	22 87       	std	Z+10, r18	; 0x0a
 2c4:	80 e4       	ldi	r24, 0x40	; 64
 2c6:	96 e0       	ldi	r25, 0x06	; 6
 2c8:	28 e0       	ldi	r18, 0x08	; 8
 2ca:	fc 01       	movw	r30, r24
 2cc:	23 87       	std	Z+11, r18	; 0x0b
 2ce:	8f e3       	ldi	r24, 0x3F	; 63
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	2f e3       	ldi	r18, 0x3F	; 63
 2d4:	30 e0       	ldi	r19, 0x00	; 0
 2d6:	f9 01       	movw	r30, r18
 2d8:	20 81       	ld	r18, Z
 2da:	20 68       	ori	r18, 0x80	; 128
 2dc:	fc 01       	movw	r30, r24
 2de:	20 83       	st	Z, r18
 2e0:	80 ea       	ldi	r24, 0xA0	; 160
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	24 e0       	ldi	r18, 0x04	; 4
 2e6:	fc 01       	movw	r30, r24
 2e8:	22 83       	std	Z+2, r18	; 0x02
 2ea:	00 00       	nop
 2ec:	df 91       	pop	r29
 2ee:	cf 91       	pop	r28
 2f0:	08 95       	ret

000002f2 <__vector_2>:
 2f2:	1f 92       	push	r1
 2f4:	0f 92       	push	r0
 2f6:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
 2fa:	0f 92       	push	r0
 2fc:	11 24       	eor	r1, r1
 2fe:	2f 93       	push	r18
 300:	3f 93       	push	r19
 302:	4f 93       	push	r20
 304:	5f 93       	push	r21
 306:	6f 93       	push	r22
 308:	7f 93       	push	r23
 30a:	8f 93       	push	r24
 30c:	9f 93       	push	r25
 30e:	af 93       	push	r26
 310:	bf 93       	push	r27
 312:	ef 93       	push	r30
 314:	ff 93       	push	r31
 316:	cf 93       	push	r28
 318:	df 93       	push	r29
 31a:	cd b7       	in	r28, 0x3d	; 61
 31c:	de b7       	in	r29, 0x3e	; 62
 31e:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <readEncoder>
 322:	9c 01       	movw	r18, r24
 324:	80 91 0e 20 	lds	r24, 0x200E	; 0x80200e <__data_end>
 328:	90 91 0f 20 	lds	r25, 0x200F	; 0x80200f <__data_end+0x1>
 32c:	82 0f       	add	r24, r18
 32e:	93 1f       	adc	r25, r19
 330:	80 93 0e 20 	sts	0x200E, r24	; 0x80200e <__data_end>
 334:	90 93 0f 20 	sts	0x200F, r25	; 0x80200f <__data_end+0x1>
 338:	00 00       	nop
 33a:	df 91       	pop	r29
 33c:	cf 91       	pop	r28
 33e:	ff 91       	pop	r31
 340:	ef 91       	pop	r30
 342:	bf 91       	pop	r27
 344:	af 91       	pop	r26
 346:	9f 91       	pop	r25
 348:	8f 91       	pop	r24
 34a:	7f 91       	pop	r23
 34c:	6f 91       	pop	r22
 34e:	5f 91       	pop	r21
 350:	4f 91       	pop	r20
 352:	3f 91       	pop	r19
 354:	2f 91       	pop	r18
 356:	0f 90       	pop	r0
 358:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
 35c:	0f 90       	pop	r0
 35e:	1f 90       	pop	r1
 360:	18 95       	reti

00000362 <__vector_3>:
 362:	1f 92       	push	r1
 364:	0f 92       	push	r0
 366:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
 36a:	0f 92       	push	r0
 36c:	11 24       	eor	r1, r1
 36e:	2f 93       	push	r18
 370:	3f 93       	push	r19
 372:	4f 93       	push	r20
 374:	5f 93       	push	r21
 376:	6f 93       	push	r22
 378:	7f 93       	push	r23
 37a:	8f 93       	push	r24
 37c:	9f 93       	push	r25
 37e:	af 93       	push	r26
 380:	bf 93       	push	r27
 382:	ef 93       	push	r30
 384:	ff 93       	push	r31
 386:	cf 93       	push	r28
 388:	df 93       	push	r29
 38a:	cd b7       	in	r28, 0x3d	; 61
 38c:	de b7       	in	r29, 0x3e	; 62
 38e:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <readEncoder>
 392:	9c 01       	movw	r18, r24
 394:	80 91 0e 20 	lds	r24, 0x200E	; 0x80200e <__data_end>
 398:	90 91 0f 20 	lds	r25, 0x200F	; 0x80200f <__data_end+0x1>
 39c:	82 0f       	add	r24, r18
 39e:	93 1f       	adc	r25, r19
 3a0:	80 93 0e 20 	sts	0x200E, r24	; 0x80200e <__data_end>
 3a4:	90 93 0f 20 	sts	0x200F, r25	; 0x80200f <__data_end+0x1>
 3a8:	00 00       	nop
 3aa:	df 91       	pop	r29
 3ac:	cf 91       	pop	r28
 3ae:	ff 91       	pop	r31
 3b0:	ef 91       	pop	r30
 3b2:	bf 91       	pop	r27
 3b4:	af 91       	pop	r26
 3b6:	9f 91       	pop	r25
 3b8:	8f 91       	pop	r24
 3ba:	7f 91       	pop	r23
 3bc:	6f 91       	pop	r22
 3be:	5f 91       	pop	r21
 3c0:	4f 91       	pop	r20
 3c2:	3f 91       	pop	r19
 3c4:	2f 91       	pop	r18
 3c6:	0f 90       	pop	r0
 3c8:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
 3cc:	0f 90       	pop	r0
 3ce:	1f 90       	pop	r1
 3d0:	18 95       	reti

000003d2 <readEncoder>:
 3d2:	cf 93       	push	r28
 3d4:	df 93       	push	r29
 3d6:	1f 92       	push	r1
 3d8:	cd b7       	in	r28, 0x3d	; 61
 3da:	de b7       	in	r29, 0x3e	; 62
 3dc:	80 e4       	ldi	r24, 0x40	; 64
 3de:	96 e0       	ldi	r25, 0x06	; 6
 3e0:	fc 01       	movw	r30, r24
 3e2:	80 85       	ldd	r24, Z+8	; 0x08
 3e4:	86 95       	lsr	r24
 3e6:	86 95       	lsr	r24
 3e8:	86 95       	lsr	r24
 3ea:	83 70       	andi	r24, 0x03	; 3
 3ec:	89 83       	std	Y+1, r24	; 0x01
 3ee:	89 81       	ldd	r24, Y+1	; 0x01
 3f0:	88 2f       	mov	r24, r24
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	81 30       	cpi	r24, 0x01	; 1
 3f6:	91 05       	cpc	r25, r1
 3f8:	d1 f0       	breq	.+52     	; 0x42e <__FUSE_REGION_LENGTH__+0x2e>
 3fa:	82 30       	cpi	r24, 0x02	; 2
 3fc:	91 05       	cpc	r25, r1
 3fe:	1c f4       	brge	.+6      	; 0x406 <__FUSE_REGION_LENGTH__+0x6>
 400:	89 2b       	or	r24, r25
 402:	39 f0       	breq	.+14     	; 0x412 <__FUSE_REGION_LENGTH__+0x12>
 404:	3e c0       	rjmp	.+124    	; 0x482 <__FUSE_REGION_LENGTH__+0x82>
 406:	82 30       	cpi	r24, 0x02	; 2
 408:	91 05       	cpc	r25, r1
 40a:	f9 f0       	breq	.+62     	; 0x44a <__FUSE_REGION_LENGTH__+0x4a>
 40c:	03 97       	sbiw	r24, 0x03	; 3
 40e:	59 f1       	breq	.+86     	; 0x466 <__FUSE_REGION_LENGTH__+0x66>
 410:	38 c0       	rjmp	.+112    	; 0x482 <__FUSE_REGION_LENGTH__+0x82>
 412:	80 91 10 20 	lds	r24, 0x2010	; 0x802010 <prevpos>
 416:	83 30       	cpi	r24, 0x03	; 3
 418:	19 f4       	brne	.+6      	; 0x420 <__FUSE_REGION_LENGTH__+0x20>
 41a:	81 e0       	ldi	r24, 0x01	; 1
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	3b c0       	rjmp	.+118    	; 0x496 <__FUSE_REGION_LENGTH__+0x96>
 420:	80 91 10 20 	lds	r24, 0x2010	; 0x802010 <prevpos>
 424:	81 30       	cpi	r24, 0x01	; 1
 426:	81 f5       	brne	.+96     	; 0x488 <__FUSE_REGION_LENGTH__+0x88>
 428:	8f ef       	ldi	r24, 0xFF	; 255
 42a:	9f ef       	ldi	r25, 0xFF	; 255
 42c:	34 c0       	rjmp	.+104    	; 0x496 <__FUSE_REGION_LENGTH__+0x96>
 42e:	80 91 10 20 	lds	r24, 0x2010	; 0x802010 <prevpos>
 432:	88 23       	and	r24, r24
 434:	19 f4       	brne	.+6      	; 0x43c <__FUSE_REGION_LENGTH__+0x3c>
 436:	81 e0       	ldi	r24, 0x01	; 1
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	2d c0       	rjmp	.+90     	; 0x496 <__FUSE_REGION_LENGTH__+0x96>
 43c:	80 91 10 20 	lds	r24, 0x2010	; 0x802010 <prevpos>
 440:	82 30       	cpi	r24, 0x02	; 2
 442:	21 f5       	brne	.+72     	; 0x48c <__FUSE_REGION_LENGTH__+0x8c>
 444:	8f ef       	ldi	r24, 0xFF	; 255
 446:	9f ef       	ldi	r25, 0xFF	; 255
 448:	26 c0       	rjmp	.+76     	; 0x496 <__FUSE_REGION_LENGTH__+0x96>
 44a:	80 91 10 20 	lds	r24, 0x2010	; 0x802010 <prevpos>
 44e:	81 30       	cpi	r24, 0x01	; 1
 450:	19 f4       	brne	.+6      	; 0x458 <__FUSE_REGION_LENGTH__+0x58>
 452:	81 e0       	ldi	r24, 0x01	; 1
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	1f c0       	rjmp	.+62     	; 0x496 <__FUSE_REGION_LENGTH__+0x96>
 458:	80 91 10 20 	lds	r24, 0x2010	; 0x802010 <prevpos>
 45c:	83 30       	cpi	r24, 0x03	; 3
 45e:	c1 f4       	brne	.+48     	; 0x490 <__FUSE_REGION_LENGTH__+0x90>
 460:	8f ef       	ldi	r24, 0xFF	; 255
 462:	9f ef       	ldi	r25, 0xFF	; 255
 464:	18 c0       	rjmp	.+48     	; 0x496 <__FUSE_REGION_LENGTH__+0x96>
 466:	80 91 10 20 	lds	r24, 0x2010	; 0x802010 <prevpos>
 46a:	82 30       	cpi	r24, 0x02	; 2
 46c:	19 f4       	brne	.+6      	; 0x474 <__FUSE_REGION_LENGTH__+0x74>
 46e:	81 e0       	ldi	r24, 0x01	; 1
 470:	90 e0       	ldi	r25, 0x00	; 0
 472:	11 c0       	rjmp	.+34     	; 0x496 <__FUSE_REGION_LENGTH__+0x96>
 474:	80 91 10 20 	lds	r24, 0x2010	; 0x802010 <prevpos>
 478:	88 23       	and	r24, r24
 47a:	61 f4       	brne	.+24     	; 0x494 <__FUSE_REGION_LENGTH__+0x94>
 47c:	8f ef       	ldi	r24, 0xFF	; 255
 47e:	9f ef       	ldi	r25, 0xFF	; 255
 480:	0a c0       	rjmp	.+20     	; 0x496 <__FUSE_REGION_LENGTH__+0x96>
 482:	80 e0       	ldi	r24, 0x00	; 0
 484:	90 e0       	ldi	r25, 0x00	; 0
 486:	07 c0       	rjmp	.+14     	; 0x496 <__FUSE_REGION_LENGTH__+0x96>
 488:	00 00       	nop
 48a:	05 c0       	rjmp	.+10     	; 0x496 <__FUSE_REGION_LENGTH__+0x96>
 48c:	00 00       	nop
 48e:	03 c0       	rjmp	.+6      	; 0x496 <__FUSE_REGION_LENGTH__+0x96>
 490:	00 00       	nop
 492:	01 c0       	rjmp	.+2      	; 0x496 <__FUSE_REGION_LENGTH__+0x96>
 494:	00 00       	nop
 496:	0f 90       	pop	r0
 498:	df 91       	pop	r29
 49a:	cf 91       	pop	r28
 49c:	08 95       	ret

0000049e <main>:
char a;

void SimpleFunction(void);	//A simple function: print a counter (0 to 9) to the terminal

int main(void)
{	
 49e:	cf 93       	push	r28
 4a0:	df 93       	push	r29
 4a2:	cd b7       	in	r28, 0x3d	; 61
 4a4:	de b7       	in	r29, 0x3e	; 62
 4a6:	2e 97       	sbiw	r28, 0x0e	; 14
 4a8:	cd bf       	out	0x3d, r28	; 61
 4aa:	de bf       	out	0x3e, r29	; 62
	//###1###
	 
	//Initialize subsystems
	ClockInit();			//Initialize system clock (16 MHz)
 4ac:	0e 94 3b 01 	call	0x276	; 0x276 <ClockInit>
	USARTInit();			//Initialize USART and bind to stdout,stdin
 4b0:	0e 94 40 03 	call	0x680	; 0x680 <USARTInit>
	AnalogInit();			//Initialize ADC
 4b4:	0e 94 dd 00 	call	0x1ba	; 0x1ba <AnalogInit>
	AccInit();				//Initialize accelerometer system
 4b8:	0e 94 d5 00 	call	0x1aa	; 0x1aa <AccInit>
	LEDInit();				//Initialize LEDs
 4bc:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <LEDInit>
	SwitchInit();			//Initialize switches
 4c0:	0e 94 1a 03 	call	0x634	; 0x634 <SwitchInit>
	EncoderInit();			//Initialize encoder
 4c4:	0e 94 4b 01 	call	0x296	; 0x296 <EncoderInit>
	SpeakerInit();			//Initialize speaker system
 4c8:	0e 94 12 03 	call	0x624	; 0x624 <SpeakerInit>
	
	//Enable interrupts
	PMIC.CTRL|=0b00000111;  //Enable low, medium, high priority interrupts
 4cc:	80 ea       	ldi	r24, 0xA0	; 160
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	20 ea       	ldi	r18, 0xA0	; 160
 4d2:	30 e0       	ldi	r19, 0x00	; 0
 4d4:	f9 01       	movw	r30, r18
 4d6:	22 81       	ldd	r18, Z+2	; 0x02
 4d8:	27 60       	ori	r18, 0x07	; 7
 4da:	fc 01       	movw	r30, r24
 4dc:	22 83       	std	Z+2, r18	; 0x02
	SREG|=0b10000000;		//Global interrupt enable
 4de:	8f e3       	ldi	r24, 0x3F	; 63
 4e0:	90 e0       	ldi	r25, 0x00	; 0
 4e2:	2f e3       	ldi	r18, 0x3F	; 63
 4e4:	30 e0       	ldi	r19, 0x00	; 0
 4e6:	f9 01       	movw	r30, r18
 4e8:	20 81       	ld	r18, Z
 4ea:	20 68       	ori	r18, 0x80	; 128
 4ec:	fc 01       	movw	r30, r24
 4ee:	20 83       	st	Z, r18
 4f0:	80 e0       	ldi	r24, 0x00	; 0
 4f2:	90 e0       	ldi	r25, 0x00	; 0
 4f4:	aa ef       	ldi	r26, 0xFA	; 250
 4f6:	b3 e4       	ldi	r27, 0x43	; 67
 4f8:	89 83       	std	Y+1, r24	; 0x01
 4fa:	9a 83       	std	Y+2, r25	; 0x02
 4fc:	ab 83       	std	Y+3, r26	; 0x03
 4fe:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 500:	20 e0       	ldi	r18, 0x00	; 0
 502:	30 e0       	ldi	r19, 0x00	; 0
 504:	4a e7       	ldi	r20, 0x7A	; 122
 506:	55 e4       	ldi	r21, 0x45	; 69
 508:	69 81       	ldd	r22, Y+1	; 0x01
 50a:	7a 81       	ldd	r23, Y+2	; 0x02
 50c:	8b 81       	ldd	r24, Y+3	; 0x03
 50e:	9c 81       	ldd	r25, Y+4	; 0x04
 510:	0e 94 3b 04 	call	0x876	; 0x876 <__mulsf3>
 514:	dc 01       	movw	r26, r24
 516:	cb 01       	movw	r24, r22
 518:	8d 83       	std	Y+5, r24	; 0x05
 51a:	9e 83       	std	Y+6, r25	; 0x06
 51c:	af 83       	std	Y+7, r26	; 0x07
 51e:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
 520:	20 e0       	ldi	r18, 0x00	; 0
 522:	30 e0       	ldi	r19, 0x00	; 0
 524:	40 e8       	ldi	r20, 0x80	; 128
 526:	5f e3       	ldi	r21, 0x3F	; 63
 528:	6d 81       	ldd	r22, Y+5	; 0x05
 52a:	7e 81       	ldd	r23, Y+6	; 0x06
 52c:	8f 81       	ldd	r24, Y+7	; 0x07
 52e:	98 85       	ldd	r25, Y+8	; 0x08
 530:	0e 94 b5 03 	call	0x76a	; 0x76a <__cmpsf2>
 534:	88 23       	and	r24, r24
 536:	2c f4       	brge	.+10     	; 0x542 <main+0xa4>
		__ticks = 1;
 538:	81 e0       	ldi	r24, 0x01	; 1
 53a:	90 e0       	ldi	r25, 0x00	; 0
 53c:	89 87       	std	Y+9, r24	; 0x09
 53e:	9a 87       	std	Y+10, r25	; 0x0a
 540:	3f c0       	rjmp	.+126    	; 0x5c0 <main+0x122>
	else if (__tmp > 65535)
 542:	20 e0       	ldi	r18, 0x00	; 0
 544:	3f ef       	ldi	r19, 0xFF	; 255
 546:	4f e7       	ldi	r20, 0x7F	; 127
 548:	57 e4       	ldi	r21, 0x47	; 71
 54a:	6d 81       	ldd	r22, Y+5	; 0x05
 54c:	7e 81       	ldd	r23, Y+6	; 0x06
 54e:	8f 81       	ldd	r24, Y+7	; 0x07
 550:	98 85       	ldd	r25, Y+8	; 0x08
 552:	0e 94 36 04 	call	0x86c	; 0x86c <__gesf2>
 556:	18 16       	cp	r1, r24
 558:	4c f5       	brge	.+82     	; 0x5ac <main+0x10e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 55a:	20 e0       	ldi	r18, 0x00	; 0
 55c:	30 e0       	ldi	r19, 0x00	; 0
 55e:	40 e2       	ldi	r20, 0x20	; 32
 560:	51 e4       	ldi	r21, 0x41	; 65
 562:	69 81       	ldd	r22, Y+1	; 0x01
 564:	7a 81       	ldd	r23, Y+2	; 0x02
 566:	8b 81       	ldd	r24, Y+3	; 0x03
 568:	9c 81       	ldd	r25, Y+4	; 0x04
 56a:	0e 94 3b 04 	call	0x876	; 0x876 <__mulsf3>
 56e:	dc 01       	movw	r26, r24
 570:	cb 01       	movw	r24, r22
 572:	bc 01       	movw	r22, r24
 574:	cd 01       	movw	r24, r26
 576:	0e 94 ba 03 	call	0x774	; 0x774 <__fixunssfsi>
 57a:	dc 01       	movw	r26, r24
 57c:	cb 01       	movw	r24, r22
 57e:	89 87       	std	Y+9, r24	; 0x09
 580:	9a 87       	std	Y+10, r25	; 0x0a
 582:	0f c0       	rjmp	.+30     	; 0x5a2 <main+0x104>
 584:	80 e9       	ldi	r24, 0x90	; 144
 586:	91 e0       	ldi	r25, 0x01	; 1
 588:	8b 87       	std	Y+11, r24	; 0x0b
 58a:	9c 87       	std	Y+12, r25	; 0x0c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 58c:	8b 85       	ldd	r24, Y+11	; 0x0b
 58e:	9c 85       	ldd	r25, Y+12	; 0x0c
 590:	01 97       	sbiw	r24, 0x01	; 1
 592:	f1 f7       	brne	.-4      	; 0x590 <main+0xf2>
 594:	8b 87       	std	Y+11, r24	; 0x0b
 596:	9c 87       	std	Y+12, r25	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 598:	89 85       	ldd	r24, Y+9	; 0x09
 59a:	9a 85       	ldd	r25, Y+10	; 0x0a
 59c:	01 97       	sbiw	r24, 0x01	; 1
 59e:	89 87       	std	Y+9, r24	; 0x09
 5a0:	9a 87       	std	Y+10, r25	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 5a2:	89 85       	ldd	r24, Y+9	; 0x09
 5a4:	9a 85       	ldd	r25, Y+10	; 0x0a
 5a6:	89 2b       	or	r24, r25
 5a8:	69 f7       	brne	.-38     	; 0x584 <main+0xe6>
 5aa:	14 c0       	rjmp	.+40     	; 0x5d4 <main+0x136>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 5ac:	6d 81       	ldd	r22, Y+5	; 0x05
 5ae:	7e 81       	ldd	r23, Y+6	; 0x06
 5b0:	8f 81       	ldd	r24, Y+7	; 0x07
 5b2:	98 85       	ldd	r25, Y+8	; 0x08
 5b4:	0e 94 ba 03 	call	0x774	; 0x774 <__fixunssfsi>
 5b8:	dc 01       	movw	r26, r24
 5ba:	cb 01       	movw	r24, r22
 5bc:	89 87       	std	Y+9, r24	; 0x09
 5be:	9a 87       	std	Y+10, r25	; 0x0a
 5c0:	89 85       	ldd	r24, Y+9	; 0x09
 5c2:	9a 85       	ldd	r25, Y+10	; 0x0a
 5c4:	8d 87       	std	Y+13, r24	; 0x0d
 5c6:	9e 87       	std	Y+14, r25	; 0x0e
 5c8:	8d 85       	ldd	r24, Y+13	; 0x0d
 5ca:	9e 85       	ldd	r25, Y+14	; 0x0e
 5cc:	01 97       	sbiw	r24, 0x01	; 1
 5ce:	f1 f7       	brne	.-4      	; 0x5cc <main+0x12e>
 5d0:	8d 87       	std	Y+13, r24	; 0x0d
 5d2:	9e 87       	std	Y+14, r25	; 0x0e
	
	
	
	while (1){
		// Start ADC conversion
		AnalogGetCh(1,2);
 5d4:	62 e0       	ldi	r22, 0x02	; 2
 5d6:	70 e0       	ldi	r23, 0x00	; 0
 5d8:	81 e0       	ldi	r24, 0x01	; 1
 5da:	90 e0       	ldi	r25, 0x00	; 0
 5dc:	0e 94 0b 01 	call	0x216	; 0x216 <AnalogGetCh>
		
		
		
		//putchar('U');
	}
 5e0:	f9 cf       	rjmp	.-14     	; 0x5d4 <main+0x136>

000005e2 <LEDInit>:
#include "LED.h"
#include <avr/io.h>

void LEDInit(void)
{
 5e2:	cf 93       	push	r28
 5e4:	df 93       	push	r29
 5e6:	cd b7       	in	r28, 0x3d	; 61
 5e8:	de b7       	in	r29, 0x3e	; 62
	PORTE.DIRSET=0b00001111;
 5ea:	80 e8       	ldi	r24, 0x80	; 128
 5ec:	96 e0       	ldi	r25, 0x06	; 6
 5ee:	2f e0       	ldi	r18, 0x0F	; 15
 5f0:	fc 01       	movw	r30, r24
 5f2:	21 83       	std	Z+1, r18	; 0x01
	PORTE.PIN0CTRL=0b01000000;
 5f4:	80 e8       	ldi	r24, 0x80	; 128
 5f6:	96 e0       	ldi	r25, 0x06	; 6
 5f8:	20 e4       	ldi	r18, 0x40	; 64
 5fa:	fc 01       	movw	r30, r24
 5fc:	20 8b       	std	Z+16, r18	; 0x10
	PORTE.PIN1CTRL=0b01000000;
 5fe:	80 e8       	ldi	r24, 0x80	; 128
 600:	96 e0       	ldi	r25, 0x06	; 6
 602:	20 e4       	ldi	r18, 0x40	; 64
 604:	fc 01       	movw	r30, r24
 606:	21 8b       	std	Z+17, r18	; 0x11
	PORTE.PIN2CTRL=0b01000000;
 608:	80 e8       	ldi	r24, 0x80	; 128
 60a:	96 e0       	ldi	r25, 0x06	; 6
 60c:	20 e4       	ldi	r18, 0x40	; 64
 60e:	fc 01       	movw	r30, r24
 610:	22 8b       	std	Z+18, r18	; 0x12
	PORTE.PIN3CTRL=0b01000000;
 612:	80 e8       	ldi	r24, 0x80	; 128
 614:	96 e0       	ldi	r25, 0x06	; 6
 616:	20 e4       	ldi	r18, 0x40	; 64
 618:	fc 01       	movw	r30, r24
 61a:	23 8b       	std	Z+19, r18	; 0x13
	
}
 61c:	00 00       	nop
 61e:	df 91       	pop	r29
 620:	cf 91       	pop	r28
 622:	08 95       	ret

00000624 <SpeakerInit>:
#include <avr/io.h>
#include <avr/interrupt.h>
#include "speaker.h"

void SpeakerInit(void)
{
 624:	cf 93       	push	r28
 626:	df 93       	push	r29
 628:	cd b7       	in	r28, 0x3d	; 61
 62a:	de b7       	in	r29, 0x3e	; 62
		//TCC1.CTRLB=
		//TCC1.CTRLC=
		//TCC1.CTRLD=
		//TCC1.CTRLE=
		
}
 62c:	00 00       	nop
 62e:	df 91       	pop	r29
 630:	cf 91       	pop	r28
 632:	08 95       	ret

00000634 <SwitchInit>:
#include "switch.h"
#include <avr/io.h>

void SwitchInit(void)
{
 634:	cf 93       	push	r28
 636:	df 93       	push	r29
 638:	cd b7       	in	r28, 0x3d	; 61
 63a:	de b7       	in	r29, 0x3e	; 62
	PORTD.DIRCLR=0b11110001;
 63c:	80 e6       	ldi	r24, 0x60	; 96
 63e:	96 e0       	ldi	r25, 0x06	; 6
 640:	21 ef       	ldi	r18, 0xF1	; 241
 642:	fc 01       	movw	r30, r24
 644:	22 83       	std	Z+2, r18	; 0x02
	PORTD.PIN0CTRL=0b01011000;
 646:	80 e6       	ldi	r24, 0x60	; 96
 648:	96 e0       	ldi	r25, 0x06	; 6
 64a:	28 e5       	ldi	r18, 0x58	; 88
 64c:	fc 01       	movw	r30, r24
 64e:	20 8b       	std	Z+16, r18	; 0x10
	PORTD.PIN4CTRL=0b01011000;
 650:	80 e6       	ldi	r24, 0x60	; 96
 652:	96 e0       	ldi	r25, 0x06	; 6
 654:	28 e5       	ldi	r18, 0x58	; 88
 656:	fc 01       	movw	r30, r24
 658:	24 8b       	std	Z+20, r18	; 0x14
	PORTD.PIN5CTRL=0b01011000;
 65a:	80 e6       	ldi	r24, 0x60	; 96
 65c:	96 e0       	ldi	r25, 0x06	; 6
 65e:	28 e5       	ldi	r18, 0x58	; 88
 660:	fc 01       	movw	r30, r24
 662:	25 8b       	std	Z+21, r18	; 0x15
	PORTD.PIN6CTRL=0b01011000;
 664:	80 e6       	ldi	r24, 0x60	; 96
 666:	96 e0       	ldi	r25, 0x06	; 6
 668:	28 e5       	ldi	r18, 0x58	; 88
 66a:	fc 01       	movw	r30, r24
 66c:	26 8b       	std	Z+22, r18	; 0x16
	PORTD.PIN7CTRL=0b01011000;
 66e:	80 e6       	ldi	r24, 0x60	; 96
 670:	96 e0       	ldi	r25, 0x06	; 6
 672:	28 e5       	ldi	r18, 0x58	; 88
 674:	fc 01       	movw	r30, r24
 676:	27 8b       	std	Z+23, r18	; 0x17
}
 678:	00 00       	nop
 67a:	df 91       	pop	r29
 67c:	cf 91       	pop	r28
 67e:	08 95       	ret

00000680 <USARTInit>:
 int stdio_putchar(char c, FILE * stream);
 int stdio_getchar(FILE *stream);
static FILE UsartStdio = FDEV_SETUP_STREAM(stdio_putchar, stdio_getchar,_FDEV_SETUP_WRITE);

void USARTInit(void)
{
 680:	cf 93       	push	r28
 682:	df 93       	push	r29
 684:	cd b7       	in	r28, 0x3d	; 61
 686:	de b7       	in	r29, 0x3e	; 62
	USART_PORT.DIRSET=0b00001000;	
 688:	80 e4       	ldi	r24, 0x40	; 64
 68a:	96 e0       	ldi	r25, 0x06	; 6
 68c:	28 e0       	ldi	r18, 0x08	; 8
 68e:	fc 01       	movw	r30, r24
 690:	21 83       	std	Z+1, r18	; 0x01
	USART_PORT.DIRCLR=0b00000100;
 692:	80 e4       	ldi	r24, 0x40	; 64
 694:	96 e0       	ldi	r25, 0x06	; 6
 696:	24 e0       	ldi	r18, 0x04	; 4
 698:	fc 01       	movw	r30, r24
 69a:	22 83       	std	Z+2, r18	; 0x02
	
	USART.CTRLA=0b00000000;
 69c:	80 ea       	ldi	r24, 0xA0	; 160
 69e:	98 e0       	ldi	r25, 0x08	; 8
 6a0:	fc 01       	movw	r30, r24
 6a2:	13 82       	std	Z+3, r1	; 0x03
	USART.CTRLB=0b00011000;
 6a4:	80 ea       	ldi	r24, 0xA0	; 160
 6a6:	98 e0       	ldi	r25, 0x08	; 8
 6a8:	28 e1       	ldi	r18, 0x18	; 24
 6aa:	fc 01       	movw	r30, r24
 6ac:	24 83       	std	Z+4, r18	; 0x04
	USART.CTRLC=0b00000011;
 6ae:	80 ea       	ldi	r24, 0xA0	; 160
 6b0:	98 e0       	ldi	r25, 0x08	; 8
 6b2:	23 e0       	ldi	r18, 0x03	; 3
 6b4:	fc 01       	movw	r30, r24
 6b6:	25 83       	std	Z+5, r18	; 0x05
	
	USART.BAUDCTRLA=0xD7; //BSEL=3301, BSCALE=-5 9600 baud
 6b8:	80 ea       	ldi	r24, 0xA0	; 160
 6ba:	98 e0       	ldi	r25, 0x08	; 8
 6bc:	27 ed       	ldi	r18, 0xD7	; 215
 6be:	fc 01       	movw	r30, r24
 6c0:	26 83       	std	Z+6, r18	; 0x06
	USART.BAUDCTRLB=0x93; 
 6c2:	80 ea       	ldi	r24, 0xA0	; 160
 6c4:	98 e0       	ldi	r25, 0x08	; 8
 6c6:	23 e9       	ldi	r18, 0x93	; 147
 6c8:	fc 01       	movw	r30, r24
 6ca:	27 83       	std	Z+7, r18	; 0x07
	
	stdout=&UsartStdio;
 6cc:	80 e0       	ldi	r24, 0x00	; 0
 6ce:	90 e2       	ldi	r25, 0x20	; 32
 6d0:	80 93 13 20 	sts	0x2013, r24	; 0x802013 <__iob+0x2>
 6d4:	90 93 14 20 	sts	0x2014, r25	; 0x802014 <__iob+0x3>
	stdin=&UsartStdio;
 6d8:	80 e0       	ldi	r24, 0x00	; 0
 6da:	90 e2       	ldi	r25, 0x20	; 32
 6dc:	80 93 11 20 	sts	0x2011, r24	; 0x802011 <__iob>
 6e0:	90 93 12 20 	sts	0x2012, r25	; 0x802012 <__iob+0x1>
}
 6e4:	00 00       	nop
 6e6:	df 91       	pop	r29
 6e8:	cf 91       	pop	r28
 6ea:	08 95       	ret

000006ec <stdio_putchar>:


int stdio_putchar(char c, FILE * stream)
{
 6ec:	cf 93       	push	r28
 6ee:	df 93       	push	r29
 6f0:	00 d0       	rcall	.+0      	; 0x6f2 <stdio_putchar+0x6>
 6f2:	1f 92       	push	r1
 6f4:	cd b7       	in	r28, 0x3d	; 61
 6f6:	de b7       	in	r29, 0x3e	; 62
 6f8:	89 83       	std	Y+1, r24	; 0x01
 6fa:	6a 83       	std	Y+2, r22	; 0x02
 6fc:	7b 83       	std	Y+3, r23	; 0x03
	USART.DATA = c;
 6fe:	80 ea       	ldi	r24, 0xA0	; 160
 700:	98 e0       	ldi	r25, 0x08	; 8
 702:	29 81       	ldd	r18, Y+1	; 0x01
 704:	fc 01       	movw	r30, r24
 706:	20 83       	st	Z, r18
	while (!(USART.STATUS & 0b01000000));
 708:	00 00       	nop
 70a:	80 ea       	ldi	r24, 0xA0	; 160
 70c:	98 e0       	ldi	r25, 0x08	; 8
 70e:	fc 01       	movw	r30, r24
 710:	81 81       	ldd	r24, Z+1	; 0x01
 712:	88 2f       	mov	r24, r24
 714:	90 e0       	ldi	r25, 0x00	; 0
 716:	80 74       	andi	r24, 0x40	; 64
 718:	99 27       	eor	r25, r25
 71a:	89 2b       	or	r24, r25
 71c:	b1 f3       	breq	.-20     	; 0x70a <stdio_putchar+0x1e>
	USART.STATUS=0b01000000;
 71e:	80 ea       	ldi	r24, 0xA0	; 160
 720:	98 e0       	ldi	r25, 0x08	; 8
 722:	20 e4       	ldi	r18, 0x40	; 64
 724:	fc 01       	movw	r30, r24
 726:	21 83       	std	Z+1, r18	; 0x01
	return 0;
 728:	80 e0       	ldi	r24, 0x00	; 0
 72a:	90 e0       	ldi	r25, 0x00	; 0
}
 72c:	23 96       	adiw	r28, 0x03	; 3
 72e:	cd bf       	out	0x3d, r28	; 61
 730:	de bf       	out	0x3e, r29	; 62
 732:	df 91       	pop	r29
 734:	cf 91       	pop	r28
 736:	08 95       	ret

00000738 <stdio_getchar>:
	
int stdio_getchar(FILE *stream)
{
 738:	cf 93       	push	r28
 73a:	df 93       	push	r29
 73c:	00 d0       	rcall	.+0      	; 0x73e <stdio_getchar+0x6>
 73e:	cd b7       	in	r28, 0x3d	; 61
 740:	de b7       	in	r29, 0x3e	; 62
 742:	89 83       	std	Y+1, r24	; 0x01
 744:	9a 83       	std	Y+2, r25	; 0x02
	while (!(USART.STATUS & 0b10000000));
 746:	00 00       	nop
 748:	80 ea       	ldi	r24, 0xA0	; 160
 74a:	98 e0       	ldi	r25, 0x08	; 8
 74c:	fc 01       	movw	r30, r24
 74e:	81 81       	ldd	r24, Z+1	; 0x01
 750:	88 23       	and	r24, r24
 752:	d4 f7       	brge	.-12     	; 0x748 <stdio_getchar+0x10>
	return USART.DATA;
 754:	80 ea       	ldi	r24, 0xA0	; 160
 756:	98 e0       	ldi	r25, 0x08	; 8
 758:	fc 01       	movw	r30, r24
 75a:	80 81       	ld	r24, Z
 75c:	88 2f       	mov	r24, r24
 75e:	90 e0       	ldi	r25, 0x00	; 0
}
 760:	0f 90       	pop	r0
 762:	0f 90       	pop	r0
 764:	df 91       	pop	r29
 766:	cf 91       	pop	r28
 768:	08 95       	ret

0000076a <__cmpsf2>:
 76a:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <__fp_cmp>
 76e:	08 f4       	brcc	.+2      	; 0x772 <__cmpsf2+0x8>
 770:	81 e0       	ldi	r24, 0x01	; 1
 772:	08 95       	ret

00000774 <__fixunssfsi>:
 774:	0e 94 15 04 	call	0x82a	; 0x82a <__fp_splitA>
 778:	88 f0       	brcs	.+34     	; 0x79c <__fixunssfsi+0x28>
 77a:	9f 57       	subi	r25, 0x7F	; 127
 77c:	98 f0       	brcs	.+38     	; 0x7a4 <__fixunssfsi+0x30>
 77e:	b9 2f       	mov	r27, r25
 780:	99 27       	eor	r25, r25
 782:	b7 51       	subi	r27, 0x17	; 23
 784:	b0 f0       	brcs	.+44     	; 0x7b2 <__fixunssfsi+0x3e>
 786:	e1 f0       	breq	.+56     	; 0x7c0 <__fixunssfsi+0x4c>
 788:	66 0f       	add	r22, r22
 78a:	77 1f       	adc	r23, r23
 78c:	88 1f       	adc	r24, r24
 78e:	99 1f       	adc	r25, r25
 790:	1a f0       	brmi	.+6      	; 0x798 <__fixunssfsi+0x24>
 792:	ba 95       	dec	r27
 794:	c9 f7       	brne	.-14     	; 0x788 <__fixunssfsi+0x14>
 796:	14 c0       	rjmp	.+40     	; 0x7c0 <__fixunssfsi+0x4c>
 798:	b1 30       	cpi	r27, 0x01	; 1
 79a:	91 f0       	breq	.+36     	; 0x7c0 <__fixunssfsi+0x4c>
 79c:	0e 94 2f 04 	call	0x85e	; 0x85e <__fp_zero>
 7a0:	b1 e0       	ldi	r27, 0x01	; 1
 7a2:	08 95       	ret
 7a4:	0c 94 2f 04 	jmp	0x85e	; 0x85e <__fp_zero>
 7a8:	67 2f       	mov	r22, r23
 7aa:	78 2f       	mov	r23, r24
 7ac:	88 27       	eor	r24, r24
 7ae:	b8 5f       	subi	r27, 0xF8	; 248
 7b0:	39 f0       	breq	.+14     	; 0x7c0 <__fixunssfsi+0x4c>
 7b2:	b9 3f       	cpi	r27, 0xF9	; 249
 7b4:	cc f3       	brlt	.-14     	; 0x7a8 <__fixunssfsi+0x34>
 7b6:	86 95       	lsr	r24
 7b8:	77 95       	ror	r23
 7ba:	67 95       	ror	r22
 7bc:	b3 95       	inc	r27
 7be:	d9 f7       	brne	.-10     	; 0x7b6 <__fixunssfsi+0x42>
 7c0:	3e f4       	brtc	.+14     	; 0x7d0 <__fixunssfsi+0x5c>
 7c2:	90 95       	com	r25
 7c4:	80 95       	com	r24
 7c6:	70 95       	com	r23
 7c8:	61 95       	neg	r22
 7ca:	7f 4f       	sbci	r23, 0xFF	; 255
 7cc:	8f 4f       	sbci	r24, 0xFF	; 255
 7ce:	9f 4f       	sbci	r25, 0xFF	; 255
 7d0:	08 95       	ret

000007d2 <__fp_cmp>:
 7d2:	99 0f       	add	r25, r25
 7d4:	00 08       	sbc	r0, r0
 7d6:	55 0f       	add	r21, r21
 7d8:	aa 0b       	sbc	r26, r26
 7da:	e0 e8       	ldi	r30, 0x80	; 128
 7dc:	fe ef       	ldi	r31, 0xFE	; 254
 7de:	16 16       	cp	r1, r22
 7e0:	17 06       	cpc	r1, r23
 7e2:	e8 07       	cpc	r30, r24
 7e4:	f9 07       	cpc	r31, r25
 7e6:	c0 f0       	brcs	.+48     	; 0x818 <__fp_cmp+0x46>
 7e8:	12 16       	cp	r1, r18
 7ea:	13 06       	cpc	r1, r19
 7ec:	e4 07       	cpc	r30, r20
 7ee:	f5 07       	cpc	r31, r21
 7f0:	98 f0       	brcs	.+38     	; 0x818 <__fp_cmp+0x46>
 7f2:	62 1b       	sub	r22, r18
 7f4:	73 0b       	sbc	r23, r19
 7f6:	84 0b       	sbc	r24, r20
 7f8:	95 0b       	sbc	r25, r21
 7fa:	39 f4       	brne	.+14     	; 0x80a <__fp_cmp+0x38>
 7fc:	0a 26       	eor	r0, r26
 7fe:	61 f0       	breq	.+24     	; 0x818 <__fp_cmp+0x46>
 800:	23 2b       	or	r18, r19
 802:	24 2b       	or	r18, r20
 804:	25 2b       	or	r18, r21
 806:	21 f4       	brne	.+8      	; 0x810 <__fp_cmp+0x3e>
 808:	08 95       	ret
 80a:	0a 26       	eor	r0, r26
 80c:	09 f4       	brne	.+2      	; 0x810 <__fp_cmp+0x3e>
 80e:	a1 40       	sbci	r26, 0x01	; 1
 810:	a6 95       	lsr	r26
 812:	8f ef       	ldi	r24, 0xFF	; 255
 814:	81 1d       	adc	r24, r1
 816:	81 1d       	adc	r24, r1
 818:	08 95       	ret

0000081a <__fp_split3>:
 81a:	57 fd       	sbrc	r21, 7
 81c:	90 58       	subi	r25, 0x80	; 128
 81e:	44 0f       	add	r20, r20
 820:	55 1f       	adc	r21, r21
 822:	59 f0       	breq	.+22     	; 0x83a <__fp_splitA+0x10>
 824:	5f 3f       	cpi	r21, 0xFF	; 255
 826:	71 f0       	breq	.+28     	; 0x844 <__fp_splitA+0x1a>
 828:	47 95       	ror	r20

0000082a <__fp_splitA>:
 82a:	88 0f       	add	r24, r24
 82c:	97 fb       	bst	r25, 7
 82e:	99 1f       	adc	r25, r25
 830:	61 f0       	breq	.+24     	; 0x84a <__fp_splitA+0x20>
 832:	9f 3f       	cpi	r25, 0xFF	; 255
 834:	79 f0       	breq	.+30     	; 0x854 <__fp_splitA+0x2a>
 836:	87 95       	ror	r24
 838:	08 95       	ret
 83a:	12 16       	cp	r1, r18
 83c:	13 06       	cpc	r1, r19
 83e:	14 06       	cpc	r1, r20
 840:	55 1f       	adc	r21, r21
 842:	f2 cf       	rjmp	.-28     	; 0x828 <__fp_split3+0xe>
 844:	46 95       	lsr	r20
 846:	f1 df       	rcall	.-30     	; 0x82a <__fp_splitA>
 848:	08 c0       	rjmp	.+16     	; 0x85a <__fp_splitA+0x30>
 84a:	16 16       	cp	r1, r22
 84c:	17 06       	cpc	r1, r23
 84e:	18 06       	cpc	r1, r24
 850:	99 1f       	adc	r25, r25
 852:	f1 cf       	rjmp	.-30     	; 0x836 <__fp_splitA+0xc>
 854:	86 95       	lsr	r24
 856:	71 05       	cpc	r23, r1
 858:	61 05       	cpc	r22, r1
 85a:	08 94       	sec
 85c:	08 95       	ret

0000085e <__fp_zero>:
 85e:	e8 94       	clt

00000860 <__fp_szero>:
 860:	bb 27       	eor	r27, r27
 862:	66 27       	eor	r22, r22
 864:	77 27       	eor	r23, r23
 866:	cb 01       	movw	r24, r22
 868:	97 f9       	bld	r25, 7
 86a:	08 95       	ret

0000086c <__gesf2>:
 86c:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <__fp_cmp>
 870:	08 f4       	brcc	.+2      	; 0x874 <__gesf2+0x8>
 872:	8f ef       	ldi	r24, 0xFF	; 255
 874:	08 95       	ret

00000876 <__mulsf3>:
 876:	0e 94 4e 04 	call	0x89c	; 0x89c <__mulsf3x>
 87a:	0c 94 bf 04 	jmp	0x97e	; 0x97e <__fp_round>
 87e:	0e 94 b1 04 	call	0x962	; 0x962 <__fp_pscA>
 882:	38 f0       	brcs	.+14     	; 0x892 <__mulsf3+0x1c>
 884:	0e 94 b8 04 	call	0x970	; 0x970 <__fp_pscB>
 888:	20 f0       	brcs	.+8      	; 0x892 <__mulsf3+0x1c>
 88a:	95 23       	and	r25, r21
 88c:	11 f0       	breq	.+4      	; 0x892 <__mulsf3+0x1c>
 88e:	0c 94 a8 04 	jmp	0x950	; 0x950 <__fp_inf>
 892:	0c 94 ae 04 	jmp	0x95c	; 0x95c <__fp_nan>
 896:	11 24       	eor	r1, r1
 898:	0c 94 30 04 	jmp	0x860	; 0x860 <__fp_szero>

0000089c <__mulsf3x>:
 89c:	0e 94 0d 04 	call	0x81a	; 0x81a <__fp_split3>
 8a0:	70 f3       	brcs	.-36     	; 0x87e <__mulsf3+0x8>

000008a2 <__mulsf3_pse>:
 8a2:	95 9f       	mul	r25, r21
 8a4:	c1 f3       	breq	.-16     	; 0x896 <__mulsf3+0x20>
 8a6:	95 0f       	add	r25, r21
 8a8:	50 e0       	ldi	r21, 0x00	; 0
 8aa:	55 1f       	adc	r21, r21
 8ac:	62 9f       	mul	r22, r18
 8ae:	f0 01       	movw	r30, r0
 8b0:	72 9f       	mul	r23, r18
 8b2:	bb 27       	eor	r27, r27
 8b4:	f0 0d       	add	r31, r0
 8b6:	b1 1d       	adc	r27, r1
 8b8:	63 9f       	mul	r22, r19
 8ba:	aa 27       	eor	r26, r26
 8bc:	f0 0d       	add	r31, r0
 8be:	b1 1d       	adc	r27, r1
 8c0:	aa 1f       	adc	r26, r26
 8c2:	64 9f       	mul	r22, r20
 8c4:	66 27       	eor	r22, r22
 8c6:	b0 0d       	add	r27, r0
 8c8:	a1 1d       	adc	r26, r1
 8ca:	66 1f       	adc	r22, r22
 8cc:	82 9f       	mul	r24, r18
 8ce:	22 27       	eor	r18, r18
 8d0:	b0 0d       	add	r27, r0
 8d2:	a1 1d       	adc	r26, r1
 8d4:	62 1f       	adc	r22, r18
 8d6:	73 9f       	mul	r23, r19
 8d8:	b0 0d       	add	r27, r0
 8da:	a1 1d       	adc	r26, r1
 8dc:	62 1f       	adc	r22, r18
 8de:	83 9f       	mul	r24, r19
 8e0:	a0 0d       	add	r26, r0
 8e2:	61 1d       	adc	r22, r1
 8e4:	22 1f       	adc	r18, r18
 8e6:	74 9f       	mul	r23, r20
 8e8:	33 27       	eor	r19, r19
 8ea:	a0 0d       	add	r26, r0
 8ec:	61 1d       	adc	r22, r1
 8ee:	23 1f       	adc	r18, r19
 8f0:	84 9f       	mul	r24, r20
 8f2:	60 0d       	add	r22, r0
 8f4:	21 1d       	adc	r18, r1
 8f6:	82 2f       	mov	r24, r18
 8f8:	76 2f       	mov	r23, r22
 8fa:	6a 2f       	mov	r22, r26
 8fc:	11 24       	eor	r1, r1
 8fe:	9f 57       	subi	r25, 0x7F	; 127
 900:	50 40       	sbci	r21, 0x00	; 0
 902:	9a f0       	brmi	.+38     	; 0x92a <__mulsf3_pse+0x88>
 904:	f1 f0       	breq	.+60     	; 0x942 <__mulsf3_pse+0xa0>
 906:	88 23       	and	r24, r24
 908:	4a f0       	brmi	.+18     	; 0x91c <__mulsf3_pse+0x7a>
 90a:	ee 0f       	add	r30, r30
 90c:	ff 1f       	adc	r31, r31
 90e:	bb 1f       	adc	r27, r27
 910:	66 1f       	adc	r22, r22
 912:	77 1f       	adc	r23, r23
 914:	88 1f       	adc	r24, r24
 916:	91 50       	subi	r25, 0x01	; 1
 918:	50 40       	sbci	r21, 0x00	; 0
 91a:	a9 f7       	brne	.-22     	; 0x906 <__mulsf3_pse+0x64>
 91c:	9e 3f       	cpi	r25, 0xFE	; 254
 91e:	51 05       	cpc	r21, r1
 920:	80 f0       	brcs	.+32     	; 0x942 <__mulsf3_pse+0xa0>
 922:	0c 94 a8 04 	jmp	0x950	; 0x950 <__fp_inf>
 926:	0c 94 30 04 	jmp	0x860	; 0x860 <__fp_szero>
 92a:	5f 3f       	cpi	r21, 0xFF	; 255
 92c:	e4 f3       	brlt	.-8      	; 0x926 <__mulsf3_pse+0x84>
 92e:	98 3e       	cpi	r25, 0xE8	; 232
 930:	d4 f3       	brlt	.-12     	; 0x926 <__mulsf3_pse+0x84>
 932:	86 95       	lsr	r24
 934:	77 95       	ror	r23
 936:	67 95       	ror	r22
 938:	b7 95       	ror	r27
 93a:	f7 95       	ror	r31
 93c:	e7 95       	ror	r30
 93e:	9f 5f       	subi	r25, 0xFF	; 255
 940:	c1 f7       	brne	.-16     	; 0x932 <__mulsf3_pse+0x90>
 942:	fe 2b       	or	r31, r30
 944:	88 0f       	add	r24, r24
 946:	91 1d       	adc	r25, r1
 948:	96 95       	lsr	r25
 94a:	87 95       	ror	r24
 94c:	97 f9       	bld	r25, 7
 94e:	08 95       	ret

00000950 <__fp_inf>:
 950:	97 f9       	bld	r25, 7
 952:	9f 67       	ori	r25, 0x7F	; 127
 954:	80 e8       	ldi	r24, 0x80	; 128
 956:	70 e0       	ldi	r23, 0x00	; 0
 958:	60 e0       	ldi	r22, 0x00	; 0
 95a:	08 95       	ret

0000095c <__fp_nan>:
 95c:	9f ef       	ldi	r25, 0xFF	; 255
 95e:	80 ec       	ldi	r24, 0xC0	; 192
 960:	08 95       	ret

00000962 <__fp_pscA>:
 962:	00 24       	eor	r0, r0
 964:	0a 94       	dec	r0
 966:	16 16       	cp	r1, r22
 968:	17 06       	cpc	r1, r23
 96a:	18 06       	cpc	r1, r24
 96c:	09 06       	cpc	r0, r25
 96e:	08 95       	ret

00000970 <__fp_pscB>:
 970:	00 24       	eor	r0, r0
 972:	0a 94       	dec	r0
 974:	12 16       	cp	r1, r18
 976:	13 06       	cpc	r1, r19
 978:	14 06       	cpc	r1, r20
 97a:	05 06       	cpc	r0, r21
 97c:	08 95       	ret

0000097e <__fp_round>:
 97e:	09 2e       	mov	r0, r25
 980:	03 94       	inc	r0
 982:	00 0c       	add	r0, r0
 984:	11 f4       	brne	.+4      	; 0x98a <__fp_round+0xc>
 986:	88 23       	and	r24, r24
 988:	52 f0       	brmi	.+20     	; 0x99e <__fp_round+0x20>
 98a:	bb 0f       	add	r27, r27
 98c:	40 f4       	brcc	.+16     	; 0x99e <__fp_round+0x20>
 98e:	bf 2b       	or	r27, r31
 990:	11 f4       	brne	.+4      	; 0x996 <__fp_round+0x18>
 992:	60 ff       	sbrs	r22, 0
 994:	04 c0       	rjmp	.+8      	; 0x99e <__fp_round+0x20>
 996:	6f 5f       	subi	r22, 0xFF	; 255
 998:	7f 4f       	sbci	r23, 0xFF	; 255
 99a:	8f 4f       	sbci	r24, 0xFF	; 255
 99c:	9f 4f       	sbci	r25, 0xFF	; 255
 99e:	08 95       	ret

000009a0 <_exit>:
 9a0:	f8 94       	cli

000009a2 <__stop_program>:
 9a2:	ff cf       	rjmp	.-2      	; 0x9a2 <__stop_program>
