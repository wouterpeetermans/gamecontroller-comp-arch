
gamecontroller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000107e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00802000  0000107e  00001112  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001a  0080201c  0080201c  0000112e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000112e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000118c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b0  00000000  00000000  000011cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001d45  00000000  00000000  0000137c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000887  00000000  00000000  000030c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001a82  00000000  00000000  00003948  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000494  00000000  00000000  000053cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00014ab6  00000000  00000000  00005860  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000081e  00000000  00000000  0001a316  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000120  00000000  00000000  0001ab34  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00005fa6  00000000  00000000  0001ac54  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__ctors_end>
       4:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
       8:	0c 94 b8 01 	jmp	0x370	; 0x370 <__vector_2>
       c:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__vector_3>
      10:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      14:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      18:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      1c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      20:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      24:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      28:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      2c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      30:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      34:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      38:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      3c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      40:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      44:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      48:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      4c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      50:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      54:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      58:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      5c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      60:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      64:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      68:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      6c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      70:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      74:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      78:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      7c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      80:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      84:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      88:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      8c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      90:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      94:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      98:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      9c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      a0:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      a4:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      a8:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      ac:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      b0:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      b4:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      b8:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      bc:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      c0:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      c4:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      c8:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      cc:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      d0:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      d4:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      d8:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      dc:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      e0:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      e4:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      e8:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      ec:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      f0:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      f4:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      f8:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      fc:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     100:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     104:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     108:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     10c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     110:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     114:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     118:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     11c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     120:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     124:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     128:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     12c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     130:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     134:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     138:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     13c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     140:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     144:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     148:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     14c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     150:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     154:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     158:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     15c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     160:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     164:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     168:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
     16c:	73 02       	muls	r23, r19
     16e:	5b 02       	muls	r21, r27
     170:	61 02       	muls	r22, r17
     172:	67 02       	muls	r22, r23
     174:	61 02       	muls	r22, r17
     176:	73 02       	muls	r23, r19
     178:	6d 02       	muls	r22, r29
     17a:	5b 02       	muls	r21, r27
     17c:	5b 02       	muls	r21, r27
     17e:	6d 02       	muls	r22, r29
     180:	73 02       	muls	r23, r19
     182:	61 02       	muls	r22, r17
     184:	67 02       	muls	r22, r23
     186:	61 02       	muls	r22, r17
     188:	5b 02       	muls	r21, r27
     18a:	73 02       	muls	r23, r19

0000018c <__ctors_end>:
     18c:	11 24       	eor	r1, r1
     18e:	1f be       	out	0x3f, r1	; 63
     190:	cf ef       	ldi	r28, 0xFF	; 255
     192:	cd bf       	out	0x3d, r28	; 61
     194:	d7 e2       	ldi	r29, 0x27	; 39
     196:	de bf       	out	0x3e, r29	; 62

00000198 <__do_copy_data>:
     198:	10 e2       	ldi	r17, 0x20	; 32
     19a:	a0 e0       	ldi	r26, 0x00	; 0
     19c:	b0 e2       	ldi	r27, 0x20	; 32
     19e:	ee e7       	ldi	r30, 0x7E	; 126
     1a0:	f0 e1       	ldi	r31, 0x10	; 16
     1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <__do_copy_data+0x10>
     1a4:	05 90       	lpm	r0, Z+
     1a6:	0d 92       	st	X+, r0
     1a8:	ac 31       	cpi	r26, 0x1C	; 28
     1aa:	b1 07       	cpc	r27, r17
     1ac:	d9 f7       	brne	.-10     	; 0x1a4 <__do_copy_data+0xc>

000001ae <__do_clear_bss>:
     1ae:	20 e2       	ldi	r18, 0x20	; 32
     1b0:	ac e1       	ldi	r26, 0x1C	; 28
     1b2:	b0 e2       	ldi	r27, 0x20	; 32
     1b4:	01 c0       	rjmp	.+2      	; 0x1b8 <.do_clear_bss_start>

000001b6 <.do_clear_bss_loop>:
     1b6:	1d 92       	st	X+, r1

000001b8 <.do_clear_bss_start>:
     1b8:	a6 33       	cpi	r26, 0x36	; 54
     1ba:	b2 07       	cpc	r27, r18
     1bc:	e1 f7       	brne	.-8      	; 0x1b6 <.do_clear_bss_loop>
     1be:	0e 94 80 02 	call	0x500	; 0x500 <main>
     1c2:	0c 94 3d 08 	jmp	0x107a	; 0x107a <_exit>

000001c6 <__bad_interrupt>:
     1c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001ca <AccInit>:
#include "acc.h"



void AccInit(void)
{
     1ca:	cf 93       	push	r28
     1cc:	df 93       	push	r29
     1ce:	cd b7       	in	r28, 0x3d	; 61
     1d0:	de b7       	in	r29, 0x3e	; 62

	
}
     1d2:	00 00       	nop
     1d4:	df 91       	pop	r29
     1d6:	cf 91       	pop	r28
     1d8:	08 95       	ret

000001da <AnalogInit>:
#include <inttypes.h>



void AnalogInit(void)
{
     1da:	0f 93       	push	r16
     1dc:	1f 93       	push	r17
     1de:	cf 93       	push	r28
     1e0:	df 93       	push	r29
     1e2:	cd b7       	in	r28, 0x3d	; 61
     1e4:	de b7       	in	r29, 0x3e	; 62
//	PR.PRPB &= ~0x02; // Clear ADC bit in Power Reduction Port B Register
	
	// Calibration values are stored at production time
	// Load stored bytes into the calibration registers
	// First NVM read is junk and must be thrown away
 	ADCA.CALL = ReadCalibrationByte( offsetof(NVM_PROD_SIGNATURES_t, ADCBCAL0) );
     1e6:	00 e0       	ldi	r16, 0x00	; 0
     1e8:	12 e0       	ldi	r17, 0x02	; 2
     1ea:	84 e2       	ldi	r24, 0x24	; 36
     1ec:	0e 94 41 01 	call	0x282	; 0x282 <ReadCalibrationByte>
     1f0:	f8 01       	movw	r30, r16
     1f2:	84 87       	std	Z+12, r24	; 0x0c
 	ADCA.CALH = ReadCalibrationByte( offsetof(NVM_PROD_SIGNATURES_t, ADCBCAL1) );
     1f4:	00 e0       	ldi	r16, 0x00	; 0
     1f6:	12 e0       	ldi	r17, 0x02	; 2
     1f8:	85 e2       	ldi	r24, 0x25	; 37
     1fa:	0e 94 41 01 	call	0x282	; 0x282 <ReadCalibrationByte>
     1fe:	f8 01       	movw	r30, r16
     200:	85 87       	std	Z+13, r24	; 0x0d
 	ADCA.CALL = ReadCalibrationByte( offsetof(NVM_PROD_SIGNATURES_t, ADCBCAL0) );
     202:	00 e0       	ldi	r16, 0x00	; 0
     204:	12 e0       	ldi	r17, 0x02	; 2
     206:	84 e2       	ldi	r24, 0x24	; 36
     208:	0e 94 41 01 	call	0x282	; 0x282 <ReadCalibrationByte>
     20c:	f8 01       	movw	r30, r16
     20e:	84 87       	std	Z+12, r24	; 0x0c
 	ADCA.CALH = ReadCalibrationByte( offsetof(NVM_PROD_SIGNATURES_t, ADCBCAL1) );
     210:	00 e0       	ldi	r16, 0x00	; 0
     212:	12 e0       	ldi	r17, 0x02	; 2
     214:	85 e2       	ldi	r24, 0x25	; 37
     216:	0e 94 41 01 	call	0x282	; 0x282 <ReadCalibrationByte>
     21a:	f8 01       	movw	r30, r16
     21c:	85 87       	std	Z+13, r24	; 0x0d
	//     7        6       5        4        3        2       1       0
	// | START  |   -   |   -   |         GAIN[2:0]        | INPUTMODE[1:0] |
	//     0        0       0        0        0        0       0       0
	// Place ADC channel in single-ended mode
	// Gain set to 1
	ADCA.CH0.CTRL = ADC_CH_INPUTMODE0_bm; // 0x01
     21e:	80 e0       	ldi	r24, 0x00	; 0
     220:	92 e0       	ldi	r25, 0x02	; 2
     222:	21 e0       	ldi	r18, 0x01	; 1
     224:	fc 01       	movw	r30, r24
     226:	20 a3       	std	Z+32, r18	; 0x20
	//     7        6       5        4        3        2       1       0
	// |   -    |           MUXPOS[3:0]             |     MUXNEG[2:0]     |
	//     0        0       0        0        0        0       0       0
	// Connect potentiometer (PB1) to positive input
	// MUXNEG bits are ignored in single-ended mode
	ADCA.CH0.MUXCTRL = ADC_CH_MUXINT0_bm; // 0x08
     228:	80 e0       	ldi	r24, 0x00	; 0
     22a:	92 e0       	ldi	r25, 0x02	; 2
     22c:	28 e0       	ldi	r18, 0x08	; 8
     22e:	fc 01       	movw	r30, r24
     230:	21 a3       	std	Z+33, r18	; 0x21
	//     0        0       0         0         0         0       0        0
	// Apply no limit to ADC sample rate
	// Put ADC in signed mode
	// Disable Free-run mode (single conversion upon trigger)
	// Resolution set to 12-bit, right justified (11-bit effective in signed mode)
	ADCA.CTRLB = ADC_CONMODE_bm; // 0x10
     232:	80 e0       	ldi	r24, 0x00	; 0
     234:	92 e0       	ldi	r25, 0x02	; 2
     236:	20 e1       	ldi	r18, 0x10	; 16
     238:	fc 01       	movw	r30, r24
     23a:	21 83       	std	Z+1, r18	; 0x01
	// The ADC runs off of the CPU_per clock
	// In sys_clk_init() the internal 2MHz RC osc was used to source a 16 MHz PLL
	// The PLL is then divided using Prescalers A, B, and C setting CPU_per to 8 MHz
	// According to AVR1300, the ADC clock should run in the range 100 kHz ~ approx 1.4 MHz
	// Set ADC clock to 125kHz:  CPU_per/64    =>    8MHz/64 = 125kHz
	ADCA.PRESCALER = ADC_PRESCALER2_bm; // 0x04
     23c:	80 e0       	ldi	r24, 0x00	; 0
     23e:	92 e0       	ldi	r25, 0x02	; 2
     240:	24 e0       	ldi	r18, 0x04	; 4
     242:	fc 01       	movw	r30, r24
     244:	24 83       	std	Z+4, r18	; 0x04
	// |   -   |      REFSEL[2:0]      |   -   |   -   | BANDGAP | TEMPREF |
	//     0       0       0       0       0       0        0         0
	// Set Vref to Vcc/1.6.  This gives 3.3/1.6 = approx 2.06V
	// With effectively 11-bit resolution, this means each LSB
	// will represent approximately 1 mV.
	ADCA.REFCTRL = ADC_REFSEL0_bm; // 0x10
     246:	80 e0       	ldi	r24, 0x00	; 0
     248:	92 e0       	ldi	r25, 0x02	; 2
     24a:	20 e1       	ldi	r18, 0x10	; 16
     24c:	fc 01       	movw	r30, r24
     24e:	22 83       	std	Z+2, r18	; 0x02
	//ADCB.EVCTRL
	//     7       6       5       4       3       2       1       0
	// |   -   |   -   |   -   |   EVSEL[1:0]  |      EVACT[2:0]       |
	//     0       0       0       0       0       0       0       0
	// Not implementing Event System so ensure EVCTRL is reading zeros
	ADCA.EVCTRL = 0x00;
     250:	80 e0       	ldi	r24, 0x00	; 0
     252:	92 e0       	ldi	r25, 0x02	; 2
     254:	fc 01       	movw	r30, r24
     256:	13 82       	std	Z+3, r1	; 0x03
	//ADCB.INTFLAGS
	//     7       6       5       4       3       2       1       0
	// |   -   |   -   |   -   |   -   |   -   |   -   |   -   | CH0IF |
	//     0       0       0       0       0       0       0       0
	// Ensure the ADC complete flag is cleared (by writing a '1' to it)
	ADCA.INTFLAGS = ADC_CH0IF_bm; // 0x01
     258:	80 e0       	ldi	r24, 0x00	; 0
     25a:	92 e0       	ldi	r25, 0x02	; 2
     25c:	21 e0       	ldi	r18, 0x01	; 1
     25e:	fc 01       	movw	r30, r24
     260:	26 83       	std	Z+6, r18	; 0x06
	//ADCB.CH0.INTCTRL
	//     7       6       5       4        3       2       1       0
	// |   -   |   -   |   -   |   -   |  INTMODE[1:0]  |  INTLVL[1:0]  |
	//     0       0       0       0        0       0       0       0
	// Configure interrupt on conversion complete with high priority
	ADCA.CH0.INTCTRL = ADC_CH_INTLVL1_bm | ADC_CH_INTLVL0_bm; // 0x03
     262:	80 e0       	ldi	r24, 0x00	; 0
     264:	92 e0       	ldi	r25, 0x02	; 2
     266:	23 e0       	ldi	r18, 0x03	; 3
     268:	fc 01       	movw	r30, r24
     26a:	22 a3       	std	Z+34, r18	; 0x22
	//ADCB.CTRLA
	//     7       6       5       4       3         2        1        0
	// |   -   |   -   |   -   |   -   |   -   | CH0START | FLUSH | ENABLE |
	//     0       0       0       0       0         0        0        0
	// Enable ADC, module B
	ADCA.CTRLA = ADC_ENABLE_bm; // 0x01
     26c:	80 e0       	ldi	r24, 0x00	; 0
     26e:	92 e0       	ldi	r25, 0x02	; 2
     270:	21 e0       	ldi	r18, 0x01	; 1
     272:	fc 01       	movw	r30, r24
     274:	20 83       	st	Z, r18
	//////////////////////////////////////////////////////////////////////
}
     276:	00 00       	nop
     278:	df 91       	pop	r29
     27a:	cf 91       	pop	r28
     27c:	1f 91       	pop	r17
     27e:	0f 91       	pop	r16
     280:	08 95       	ret

00000282 <ReadCalibrationByte>:


uint8_t ReadCalibrationByte(uint8_t index) {
     282:	cf 93       	push	r28
     284:	df 93       	push	r29
     286:	cd b7       	in	r28, 0x3d	; 61
     288:	de b7       	in	r29, 0x3e	; 62
     28a:	25 97       	sbiw	r28, 0x05	; 5
     28c:	cd bf       	out	0x3d, r28	; 61
     28e:	de bf       	out	0x3e, r29	; 62
     290:	8d 83       	std	Y+5, r24	; 0x05
	
	uint8_t result;
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
     292:	8a ec       	ldi	r24, 0xCA	; 202
     294:	91 e0       	ldi	r25, 0x01	; 1
     296:	22 e0       	ldi	r18, 0x02	; 2
     298:	fc 01       	movw	r30, r24
     29a:	20 83       	st	Z, r18
	result = pgm_read_byte(index);
     29c:	8d 81       	ldd	r24, Y+5	; 0x05
     29e:	88 2f       	mov	r24, r24
     2a0:	90 e0       	ldi	r25, 0x00	; 0
     2a2:	89 83       	std	Y+1, r24	; 0x01
     2a4:	9a 83       	std	Y+2, r25	; 0x02
     2a6:	89 81       	ldd	r24, Y+1	; 0x01
     2a8:	9a 81       	ldd	r25, Y+2	; 0x02
     2aa:	fc 01       	movw	r30, r24
     2ac:	84 91       	lpm	r24, Z
     2ae:	8b 83       	std	Y+3, r24	; 0x03
     2b0:	8b 81       	ldd	r24, Y+3	; 0x03
     2b2:	8c 83       	std	Y+4, r24	; 0x04
	
	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
     2b4:	8a ec       	ldi	r24, 0xCA	; 202
     2b6:	91 e0       	ldi	r25, 0x01	; 1
     2b8:	fc 01       	movw	r30, r24
     2ba:	10 82       	st	Z, r1
	
	return result;
     2bc:	8c 81       	ldd	r24, Y+4	; 0x04
}
     2be:	25 96       	adiw	r28, 0x05	; 5
     2c0:	cd bf       	out	0x3d, r28	; 61
     2c2:	de bf       	out	0x3e, r29	; 62
     2c4:	df 91       	pop	r29
     2c6:	cf 91       	pop	r28
     2c8:	08 95       	ret

000002ca <ClockInit>:
#pragma GCC push_options
#pragma GCC optimize ("O2") //This function must be optimized to avoid too long time interval betwee CCP write and CLK.CTRL write (4 CLK CYC max)

void ClockInit(void)
{
	OSC.XOSCCTRL=0b11001011; //Clock<=16MHz	
     2ca:	8b ec       	ldi	r24, 0xCB	; 203
     2cc:	80 93 52 00 	sts	0x0052, r24	; 0x800052 <__TEXT_REGION_LENGTH__+0x700052>
	OSC.CTRL=0b01000; //Enable oscillator	
     2d0:	88 e0       	ldi	r24, 0x08	; 8
     2d2:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
	while (!(OSC.STATUS&0b1000)); //Wait until XTAL osc is ready
     2d6:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
     2da:	83 ff       	sbrs	r24, 3
     2dc:	fc cf       	rjmp	.-8      	; 0x2d6 <ClockInit+0xc>
	
	//Select XTAL osc as system CLK source
	CCP=0xd8;
     2de:	88 ed       	ldi	r24, 0xD8	; 216
     2e0:	84 bf       	out	0x34, r24	; 52
    CLK.CTRL=0b0011;
     2e2:	83 e0       	ldi	r24, 0x03	; 3
     2e4:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
     2e8:	08 95       	ret

000002ea <EncoderInit>:
volatile int encoderPos = 0;
volatile uint8_t prevpos;
volatile uint8_t currentPos;

void EncoderInit(void)
{
     2ea:	cf 93       	push	r28
     2ec:	df 93       	push	r29
     2ee:	cd b7       	in	r28, 0x3d	; 61
     2f0:	de b7       	in	r29, 0x3e	; 62
	PORTC.DIR = (PORTC.DIR & 0b11001111);
     2f2:	80 e4       	ldi	r24, 0x40	; 64
     2f4:	96 e0       	ldi	r25, 0x06	; 6
     2f6:	20 e4       	ldi	r18, 0x40	; 64
     2f8:	36 e0       	ldi	r19, 0x06	; 6
     2fa:	f9 01       	movw	r30, r18
     2fc:	20 81       	ld	r18, Z
     2fe:	2f 7c       	andi	r18, 0xCF	; 207
     300:	fc 01       	movw	r30, r24
     302:	20 83       	st	Z, r18
	PORTC.PIN4CTRL = 0b00011000;
     304:	80 e4       	ldi	r24, 0x40	; 64
     306:	96 e0       	ldi	r25, 0x06	; 6
     308:	28 e1       	ldi	r18, 0x18	; 24
     30a:	fc 01       	movw	r30, r24
     30c:	24 8b       	std	Z+20, r18	; 0x14
	PORTC.PIN5CTRL = 0b00011000;
     30e:	80 e4       	ldi	r24, 0x40	; 64
     310:	96 e0       	ldi	r25, 0x06	; 6
     312:	28 e1       	ldi	r18, 0x18	; 24
     314:	fc 01       	movw	r30, r24
     316:	25 8b       	std	Z+21, r18	; 0x15
	PORTC.INTCTRL = 0b00001111;
     318:	80 e4       	ldi	r24, 0x40	; 64
     31a:	96 e0       	ldi	r25, 0x06	; 6
     31c:	2f e0       	ldi	r18, 0x0F	; 15
     31e:	fc 01       	movw	r30, r24
     320:	21 87       	std	Z+9, r18	; 0x09
	PORTC.INT0MASK = 0b00010000;
     322:	80 e4       	ldi	r24, 0x40	; 64
     324:	96 e0       	ldi	r25, 0x06	; 6
     326:	20 e1       	ldi	r18, 0x10	; 16
     328:	fc 01       	movw	r30, r24
     32a:	22 87       	std	Z+10, r18	; 0x0a
	PORTC.INT1MASK = 0b00100000;
     32c:	80 e4       	ldi	r24, 0x40	; 64
     32e:	96 e0       	ldi	r25, 0x06	; 6
     330:	20 e2       	ldi	r18, 0x20	; 32
     332:	fc 01       	movw	r30, r24
     334:	23 87       	std	Z+11, r18	; 0x0b
	SREG = (SREG | 0b10000000);
     336:	8f e3       	ldi	r24, 0x3F	; 63
     338:	90 e0       	ldi	r25, 0x00	; 0
     33a:	2f e3       	ldi	r18, 0x3F	; 63
     33c:	30 e0       	ldi	r19, 0x00	; 0
     33e:	f9 01       	movw	r30, r18
     340:	20 81       	ld	r18, Z
     342:	20 68       	ori	r18, 0x80	; 128
     344:	fc 01       	movw	r30, r24
     346:	20 83       	st	Z, r18
	PMIC.CTRL = 0b00000100;
     348:	80 ea       	ldi	r24, 0xA0	; 160
     34a:	90 e0       	ldi	r25, 0x00	; 0
     34c:	24 e0       	ldi	r18, 0x04	; 4
     34e:	fc 01       	movw	r30, r24
     350:	22 83       	std	Z+2, r18	; 0x02
	
	
	
}
     352:	00 00       	nop
     354:	df 91       	pop	r29
     356:	cf 91       	pop	r28
     358:	08 95       	ret

0000035a <EncoderGetPos>:
int EncoderGetPos(void)
{
     35a:	cf 93       	push	r28
     35c:	df 93       	push	r29
     35e:	cd b7       	in	r28, 0x3d	; 61
     360:	de b7       	in	r29, 0x3e	; 62
	return encoderPos;
     362:	80 91 1c 20 	lds	r24, 0x201C	; 0x80201c <__data_end>
     366:	90 91 1d 20 	lds	r25, 0x201D	; 0x80201d <__data_end+0x1>
}
     36a:	df 91       	pop	r29
     36c:	cf 91       	pop	r28
     36e:	08 95       	ret

00000370 <__vector_2>:

ISR(PORTC_INT0_vect){
     370:	1f 92       	push	r1
     372:	0f 92       	push	r0
     374:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     378:	0f 92       	push	r0
     37a:	11 24       	eor	r1, r1
     37c:	2f 93       	push	r18
     37e:	3f 93       	push	r19
     380:	4f 93       	push	r20
     382:	5f 93       	push	r21
     384:	6f 93       	push	r22
     386:	7f 93       	push	r23
     388:	8f 93       	push	r24
     38a:	9f 93       	push	r25
     38c:	af 93       	push	r26
     38e:	bf 93       	push	r27
     390:	ef 93       	push	r30
     392:	ff 93       	push	r31
     394:	cf 93       	push	r28
     396:	df 93       	push	r29
     398:	cd b7       	in	r28, 0x3d	; 61
     39a:	de b7       	in	r29, 0x3e	; 62
	encoderPos += readEncoder();
     39c:	0e 94 28 02 	call	0x450	; 0x450 <readEncoder>
     3a0:	9c 01       	movw	r18, r24
     3a2:	80 91 1c 20 	lds	r24, 0x201C	; 0x80201c <__data_end>
     3a6:	90 91 1d 20 	lds	r25, 0x201D	; 0x80201d <__data_end+0x1>
     3aa:	82 0f       	add	r24, r18
     3ac:	93 1f       	adc	r25, r19
     3ae:	80 93 1c 20 	sts	0x201C, r24	; 0x80201c <__data_end>
     3b2:	90 93 1d 20 	sts	0x201D, r25	; 0x80201d <__data_end+0x1>
}
     3b6:	00 00       	nop
     3b8:	df 91       	pop	r29
     3ba:	cf 91       	pop	r28
     3bc:	ff 91       	pop	r31
     3be:	ef 91       	pop	r30
     3c0:	bf 91       	pop	r27
     3c2:	af 91       	pop	r26
     3c4:	9f 91       	pop	r25
     3c6:	8f 91       	pop	r24
     3c8:	7f 91       	pop	r23
     3ca:	6f 91       	pop	r22
     3cc:	5f 91       	pop	r21
     3ce:	4f 91       	pop	r20
     3d0:	3f 91       	pop	r19
     3d2:	2f 91       	pop	r18
     3d4:	0f 90       	pop	r0
     3d6:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     3da:	0f 90       	pop	r0
     3dc:	1f 90       	pop	r1
     3de:	18 95       	reti

000003e0 <__vector_3>:

ISR(PORTC_INT1_vect){
     3e0:	1f 92       	push	r1
     3e2:	0f 92       	push	r0
     3e4:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     3e8:	0f 92       	push	r0
     3ea:	11 24       	eor	r1, r1
     3ec:	2f 93       	push	r18
     3ee:	3f 93       	push	r19
     3f0:	4f 93       	push	r20
     3f2:	5f 93       	push	r21
     3f4:	6f 93       	push	r22
     3f6:	7f 93       	push	r23
     3f8:	8f 93       	push	r24
     3fa:	9f 93       	push	r25
     3fc:	af 93       	push	r26
     3fe:	bf 93       	push	r27
     400:	ef 93       	push	r30
     402:	ff 93       	push	r31
     404:	cf 93       	push	r28
     406:	df 93       	push	r29
     408:	cd b7       	in	r28, 0x3d	; 61
     40a:	de b7       	in	r29, 0x3e	; 62
	encoderPos += readEncoder();
     40c:	0e 94 28 02 	call	0x450	; 0x450 <readEncoder>
     410:	9c 01       	movw	r18, r24
     412:	80 91 1c 20 	lds	r24, 0x201C	; 0x80201c <__data_end>
     416:	90 91 1d 20 	lds	r25, 0x201D	; 0x80201d <__data_end+0x1>
     41a:	82 0f       	add	r24, r18
     41c:	93 1f       	adc	r25, r19
     41e:	80 93 1c 20 	sts	0x201C, r24	; 0x80201c <__data_end>
     422:	90 93 1d 20 	sts	0x201D, r25	; 0x80201d <__data_end+0x1>
}
     426:	00 00       	nop
     428:	df 91       	pop	r29
     42a:	cf 91       	pop	r28
     42c:	ff 91       	pop	r31
     42e:	ef 91       	pop	r30
     430:	bf 91       	pop	r27
     432:	af 91       	pop	r26
     434:	9f 91       	pop	r25
     436:	8f 91       	pop	r24
     438:	7f 91       	pop	r23
     43a:	6f 91       	pop	r22
     43c:	5f 91       	pop	r21
     43e:	4f 91       	pop	r20
     440:	3f 91       	pop	r19
     442:	2f 91       	pop	r18
     444:	0f 90       	pop	r0
     446:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     44a:	0f 90       	pop	r0
     44c:	1f 90       	pop	r1
     44e:	18 95       	reti

00000450 <readEncoder>:
		}
		state = (s >> 2);
	}
*/

int readEncoder(){
     450:	cf 93       	push	r28
     452:	df 93       	push	r29
     454:	00 d0       	rcall	.+0      	; 0x456 <readEncoder+0x6>
     456:	1f 92       	push	r1
     458:	cd b7       	in	r28, 0x3d	; 61
     45a:	de b7       	in	r29, 0x3e	; 62
	currentPos = (PORTC.IN >> 4) & 3;
     45c:	80 e4       	ldi	r24, 0x40	; 64
     45e:	96 e0       	ldi	r25, 0x06	; 6
     460:	fc 01       	movw	r30, r24
     462:	80 85       	ldd	r24, Z+8	; 0x08
     464:	82 95       	swap	r24
     466:	8f 70       	andi	r24, 0x0F	; 15
     468:	83 70       	andi	r24, 0x03	; 3
     46a:	80 93 1e 20 	sts	0x201E, r24	; 0x80201e <currentPos>
	uint8_t s = (currentPos << 2) | prevpos;
     46e:	80 91 1e 20 	lds	r24, 0x201E	; 0x80201e <currentPos>
     472:	88 2f       	mov	r24, r24
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	88 0f       	add	r24, r24
     478:	99 1f       	adc	r25, r25
     47a:	88 0f       	add	r24, r24
     47c:	99 1f       	adc	r25, r25
     47e:	98 2f       	mov	r25, r24
     480:	80 91 1f 20 	lds	r24, 0x201F	; 0x80201f <prevpos>
     484:	89 2b       	or	r24, r25
     486:	8b 83       	std	Y+3, r24	; 0x03
	int position = 0;
     488:	19 82       	std	Y+1, r1	; 0x01
     48a:	1a 82       	std	Y+2, r1	; 0x02
	switch (s) {
     48c:	8b 81       	ldd	r24, Y+3	; 0x03
     48e:	88 2f       	mov	r24, r24
     490:	90 e0       	ldi	r25, 0x00	; 0
     492:	09 2e       	mov	r0, r25
     494:	00 0c       	add	r0, r0
     496:	aa 0b       	sbc	r26, r26
     498:	bb 0b       	sbc	r27, r27
     49a:	40 e0       	ldi	r20, 0x00	; 0
     49c:	50 e0       	ldi	r21, 0x00	; 0
     49e:	2f e0       	ldi	r18, 0x0F	; 15
     4a0:	30 e0       	ldi	r19, 0x00	; 0
     4a2:	84 1b       	sub	r24, r20
     4a4:	95 0b       	sbc	r25, r21
     4a6:	28 17       	cp	r18, r24
     4a8:	39 07       	cpc	r19, r25
     4aa:	b8 f0       	brcs	.+46     	; 0x4da <readEncoder+0x8a>
     4ac:	8a 54       	subi	r24, 0x4A	; 74
     4ae:	9f 4f       	sbci	r25, 0xFF	; 255
     4b0:	fc 01       	movw	r30, r24
     4b2:	0c 94 23 05 	jmp	0xa46	; 0xa46 <__tablejump2__>
		case 0: case 5: case 10: case 15:
		break;
		case 1: case 7: case 8: case 14:
		position++; break;
     4b6:	89 81       	ldd	r24, Y+1	; 0x01
     4b8:	9a 81       	ldd	r25, Y+2	; 0x02
     4ba:	01 96       	adiw	r24, 0x01	; 1
     4bc:	89 83       	std	Y+1, r24	; 0x01
     4be:	9a 83       	std	Y+2, r25	; 0x02
     4c0:	13 c0       	rjmp	.+38     	; 0x4e8 <readEncoder+0x98>
		case 2: case 4: case 11: case 13:
		position--; break;
     4c2:	89 81       	ldd	r24, Y+1	; 0x01
     4c4:	9a 81       	ldd	r25, Y+2	; 0x02
     4c6:	01 97       	sbiw	r24, 0x01	; 1
     4c8:	89 83       	std	Y+1, r24	; 0x01
     4ca:	9a 83       	std	Y+2, r25	; 0x02
     4cc:	0d c0       	rjmp	.+26     	; 0x4e8 <readEncoder+0x98>
		case 3: case 12:
		position += 2; break;
     4ce:	89 81       	ldd	r24, Y+1	; 0x01
     4d0:	9a 81       	ldd	r25, Y+2	; 0x02
     4d2:	02 96       	adiw	r24, 0x02	; 2
     4d4:	89 83       	std	Y+1, r24	; 0x01
     4d6:	9a 83       	std	Y+2, r25	; 0x02
     4d8:	07 c0       	rjmp	.+14     	; 0x4e8 <readEncoder+0x98>
		default:
		position -= 2; break;
     4da:	89 81       	ldd	r24, Y+1	; 0x01
     4dc:	9a 81       	ldd	r25, Y+2	; 0x02
     4de:	02 97       	sbiw	r24, 0x02	; 2
     4e0:	89 83       	std	Y+1, r24	; 0x01
     4e2:	9a 83       	std	Y+2, r25	; 0x02
     4e4:	01 c0       	rjmp	.+2      	; 0x4e8 <readEncoder+0x98>
	currentPos = (PORTC.IN >> 4) & 3;
	uint8_t s = (currentPos << 2) | prevpos;
	int position = 0;
	switch (s) {
		case 0: case 5: case 10: case 15:
		break;
     4e6:	00 00       	nop
		case 3: case 12:
		position += 2; break;
		default:
		position -= 2; break;
	}
	prevpos = currentPos;
     4e8:	80 91 1e 20 	lds	r24, 0x201E	; 0x80201e <currentPos>
     4ec:	80 93 1f 20 	sts	0x201F, r24	; 0x80201f <prevpos>
	return position;
     4f0:	89 81       	ldd	r24, Y+1	; 0x01
     4f2:	9a 81       	ldd	r25, Y+2	; 0x02
}
     4f4:	23 96       	adiw	r28, 0x03	; 3
     4f6:	cd bf       	out	0x3d, r28	; 61
     4f8:	de bf       	out	0x3e, r29	; 62
     4fa:	df 91       	pop	r29
     4fc:	cf 91       	pop	r28
     4fe:	08 95       	ret

00000500 <main>:
char a;

void SimpleFunction(void);	//A simple function: print a counter (0 to 9) to the terminal

int main(void)
{	
     500:	cf 93       	push	r28
     502:	df 93       	push	r29
     504:	cd b7       	in	r28, 0x3d	; 61
     506:	de b7       	in	r29, 0x3e	; 62
     508:	2e 97       	sbiw	r28, 0x0e	; 14
     50a:	cd bf       	out	0x3d, r28	; 61
     50c:	de bf       	out	0x3e, r29	; 62
	//###1###
	 
	//Initialize subsystems
	ClockInit();			//Initialize system clock (16 MHz)
     50e:	0e 94 65 01 	call	0x2ca	; 0x2ca <ClockInit>
	USARTInit();			//Initialize USART and bind to stdout,stdin
     512:	0e 94 93 03 	call	0x726	; 0x726 <USARTInit>
	AnalogInit();			//Initialize ADC
     516:	0e 94 ed 00 	call	0x1da	; 0x1da <AnalogInit>
	AccInit();				//Initialize accelerometer system
     51a:	0e 94 e5 00 	call	0x1ca	; 0x1ca <AccInit>
	LEDInit();				//Initialize LEDs
     51e:	0e 94 44 03 	call	0x688	; 0x688 <LEDInit>
	SwitchInit();			//Initialize switches
     522:	0e 94 6d 03 	call	0x6da	; 0x6da <SwitchInit>
	EncoderInit();			//Initialize encoder
     526:	0e 94 75 01 	call	0x2ea	; 0x2ea <EncoderInit>
	SpeakerInit();			//Initialize speaker system
     52a:	0e 94 65 03 	call	0x6ca	; 0x6ca <SpeakerInit>
	
	//Enable interrupts
	PMIC.CTRL|=0b00000111;  //Enable low, medium, high priority interrupts
     52e:	80 ea       	ldi	r24, 0xA0	; 160
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	20 ea       	ldi	r18, 0xA0	; 160
     534:	30 e0       	ldi	r19, 0x00	; 0
     536:	f9 01       	movw	r30, r18
     538:	22 81       	ldd	r18, Z+2	; 0x02
     53a:	27 60       	ori	r18, 0x07	; 7
     53c:	fc 01       	movw	r30, r24
     53e:	22 83       	std	Z+2, r18	; 0x02
	SREG|=0b10000000;		//Global interrupt enable
     540:	8f e3       	ldi	r24, 0x3F	; 63
     542:	90 e0       	ldi	r25, 0x00	; 0
     544:	2f e3       	ldi	r18, 0x3F	; 63
     546:	30 e0       	ldi	r19, 0x00	; 0
     548:	f9 01       	movw	r30, r18
     54a:	20 81       	ld	r18, Z
     54c:	20 68       	ori	r18, 0x80	; 128
     54e:	fc 01       	movw	r30, r24
     550:	20 83       	st	Z, r18
     552:	80 e0       	ldi	r24, 0x00	; 0
     554:	90 e0       	ldi	r25, 0x00	; 0
     556:	aa ef       	ldi	r26, 0xFA	; 250
     558:	b3 e4       	ldi	r27, 0x43	; 67
     55a:	89 83       	std	Y+1, r24	; 0x01
     55c:	9a 83       	std	Y+2, r25	; 0x02
     55e:	ab 83       	std	Y+3, r26	; 0x03
     560:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     562:	20 e0       	ldi	r18, 0x00	; 0
     564:	30 e0       	ldi	r19, 0x00	; 0
     566:	4a e7       	ldi	r20, 0x7A	; 122
     568:	55 e4       	ldi	r21, 0x45	; 69
     56a:	69 81       	ldd	r22, Y+1	; 0x01
     56c:	7a 81       	ldd	r23, Y+2	; 0x02
     56e:	8b 81       	ldd	r24, Y+3	; 0x03
     570:	9c 81       	ldd	r25, Y+4	; 0x04
     572:	0e 94 8e 04 	call	0x91c	; 0x91c <__mulsf3>
     576:	dc 01       	movw	r26, r24
     578:	cb 01       	movw	r24, r22
     57a:	8d 83       	std	Y+5, r24	; 0x05
     57c:	9e 83       	std	Y+6, r25	; 0x06
     57e:	af 83       	std	Y+7, r26	; 0x07
     580:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     582:	20 e0       	ldi	r18, 0x00	; 0
     584:	30 e0       	ldi	r19, 0x00	; 0
     586:	40 e8       	ldi	r20, 0x80	; 128
     588:	5f e3       	ldi	r21, 0x3F	; 63
     58a:	6d 81       	ldd	r22, Y+5	; 0x05
     58c:	7e 81       	ldd	r23, Y+6	; 0x06
     58e:	8f 81       	ldd	r24, Y+7	; 0x07
     590:	98 85       	ldd	r25, Y+8	; 0x08
     592:	0e 94 08 04 	call	0x810	; 0x810 <__cmpsf2>
     596:	88 23       	and	r24, r24
     598:	2c f4       	brge	.+10     	; 0x5a4 <main+0xa4>
		__ticks = 1;
     59a:	81 e0       	ldi	r24, 0x01	; 1
     59c:	90 e0       	ldi	r25, 0x00	; 0
     59e:	89 87       	std	Y+9, r24	; 0x09
     5a0:	9a 87       	std	Y+10, r25	; 0x0a
     5a2:	3f c0       	rjmp	.+126    	; 0x622 <main+0x122>
	else if (__tmp > 65535)
     5a4:	20 e0       	ldi	r18, 0x00	; 0
     5a6:	3f ef       	ldi	r19, 0xFF	; 255
     5a8:	4f e7       	ldi	r20, 0x7F	; 127
     5aa:	57 e4       	ldi	r21, 0x47	; 71
     5ac:	6d 81       	ldd	r22, Y+5	; 0x05
     5ae:	7e 81       	ldd	r23, Y+6	; 0x06
     5b0:	8f 81       	ldd	r24, Y+7	; 0x07
     5b2:	98 85       	ldd	r25, Y+8	; 0x08
     5b4:	0e 94 89 04 	call	0x912	; 0x912 <__gesf2>
     5b8:	18 16       	cp	r1, r24
     5ba:	4c f5       	brge	.+82     	; 0x60e <main+0x10e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     5bc:	20 e0       	ldi	r18, 0x00	; 0
     5be:	30 e0       	ldi	r19, 0x00	; 0
     5c0:	40 e2       	ldi	r20, 0x20	; 32
     5c2:	51 e4       	ldi	r21, 0x41	; 65
     5c4:	69 81       	ldd	r22, Y+1	; 0x01
     5c6:	7a 81       	ldd	r23, Y+2	; 0x02
     5c8:	8b 81       	ldd	r24, Y+3	; 0x03
     5ca:	9c 81       	ldd	r25, Y+4	; 0x04
     5cc:	0e 94 8e 04 	call	0x91c	; 0x91c <__mulsf3>
     5d0:	dc 01       	movw	r26, r24
     5d2:	cb 01       	movw	r24, r22
     5d4:	bc 01       	movw	r22, r24
     5d6:	cd 01       	movw	r24, r26
     5d8:	0e 94 0d 04 	call	0x81a	; 0x81a <__fixunssfsi>
     5dc:	dc 01       	movw	r26, r24
     5de:	cb 01       	movw	r24, r22
     5e0:	89 87       	std	Y+9, r24	; 0x09
     5e2:	9a 87       	std	Y+10, r25	; 0x0a
     5e4:	0f c0       	rjmp	.+30     	; 0x604 <main+0x104>
     5e6:	80 e9       	ldi	r24, 0x90	; 144
     5e8:	91 e0       	ldi	r25, 0x01	; 1
     5ea:	8b 87       	std	Y+11, r24	; 0x0b
     5ec:	9c 87       	std	Y+12, r25	; 0x0c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     5ee:	8b 85       	ldd	r24, Y+11	; 0x0b
     5f0:	9c 85       	ldd	r25, Y+12	; 0x0c
     5f2:	01 97       	sbiw	r24, 0x01	; 1
     5f4:	f1 f7       	brne	.-4      	; 0x5f2 <main+0xf2>
     5f6:	8b 87       	std	Y+11, r24	; 0x0b
     5f8:	9c 87       	std	Y+12, r25	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5fa:	89 85       	ldd	r24, Y+9	; 0x09
     5fc:	9a 85       	ldd	r25, Y+10	; 0x0a
     5fe:	01 97       	sbiw	r24, 0x01	; 1
     600:	89 87       	std	Y+9, r24	; 0x09
     602:	9a 87       	std	Y+10, r25	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     604:	89 85       	ldd	r24, Y+9	; 0x09
     606:	9a 85       	ldd	r25, Y+10	; 0x0a
     608:	89 2b       	or	r24, r25
     60a:	69 f7       	brne	.-38     	; 0x5e6 <main+0xe6>
     60c:	14 c0       	rjmp	.+40     	; 0x636 <main+0x136>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     60e:	6d 81       	ldd	r22, Y+5	; 0x05
     610:	7e 81       	ldd	r23, Y+6	; 0x06
     612:	8f 81       	ldd	r24, Y+7	; 0x07
     614:	98 85       	ldd	r25, Y+8	; 0x08
     616:	0e 94 0d 04 	call	0x81a	; 0x81a <__fixunssfsi>
     61a:	dc 01       	movw	r26, r24
     61c:	cb 01       	movw	r24, r22
     61e:	89 87       	std	Y+9, r24	; 0x09
     620:	9a 87       	std	Y+10, r25	; 0x0a
     622:	89 85       	ldd	r24, Y+9	; 0x09
     624:	9a 85       	ldd	r25, Y+10	; 0x0a
     626:	8d 87       	std	Y+13, r24	; 0x0d
     628:	9e 87       	std	Y+14, r25	; 0x0e
     62a:	8d 85       	ldd	r24, Y+13	; 0x0d
     62c:	9e 85       	ldd	r25, Y+14	; 0x0e
     62e:	01 97       	sbiw	r24, 0x01	; 1
     630:	f1 f7       	brne	.-4      	; 0x62e <main+0x12e>
     632:	8d 87       	std	Y+13, r24	; 0x0d
     634:	9e 87       	std	Y+14, r25	; 0x0e
	
	
	
	while (1){
		// Start ADC conversion
		ADCA.CH0.CTRL |= 0x80;
     636:	80 e0       	ldi	r24, 0x00	; 0
     638:	92 e0       	ldi	r25, 0x02	; 2
     63a:	20 e0       	ldi	r18, 0x00	; 0
     63c:	32 e0       	ldi	r19, 0x02	; 2
     63e:	f9 01       	movw	r30, r18
     640:	20 a1       	ldd	r18, Z+32	; 0x20
     642:	20 68       	ori	r18, 0x80	; 128
     644:	fc 01       	movw	r30, r24
     646:	20 a3       	std	Z+32, r18	; 0x20
		sprintf(text, "encoder: %d\r",EncoderGetPos());
     648:	0e 94 ad 01 	call	0x35a	; 0x35a <EncoderGetPos>
     64c:	29 2f       	mov	r18, r25
     64e:	2f 93       	push	r18
     650:	8f 93       	push	r24
     652:	8e e0       	ldi	r24, 0x0E	; 14
     654:	90 e2       	ldi	r25, 0x20	; 32
     656:	89 2f       	mov	r24, r25
     658:	8f 93       	push	r24
     65a:	8e e0       	ldi	r24, 0x0E	; 14
     65c:	90 e2       	ldi	r25, 0x20	; 32
     65e:	8f 93       	push	r24
     660:	80 e2       	ldi	r24, 0x20	; 32
     662:	90 e2       	ldi	r25, 0x20	; 32
     664:	89 2f       	mov	r24, r25
     666:	8f 93       	push	r24
     668:	80 e2       	ldi	r24, 0x20	; 32
     66a:	90 e2       	ldi	r25, 0x20	; 32
     66c:	8f 93       	push	r24
     66e:	0e 94 59 05 	call	0xab2	; 0xab2 <sprintf>
     672:	0f 90       	pop	r0
     674:	0f 90       	pop	r0
     676:	0f 90       	pop	r0
     678:	0f 90       	pop	r0
     67a:	0f 90       	pop	r0
     67c:	0f 90       	pop	r0
		puts(text);
     67e:	80 e2       	ldi	r24, 0x20	; 32
     680:	90 e2       	ldi	r25, 0x20	; 32
     682:	0e 94 29 05 	call	0xa52	; 0xa52 <puts>
		
		
		//putchar('U');
	}
     686:	d7 cf       	rjmp	.-82     	; 0x636 <main+0x136>

00000688 <LEDInit>:
#include "LED.h"
#include <avr/io.h>

void LEDInit(void)
{
     688:	cf 93       	push	r28
     68a:	df 93       	push	r29
     68c:	cd b7       	in	r28, 0x3d	; 61
     68e:	de b7       	in	r29, 0x3e	; 62
	PORTE.DIRSET=0b00001111;
     690:	80 e8       	ldi	r24, 0x80	; 128
     692:	96 e0       	ldi	r25, 0x06	; 6
     694:	2f e0       	ldi	r18, 0x0F	; 15
     696:	fc 01       	movw	r30, r24
     698:	21 83       	std	Z+1, r18	; 0x01
	PORTE.PIN0CTRL=0b01000000;
     69a:	80 e8       	ldi	r24, 0x80	; 128
     69c:	96 e0       	ldi	r25, 0x06	; 6
     69e:	20 e4       	ldi	r18, 0x40	; 64
     6a0:	fc 01       	movw	r30, r24
     6a2:	20 8b       	std	Z+16, r18	; 0x10
	PORTE.PIN1CTRL=0b01000000;
     6a4:	80 e8       	ldi	r24, 0x80	; 128
     6a6:	96 e0       	ldi	r25, 0x06	; 6
     6a8:	20 e4       	ldi	r18, 0x40	; 64
     6aa:	fc 01       	movw	r30, r24
     6ac:	21 8b       	std	Z+17, r18	; 0x11
	PORTE.PIN2CTRL=0b01000000;
     6ae:	80 e8       	ldi	r24, 0x80	; 128
     6b0:	96 e0       	ldi	r25, 0x06	; 6
     6b2:	20 e4       	ldi	r18, 0x40	; 64
     6b4:	fc 01       	movw	r30, r24
     6b6:	22 8b       	std	Z+18, r18	; 0x12
	PORTE.PIN3CTRL=0b01000000;
     6b8:	80 e8       	ldi	r24, 0x80	; 128
     6ba:	96 e0       	ldi	r25, 0x06	; 6
     6bc:	20 e4       	ldi	r18, 0x40	; 64
     6be:	fc 01       	movw	r30, r24
     6c0:	23 8b       	std	Z+19, r18	; 0x13
	
}
     6c2:	00 00       	nop
     6c4:	df 91       	pop	r29
     6c6:	cf 91       	pop	r28
     6c8:	08 95       	ret

000006ca <SpeakerInit>:
#include <avr/io.h>
#include <avr/interrupt.h>
#include "speaker.h"

void SpeakerInit(void)
{
     6ca:	cf 93       	push	r28
     6cc:	df 93       	push	r29
     6ce:	cd b7       	in	r28, 0x3d	; 61
     6d0:	de b7       	in	r29, 0x3e	; 62
		//TCC1.CTRLB=
		//TCC1.CTRLC=
		//TCC1.CTRLD=
		//TCC1.CTRLE=
		
}
     6d2:	00 00       	nop
     6d4:	df 91       	pop	r29
     6d6:	cf 91       	pop	r28
     6d8:	08 95       	ret

000006da <SwitchInit>:
#include "switch.h"
#include <avr/io.h>

void SwitchInit(void)
{
     6da:	cf 93       	push	r28
     6dc:	df 93       	push	r29
     6de:	cd b7       	in	r28, 0x3d	; 61
     6e0:	de b7       	in	r29, 0x3e	; 62
	PORTD.DIRCLR=0b11110001;
     6e2:	80 e6       	ldi	r24, 0x60	; 96
     6e4:	96 e0       	ldi	r25, 0x06	; 6
     6e6:	21 ef       	ldi	r18, 0xF1	; 241
     6e8:	fc 01       	movw	r30, r24
     6ea:	22 83       	std	Z+2, r18	; 0x02
	PORTD.PIN0CTRL=0b01011000;
     6ec:	80 e6       	ldi	r24, 0x60	; 96
     6ee:	96 e0       	ldi	r25, 0x06	; 6
     6f0:	28 e5       	ldi	r18, 0x58	; 88
     6f2:	fc 01       	movw	r30, r24
     6f4:	20 8b       	std	Z+16, r18	; 0x10
	PORTD.PIN4CTRL=0b01011000;
     6f6:	80 e6       	ldi	r24, 0x60	; 96
     6f8:	96 e0       	ldi	r25, 0x06	; 6
     6fa:	28 e5       	ldi	r18, 0x58	; 88
     6fc:	fc 01       	movw	r30, r24
     6fe:	24 8b       	std	Z+20, r18	; 0x14
	PORTD.PIN5CTRL=0b01011000;
     700:	80 e6       	ldi	r24, 0x60	; 96
     702:	96 e0       	ldi	r25, 0x06	; 6
     704:	28 e5       	ldi	r18, 0x58	; 88
     706:	fc 01       	movw	r30, r24
     708:	25 8b       	std	Z+21, r18	; 0x15
	PORTD.PIN6CTRL=0b01011000;
     70a:	80 e6       	ldi	r24, 0x60	; 96
     70c:	96 e0       	ldi	r25, 0x06	; 6
     70e:	28 e5       	ldi	r18, 0x58	; 88
     710:	fc 01       	movw	r30, r24
     712:	26 8b       	std	Z+22, r18	; 0x16
	PORTD.PIN7CTRL=0b01011000;
     714:	80 e6       	ldi	r24, 0x60	; 96
     716:	96 e0       	ldi	r25, 0x06	; 6
     718:	28 e5       	ldi	r18, 0x58	; 88
     71a:	fc 01       	movw	r30, r24
     71c:	27 8b       	std	Z+23, r18	; 0x17
}
     71e:	00 00       	nop
     720:	df 91       	pop	r29
     722:	cf 91       	pop	r28
     724:	08 95       	ret

00000726 <USARTInit>:
 int stdio_putchar(char c, FILE * stream);
 int stdio_getchar(FILE *stream);
static FILE UsartStdio = FDEV_SETUP_STREAM(stdio_putchar, stdio_getchar,_FDEV_SETUP_WRITE);

void USARTInit(void)
{
     726:	cf 93       	push	r28
     728:	df 93       	push	r29
     72a:	cd b7       	in	r28, 0x3d	; 61
     72c:	de b7       	in	r29, 0x3e	; 62
	USART_PORT.DIRSET=0b00001000;	
     72e:	80 e6       	ldi	r24, 0x60	; 96
     730:	96 e0       	ldi	r25, 0x06	; 6
     732:	28 e0       	ldi	r18, 0x08	; 8
     734:	fc 01       	movw	r30, r24
     736:	21 83       	std	Z+1, r18	; 0x01
	USART_PORT.DIRCLR=0b00000100;
     738:	80 e6       	ldi	r24, 0x60	; 96
     73a:	96 e0       	ldi	r25, 0x06	; 6
     73c:	24 e0       	ldi	r18, 0x04	; 4
     73e:	fc 01       	movw	r30, r24
     740:	22 83       	std	Z+2, r18	; 0x02
	
	USART.CTRLA=0b00000000;
     742:	80 ea       	ldi	r24, 0xA0	; 160
     744:	99 e0       	ldi	r25, 0x09	; 9
     746:	fc 01       	movw	r30, r24
     748:	13 82       	std	Z+3, r1	; 0x03
	USART.CTRLB=0b00011000;
     74a:	80 ea       	ldi	r24, 0xA0	; 160
     74c:	99 e0       	ldi	r25, 0x09	; 9
     74e:	28 e1       	ldi	r18, 0x18	; 24
     750:	fc 01       	movw	r30, r24
     752:	24 83       	std	Z+4, r18	; 0x04
	USART.CTRLC=0b00000011;
     754:	80 ea       	ldi	r24, 0xA0	; 160
     756:	99 e0       	ldi	r25, 0x09	; 9
     758:	23 e0       	ldi	r18, 0x03	; 3
     75a:	fc 01       	movw	r30, r24
     75c:	25 83       	std	Z+5, r18	; 0x05
	
	USART.BAUDCTRLA=0xD7; //BSEL=3301, BSCALE=-5 9600 baud
     75e:	80 ea       	ldi	r24, 0xA0	; 160
     760:	99 e0       	ldi	r25, 0x09	; 9
     762:	27 ed       	ldi	r18, 0xD7	; 215
     764:	fc 01       	movw	r30, r24
     766:	26 83       	std	Z+6, r18	; 0x06
	USART.BAUDCTRLB=0x93; 
     768:	80 ea       	ldi	r24, 0xA0	; 160
     76a:	99 e0       	ldi	r25, 0x09	; 9
     76c:	23 e9       	ldi	r18, 0x93	; 147
     76e:	fc 01       	movw	r30, r24
     770:	27 83       	std	Z+7, r18	; 0x07
	
	stdout=&UsartStdio;
     772:	80 e0       	ldi	r24, 0x00	; 0
     774:	90 e2       	ldi	r25, 0x20	; 32
     776:	80 93 32 20 	sts	0x2032, r24	; 0x802032 <__iob+0x2>
     77a:	90 93 33 20 	sts	0x2033, r25	; 0x802033 <__iob+0x3>
	stdin=&UsartStdio;
     77e:	80 e0       	ldi	r24, 0x00	; 0
     780:	90 e2       	ldi	r25, 0x20	; 32
     782:	80 93 30 20 	sts	0x2030, r24	; 0x802030 <__iob>
     786:	90 93 31 20 	sts	0x2031, r25	; 0x802031 <__iob+0x1>
}
     78a:	00 00       	nop
     78c:	df 91       	pop	r29
     78e:	cf 91       	pop	r28
     790:	08 95       	ret

00000792 <stdio_putchar>:


int stdio_putchar(char c, FILE * stream)
{
     792:	cf 93       	push	r28
     794:	df 93       	push	r29
     796:	00 d0       	rcall	.+0      	; 0x798 <stdio_putchar+0x6>
     798:	1f 92       	push	r1
     79a:	cd b7       	in	r28, 0x3d	; 61
     79c:	de b7       	in	r29, 0x3e	; 62
     79e:	89 83       	std	Y+1, r24	; 0x01
     7a0:	6a 83       	std	Y+2, r22	; 0x02
     7a2:	7b 83       	std	Y+3, r23	; 0x03
	USART.DATA = c;
     7a4:	80 ea       	ldi	r24, 0xA0	; 160
     7a6:	99 e0       	ldi	r25, 0x09	; 9
     7a8:	29 81       	ldd	r18, Y+1	; 0x01
     7aa:	fc 01       	movw	r30, r24
     7ac:	20 83       	st	Z, r18
	while (!(USART.STATUS & 0b01000000));
     7ae:	00 00       	nop
     7b0:	80 ea       	ldi	r24, 0xA0	; 160
     7b2:	99 e0       	ldi	r25, 0x09	; 9
     7b4:	fc 01       	movw	r30, r24
     7b6:	81 81       	ldd	r24, Z+1	; 0x01
     7b8:	88 2f       	mov	r24, r24
     7ba:	90 e0       	ldi	r25, 0x00	; 0
     7bc:	80 74       	andi	r24, 0x40	; 64
     7be:	99 27       	eor	r25, r25
     7c0:	89 2b       	or	r24, r25
     7c2:	b1 f3       	breq	.-20     	; 0x7b0 <stdio_putchar+0x1e>
	USART.STATUS=0b01000000;
     7c4:	80 ea       	ldi	r24, 0xA0	; 160
     7c6:	99 e0       	ldi	r25, 0x09	; 9
     7c8:	20 e4       	ldi	r18, 0x40	; 64
     7ca:	fc 01       	movw	r30, r24
     7cc:	21 83       	std	Z+1, r18	; 0x01
	return 0;
     7ce:	80 e0       	ldi	r24, 0x00	; 0
     7d0:	90 e0       	ldi	r25, 0x00	; 0
}
     7d2:	23 96       	adiw	r28, 0x03	; 3
     7d4:	cd bf       	out	0x3d, r28	; 61
     7d6:	de bf       	out	0x3e, r29	; 62
     7d8:	df 91       	pop	r29
     7da:	cf 91       	pop	r28
     7dc:	08 95       	ret

000007de <stdio_getchar>:
	
int stdio_getchar(FILE *stream)
{
     7de:	cf 93       	push	r28
     7e0:	df 93       	push	r29
     7e2:	00 d0       	rcall	.+0      	; 0x7e4 <stdio_getchar+0x6>
     7e4:	cd b7       	in	r28, 0x3d	; 61
     7e6:	de b7       	in	r29, 0x3e	; 62
     7e8:	89 83       	std	Y+1, r24	; 0x01
     7ea:	9a 83       	std	Y+2, r25	; 0x02
	while (!(USART.STATUS & 0b10000000));
     7ec:	00 00       	nop
     7ee:	80 ea       	ldi	r24, 0xA0	; 160
     7f0:	99 e0       	ldi	r25, 0x09	; 9
     7f2:	fc 01       	movw	r30, r24
     7f4:	81 81       	ldd	r24, Z+1	; 0x01
     7f6:	88 23       	and	r24, r24
     7f8:	d4 f7       	brge	.-12     	; 0x7ee <stdio_getchar+0x10>
	return USART.DATA;
     7fa:	80 ea       	ldi	r24, 0xA0	; 160
     7fc:	99 e0       	ldi	r25, 0x09	; 9
     7fe:	fc 01       	movw	r30, r24
     800:	80 81       	ld	r24, Z
     802:	88 2f       	mov	r24, r24
     804:	90 e0       	ldi	r25, 0x00	; 0
}
     806:	0f 90       	pop	r0
     808:	0f 90       	pop	r0
     80a:	df 91       	pop	r29
     80c:	cf 91       	pop	r28
     80e:	08 95       	ret

00000810 <__cmpsf2>:
     810:	0e 94 3c 04 	call	0x878	; 0x878 <__fp_cmp>
     814:	08 f4       	brcc	.+2      	; 0x818 <__cmpsf2+0x8>
     816:	81 e0       	ldi	r24, 0x01	; 1
     818:	08 95       	ret

0000081a <__fixunssfsi>:
     81a:	0e 94 68 04 	call	0x8d0	; 0x8d0 <__fp_splitA>
     81e:	88 f0       	brcs	.+34     	; 0x842 <__fixunssfsi+0x28>
     820:	9f 57       	subi	r25, 0x7F	; 127
     822:	98 f0       	brcs	.+38     	; 0x84a <__fixunssfsi+0x30>
     824:	b9 2f       	mov	r27, r25
     826:	99 27       	eor	r25, r25
     828:	b7 51       	subi	r27, 0x17	; 23
     82a:	b0 f0       	brcs	.+44     	; 0x858 <__fixunssfsi+0x3e>
     82c:	e1 f0       	breq	.+56     	; 0x866 <__fixunssfsi+0x4c>
     82e:	66 0f       	add	r22, r22
     830:	77 1f       	adc	r23, r23
     832:	88 1f       	adc	r24, r24
     834:	99 1f       	adc	r25, r25
     836:	1a f0       	brmi	.+6      	; 0x83e <__fixunssfsi+0x24>
     838:	ba 95       	dec	r27
     83a:	c9 f7       	brne	.-14     	; 0x82e <__fixunssfsi+0x14>
     83c:	14 c0       	rjmp	.+40     	; 0x866 <__fixunssfsi+0x4c>
     83e:	b1 30       	cpi	r27, 0x01	; 1
     840:	91 f0       	breq	.+36     	; 0x866 <__fixunssfsi+0x4c>
     842:	0e 94 82 04 	call	0x904	; 0x904 <__fp_zero>
     846:	b1 e0       	ldi	r27, 0x01	; 1
     848:	08 95       	ret
     84a:	0c 94 82 04 	jmp	0x904	; 0x904 <__fp_zero>
     84e:	67 2f       	mov	r22, r23
     850:	78 2f       	mov	r23, r24
     852:	88 27       	eor	r24, r24
     854:	b8 5f       	subi	r27, 0xF8	; 248
     856:	39 f0       	breq	.+14     	; 0x866 <__fixunssfsi+0x4c>
     858:	b9 3f       	cpi	r27, 0xF9	; 249
     85a:	cc f3       	brlt	.-14     	; 0x84e <__fixunssfsi+0x34>
     85c:	86 95       	lsr	r24
     85e:	77 95       	ror	r23
     860:	67 95       	ror	r22
     862:	b3 95       	inc	r27
     864:	d9 f7       	brne	.-10     	; 0x85c <__fixunssfsi+0x42>
     866:	3e f4       	brtc	.+14     	; 0x876 <__fixunssfsi+0x5c>
     868:	90 95       	com	r25
     86a:	80 95       	com	r24
     86c:	70 95       	com	r23
     86e:	61 95       	neg	r22
     870:	7f 4f       	sbci	r23, 0xFF	; 255
     872:	8f 4f       	sbci	r24, 0xFF	; 255
     874:	9f 4f       	sbci	r25, 0xFF	; 255
     876:	08 95       	ret

00000878 <__fp_cmp>:
     878:	99 0f       	add	r25, r25
     87a:	00 08       	sbc	r0, r0
     87c:	55 0f       	add	r21, r21
     87e:	aa 0b       	sbc	r26, r26
     880:	e0 e8       	ldi	r30, 0x80	; 128
     882:	fe ef       	ldi	r31, 0xFE	; 254
     884:	16 16       	cp	r1, r22
     886:	17 06       	cpc	r1, r23
     888:	e8 07       	cpc	r30, r24
     88a:	f9 07       	cpc	r31, r25
     88c:	c0 f0       	brcs	.+48     	; 0x8be <__fp_cmp+0x46>
     88e:	12 16       	cp	r1, r18
     890:	13 06       	cpc	r1, r19
     892:	e4 07       	cpc	r30, r20
     894:	f5 07       	cpc	r31, r21
     896:	98 f0       	brcs	.+38     	; 0x8be <__fp_cmp+0x46>
     898:	62 1b       	sub	r22, r18
     89a:	73 0b       	sbc	r23, r19
     89c:	84 0b       	sbc	r24, r20
     89e:	95 0b       	sbc	r25, r21
     8a0:	39 f4       	brne	.+14     	; 0x8b0 <__fp_cmp+0x38>
     8a2:	0a 26       	eor	r0, r26
     8a4:	61 f0       	breq	.+24     	; 0x8be <__fp_cmp+0x46>
     8a6:	23 2b       	or	r18, r19
     8a8:	24 2b       	or	r18, r20
     8aa:	25 2b       	or	r18, r21
     8ac:	21 f4       	brne	.+8      	; 0x8b6 <__fp_cmp+0x3e>
     8ae:	08 95       	ret
     8b0:	0a 26       	eor	r0, r26
     8b2:	09 f4       	brne	.+2      	; 0x8b6 <__fp_cmp+0x3e>
     8b4:	a1 40       	sbci	r26, 0x01	; 1
     8b6:	a6 95       	lsr	r26
     8b8:	8f ef       	ldi	r24, 0xFF	; 255
     8ba:	81 1d       	adc	r24, r1
     8bc:	81 1d       	adc	r24, r1
     8be:	08 95       	ret

000008c0 <__fp_split3>:
     8c0:	57 fd       	sbrc	r21, 7
     8c2:	90 58       	subi	r25, 0x80	; 128
     8c4:	44 0f       	add	r20, r20
     8c6:	55 1f       	adc	r21, r21
     8c8:	59 f0       	breq	.+22     	; 0x8e0 <__fp_splitA+0x10>
     8ca:	5f 3f       	cpi	r21, 0xFF	; 255
     8cc:	71 f0       	breq	.+28     	; 0x8ea <__fp_splitA+0x1a>
     8ce:	47 95       	ror	r20

000008d0 <__fp_splitA>:
     8d0:	88 0f       	add	r24, r24
     8d2:	97 fb       	bst	r25, 7
     8d4:	99 1f       	adc	r25, r25
     8d6:	61 f0       	breq	.+24     	; 0x8f0 <__fp_splitA+0x20>
     8d8:	9f 3f       	cpi	r25, 0xFF	; 255
     8da:	79 f0       	breq	.+30     	; 0x8fa <__fp_splitA+0x2a>
     8dc:	87 95       	ror	r24
     8de:	08 95       	ret
     8e0:	12 16       	cp	r1, r18
     8e2:	13 06       	cpc	r1, r19
     8e4:	14 06       	cpc	r1, r20
     8e6:	55 1f       	adc	r21, r21
     8e8:	f2 cf       	rjmp	.-28     	; 0x8ce <__fp_split3+0xe>
     8ea:	46 95       	lsr	r20
     8ec:	f1 df       	rcall	.-30     	; 0x8d0 <__fp_splitA>
     8ee:	08 c0       	rjmp	.+16     	; 0x900 <__fp_splitA+0x30>
     8f0:	16 16       	cp	r1, r22
     8f2:	17 06       	cpc	r1, r23
     8f4:	18 06       	cpc	r1, r24
     8f6:	99 1f       	adc	r25, r25
     8f8:	f1 cf       	rjmp	.-30     	; 0x8dc <__fp_splitA+0xc>
     8fa:	86 95       	lsr	r24
     8fc:	71 05       	cpc	r23, r1
     8fe:	61 05       	cpc	r22, r1
     900:	08 94       	sec
     902:	08 95       	ret

00000904 <__fp_zero>:
     904:	e8 94       	clt

00000906 <__fp_szero>:
     906:	bb 27       	eor	r27, r27
     908:	66 27       	eor	r22, r22
     90a:	77 27       	eor	r23, r23
     90c:	cb 01       	movw	r24, r22
     90e:	97 f9       	bld	r25, 7
     910:	08 95       	ret

00000912 <__gesf2>:
     912:	0e 94 3c 04 	call	0x878	; 0x878 <__fp_cmp>
     916:	08 f4       	brcc	.+2      	; 0x91a <__gesf2+0x8>
     918:	8f ef       	ldi	r24, 0xFF	; 255
     91a:	08 95       	ret

0000091c <__mulsf3>:
     91c:	0e 94 a1 04 	call	0x942	; 0x942 <__mulsf3x>
     920:	0c 94 12 05 	jmp	0xa24	; 0xa24 <__fp_round>
     924:	0e 94 04 05 	call	0xa08	; 0xa08 <__fp_pscA>
     928:	38 f0       	brcs	.+14     	; 0x938 <__mulsf3+0x1c>
     92a:	0e 94 0b 05 	call	0xa16	; 0xa16 <__fp_pscB>
     92e:	20 f0       	brcs	.+8      	; 0x938 <__mulsf3+0x1c>
     930:	95 23       	and	r25, r21
     932:	11 f0       	breq	.+4      	; 0x938 <__mulsf3+0x1c>
     934:	0c 94 fb 04 	jmp	0x9f6	; 0x9f6 <__fp_inf>
     938:	0c 94 01 05 	jmp	0xa02	; 0xa02 <__fp_nan>
     93c:	11 24       	eor	r1, r1
     93e:	0c 94 83 04 	jmp	0x906	; 0x906 <__fp_szero>

00000942 <__mulsf3x>:
     942:	0e 94 60 04 	call	0x8c0	; 0x8c0 <__fp_split3>
     946:	70 f3       	brcs	.-36     	; 0x924 <__mulsf3+0x8>

00000948 <__mulsf3_pse>:
     948:	95 9f       	mul	r25, r21
     94a:	c1 f3       	breq	.-16     	; 0x93c <__mulsf3+0x20>
     94c:	95 0f       	add	r25, r21
     94e:	50 e0       	ldi	r21, 0x00	; 0
     950:	55 1f       	adc	r21, r21
     952:	62 9f       	mul	r22, r18
     954:	f0 01       	movw	r30, r0
     956:	72 9f       	mul	r23, r18
     958:	bb 27       	eor	r27, r27
     95a:	f0 0d       	add	r31, r0
     95c:	b1 1d       	adc	r27, r1
     95e:	63 9f       	mul	r22, r19
     960:	aa 27       	eor	r26, r26
     962:	f0 0d       	add	r31, r0
     964:	b1 1d       	adc	r27, r1
     966:	aa 1f       	adc	r26, r26
     968:	64 9f       	mul	r22, r20
     96a:	66 27       	eor	r22, r22
     96c:	b0 0d       	add	r27, r0
     96e:	a1 1d       	adc	r26, r1
     970:	66 1f       	adc	r22, r22
     972:	82 9f       	mul	r24, r18
     974:	22 27       	eor	r18, r18
     976:	b0 0d       	add	r27, r0
     978:	a1 1d       	adc	r26, r1
     97a:	62 1f       	adc	r22, r18
     97c:	73 9f       	mul	r23, r19
     97e:	b0 0d       	add	r27, r0
     980:	a1 1d       	adc	r26, r1
     982:	62 1f       	adc	r22, r18
     984:	83 9f       	mul	r24, r19
     986:	a0 0d       	add	r26, r0
     988:	61 1d       	adc	r22, r1
     98a:	22 1f       	adc	r18, r18
     98c:	74 9f       	mul	r23, r20
     98e:	33 27       	eor	r19, r19
     990:	a0 0d       	add	r26, r0
     992:	61 1d       	adc	r22, r1
     994:	23 1f       	adc	r18, r19
     996:	84 9f       	mul	r24, r20
     998:	60 0d       	add	r22, r0
     99a:	21 1d       	adc	r18, r1
     99c:	82 2f       	mov	r24, r18
     99e:	76 2f       	mov	r23, r22
     9a0:	6a 2f       	mov	r22, r26
     9a2:	11 24       	eor	r1, r1
     9a4:	9f 57       	subi	r25, 0x7F	; 127
     9a6:	50 40       	sbci	r21, 0x00	; 0
     9a8:	9a f0       	brmi	.+38     	; 0x9d0 <__mulsf3_pse+0x88>
     9aa:	f1 f0       	breq	.+60     	; 0x9e8 <__mulsf3_pse+0xa0>
     9ac:	88 23       	and	r24, r24
     9ae:	4a f0       	brmi	.+18     	; 0x9c2 <__mulsf3_pse+0x7a>
     9b0:	ee 0f       	add	r30, r30
     9b2:	ff 1f       	adc	r31, r31
     9b4:	bb 1f       	adc	r27, r27
     9b6:	66 1f       	adc	r22, r22
     9b8:	77 1f       	adc	r23, r23
     9ba:	88 1f       	adc	r24, r24
     9bc:	91 50       	subi	r25, 0x01	; 1
     9be:	50 40       	sbci	r21, 0x00	; 0
     9c0:	a9 f7       	brne	.-22     	; 0x9ac <__mulsf3_pse+0x64>
     9c2:	9e 3f       	cpi	r25, 0xFE	; 254
     9c4:	51 05       	cpc	r21, r1
     9c6:	80 f0       	brcs	.+32     	; 0x9e8 <__mulsf3_pse+0xa0>
     9c8:	0c 94 fb 04 	jmp	0x9f6	; 0x9f6 <__fp_inf>
     9cc:	0c 94 83 04 	jmp	0x906	; 0x906 <__fp_szero>
     9d0:	5f 3f       	cpi	r21, 0xFF	; 255
     9d2:	e4 f3       	brlt	.-8      	; 0x9cc <__mulsf3_pse+0x84>
     9d4:	98 3e       	cpi	r25, 0xE8	; 232
     9d6:	d4 f3       	brlt	.-12     	; 0x9cc <__mulsf3_pse+0x84>
     9d8:	86 95       	lsr	r24
     9da:	77 95       	ror	r23
     9dc:	67 95       	ror	r22
     9de:	b7 95       	ror	r27
     9e0:	f7 95       	ror	r31
     9e2:	e7 95       	ror	r30
     9e4:	9f 5f       	subi	r25, 0xFF	; 255
     9e6:	c1 f7       	brne	.-16     	; 0x9d8 <__mulsf3_pse+0x90>
     9e8:	fe 2b       	or	r31, r30
     9ea:	88 0f       	add	r24, r24
     9ec:	91 1d       	adc	r25, r1
     9ee:	96 95       	lsr	r25
     9f0:	87 95       	ror	r24
     9f2:	97 f9       	bld	r25, 7
     9f4:	08 95       	ret

000009f6 <__fp_inf>:
     9f6:	97 f9       	bld	r25, 7
     9f8:	9f 67       	ori	r25, 0x7F	; 127
     9fa:	80 e8       	ldi	r24, 0x80	; 128
     9fc:	70 e0       	ldi	r23, 0x00	; 0
     9fe:	60 e0       	ldi	r22, 0x00	; 0
     a00:	08 95       	ret

00000a02 <__fp_nan>:
     a02:	9f ef       	ldi	r25, 0xFF	; 255
     a04:	80 ec       	ldi	r24, 0xC0	; 192
     a06:	08 95       	ret

00000a08 <__fp_pscA>:
     a08:	00 24       	eor	r0, r0
     a0a:	0a 94       	dec	r0
     a0c:	16 16       	cp	r1, r22
     a0e:	17 06       	cpc	r1, r23
     a10:	18 06       	cpc	r1, r24
     a12:	09 06       	cpc	r0, r25
     a14:	08 95       	ret

00000a16 <__fp_pscB>:
     a16:	00 24       	eor	r0, r0
     a18:	0a 94       	dec	r0
     a1a:	12 16       	cp	r1, r18
     a1c:	13 06       	cpc	r1, r19
     a1e:	14 06       	cpc	r1, r20
     a20:	05 06       	cpc	r0, r21
     a22:	08 95       	ret

00000a24 <__fp_round>:
     a24:	09 2e       	mov	r0, r25
     a26:	03 94       	inc	r0
     a28:	00 0c       	add	r0, r0
     a2a:	11 f4       	brne	.+4      	; 0xa30 <__fp_round+0xc>
     a2c:	88 23       	and	r24, r24
     a2e:	52 f0       	brmi	.+20     	; 0xa44 <__fp_round+0x20>
     a30:	bb 0f       	add	r27, r27
     a32:	40 f4       	brcc	.+16     	; 0xa44 <__fp_round+0x20>
     a34:	bf 2b       	or	r27, r31
     a36:	11 f4       	brne	.+4      	; 0xa3c <__fp_round+0x18>
     a38:	60 ff       	sbrs	r22, 0
     a3a:	04 c0       	rjmp	.+8      	; 0xa44 <__fp_round+0x20>
     a3c:	6f 5f       	subi	r22, 0xFF	; 255
     a3e:	7f 4f       	sbci	r23, 0xFF	; 255
     a40:	8f 4f       	sbci	r24, 0xFF	; 255
     a42:	9f 4f       	sbci	r25, 0xFF	; 255
     a44:	08 95       	ret

00000a46 <__tablejump2__>:
     a46:	ee 0f       	add	r30, r30
     a48:	ff 1f       	adc	r31, r31
     a4a:	05 90       	lpm	r0, Z+
     a4c:	f4 91       	lpm	r31, Z
     a4e:	e0 2d       	mov	r30, r0
     a50:	09 94       	ijmp

00000a52 <puts>:
     a52:	0f 93       	push	r16
     a54:	1f 93       	push	r17
     a56:	cf 93       	push	r28
     a58:	df 93       	push	r29
     a5a:	e0 91 32 20 	lds	r30, 0x2032	; 0x802032 <__iob+0x2>
     a5e:	f0 91 33 20 	lds	r31, 0x2033	; 0x802033 <__iob+0x3>
     a62:	23 81       	ldd	r18, Z+3	; 0x03
     a64:	21 ff       	sbrs	r18, 1
     a66:	1b c0       	rjmp	.+54     	; 0xa9e <puts+0x4c>
     a68:	8c 01       	movw	r16, r24
     a6a:	d0 e0       	ldi	r29, 0x00	; 0
     a6c:	c0 e0       	ldi	r28, 0x00	; 0
     a6e:	f8 01       	movw	r30, r16
     a70:	81 91       	ld	r24, Z+
     a72:	8f 01       	movw	r16, r30
     a74:	60 91 32 20 	lds	r22, 0x2032	; 0x802032 <__iob+0x2>
     a78:	70 91 33 20 	lds	r23, 0x2033	; 0x802033 <__iob+0x3>
     a7c:	db 01       	movw	r26, r22
     a7e:	18 96       	adiw	r26, 0x08	; 8
     a80:	ed 91       	ld	r30, X+
     a82:	fc 91       	ld	r31, X
     a84:	19 97       	sbiw	r26, 0x09	; 9
     a86:	88 23       	and	r24, r24
     a88:	31 f0       	breq	.+12     	; 0xa96 <puts+0x44>
     a8a:	09 95       	icall
     a8c:	89 2b       	or	r24, r25
     a8e:	79 f3       	breq	.-34     	; 0xa6e <puts+0x1c>
     a90:	df ef       	ldi	r29, 0xFF	; 255
     a92:	cf ef       	ldi	r28, 0xFF	; 255
     a94:	ec cf       	rjmp	.-40     	; 0xa6e <puts+0x1c>
     a96:	8a e0       	ldi	r24, 0x0A	; 10
     a98:	09 95       	icall
     a9a:	89 2b       	or	r24, r25
     a9c:	19 f0       	breq	.+6      	; 0xaa4 <puts+0x52>
     a9e:	8f ef       	ldi	r24, 0xFF	; 255
     aa0:	9f ef       	ldi	r25, 0xFF	; 255
     aa2:	02 c0       	rjmp	.+4      	; 0xaa8 <puts+0x56>
     aa4:	8d 2f       	mov	r24, r29
     aa6:	9c 2f       	mov	r25, r28
     aa8:	df 91       	pop	r29
     aaa:	cf 91       	pop	r28
     aac:	1f 91       	pop	r17
     aae:	0f 91       	pop	r16
     ab0:	08 95       	ret

00000ab2 <sprintf>:
     ab2:	ae e0       	ldi	r26, 0x0E	; 14
     ab4:	b0 e0       	ldi	r27, 0x00	; 0
     ab6:	ef e5       	ldi	r30, 0x5F	; 95
     ab8:	f5 e0       	ldi	r31, 0x05	; 5
     aba:	0c 94 1a 08 	jmp	0x1034	; 0x1034 <__prologue_saves__+0x1c>
     abe:	0d 89       	ldd	r16, Y+21	; 0x15
     ac0:	1e 89       	ldd	r17, Y+22	; 0x16
     ac2:	86 e0       	ldi	r24, 0x06	; 6
     ac4:	8c 83       	std	Y+4, r24	; 0x04
     ac6:	09 83       	std	Y+1, r16	; 0x01
     ac8:	1a 83       	std	Y+2, r17	; 0x02
     aca:	8f ef       	ldi	r24, 0xFF	; 255
     acc:	9f e7       	ldi	r25, 0x7F	; 127
     ace:	8d 83       	std	Y+5, r24	; 0x05
     ad0:	9e 83       	std	Y+6, r25	; 0x06
     ad2:	ae 01       	movw	r20, r28
     ad4:	47 5e       	subi	r20, 0xE7	; 231
     ad6:	5f 4f       	sbci	r21, 0xFF	; 255
     ad8:	6f 89       	ldd	r22, Y+23	; 0x17
     ada:	78 8d       	ldd	r23, Y+24	; 0x18
     adc:	ce 01       	movw	r24, r28
     ade:	01 96       	adiw	r24, 0x01	; 1
     ae0:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <vfprintf>
     ae4:	ef 81       	ldd	r30, Y+7	; 0x07
     ae6:	f8 85       	ldd	r31, Y+8	; 0x08
     ae8:	e0 0f       	add	r30, r16
     aea:	f1 1f       	adc	r31, r17
     aec:	10 82       	st	Z, r1
     aee:	2e 96       	adiw	r28, 0x0e	; 14
     af0:	e4 e0       	ldi	r30, 0x04	; 4
     af2:	0c 94 33 08 	jmp	0x1066	; 0x1066 <__epilogue_restores__+0x1c>

00000af6 <vfprintf>:
     af6:	ab e0       	ldi	r26, 0x0B	; 11
     af8:	b0 e0       	ldi	r27, 0x00	; 0
     afa:	e1 e8       	ldi	r30, 0x81	; 129
     afc:	f5 e0       	ldi	r31, 0x05	; 5
     afe:	0c 94 0c 08 	jmp	0x1018	; 0x1018 <__prologue_saves__>
     b02:	6c 01       	movw	r12, r24
     b04:	7b 01       	movw	r14, r22
     b06:	8a 01       	movw	r16, r20
     b08:	fc 01       	movw	r30, r24
     b0a:	16 82       	std	Z+6, r1	; 0x06
     b0c:	17 82       	std	Z+7, r1	; 0x07
     b0e:	83 81       	ldd	r24, Z+3	; 0x03
     b10:	81 ff       	sbrs	r24, 1
     b12:	cc c1       	rjmp	.+920    	; 0xeac <vfprintf+0x3b6>
     b14:	ce 01       	movw	r24, r28
     b16:	01 96       	adiw	r24, 0x01	; 1
     b18:	3c 01       	movw	r6, r24
     b1a:	f6 01       	movw	r30, r12
     b1c:	93 81       	ldd	r25, Z+3	; 0x03
     b1e:	f7 01       	movw	r30, r14
     b20:	93 fd       	sbrc	r25, 3
     b22:	85 91       	lpm	r24, Z+
     b24:	93 ff       	sbrs	r25, 3
     b26:	81 91       	ld	r24, Z+
     b28:	7f 01       	movw	r14, r30
     b2a:	88 23       	and	r24, r24
     b2c:	09 f4       	brne	.+2      	; 0xb30 <vfprintf+0x3a>
     b2e:	ba c1       	rjmp	.+884    	; 0xea4 <vfprintf+0x3ae>
     b30:	85 32       	cpi	r24, 0x25	; 37
     b32:	39 f4       	brne	.+14     	; 0xb42 <vfprintf+0x4c>
     b34:	93 fd       	sbrc	r25, 3
     b36:	85 91       	lpm	r24, Z+
     b38:	93 ff       	sbrs	r25, 3
     b3a:	81 91       	ld	r24, Z+
     b3c:	7f 01       	movw	r14, r30
     b3e:	85 32       	cpi	r24, 0x25	; 37
     b40:	29 f4       	brne	.+10     	; 0xb4c <vfprintf+0x56>
     b42:	b6 01       	movw	r22, r12
     b44:	90 e0       	ldi	r25, 0x00	; 0
     b46:	0e 94 72 07 	call	0xee4	; 0xee4 <fputc>
     b4a:	e7 cf       	rjmp	.-50     	; 0xb1a <vfprintf+0x24>
     b4c:	91 2c       	mov	r9, r1
     b4e:	21 2c       	mov	r2, r1
     b50:	31 2c       	mov	r3, r1
     b52:	ff e1       	ldi	r31, 0x1F	; 31
     b54:	f3 15       	cp	r31, r3
     b56:	d8 f0       	brcs	.+54     	; 0xb8e <vfprintf+0x98>
     b58:	8b 32       	cpi	r24, 0x2B	; 43
     b5a:	79 f0       	breq	.+30     	; 0xb7a <vfprintf+0x84>
     b5c:	38 f4       	brcc	.+14     	; 0xb6c <vfprintf+0x76>
     b5e:	80 32       	cpi	r24, 0x20	; 32
     b60:	79 f0       	breq	.+30     	; 0xb80 <vfprintf+0x8a>
     b62:	83 32       	cpi	r24, 0x23	; 35
     b64:	a1 f4       	brne	.+40     	; 0xb8e <vfprintf+0x98>
     b66:	23 2d       	mov	r18, r3
     b68:	20 61       	ori	r18, 0x10	; 16
     b6a:	1d c0       	rjmp	.+58     	; 0xba6 <vfprintf+0xb0>
     b6c:	8d 32       	cpi	r24, 0x2D	; 45
     b6e:	61 f0       	breq	.+24     	; 0xb88 <vfprintf+0x92>
     b70:	80 33       	cpi	r24, 0x30	; 48
     b72:	69 f4       	brne	.+26     	; 0xb8e <vfprintf+0x98>
     b74:	23 2d       	mov	r18, r3
     b76:	21 60       	ori	r18, 0x01	; 1
     b78:	16 c0       	rjmp	.+44     	; 0xba6 <vfprintf+0xb0>
     b7a:	83 2d       	mov	r24, r3
     b7c:	82 60       	ori	r24, 0x02	; 2
     b7e:	38 2e       	mov	r3, r24
     b80:	e3 2d       	mov	r30, r3
     b82:	e4 60       	ori	r30, 0x04	; 4
     b84:	3e 2e       	mov	r3, r30
     b86:	2a c0       	rjmp	.+84     	; 0xbdc <vfprintf+0xe6>
     b88:	f3 2d       	mov	r31, r3
     b8a:	f8 60       	ori	r31, 0x08	; 8
     b8c:	1d c0       	rjmp	.+58     	; 0xbc8 <vfprintf+0xd2>
     b8e:	37 fc       	sbrc	r3, 7
     b90:	2d c0       	rjmp	.+90     	; 0xbec <vfprintf+0xf6>
     b92:	20 ed       	ldi	r18, 0xD0	; 208
     b94:	28 0f       	add	r18, r24
     b96:	2a 30       	cpi	r18, 0x0A	; 10
     b98:	40 f0       	brcs	.+16     	; 0xbaa <vfprintf+0xb4>
     b9a:	8e 32       	cpi	r24, 0x2E	; 46
     b9c:	b9 f4       	brne	.+46     	; 0xbcc <vfprintf+0xd6>
     b9e:	36 fc       	sbrc	r3, 6
     ba0:	81 c1       	rjmp	.+770    	; 0xea4 <vfprintf+0x3ae>
     ba2:	23 2d       	mov	r18, r3
     ba4:	20 64       	ori	r18, 0x40	; 64
     ba6:	32 2e       	mov	r3, r18
     ba8:	19 c0       	rjmp	.+50     	; 0xbdc <vfprintf+0xe6>
     baa:	36 fe       	sbrs	r3, 6
     bac:	06 c0       	rjmp	.+12     	; 0xbba <vfprintf+0xc4>
     bae:	8a e0       	ldi	r24, 0x0A	; 10
     bb0:	98 9e       	mul	r9, r24
     bb2:	20 0d       	add	r18, r0
     bb4:	11 24       	eor	r1, r1
     bb6:	92 2e       	mov	r9, r18
     bb8:	11 c0       	rjmp	.+34     	; 0xbdc <vfprintf+0xe6>
     bba:	ea e0       	ldi	r30, 0x0A	; 10
     bbc:	2e 9e       	mul	r2, r30
     bbe:	20 0d       	add	r18, r0
     bc0:	11 24       	eor	r1, r1
     bc2:	22 2e       	mov	r2, r18
     bc4:	f3 2d       	mov	r31, r3
     bc6:	f0 62       	ori	r31, 0x20	; 32
     bc8:	3f 2e       	mov	r3, r31
     bca:	08 c0       	rjmp	.+16     	; 0xbdc <vfprintf+0xe6>
     bcc:	8c 36       	cpi	r24, 0x6C	; 108
     bce:	21 f4       	brne	.+8      	; 0xbd8 <vfprintf+0xe2>
     bd0:	83 2d       	mov	r24, r3
     bd2:	80 68       	ori	r24, 0x80	; 128
     bd4:	38 2e       	mov	r3, r24
     bd6:	02 c0       	rjmp	.+4      	; 0xbdc <vfprintf+0xe6>
     bd8:	88 36       	cpi	r24, 0x68	; 104
     bda:	41 f4       	brne	.+16     	; 0xbec <vfprintf+0xf6>
     bdc:	f7 01       	movw	r30, r14
     bde:	93 fd       	sbrc	r25, 3
     be0:	85 91       	lpm	r24, Z+
     be2:	93 ff       	sbrs	r25, 3
     be4:	81 91       	ld	r24, Z+
     be6:	7f 01       	movw	r14, r30
     be8:	81 11       	cpse	r24, r1
     bea:	b3 cf       	rjmp	.-154    	; 0xb52 <vfprintf+0x5c>
     bec:	98 2f       	mov	r25, r24
     bee:	9f 7d       	andi	r25, 0xDF	; 223
     bf0:	95 54       	subi	r25, 0x45	; 69
     bf2:	93 30       	cpi	r25, 0x03	; 3
     bf4:	28 f4       	brcc	.+10     	; 0xc00 <vfprintf+0x10a>
     bf6:	0c 5f       	subi	r16, 0xFC	; 252
     bf8:	1f 4f       	sbci	r17, 0xFF	; 255
     bfa:	9f e3       	ldi	r25, 0x3F	; 63
     bfc:	99 83       	std	Y+1, r25	; 0x01
     bfe:	0d c0       	rjmp	.+26     	; 0xc1a <vfprintf+0x124>
     c00:	83 36       	cpi	r24, 0x63	; 99
     c02:	31 f0       	breq	.+12     	; 0xc10 <vfprintf+0x11a>
     c04:	83 37       	cpi	r24, 0x73	; 115
     c06:	71 f0       	breq	.+28     	; 0xc24 <vfprintf+0x12e>
     c08:	83 35       	cpi	r24, 0x53	; 83
     c0a:	09 f0       	breq	.+2      	; 0xc0e <vfprintf+0x118>
     c0c:	59 c0       	rjmp	.+178    	; 0xcc0 <vfprintf+0x1ca>
     c0e:	21 c0       	rjmp	.+66     	; 0xc52 <vfprintf+0x15c>
     c10:	f8 01       	movw	r30, r16
     c12:	80 81       	ld	r24, Z
     c14:	89 83       	std	Y+1, r24	; 0x01
     c16:	0e 5f       	subi	r16, 0xFE	; 254
     c18:	1f 4f       	sbci	r17, 0xFF	; 255
     c1a:	88 24       	eor	r8, r8
     c1c:	83 94       	inc	r8
     c1e:	91 2c       	mov	r9, r1
     c20:	53 01       	movw	r10, r6
     c22:	13 c0       	rjmp	.+38     	; 0xc4a <vfprintf+0x154>
     c24:	28 01       	movw	r4, r16
     c26:	f2 e0       	ldi	r31, 0x02	; 2
     c28:	4f 0e       	add	r4, r31
     c2a:	51 1c       	adc	r5, r1
     c2c:	f8 01       	movw	r30, r16
     c2e:	a0 80       	ld	r10, Z
     c30:	b1 80       	ldd	r11, Z+1	; 0x01
     c32:	36 fe       	sbrs	r3, 6
     c34:	03 c0       	rjmp	.+6      	; 0xc3c <vfprintf+0x146>
     c36:	69 2d       	mov	r22, r9
     c38:	70 e0       	ldi	r23, 0x00	; 0
     c3a:	02 c0       	rjmp	.+4      	; 0xc40 <vfprintf+0x14a>
     c3c:	6f ef       	ldi	r22, 0xFF	; 255
     c3e:	7f ef       	ldi	r23, 0xFF	; 255
     c40:	c5 01       	movw	r24, r10
     c42:	0e 94 67 07 	call	0xece	; 0xece <strnlen>
     c46:	4c 01       	movw	r8, r24
     c48:	82 01       	movw	r16, r4
     c4a:	f3 2d       	mov	r31, r3
     c4c:	ff 77       	andi	r31, 0x7F	; 127
     c4e:	3f 2e       	mov	r3, r31
     c50:	16 c0       	rjmp	.+44     	; 0xc7e <vfprintf+0x188>
     c52:	28 01       	movw	r4, r16
     c54:	22 e0       	ldi	r18, 0x02	; 2
     c56:	42 0e       	add	r4, r18
     c58:	51 1c       	adc	r5, r1
     c5a:	f8 01       	movw	r30, r16
     c5c:	a0 80       	ld	r10, Z
     c5e:	b1 80       	ldd	r11, Z+1	; 0x01
     c60:	36 fe       	sbrs	r3, 6
     c62:	03 c0       	rjmp	.+6      	; 0xc6a <vfprintf+0x174>
     c64:	69 2d       	mov	r22, r9
     c66:	70 e0       	ldi	r23, 0x00	; 0
     c68:	02 c0       	rjmp	.+4      	; 0xc6e <vfprintf+0x178>
     c6a:	6f ef       	ldi	r22, 0xFF	; 255
     c6c:	7f ef       	ldi	r23, 0xFF	; 255
     c6e:	c5 01       	movw	r24, r10
     c70:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <strnlen_P>
     c74:	4c 01       	movw	r8, r24
     c76:	f3 2d       	mov	r31, r3
     c78:	f0 68       	ori	r31, 0x80	; 128
     c7a:	3f 2e       	mov	r3, r31
     c7c:	82 01       	movw	r16, r4
     c7e:	33 fc       	sbrc	r3, 3
     c80:	1b c0       	rjmp	.+54     	; 0xcb8 <vfprintf+0x1c2>
     c82:	82 2d       	mov	r24, r2
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	88 16       	cp	r8, r24
     c88:	99 06       	cpc	r9, r25
     c8a:	b0 f4       	brcc	.+44     	; 0xcb8 <vfprintf+0x1c2>
     c8c:	b6 01       	movw	r22, r12
     c8e:	80 e2       	ldi	r24, 0x20	; 32
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	0e 94 72 07 	call	0xee4	; 0xee4 <fputc>
     c96:	2a 94       	dec	r2
     c98:	f4 cf       	rjmp	.-24     	; 0xc82 <vfprintf+0x18c>
     c9a:	f5 01       	movw	r30, r10
     c9c:	37 fc       	sbrc	r3, 7
     c9e:	85 91       	lpm	r24, Z+
     ca0:	37 fe       	sbrs	r3, 7
     ca2:	81 91       	ld	r24, Z+
     ca4:	5f 01       	movw	r10, r30
     ca6:	b6 01       	movw	r22, r12
     ca8:	90 e0       	ldi	r25, 0x00	; 0
     caa:	0e 94 72 07 	call	0xee4	; 0xee4 <fputc>
     cae:	21 10       	cpse	r2, r1
     cb0:	2a 94       	dec	r2
     cb2:	21 e0       	ldi	r18, 0x01	; 1
     cb4:	82 1a       	sub	r8, r18
     cb6:	91 08       	sbc	r9, r1
     cb8:	81 14       	cp	r8, r1
     cba:	91 04       	cpc	r9, r1
     cbc:	71 f7       	brne	.-36     	; 0xc9a <vfprintf+0x1a4>
     cbe:	e8 c0       	rjmp	.+464    	; 0xe90 <vfprintf+0x39a>
     cc0:	84 36       	cpi	r24, 0x64	; 100
     cc2:	11 f0       	breq	.+4      	; 0xcc8 <vfprintf+0x1d2>
     cc4:	89 36       	cpi	r24, 0x69	; 105
     cc6:	41 f5       	brne	.+80     	; 0xd18 <vfprintf+0x222>
     cc8:	f8 01       	movw	r30, r16
     cca:	37 fe       	sbrs	r3, 7
     ccc:	07 c0       	rjmp	.+14     	; 0xcdc <vfprintf+0x1e6>
     cce:	60 81       	ld	r22, Z
     cd0:	71 81       	ldd	r23, Z+1	; 0x01
     cd2:	82 81       	ldd	r24, Z+2	; 0x02
     cd4:	93 81       	ldd	r25, Z+3	; 0x03
     cd6:	0c 5f       	subi	r16, 0xFC	; 252
     cd8:	1f 4f       	sbci	r17, 0xFF	; 255
     cda:	08 c0       	rjmp	.+16     	; 0xcec <vfprintf+0x1f6>
     cdc:	60 81       	ld	r22, Z
     cde:	71 81       	ldd	r23, Z+1	; 0x01
     ce0:	07 2e       	mov	r0, r23
     ce2:	00 0c       	add	r0, r0
     ce4:	88 0b       	sbc	r24, r24
     ce6:	99 0b       	sbc	r25, r25
     ce8:	0e 5f       	subi	r16, 0xFE	; 254
     cea:	1f 4f       	sbci	r17, 0xFF	; 255
     cec:	f3 2d       	mov	r31, r3
     cee:	ff 76       	andi	r31, 0x6F	; 111
     cf0:	3f 2e       	mov	r3, r31
     cf2:	97 ff       	sbrs	r25, 7
     cf4:	09 c0       	rjmp	.+18     	; 0xd08 <vfprintf+0x212>
     cf6:	90 95       	com	r25
     cf8:	80 95       	com	r24
     cfa:	70 95       	com	r23
     cfc:	61 95       	neg	r22
     cfe:	7f 4f       	sbci	r23, 0xFF	; 255
     d00:	8f 4f       	sbci	r24, 0xFF	; 255
     d02:	9f 4f       	sbci	r25, 0xFF	; 255
     d04:	f0 68       	ori	r31, 0x80	; 128
     d06:	3f 2e       	mov	r3, r31
     d08:	2a e0       	ldi	r18, 0x0A	; 10
     d0a:	30 e0       	ldi	r19, 0x00	; 0
     d0c:	a3 01       	movw	r20, r6
     d0e:	0e 94 ae 07 	call	0xf5c	; 0xf5c <__ultoa_invert>
     d12:	88 2e       	mov	r8, r24
     d14:	86 18       	sub	r8, r6
     d16:	45 c0       	rjmp	.+138    	; 0xda2 <vfprintf+0x2ac>
     d18:	85 37       	cpi	r24, 0x75	; 117
     d1a:	31 f4       	brne	.+12     	; 0xd28 <vfprintf+0x232>
     d1c:	23 2d       	mov	r18, r3
     d1e:	2f 7e       	andi	r18, 0xEF	; 239
     d20:	b2 2e       	mov	r11, r18
     d22:	2a e0       	ldi	r18, 0x0A	; 10
     d24:	30 e0       	ldi	r19, 0x00	; 0
     d26:	25 c0       	rjmp	.+74     	; 0xd72 <vfprintf+0x27c>
     d28:	93 2d       	mov	r25, r3
     d2a:	99 7f       	andi	r25, 0xF9	; 249
     d2c:	b9 2e       	mov	r11, r25
     d2e:	8f 36       	cpi	r24, 0x6F	; 111
     d30:	c1 f0       	breq	.+48     	; 0xd62 <vfprintf+0x26c>
     d32:	18 f4       	brcc	.+6      	; 0xd3a <vfprintf+0x244>
     d34:	88 35       	cpi	r24, 0x58	; 88
     d36:	79 f0       	breq	.+30     	; 0xd56 <vfprintf+0x260>
     d38:	b5 c0       	rjmp	.+362    	; 0xea4 <vfprintf+0x3ae>
     d3a:	80 37       	cpi	r24, 0x70	; 112
     d3c:	19 f0       	breq	.+6      	; 0xd44 <vfprintf+0x24e>
     d3e:	88 37       	cpi	r24, 0x78	; 120
     d40:	21 f0       	breq	.+8      	; 0xd4a <vfprintf+0x254>
     d42:	b0 c0       	rjmp	.+352    	; 0xea4 <vfprintf+0x3ae>
     d44:	e9 2f       	mov	r30, r25
     d46:	e0 61       	ori	r30, 0x10	; 16
     d48:	be 2e       	mov	r11, r30
     d4a:	b4 fe       	sbrs	r11, 4
     d4c:	0d c0       	rjmp	.+26     	; 0xd68 <vfprintf+0x272>
     d4e:	fb 2d       	mov	r31, r11
     d50:	f4 60       	ori	r31, 0x04	; 4
     d52:	bf 2e       	mov	r11, r31
     d54:	09 c0       	rjmp	.+18     	; 0xd68 <vfprintf+0x272>
     d56:	34 fe       	sbrs	r3, 4
     d58:	0a c0       	rjmp	.+20     	; 0xd6e <vfprintf+0x278>
     d5a:	29 2f       	mov	r18, r25
     d5c:	26 60       	ori	r18, 0x06	; 6
     d5e:	b2 2e       	mov	r11, r18
     d60:	06 c0       	rjmp	.+12     	; 0xd6e <vfprintf+0x278>
     d62:	28 e0       	ldi	r18, 0x08	; 8
     d64:	30 e0       	ldi	r19, 0x00	; 0
     d66:	05 c0       	rjmp	.+10     	; 0xd72 <vfprintf+0x27c>
     d68:	20 e1       	ldi	r18, 0x10	; 16
     d6a:	30 e0       	ldi	r19, 0x00	; 0
     d6c:	02 c0       	rjmp	.+4      	; 0xd72 <vfprintf+0x27c>
     d6e:	20 e1       	ldi	r18, 0x10	; 16
     d70:	32 e0       	ldi	r19, 0x02	; 2
     d72:	f8 01       	movw	r30, r16
     d74:	b7 fe       	sbrs	r11, 7
     d76:	07 c0       	rjmp	.+14     	; 0xd86 <vfprintf+0x290>
     d78:	60 81       	ld	r22, Z
     d7a:	71 81       	ldd	r23, Z+1	; 0x01
     d7c:	82 81       	ldd	r24, Z+2	; 0x02
     d7e:	93 81       	ldd	r25, Z+3	; 0x03
     d80:	0c 5f       	subi	r16, 0xFC	; 252
     d82:	1f 4f       	sbci	r17, 0xFF	; 255
     d84:	06 c0       	rjmp	.+12     	; 0xd92 <vfprintf+0x29c>
     d86:	60 81       	ld	r22, Z
     d88:	71 81       	ldd	r23, Z+1	; 0x01
     d8a:	80 e0       	ldi	r24, 0x00	; 0
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	0e 5f       	subi	r16, 0xFE	; 254
     d90:	1f 4f       	sbci	r17, 0xFF	; 255
     d92:	a3 01       	movw	r20, r6
     d94:	0e 94 ae 07 	call	0xf5c	; 0xf5c <__ultoa_invert>
     d98:	88 2e       	mov	r8, r24
     d9a:	86 18       	sub	r8, r6
     d9c:	fb 2d       	mov	r31, r11
     d9e:	ff 77       	andi	r31, 0x7F	; 127
     da0:	3f 2e       	mov	r3, r31
     da2:	36 fe       	sbrs	r3, 6
     da4:	0d c0       	rjmp	.+26     	; 0xdc0 <vfprintf+0x2ca>
     da6:	23 2d       	mov	r18, r3
     da8:	2e 7f       	andi	r18, 0xFE	; 254
     daa:	a2 2e       	mov	r10, r18
     dac:	89 14       	cp	r8, r9
     dae:	58 f4       	brcc	.+22     	; 0xdc6 <vfprintf+0x2d0>
     db0:	34 fe       	sbrs	r3, 4
     db2:	0b c0       	rjmp	.+22     	; 0xdca <vfprintf+0x2d4>
     db4:	32 fc       	sbrc	r3, 2
     db6:	09 c0       	rjmp	.+18     	; 0xdca <vfprintf+0x2d4>
     db8:	83 2d       	mov	r24, r3
     dba:	8e 7e       	andi	r24, 0xEE	; 238
     dbc:	a8 2e       	mov	r10, r24
     dbe:	05 c0       	rjmp	.+10     	; 0xdca <vfprintf+0x2d4>
     dc0:	b8 2c       	mov	r11, r8
     dc2:	a3 2c       	mov	r10, r3
     dc4:	03 c0       	rjmp	.+6      	; 0xdcc <vfprintf+0x2d6>
     dc6:	b8 2c       	mov	r11, r8
     dc8:	01 c0       	rjmp	.+2      	; 0xdcc <vfprintf+0x2d6>
     dca:	b9 2c       	mov	r11, r9
     dcc:	a4 fe       	sbrs	r10, 4
     dce:	0f c0       	rjmp	.+30     	; 0xdee <vfprintf+0x2f8>
     dd0:	fe 01       	movw	r30, r28
     dd2:	e8 0d       	add	r30, r8
     dd4:	f1 1d       	adc	r31, r1
     dd6:	80 81       	ld	r24, Z
     dd8:	80 33       	cpi	r24, 0x30	; 48
     dda:	21 f4       	brne	.+8      	; 0xde4 <vfprintf+0x2ee>
     ddc:	9a 2d       	mov	r25, r10
     dde:	99 7e       	andi	r25, 0xE9	; 233
     de0:	a9 2e       	mov	r10, r25
     de2:	09 c0       	rjmp	.+18     	; 0xdf6 <vfprintf+0x300>
     de4:	a2 fe       	sbrs	r10, 2
     de6:	06 c0       	rjmp	.+12     	; 0xdf4 <vfprintf+0x2fe>
     de8:	b3 94       	inc	r11
     dea:	b3 94       	inc	r11
     dec:	04 c0       	rjmp	.+8      	; 0xdf6 <vfprintf+0x300>
     dee:	8a 2d       	mov	r24, r10
     df0:	86 78       	andi	r24, 0x86	; 134
     df2:	09 f0       	breq	.+2      	; 0xdf6 <vfprintf+0x300>
     df4:	b3 94       	inc	r11
     df6:	a3 fc       	sbrc	r10, 3
     df8:	11 c0       	rjmp	.+34     	; 0xe1c <vfprintf+0x326>
     dfa:	a0 fe       	sbrs	r10, 0
     dfc:	06 c0       	rjmp	.+12     	; 0xe0a <vfprintf+0x314>
     dfe:	b2 14       	cp	r11, r2
     e00:	88 f4       	brcc	.+34     	; 0xe24 <vfprintf+0x32e>
     e02:	28 0c       	add	r2, r8
     e04:	92 2c       	mov	r9, r2
     e06:	9b 18       	sub	r9, r11
     e08:	0e c0       	rjmp	.+28     	; 0xe26 <vfprintf+0x330>
     e0a:	b2 14       	cp	r11, r2
     e0c:	60 f4       	brcc	.+24     	; 0xe26 <vfprintf+0x330>
     e0e:	b6 01       	movw	r22, r12
     e10:	80 e2       	ldi	r24, 0x20	; 32
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	0e 94 72 07 	call	0xee4	; 0xee4 <fputc>
     e18:	b3 94       	inc	r11
     e1a:	f7 cf       	rjmp	.-18     	; 0xe0a <vfprintf+0x314>
     e1c:	b2 14       	cp	r11, r2
     e1e:	18 f4       	brcc	.+6      	; 0xe26 <vfprintf+0x330>
     e20:	2b 18       	sub	r2, r11
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <vfprintf+0x332>
     e24:	98 2c       	mov	r9, r8
     e26:	21 2c       	mov	r2, r1
     e28:	a4 fe       	sbrs	r10, 4
     e2a:	10 c0       	rjmp	.+32     	; 0xe4c <vfprintf+0x356>
     e2c:	b6 01       	movw	r22, r12
     e2e:	80 e3       	ldi	r24, 0x30	; 48
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	0e 94 72 07 	call	0xee4	; 0xee4 <fputc>
     e36:	a2 fe       	sbrs	r10, 2
     e38:	17 c0       	rjmp	.+46     	; 0xe68 <vfprintf+0x372>
     e3a:	a1 fc       	sbrc	r10, 1
     e3c:	03 c0       	rjmp	.+6      	; 0xe44 <vfprintf+0x34e>
     e3e:	88 e7       	ldi	r24, 0x78	; 120
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	02 c0       	rjmp	.+4      	; 0xe48 <vfprintf+0x352>
     e44:	88 e5       	ldi	r24, 0x58	; 88
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	b6 01       	movw	r22, r12
     e4a:	0c c0       	rjmp	.+24     	; 0xe64 <vfprintf+0x36e>
     e4c:	8a 2d       	mov	r24, r10
     e4e:	86 78       	andi	r24, 0x86	; 134
     e50:	59 f0       	breq	.+22     	; 0xe68 <vfprintf+0x372>
     e52:	a1 fe       	sbrs	r10, 1
     e54:	02 c0       	rjmp	.+4      	; 0xe5a <vfprintf+0x364>
     e56:	8b e2       	ldi	r24, 0x2B	; 43
     e58:	01 c0       	rjmp	.+2      	; 0xe5c <vfprintf+0x366>
     e5a:	80 e2       	ldi	r24, 0x20	; 32
     e5c:	a7 fc       	sbrc	r10, 7
     e5e:	8d e2       	ldi	r24, 0x2D	; 45
     e60:	b6 01       	movw	r22, r12
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	0e 94 72 07 	call	0xee4	; 0xee4 <fputc>
     e68:	89 14       	cp	r8, r9
     e6a:	38 f4       	brcc	.+14     	; 0xe7a <vfprintf+0x384>
     e6c:	b6 01       	movw	r22, r12
     e6e:	80 e3       	ldi	r24, 0x30	; 48
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	0e 94 72 07 	call	0xee4	; 0xee4 <fputc>
     e76:	9a 94       	dec	r9
     e78:	f7 cf       	rjmp	.-18     	; 0xe68 <vfprintf+0x372>
     e7a:	8a 94       	dec	r8
     e7c:	f3 01       	movw	r30, r6
     e7e:	e8 0d       	add	r30, r8
     e80:	f1 1d       	adc	r31, r1
     e82:	80 81       	ld	r24, Z
     e84:	b6 01       	movw	r22, r12
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	0e 94 72 07 	call	0xee4	; 0xee4 <fputc>
     e8c:	81 10       	cpse	r8, r1
     e8e:	f5 cf       	rjmp	.-22     	; 0xe7a <vfprintf+0x384>
     e90:	22 20       	and	r2, r2
     e92:	09 f4       	brne	.+2      	; 0xe96 <vfprintf+0x3a0>
     e94:	42 ce       	rjmp	.-892    	; 0xb1a <vfprintf+0x24>
     e96:	b6 01       	movw	r22, r12
     e98:	80 e2       	ldi	r24, 0x20	; 32
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	0e 94 72 07 	call	0xee4	; 0xee4 <fputc>
     ea0:	2a 94       	dec	r2
     ea2:	f6 cf       	rjmp	.-20     	; 0xe90 <vfprintf+0x39a>
     ea4:	f6 01       	movw	r30, r12
     ea6:	86 81       	ldd	r24, Z+6	; 0x06
     ea8:	97 81       	ldd	r25, Z+7	; 0x07
     eaa:	02 c0       	rjmp	.+4      	; 0xeb0 <vfprintf+0x3ba>
     eac:	8f ef       	ldi	r24, 0xFF	; 255
     eae:	9f ef       	ldi	r25, 0xFF	; 255
     eb0:	2b 96       	adiw	r28, 0x0b	; 11
     eb2:	e2 e1       	ldi	r30, 0x12	; 18
     eb4:	0c 94 25 08 	jmp	0x104a	; 0x104a <__epilogue_restores__>

00000eb8 <strnlen_P>:
     eb8:	fc 01       	movw	r30, r24
     eba:	05 90       	lpm	r0, Z+
     ebc:	61 50       	subi	r22, 0x01	; 1
     ebe:	70 40       	sbci	r23, 0x00	; 0
     ec0:	01 10       	cpse	r0, r1
     ec2:	d8 f7       	brcc	.-10     	; 0xeba <strnlen_P+0x2>
     ec4:	80 95       	com	r24
     ec6:	90 95       	com	r25
     ec8:	8e 0f       	add	r24, r30
     eca:	9f 1f       	adc	r25, r31
     ecc:	08 95       	ret

00000ece <strnlen>:
     ece:	fc 01       	movw	r30, r24
     ed0:	61 50       	subi	r22, 0x01	; 1
     ed2:	70 40       	sbci	r23, 0x00	; 0
     ed4:	01 90       	ld	r0, Z+
     ed6:	01 10       	cpse	r0, r1
     ed8:	d8 f7       	brcc	.-10     	; 0xed0 <strnlen+0x2>
     eda:	80 95       	com	r24
     edc:	90 95       	com	r25
     ede:	8e 0f       	add	r24, r30
     ee0:	9f 1f       	adc	r25, r31
     ee2:	08 95       	ret

00000ee4 <fputc>:
     ee4:	0f 93       	push	r16
     ee6:	1f 93       	push	r17
     ee8:	cf 93       	push	r28
     eea:	df 93       	push	r29
     eec:	fb 01       	movw	r30, r22
     eee:	23 81       	ldd	r18, Z+3	; 0x03
     ef0:	21 fd       	sbrc	r18, 1
     ef2:	03 c0       	rjmp	.+6      	; 0xefa <fputc+0x16>
     ef4:	8f ef       	ldi	r24, 0xFF	; 255
     ef6:	9f ef       	ldi	r25, 0xFF	; 255
     ef8:	2c c0       	rjmp	.+88     	; 0xf52 <fputc+0x6e>
     efa:	22 ff       	sbrs	r18, 2
     efc:	16 c0       	rjmp	.+44     	; 0xf2a <fputc+0x46>
     efe:	46 81       	ldd	r20, Z+6	; 0x06
     f00:	57 81       	ldd	r21, Z+7	; 0x07
     f02:	24 81       	ldd	r18, Z+4	; 0x04
     f04:	35 81       	ldd	r19, Z+5	; 0x05
     f06:	42 17       	cp	r20, r18
     f08:	53 07       	cpc	r21, r19
     f0a:	44 f4       	brge	.+16     	; 0xf1c <fputc+0x38>
     f0c:	a0 81       	ld	r26, Z
     f0e:	b1 81       	ldd	r27, Z+1	; 0x01
     f10:	9d 01       	movw	r18, r26
     f12:	2f 5f       	subi	r18, 0xFF	; 255
     f14:	3f 4f       	sbci	r19, 0xFF	; 255
     f16:	20 83       	st	Z, r18
     f18:	31 83       	std	Z+1, r19	; 0x01
     f1a:	8c 93       	st	X, r24
     f1c:	26 81       	ldd	r18, Z+6	; 0x06
     f1e:	37 81       	ldd	r19, Z+7	; 0x07
     f20:	2f 5f       	subi	r18, 0xFF	; 255
     f22:	3f 4f       	sbci	r19, 0xFF	; 255
     f24:	26 83       	std	Z+6, r18	; 0x06
     f26:	37 83       	std	Z+7, r19	; 0x07
     f28:	14 c0       	rjmp	.+40     	; 0xf52 <fputc+0x6e>
     f2a:	8b 01       	movw	r16, r22
     f2c:	ec 01       	movw	r28, r24
     f2e:	fb 01       	movw	r30, r22
     f30:	00 84       	ldd	r0, Z+8	; 0x08
     f32:	f1 85       	ldd	r31, Z+9	; 0x09
     f34:	e0 2d       	mov	r30, r0
     f36:	09 95       	icall
     f38:	89 2b       	or	r24, r25
     f3a:	e1 f6       	brne	.-72     	; 0xef4 <fputc+0x10>
     f3c:	d8 01       	movw	r26, r16
     f3e:	16 96       	adiw	r26, 0x06	; 6
     f40:	8d 91       	ld	r24, X+
     f42:	9c 91       	ld	r25, X
     f44:	17 97       	sbiw	r26, 0x07	; 7
     f46:	01 96       	adiw	r24, 0x01	; 1
     f48:	16 96       	adiw	r26, 0x06	; 6
     f4a:	8d 93       	st	X+, r24
     f4c:	9c 93       	st	X, r25
     f4e:	17 97       	sbiw	r26, 0x07	; 7
     f50:	ce 01       	movw	r24, r28
     f52:	df 91       	pop	r29
     f54:	cf 91       	pop	r28
     f56:	1f 91       	pop	r17
     f58:	0f 91       	pop	r16
     f5a:	08 95       	ret

00000f5c <__ultoa_invert>:
     f5c:	fa 01       	movw	r30, r20
     f5e:	aa 27       	eor	r26, r26
     f60:	28 30       	cpi	r18, 0x08	; 8
     f62:	51 f1       	breq	.+84     	; 0xfb8 <__ultoa_invert+0x5c>
     f64:	20 31       	cpi	r18, 0x10	; 16
     f66:	81 f1       	breq	.+96     	; 0xfc8 <__ultoa_invert+0x6c>
     f68:	e8 94       	clt
     f6a:	6f 93       	push	r22
     f6c:	6e 7f       	andi	r22, 0xFE	; 254
     f6e:	6e 5f       	subi	r22, 0xFE	; 254
     f70:	7f 4f       	sbci	r23, 0xFF	; 255
     f72:	8f 4f       	sbci	r24, 0xFF	; 255
     f74:	9f 4f       	sbci	r25, 0xFF	; 255
     f76:	af 4f       	sbci	r26, 0xFF	; 255
     f78:	b1 e0       	ldi	r27, 0x01	; 1
     f7a:	3e d0       	rcall	.+124    	; 0xff8 <__ultoa_invert+0x9c>
     f7c:	b4 e0       	ldi	r27, 0x04	; 4
     f7e:	3c d0       	rcall	.+120    	; 0xff8 <__ultoa_invert+0x9c>
     f80:	67 0f       	add	r22, r23
     f82:	78 1f       	adc	r23, r24
     f84:	89 1f       	adc	r24, r25
     f86:	9a 1f       	adc	r25, r26
     f88:	a1 1d       	adc	r26, r1
     f8a:	68 0f       	add	r22, r24
     f8c:	79 1f       	adc	r23, r25
     f8e:	8a 1f       	adc	r24, r26
     f90:	91 1d       	adc	r25, r1
     f92:	a1 1d       	adc	r26, r1
     f94:	6a 0f       	add	r22, r26
     f96:	71 1d       	adc	r23, r1
     f98:	81 1d       	adc	r24, r1
     f9a:	91 1d       	adc	r25, r1
     f9c:	a1 1d       	adc	r26, r1
     f9e:	20 d0       	rcall	.+64     	; 0xfe0 <__ultoa_invert+0x84>
     fa0:	09 f4       	brne	.+2      	; 0xfa4 <__ultoa_invert+0x48>
     fa2:	68 94       	set
     fa4:	3f 91       	pop	r19
     fa6:	2a e0       	ldi	r18, 0x0A	; 10
     fa8:	26 9f       	mul	r18, r22
     faa:	11 24       	eor	r1, r1
     fac:	30 19       	sub	r19, r0
     fae:	30 5d       	subi	r19, 0xD0	; 208
     fb0:	31 93       	st	Z+, r19
     fb2:	de f6       	brtc	.-74     	; 0xf6a <__ultoa_invert+0xe>
     fb4:	cf 01       	movw	r24, r30
     fb6:	08 95       	ret
     fb8:	46 2f       	mov	r20, r22
     fba:	47 70       	andi	r20, 0x07	; 7
     fbc:	40 5d       	subi	r20, 0xD0	; 208
     fbe:	41 93       	st	Z+, r20
     fc0:	b3 e0       	ldi	r27, 0x03	; 3
     fc2:	0f d0       	rcall	.+30     	; 0xfe2 <__ultoa_invert+0x86>
     fc4:	c9 f7       	brne	.-14     	; 0xfb8 <__ultoa_invert+0x5c>
     fc6:	f6 cf       	rjmp	.-20     	; 0xfb4 <__ultoa_invert+0x58>
     fc8:	46 2f       	mov	r20, r22
     fca:	4f 70       	andi	r20, 0x0F	; 15
     fcc:	40 5d       	subi	r20, 0xD0	; 208
     fce:	4a 33       	cpi	r20, 0x3A	; 58
     fd0:	18 f0       	brcs	.+6      	; 0xfd8 <__ultoa_invert+0x7c>
     fd2:	49 5d       	subi	r20, 0xD9	; 217
     fd4:	31 fd       	sbrc	r19, 1
     fd6:	40 52       	subi	r20, 0x20	; 32
     fd8:	41 93       	st	Z+, r20
     fda:	02 d0       	rcall	.+4      	; 0xfe0 <__ultoa_invert+0x84>
     fdc:	a9 f7       	brne	.-22     	; 0xfc8 <__ultoa_invert+0x6c>
     fde:	ea cf       	rjmp	.-44     	; 0xfb4 <__ultoa_invert+0x58>
     fe0:	b4 e0       	ldi	r27, 0x04	; 4
     fe2:	a6 95       	lsr	r26
     fe4:	97 95       	ror	r25
     fe6:	87 95       	ror	r24
     fe8:	77 95       	ror	r23
     fea:	67 95       	ror	r22
     fec:	ba 95       	dec	r27
     fee:	c9 f7       	brne	.-14     	; 0xfe2 <__ultoa_invert+0x86>
     ff0:	00 97       	sbiw	r24, 0x00	; 0
     ff2:	61 05       	cpc	r22, r1
     ff4:	71 05       	cpc	r23, r1
     ff6:	08 95       	ret
     ff8:	9b 01       	movw	r18, r22
     ffa:	ac 01       	movw	r20, r24
     ffc:	0a 2e       	mov	r0, r26
     ffe:	06 94       	lsr	r0
    1000:	57 95       	ror	r21
    1002:	47 95       	ror	r20
    1004:	37 95       	ror	r19
    1006:	27 95       	ror	r18
    1008:	ba 95       	dec	r27
    100a:	c9 f7       	brne	.-14     	; 0xffe <__ultoa_invert+0xa2>
    100c:	62 0f       	add	r22, r18
    100e:	73 1f       	adc	r23, r19
    1010:	84 1f       	adc	r24, r20
    1012:	95 1f       	adc	r25, r21
    1014:	a0 1d       	adc	r26, r0
    1016:	08 95       	ret

00001018 <__prologue_saves__>:
    1018:	2f 92       	push	r2
    101a:	3f 92       	push	r3
    101c:	4f 92       	push	r4
    101e:	5f 92       	push	r5
    1020:	6f 92       	push	r6
    1022:	7f 92       	push	r7
    1024:	8f 92       	push	r8
    1026:	9f 92       	push	r9
    1028:	af 92       	push	r10
    102a:	bf 92       	push	r11
    102c:	cf 92       	push	r12
    102e:	df 92       	push	r13
    1030:	ef 92       	push	r14
    1032:	ff 92       	push	r15
    1034:	0f 93       	push	r16
    1036:	1f 93       	push	r17
    1038:	cf 93       	push	r28
    103a:	df 93       	push	r29
    103c:	cd b7       	in	r28, 0x3d	; 61
    103e:	de b7       	in	r29, 0x3e	; 62
    1040:	ca 1b       	sub	r28, r26
    1042:	db 0b       	sbc	r29, r27
    1044:	cd bf       	out	0x3d, r28	; 61
    1046:	de bf       	out	0x3e, r29	; 62
    1048:	09 94       	ijmp

0000104a <__epilogue_restores__>:
    104a:	2a 88       	ldd	r2, Y+18	; 0x12
    104c:	39 88       	ldd	r3, Y+17	; 0x11
    104e:	48 88       	ldd	r4, Y+16	; 0x10
    1050:	5f 84       	ldd	r5, Y+15	; 0x0f
    1052:	6e 84       	ldd	r6, Y+14	; 0x0e
    1054:	7d 84       	ldd	r7, Y+13	; 0x0d
    1056:	8c 84       	ldd	r8, Y+12	; 0x0c
    1058:	9b 84       	ldd	r9, Y+11	; 0x0b
    105a:	aa 84       	ldd	r10, Y+10	; 0x0a
    105c:	b9 84       	ldd	r11, Y+9	; 0x09
    105e:	c8 84       	ldd	r12, Y+8	; 0x08
    1060:	df 80       	ldd	r13, Y+7	; 0x07
    1062:	ee 80       	ldd	r14, Y+6	; 0x06
    1064:	fd 80       	ldd	r15, Y+5	; 0x05
    1066:	0c 81       	ldd	r16, Y+4	; 0x04
    1068:	1b 81       	ldd	r17, Y+3	; 0x03
    106a:	aa 81       	ldd	r26, Y+2	; 0x02
    106c:	b9 81       	ldd	r27, Y+1	; 0x01
    106e:	ce 0f       	add	r28, r30
    1070:	d1 1d       	adc	r29, r1
    1072:	cd bf       	out	0x3d, r28	; 61
    1074:	de bf       	out	0x3e, r29	; 62
    1076:	ed 01       	movw	r28, r26
    1078:	08 95       	ret

0000107a <_exit>:
    107a:	f8 94       	cli

0000107c <__stop_program>:
    107c:	ff cf       	rjmp	.-2      	; 0x107c <__stop_program>
