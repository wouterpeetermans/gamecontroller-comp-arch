
gamecontroller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000714  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00802000  00000714  000007a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  0080200e  0080200e  000007b6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007b6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000188  00000000  00000000  00000828  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000eb7  00000000  00000000  000009b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000625  00000000  00000000  00001867  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000018c3  00000000  00000000  00001e8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000364  00000000  00000000  00003750  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00011cf8  00000000  00000000  00003ab4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000054b  00000000  00000000  000157ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  00015cf7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000058d5  00000000  00000000  00015def  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__ctors_end>
   4:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
   8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
   c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  10:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  14:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  18:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  1c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  20:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  24:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  28:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  2c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  30:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  34:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  38:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  3c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  40:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  44:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  48:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  4c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  50:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  54:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  58:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  5c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  60:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  64:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  68:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  6c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  70:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  74:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  78:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  7c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  80:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  84:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  88:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  8c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  90:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  94:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  98:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  9c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  a0:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  a4:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  a8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  ac:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  b0:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  b4:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  b8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  bc:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  c0:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  c4:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  c8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  cc:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  d0:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  d4:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  d8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  dc:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  e0:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  e4:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  e8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  ec:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  f0:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  f4:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  f8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  fc:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 100:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 104:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 108:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 10c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 110:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 114:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 118:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 11c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 120:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 124:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 128:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 12c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 130:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 134:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 138:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 13c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 140:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 144:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 148:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 14c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 150:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 154:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 158:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 15c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 160:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 164:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 168:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>

0000016c <__ctors_end>:
 16c:	11 24       	eor	r1, r1
 16e:	1f be       	out	0x3f, r1	; 63
 170:	cf ef       	ldi	r28, 0xFF	; 255
 172:	cd bf       	out	0x3d, r28	; 61
 174:	d7 e2       	ldi	r29, 0x27	; 39
 176:	de bf       	out	0x3e, r29	; 62

00000178 <__do_copy_data>:
 178:	10 e2       	ldi	r17, 0x20	; 32
 17a:	a0 e0       	ldi	r26, 0x00	; 0
 17c:	b0 e2       	ldi	r27, 0x20	; 32
 17e:	e4 e1       	ldi	r30, 0x14	; 20
 180:	f7 e0       	ldi	r31, 0x07	; 7
 182:	02 c0       	rjmp	.+4      	; 0x188 <__do_copy_data+0x10>
 184:	05 90       	lpm	r0, Z+
 186:	0d 92       	st	X+, r0
 188:	ae 30       	cpi	r26, 0x0E	; 14
 18a:	b1 07       	cpc	r27, r17
 18c:	d9 f7       	brne	.-10     	; 0x184 <__do_copy_data+0xc>

0000018e <__do_clear_bss>:
 18e:	20 e2       	ldi	r18, 0x20	; 32
 190:	ae e0       	ldi	r26, 0x0E	; 14
 192:	b0 e2       	ldi	r27, 0x20	; 32
 194:	01 c0       	rjmp	.+2      	; 0x198 <.do_clear_bss_start>

00000196 <.do_clear_bss_loop>:
 196:	1d 92       	st	X+, r1

00000198 <.do_clear_bss_start>:
 198:	a4 31       	cpi	r26, 0x14	; 20
 19a:	b2 07       	cpc	r27, r18
 19c:	e1 f7       	brne	.-8      	; 0x196 <.do_clear_bss_loop>
 19e:	0e 94 fd 00 	call	0x1fa	; 0x1fa <main>
 1a2:	0c 94 88 03 	jmp	0x710	; 0x710 <_exit>

000001a6 <__bad_interrupt>:
 1a6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001aa <AccInit>:
#include "acc.h"



void AccInit(void)
{
 1aa:	cf 93       	push	r28
 1ac:	df 93       	push	r29
 1ae:	cd b7       	in	r28, 0x3d	; 61
 1b0:	de b7       	in	r29, 0x3e	; 62

	
}
 1b2:	00 00       	nop
 1b4:	df 91       	pop	r29
 1b6:	cf 91       	pop	r28
 1b8:	08 95       	ret

000001ba <AnalogInit>:
#include "Analog.h"
#include <avr/io.h>

void AnalogInit(void)
{
 1ba:	cf 93       	push	r28
 1bc:	df 93       	push	r29
 1be:	cd b7       	in	r28, 0x3d	; 61
 1c0:	de b7       	in	r29, 0x3e	; 62

}
 1c2:	00 00       	nop
 1c4:	df 91       	pop	r29
 1c6:	cf 91       	pop	r28
 1c8:	08 95       	ret

000001ca <ClockInit>:
#pragma GCC push_options
#pragma GCC optimize ("O2") //This function must be optimized to avoid too long time interval betwee CCP write and CLK.CTRL write (4 CLK CYC max)

void ClockInit(void)
{
	OSC.XOSCCTRL=0b11001011; //Clock<=16MHz	
 1ca:	8b ec       	ldi	r24, 0xCB	; 203
 1cc:	80 93 52 00 	sts	0x0052, r24	; 0x800052 <__TEXT_REGION_LENGTH__+0x700052>
	OSC.CTRL=0b01000; //Enable oscillator	
 1d0:	88 e0       	ldi	r24, 0x08	; 8
 1d2:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
	while (!(OSC.STATUS&0b1000)); //Wait until XTAL osc is ready
 1d6:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
 1da:	83 ff       	sbrs	r24, 3
 1dc:	fc cf       	rjmp	.-8      	; 0x1d6 <ClockInit+0xc>
	
	//Select XTAL osc as system CLK source
	CCP=0xd8;
 1de:	88 ed       	ldi	r24, 0xD8	; 216
 1e0:	84 bf       	out	0x34, r24	; 52
    CLK.CTRL=0b0011;
 1e2:	83 e0       	ldi	r24, 0x03	; 3
 1e4:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
 1e8:	08 95       	ret

000001ea <EncoderInit>:
#include <util/delay.h>
#include <stdio.h>
#include "encoder.h"

void EncoderInit(void)
{
 1ea:	cf 93       	push	r28
 1ec:	df 93       	push	r29
 1ee:	cd b7       	in	r28, 0x3d	; 61
 1f0:	de b7       	in	r29, 0x3e	; 62

}
 1f2:	00 00       	nop
 1f4:	df 91       	pop	r29
 1f6:	cf 91       	pop	r28
 1f8:	08 95       	ret

000001fa <main>:
char a;

void SimpleFunction(void);	//A simple function: print a counter (0 to 9) to the terminal

int main(void)
{	
 1fa:	cf 93       	push	r28
 1fc:	df 93       	push	r29
 1fe:	cd b7       	in	r28, 0x3d	; 61
 200:	de b7       	in	r29, 0x3e	; 62
 202:	60 97       	sbiw	r28, 0x10	; 16
 204:	cd bf       	out	0x3d, r28	; 61
 206:	de bf       	out	0x3e, r29	; 62

	
	//###1###
	 
	//Initialize subsystems
	ClockInit();			//Initialize system clock (16 MHz)
 208:	0e 94 e5 00 	call	0x1ca	; 0x1ca <ClockInit>
	USARTInit();			//Initialize USART and bind to stdout,stdin
 20c:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <USARTInit>
	AnalogInit();			//Initialize ADC
 210:	0e 94 dd 00 	call	0x1ba	; 0x1ba <AnalogInit>
	AccInit();				//Initialize accelerometer system
 214:	0e 94 d5 00 	call	0x1aa	; 0x1aa <AccInit>
	LEDInit();				//Initialize LEDs
 218:	0e 94 af 01 	call	0x35e	; 0x35e <LEDInit>
	SwitchInit();			//Initialize switches
 21c:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <SwitchInit>
	EncoderInit();			//Initialize encoder
 220:	0e 94 f5 00 	call	0x1ea	; 0x1ea <EncoderInit>
	SpeakerInit();			//Initialize speaker system
 224:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <SpeakerInit>
	
	//Enable interrupts
	PMIC.CTRL|=0b00000111;  //Enable low, medium, high priority interrupts
 228:	80 ea       	ldi	r24, 0xA0	; 160
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	20 ea       	ldi	r18, 0xA0	; 160
 22e:	30 e0       	ldi	r19, 0x00	; 0
 230:	f9 01       	movw	r30, r18
 232:	22 81       	ldd	r18, Z+2	; 0x02
 234:	27 60       	ori	r18, 0x07	; 7
 236:	fc 01       	movw	r30, r24
 238:	22 83       	std	Z+2, r18	; 0x02
	SREG|=0b10000000;		//Globale interrupt enable
 23a:	8f e3       	ldi	r24, 0x3F	; 63
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	2f e3       	ldi	r18, 0x3F	; 63
 240:	30 e0       	ldi	r19, 0x00	; 0
 242:	f9 01       	movw	r30, r18
 244:	20 81       	ld	r18, Z
 246:	20 68       	ori	r18, 0x80	; 128
 248:	fc 01       	movw	r30, r24
 24a:	20 83       	st	Z, r18
 24c:	80 e0       	ldi	r24, 0x00	; 0
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	aa ef       	ldi	r26, 0xFA	; 250
 252:	b3 e4       	ldi	r27, 0x43	; 67
 254:	8b 83       	std	Y+3, r24	; 0x03
 256:	9c 83       	std	Y+4, r25	; 0x04
 258:	ad 83       	std	Y+5, r26	; 0x05
 25a:	be 83       	std	Y+6, r27	; 0x06

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 25c:	20 e0       	ldi	r18, 0x00	; 0
 25e:	30 e0       	ldi	r19, 0x00	; 0
 260:	4a e7       	ldi	r20, 0x7A	; 122
 262:	55 e4       	ldi	r21, 0x45	; 69
 264:	6b 81       	ldd	r22, Y+3	; 0x03
 266:	7c 81       	ldd	r23, Y+4	; 0x04
 268:	8d 81       	ldd	r24, Y+5	; 0x05
 26a:	9e 81       	ldd	r25, Y+6	; 0x06
 26c:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <__mulsf3>
 270:	dc 01       	movw	r26, r24
 272:	cb 01       	movw	r24, r22
 274:	8f 83       	std	Y+7, r24	; 0x07
 276:	98 87       	std	Y+8, r25	; 0x08
 278:	a9 87       	std	Y+9, r26	; 0x09
 27a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
 27c:	20 e0       	ldi	r18, 0x00	; 0
 27e:	30 e0       	ldi	r19, 0x00	; 0
 280:	40 e8       	ldi	r20, 0x80	; 128
 282:	5f e3       	ldi	r21, 0x3F	; 63
 284:	6f 81       	ldd	r22, Y+7	; 0x07
 286:	78 85       	ldd	r23, Y+8	; 0x08
 288:	89 85       	ldd	r24, Y+9	; 0x09
 28a:	9a 85       	ldd	r25, Y+10	; 0x0a
 28c:	0e 94 6d 02 	call	0x4da	; 0x4da <__cmpsf2>
 290:	88 23       	and	r24, r24
 292:	2c f4       	brge	.+10     	; 0x29e <main+0xa4>
		__ticks = 1;
 294:	81 e0       	ldi	r24, 0x01	; 1
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	8b 87       	std	Y+11, r24	; 0x0b
 29a:	9c 87       	std	Y+12, r25	; 0x0c
 29c:	3f c0       	rjmp	.+126    	; 0x31c <main+0x122>
	else if (__tmp > 65535)
 29e:	20 e0       	ldi	r18, 0x00	; 0
 2a0:	3f ef       	ldi	r19, 0xFF	; 255
 2a2:	4f e7       	ldi	r20, 0x7F	; 127
 2a4:	57 e4       	ldi	r21, 0x47	; 71
 2a6:	6f 81       	ldd	r22, Y+7	; 0x07
 2a8:	78 85       	ldd	r23, Y+8	; 0x08
 2aa:	89 85       	ldd	r24, Y+9	; 0x09
 2ac:	9a 85       	ldd	r25, Y+10	; 0x0a
 2ae:	0e 94 ee 02 	call	0x5dc	; 0x5dc <__gesf2>
 2b2:	18 16       	cp	r1, r24
 2b4:	4c f5       	brge	.+82     	; 0x308 <main+0x10e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 2b6:	20 e0       	ldi	r18, 0x00	; 0
 2b8:	30 e0       	ldi	r19, 0x00	; 0
 2ba:	40 e2       	ldi	r20, 0x20	; 32
 2bc:	51 e4       	ldi	r21, 0x41	; 65
 2be:	6b 81       	ldd	r22, Y+3	; 0x03
 2c0:	7c 81       	ldd	r23, Y+4	; 0x04
 2c2:	8d 81       	ldd	r24, Y+5	; 0x05
 2c4:	9e 81       	ldd	r25, Y+6	; 0x06
 2c6:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <__mulsf3>
 2ca:	dc 01       	movw	r26, r24
 2cc:	cb 01       	movw	r24, r22
 2ce:	bc 01       	movw	r22, r24
 2d0:	cd 01       	movw	r24, r26
 2d2:	0e 94 72 02 	call	0x4e4	; 0x4e4 <__fixunssfsi>
 2d6:	dc 01       	movw	r26, r24
 2d8:	cb 01       	movw	r24, r22
 2da:	8b 87       	std	Y+11, r24	; 0x0b
 2dc:	9c 87       	std	Y+12, r25	; 0x0c
 2de:	0f c0       	rjmp	.+30     	; 0x2fe <main+0x104>
 2e0:	80 e9       	ldi	r24, 0x90	; 144
 2e2:	91 e0       	ldi	r25, 0x01	; 1
 2e4:	8d 87       	std	Y+13, r24	; 0x0d
 2e6:	9e 87       	std	Y+14, r25	; 0x0e
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 2e8:	8d 85       	ldd	r24, Y+13	; 0x0d
 2ea:	9e 85       	ldd	r25, Y+14	; 0x0e
 2ec:	01 97       	sbiw	r24, 0x01	; 1
 2ee:	f1 f7       	brne	.-4      	; 0x2ec <main+0xf2>
 2f0:	8d 87       	std	Y+13, r24	; 0x0d
 2f2:	9e 87       	std	Y+14, r25	; 0x0e
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2f4:	8b 85       	ldd	r24, Y+11	; 0x0b
 2f6:	9c 85       	ldd	r25, Y+12	; 0x0c
 2f8:	01 97       	sbiw	r24, 0x01	; 1
 2fa:	8b 87       	std	Y+11, r24	; 0x0b
 2fc:	9c 87       	std	Y+12, r25	; 0x0c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2fe:	8b 85       	ldd	r24, Y+11	; 0x0b
 300:	9c 85       	ldd	r25, Y+12	; 0x0c
 302:	89 2b       	or	r24, r25
 304:	69 f7       	brne	.-38     	; 0x2e0 <main+0xe6>
 306:	14 c0       	rjmp	.+40     	; 0x330 <main+0x136>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 308:	6f 81       	ldd	r22, Y+7	; 0x07
 30a:	78 85       	ldd	r23, Y+8	; 0x08
 30c:	89 85       	ldd	r24, Y+9	; 0x09
 30e:	9a 85       	ldd	r25, Y+10	; 0x0a
 310:	0e 94 72 02 	call	0x4e4	; 0x4e4 <__fixunssfsi>
 314:	dc 01       	movw	r26, r24
 316:	cb 01       	movw	r24, r22
 318:	8b 87       	std	Y+11, r24	; 0x0b
 31a:	9c 87       	std	Y+12, r25	; 0x0c
 31c:	8b 85       	ldd	r24, Y+11	; 0x0b
 31e:	9c 85       	ldd	r25, Y+12	; 0x0c
 320:	8f 87       	std	Y+15, r24	; 0x0f
 322:	98 8b       	std	Y+16, r25	; 0x10
 324:	8f 85       	ldd	r24, Y+15	; 0x0f
 326:	98 89       	ldd	r25, Y+16	; 0x10
 328:	01 97       	sbiw	r24, 0x01	; 1
 32a:	f1 f7       	brne	.-4      	; 0x328 <main+0x12e>
 32c:	8f 87       	std	Y+15, r24	; 0x0f
 32e:	98 8b       	std	Y+16, r25	; 0x10
	_delay_ms(500);
	
	
	
	while (1){
		for (int i = 0; i<4; i++)
 330:	19 82       	std	Y+1, r1	; 0x01
 332:	1a 82       	std	Y+2, r1	; 0x02
 334:	0f c0       	rjmp	.+30     	; 0x354 <main+0x15a>
		{
			LEDSet(0b00000001 << i);
 336:	81 e0       	ldi	r24, 0x01	; 1
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	09 80       	ldd	r0, Y+1	; 0x01
 33c:	02 c0       	rjmp	.+4      	; 0x342 <main+0x148>
 33e:	88 0f       	add	r24, r24
 340:	99 1f       	adc	r25, r25
 342:	0a 94       	dec	r0
 344:	e2 f7       	brpl	.-8      	; 0x33e <main+0x144>
 346:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <LEDSet>
	_delay_ms(500);
	
	
	
	while (1){
		for (int i = 0; i<4; i++)
 34a:	89 81       	ldd	r24, Y+1	; 0x01
 34c:	9a 81       	ldd	r25, Y+2	; 0x02
 34e:	01 96       	adiw	r24, 0x01	; 1
 350:	89 83       	std	Y+1, r24	; 0x01
 352:	9a 83       	std	Y+2, r25	; 0x02
 354:	89 81       	ldd	r24, Y+1	; 0x01
 356:	9a 81       	ldd	r25, Y+2	; 0x02
 358:	04 97       	sbiw	r24, 0x04	; 4
 35a:	6c f3       	brlt	.-38     	; 0x336 <main+0x13c>
		{
			LEDSet(0b00000001 << i);
		}
		
	}
 35c:	e9 cf       	rjmp	.-46     	; 0x330 <main+0x136>

0000035e <LEDInit>:
#include "LED.h"
#include <avr/io.h>

void LEDInit(void)
{
 35e:	cf 93       	push	r28
 360:	df 93       	push	r29
 362:	cd b7       	in	r28, 0x3d	; 61
 364:	de b7       	in	r29, 0x3e	; 62
	PORTE.DIRSET=0b00001111;
 366:	80 e8       	ldi	r24, 0x80	; 128
 368:	96 e0       	ldi	r25, 0x06	; 6
 36a:	2f e0       	ldi	r18, 0x0F	; 15
 36c:	fc 01       	movw	r30, r24
 36e:	21 83       	std	Z+1, r18	; 0x01
	PORTE.PIN0CTRL=0b01011000;
 370:	80 e8       	ldi	r24, 0x80	; 128
 372:	96 e0       	ldi	r25, 0x06	; 6
 374:	28 e5       	ldi	r18, 0x58	; 88
 376:	fc 01       	movw	r30, r24
 378:	20 8b       	std	Z+16, r18	; 0x10
	PORTE.PIN1CTRL=0b01011000;
 37a:	80 e8       	ldi	r24, 0x80	; 128
 37c:	96 e0       	ldi	r25, 0x06	; 6
 37e:	28 e5       	ldi	r18, 0x58	; 88
 380:	fc 01       	movw	r30, r24
 382:	21 8b       	std	Z+17, r18	; 0x11
	PORTE.PIN2CTRL=0b01011000;
 384:	80 e8       	ldi	r24, 0x80	; 128
 386:	96 e0       	ldi	r25, 0x06	; 6
 388:	28 e5       	ldi	r18, 0x58	; 88
 38a:	fc 01       	movw	r30, r24
 38c:	22 8b       	std	Z+18, r18	; 0x12
	PORTE.PIN3CTRL=0b01011000;
 38e:	80 e8       	ldi	r24, 0x80	; 128
 390:	96 e0       	ldi	r25, 0x06	; 6
 392:	28 e5       	ldi	r18, 0x58	; 88
 394:	fc 01       	movw	r30, r24
 396:	23 8b       	std	Z+19, r18	; 0x13
	
}
 398:	00 00       	nop
 39a:	df 91       	pop	r29
 39c:	cf 91       	pop	r28
 39e:	08 95       	ret

000003a0 <LEDSet>:
void LEDSet(char bitmask)
{
 3a0:	cf 93       	push	r28
 3a2:	df 93       	push	r29
 3a4:	1f 92       	push	r1
 3a6:	cd b7       	in	r28, 0x3d	; 61
 3a8:	de b7       	in	r29, 0x3e	; 62
 3aa:	89 83       	std	Y+1, r24	; 0x01
	PORTE.OUT= (bitmask & 0b11110000)|(PORTE.OUT & 0b00001111);
 3ac:	80 e8       	ldi	r24, 0x80	; 128
 3ae:	96 e0       	ldi	r25, 0x06	; 6
 3b0:	29 81       	ldd	r18, Y+1	; 0x01
 3b2:	42 2f       	mov	r20, r18
 3b4:	40 7f       	andi	r20, 0xF0	; 240
 3b6:	20 e8       	ldi	r18, 0x80	; 128
 3b8:	36 e0       	ldi	r19, 0x06	; 6
 3ba:	f9 01       	movw	r30, r18
 3bc:	24 81       	ldd	r18, Z+4	; 0x04
 3be:	2f 70       	andi	r18, 0x0F	; 15
 3c0:	24 2b       	or	r18, r20
 3c2:	fc 01       	movw	r30, r24
 3c4:	24 83       	std	Z+4, r18	; 0x04
 3c6:	00 00       	nop
 3c8:	0f 90       	pop	r0
 3ca:	df 91       	pop	r29
 3cc:	cf 91       	pop	r28
 3ce:	08 95       	ret

000003d0 <SpeakerInit>:
#include <avr/io.h>
#include <avr/interrupt.h>
#include "speaker.h"

void SpeakerInit(void)
{
 3d0:	cf 93       	push	r28
 3d2:	df 93       	push	r29
 3d4:	cd b7       	in	r28, 0x3d	; 61
 3d6:	de b7       	in	r29, 0x3e	; 62
		//TCC1.CTRLB=
		//TCC1.CTRLC=
		//TCC1.CTRLD=
		//TCC1.CTRLE=
		
}
 3d8:	00 00       	nop
 3da:	df 91       	pop	r29
 3dc:	cf 91       	pop	r28
 3de:	08 95       	ret

000003e0 <SwitchInit>:
#include "switch.h"
#include <avr/io.h>

void SwitchInit(void)
{
 3e0:	cf 93       	push	r28
 3e2:	df 93       	push	r29
 3e4:	cd b7       	in	r28, 0x3d	; 61
 3e6:	de b7       	in	r29, 0x3e	; 62
	//PORTD.PIN0CTRL=
	//PORTD.PIN4CTRL=
	//PORTD.PIN5CTRL=
	//PORTD.PIN6CTRL=
	//PORTD.PIN7CTRL=
}
 3e8:	00 00       	nop
 3ea:	df 91       	pop	r29
 3ec:	cf 91       	pop	r28
 3ee:	08 95       	ret

000003f0 <USARTInit>:
static int stdio_putchar(char c, FILE * stream);
static int stdio_getchar(FILE *stream);
static FILE UsartStdio = FDEV_SETUP_STREAM(stdio_putchar, stdio_getchar,_FDEV_SETUP_WRITE);

void USARTInit(void)
{
 3f0:	cf 93       	push	r28
 3f2:	df 93       	push	r29
 3f4:	cd b7       	in	r28, 0x3d	; 61
 3f6:	de b7       	in	r29, 0x3e	; 62
	USART_PORT.DIRSET=0b00001000;	
 3f8:	80 e6       	ldi	r24, 0x60	; 96
 3fa:	96 e0       	ldi	r25, 0x06	; 6
 3fc:	28 e0       	ldi	r18, 0x08	; 8
 3fe:	fc 01       	movw	r30, r24
 400:	21 83       	std	Z+1, r18	; 0x01
	USART_PORT.DIRCLR=0b00000100;
 402:	80 e6       	ldi	r24, 0x60	; 96
 404:	96 e0       	ldi	r25, 0x06	; 6
 406:	24 e0       	ldi	r18, 0x04	; 4
 408:	fc 01       	movw	r30, r24
 40a:	22 83       	std	Z+2, r18	; 0x02
	
	USART.CTRLA=0b00000000;
 40c:	80 ea       	ldi	r24, 0xA0	; 160
 40e:	99 e0       	ldi	r25, 0x09	; 9
 410:	fc 01       	movw	r30, r24
 412:	13 82       	std	Z+3, r1	; 0x03
	USART.CTRLB=0b00011000;
 414:	80 ea       	ldi	r24, 0xA0	; 160
 416:	99 e0       	ldi	r25, 0x09	; 9
 418:	28 e1       	ldi	r18, 0x18	; 24
 41a:	fc 01       	movw	r30, r24
 41c:	24 83       	std	Z+4, r18	; 0x04
	USART.CTRLC=0b00000011;
 41e:	80 ea       	ldi	r24, 0xA0	; 160
 420:	99 e0       	ldi	r25, 0x09	; 9
 422:	23 e0       	ldi	r18, 0x03	; 3
 424:	fc 01       	movw	r30, r24
 426:	25 83       	std	Z+5, r18	; 0x05
	
	USART.BAUDCTRLA=0xE5; //BSEL=3301, BSCALE=-5 9600 baud
 428:	80 ea       	ldi	r24, 0xA0	; 160
 42a:	99 e0       	ldi	r25, 0x09	; 9
 42c:	25 ee       	ldi	r18, 0xE5	; 229
 42e:	fc 01       	movw	r30, r24
 430:	26 83       	std	Z+6, r18	; 0x06
	USART.BAUDCTRLB=0xBC; 
 432:	80 ea       	ldi	r24, 0xA0	; 160
 434:	99 e0       	ldi	r25, 0x09	; 9
 436:	2c eb       	ldi	r18, 0xBC	; 188
 438:	fc 01       	movw	r30, r24
 43a:	27 83       	std	Z+7, r18	; 0x07
	
	stdout=&UsartStdio;
 43c:	80 e0       	ldi	r24, 0x00	; 0
 43e:	90 e2       	ldi	r25, 0x20	; 32
 440:	80 93 10 20 	sts	0x2010, r24	; 0x802010 <__data_end+0x2>
 444:	90 93 11 20 	sts	0x2011, r25	; 0x802011 <__data_end+0x3>
	stdin=&UsartStdio;
 448:	80 e0       	ldi	r24, 0x00	; 0
 44a:	90 e2       	ldi	r25, 0x20	; 32
 44c:	80 93 0e 20 	sts	0x200E, r24	; 0x80200e <__data_end>
 450:	90 93 0f 20 	sts	0x200F, r25	; 0x80200f <__data_end+0x1>
}
 454:	00 00       	nop
 456:	df 91       	pop	r29
 458:	cf 91       	pop	r28
 45a:	08 95       	ret

0000045c <stdio_putchar>:


static int stdio_putchar(char c, FILE * stream)
{
 45c:	cf 93       	push	r28
 45e:	df 93       	push	r29
 460:	00 d0       	rcall	.+0      	; 0x462 <stdio_putchar+0x6>
 462:	1f 92       	push	r1
 464:	cd b7       	in	r28, 0x3d	; 61
 466:	de b7       	in	r29, 0x3e	; 62
 468:	89 83       	std	Y+1, r24	; 0x01
 46a:	6a 83       	std	Y+2, r22	; 0x02
 46c:	7b 83       	std	Y+3, r23	; 0x03
	USART.DATA = c;
 46e:	80 ea       	ldi	r24, 0xA0	; 160
 470:	99 e0       	ldi	r25, 0x09	; 9
 472:	29 81       	ldd	r18, Y+1	; 0x01
 474:	fc 01       	movw	r30, r24
 476:	20 83       	st	Z, r18
	while (!(USART.STATUS & 0b01000000));
 478:	00 00       	nop
 47a:	80 ea       	ldi	r24, 0xA0	; 160
 47c:	99 e0       	ldi	r25, 0x09	; 9
 47e:	fc 01       	movw	r30, r24
 480:	81 81       	ldd	r24, Z+1	; 0x01
 482:	88 2f       	mov	r24, r24
 484:	90 e0       	ldi	r25, 0x00	; 0
 486:	80 74       	andi	r24, 0x40	; 64
 488:	99 27       	eor	r25, r25
 48a:	89 2b       	or	r24, r25
 48c:	b1 f3       	breq	.-20     	; 0x47a <stdio_putchar+0x1e>
	USART.STATUS=0b01000000;
 48e:	80 ea       	ldi	r24, 0xA0	; 160
 490:	99 e0       	ldi	r25, 0x09	; 9
 492:	20 e4       	ldi	r18, 0x40	; 64
 494:	fc 01       	movw	r30, r24
 496:	21 83       	std	Z+1, r18	; 0x01
	return 0;
 498:	80 e0       	ldi	r24, 0x00	; 0
 49a:	90 e0       	ldi	r25, 0x00	; 0
}
 49c:	23 96       	adiw	r28, 0x03	; 3
 49e:	cd bf       	out	0x3d, r28	; 61
 4a0:	de bf       	out	0x3e, r29	; 62
 4a2:	df 91       	pop	r29
 4a4:	cf 91       	pop	r28
 4a6:	08 95       	ret

000004a8 <stdio_getchar>:
	
static int stdio_getchar(FILE *stream)
{
 4a8:	cf 93       	push	r28
 4aa:	df 93       	push	r29
 4ac:	00 d0       	rcall	.+0      	; 0x4ae <stdio_getchar+0x6>
 4ae:	cd b7       	in	r28, 0x3d	; 61
 4b0:	de b7       	in	r29, 0x3e	; 62
 4b2:	89 83       	std	Y+1, r24	; 0x01
 4b4:	9a 83       	std	Y+2, r25	; 0x02
	while (!(USART.STATUS & 0b10000000));
 4b6:	00 00       	nop
 4b8:	80 ea       	ldi	r24, 0xA0	; 160
 4ba:	99 e0       	ldi	r25, 0x09	; 9
 4bc:	fc 01       	movw	r30, r24
 4be:	81 81       	ldd	r24, Z+1	; 0x01
 4c0:	88 23       	and	r24, r24
 4c2:	d4 f7       	brge	.-12     	; 0x4b8 <stdio_getchar+0x10>
	return USART.DATA;
 4c4:	80 ea       	ldi	r24, 0xA0	; 160
 4c6:	99 e0       	ldi	r25, 0x09	; 9
 4c8:	fc 01       	movw	r30, r24
 4ca:	80 81       	ld	r24, Z
 4cc:	88 2f       	mov	r24, r24
 4ce:	90 e0       	ldi	r25, 0x00	; 0
}
 4d0:	0f 90       	pop	r0
 4d2:	0f 90       	pop	r0
 4d4:	df 91       	pop	r29
 4d6:	cf 91       	pop	r28
 4d8:	08 95       	ret

000004da <__cmpsf2>:
 4da:	0e 94 a1 02 	call	0x542	; 0x542 <__fp_cmp>
 4de:	08 f4       	brcc	.+2      	; 0x4e2 <__cmpsf2+0x8>
 4e0:	81 e0       	ldi	r24, 0x01	; 1
 4e2:	08 95       	ret

000004e4 <__fixunssfsi>:
 4e4:	0e 94 cd 02 	call	0x59a	; 0x59a <__fp_splitA>
 4e8:	88 f0       	brcs	.+34     	; 0x50c <__fixunssfsi+0x28>
 4ea:	9f 57       	subi	r25, 0x7F	; 127
 4ec:	98 f0       	brcs	.+38     	; 0x514 <__fixunssfsi+0x30>
 4ee:	b9 2f       	mov	r27, r25
 4f0:	99 27       	eor	r25, r25
 4f2:	b7 51       	subi	r27, 0x17	; 23
 4f4:	b0 f0       	brcs	.+44     	; 0x522 <__fixunssfsi+0x3e>
 4f6:	e1 f0       	breq	.+56     	; 0x530 <__fixunssfsi+0x4c>
 4f8:	66 0f       	add	r22, r22
 4fa:	77 1f       	adc	r23, r23
 4fc:	88 1f       	adc	r24, r24
 4fe:	99 1f       	adc	r25, r25
 500:	1a f0       	brmi	.+6      	; 0x508 <__fixunssfsi+0x24>
 502:	ba 95       	dec	r27
 504:	c9 f7       	brne	.-14     	; 0x4f8 <__fixunssfsi+0x14>
 506:	14 c0       	rjmp	.+40     	; 0x530 <__fixunssfsi+0x4c>
 508:	b1 30       	cpi	r27, 0x01	; 1
 50a:	91 f0       	breq	.+36     	; 0x530 <__fixunssfsi+0x4c>
 50c:	0e 94 e7 02 	call	0x5ce	; 0x5ce <__fp_zero>
 510:	b1 e0       	ldi	r27, 0x01	; 1
 512:	08 95       	ret
 514:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__fp_zero>
 518:	67 2f       	mov	r22, r23
 51a:	78 2f       	mov	r23, r24
 51c:	88 27       	eor	r24, r24
 51e:	b8 5f       	subi	r27, 0xF8	; 248
 520:	39 f0       	breq	.+14     	; 0x530 <__fixunssfsi+0x4c>
 522:	b9 3f       	cpi	r27, 0xF9	; 249
 524:	cc f3       	brlt	.-14     	; 0x518 <__fixunssfsi+0x34>
 526:	86 95       	lsr	r24
 528:	77 95       	ror	r23
 52a:	67 95       	ror	r22
 52c:	b3 95       	inc	r27
 52e:	d9 f7       	brne	.-10     	; 0x526 <__fixunssfsi+0x42>
 530:	3e f4       	brtc	.+14     	; 0x540 <__fixunssfsi+0x5c>
 532:	90 95       	com	r25
 534:	80 95       	com	r24
 536:	70 95       	com	r23
 538:	61 95       	neg	r22
 53a:	7f 4f       	sbci	r23, 0xFF	; 255
 53c:	8f 4f       	sbci	r24, 0xFF	; 255
 53e:	9f 4f       	sbci	r25, 0xFF	; 255
 540:	08 95       	ret

00000542 <__fp_cmp>:
 542:	99 0f       	add	r25, r25
 544:	00 08       	sbc	r0, r0
 546:	55 0f       	add	r21, r21
 548:	aa 0b       	sbc	r26, r26
 54a:	e0 e8       	ldi	r30, 0x80	; 128
 54c:	fe ef       	ldi	r31, 0xFE	; 254
 54e:	16 16       	cp	r1, r22
 550:	17 06       	cpc	r1, r23
 552:	e8 07       	cpc	r30, r24
 554:	f9 07       	cpc	r31, r25
 556:	c0 f0       	brcs	.+48     	; 0x588 <__fp_cmp+0x46>
 558:	12 16       	cp	r1, r18
 55a:	13 06       	cpc	r1, r19
 55c:	e4 07       	cpc	r30, r20
 55e:	f5 07       	cpc	r31, r21
 560:	98 f0       	brcs	.+38     	; 0x588 <__fp_cmp+0x46>
 562:	62 1b       	sub	r22, r18
 564:	73 0b       	sbc	r23, r19
 566:	84 0b       	sbc	r24, r20
 568:	95 0b       	sbc	r25, r21
 56a:	39 f4       	brne	.+14     	; 0x57a <__fp_cmp+0x38>
 56c:	0a 26       	eor	r0, r26
 56e:	61 f0       	breq	.+24     	; 0x588 <__fp_cmp+0x46>
 570:	23 2b       	or	r18, r19
 572:	24 2b       	or	r18, r20
 574:	25 2b       	or	r18, r21
 576:	21 f4       	brne	.+8      	; 0x580 <__fp_cmp+0x3e>
 578:	08 95       	ret
 57a:	0a 26       	eor	r0, r26
 57c:	09 f4       	brne	.+2      	; 0x580 <__fp_cmp+0x3e>
 57e:	a1 40       	sbci	r26, 0x01	; 1
 580:	a6 95       	lsr	r26
 582:	8f ef       	ldi	r24, 0xFF	; 255
 584:	81 1d       	adc	r24, r1
 586:	81 1d       	adc	r24, r1
 588:	08 95       	ret

0000058a <__fp_split3>:
 58a:	57 fd       	sbrc	r21, 7
 58c:	90 58       	subi	r25, 0x80	; 128
 58e:	44 0f       	add	r20, r20
 590:	55 1f       	adc	r21, r21
 592:	59 f0       	breq	.+22     	; 0x5aa <__fp_splitA+0x10>
 594:	5f 3f       	cpi	r21, 0xFF	; 255
 596:	71 f0       	breq	.+28     	; 0x5b4 <__fp_splitA+0x1a>
 598:	47 95       	ror	r20

0000059a <__fp_splitA>:
 59a:	88 0f       	add	r24, r24
 59c:	97 fb       	bst	r25, 7
 59e:	99 1f       	adc	r25, r25
 5a0:	61 f0       	breq	.+24     	; 0x5ba <__fp_splitA+0x20>
 5a2:	9f 3f       	cpi	r25, 0xFF	; 255
 5a4:	79 f0       	breq	.+30     	; 0x5c4 <__fp_splitA+0x2a>
 5a6:	87 95       	ror	r24
 5a8:	08 95       	ret
 5aa:	12 16       	cp	r1, r18
 5ac:	13 06       	cpc	r1, r19
 5ae:	14 06       	cpc	r1, r20
 5b0:	55 1f       	adc	r21, r21
 5b2:	f2 cf       	rjmp	.-28     	; 0x598 <__fp_split3+0xe>
 5b4:	46 95       	lsr	r20
 5b6:	f1 df       	rcall	.-30     	; 0x59a <__fp_splitA>
 5b8:	08 c0       	rjmp	.+16     	; 0x5ca <__fp_splitA+0x30>
 5ba:	16 16       	cp	r1, r22
 5bc:	17 06       	cpc	r1, r23
 5be:	18 06       	cpc	r1, r24
 5c0:	99 1f       	adc	r25, r25
 5c2:	f1 cf       	rjmp	.-30     	; 0x5a6 <__fp_splitA+0xc>
 5c4:	86 95       	lsr	r24
 5c6:	71 05       	cpc	r23, r1
 5c8:	61 05       	cpc	r22, r1
 5ca:	08 94       	sec
 5cc:	08 95       	ret

000005ce <__fp_zero>:
 5ce:	e8 94       	clt

000005d0 <__fp_szero>:
 5d0:	bb 27       	eor	r27, r27
 5d2:	66 27       	eor	r22, r22
 5d4:	77 27       	eor	r23, r23
 5d6:	cb 01       	movw	r24, r22
 5d8:	97 f9       	bld	r25, 7
 5da:	08 95       	ret

000005dc <__gesf2>:
 5dc:	0e 94 a1 02 	call	0x542	; 0x542 <__fp_cmp>
 5e0:	08 f4       	brcc	.+2      	; 0x5e4 <__gesf2+0x8>
 5e2:	8f ef       	ldi	r24, 0xFF	; 255
 5e4:	08 95       	ret

000005e6 <__mulsf3>:
 5e6:	0e 94 06 03 	call	0x60c	; 0x60c <__mulsf3x>
 5ea:	0c 94 77 03 	jmp	0x6ee	; 0x6ee <__fp_round>
 5ee:	0e 94 69 03 	call	0x6d2	; 0x6d2 <__fp_pscA>
 5f2:	38 f0       	brcs	.+14     	; 0x602 <__mulsf3+0x1c>
 5f4:	0e 94 70 03 	call	0x6e0	; 0x6e0 <__fp_pscB>
 5f8:	20 f0       	brcs	.+8      	; 0x602 <__mulsf3+0x1c>
 5fa:	95 23       	and	r25, r21
 5fc:	11 f0       	breq	.+4      	; 0x602 <__mulsf3+0x1c>
 5fe:	0c 94 60 03 	jmp	0x6c0	; 0x6c0 <__fp_inf>
 602:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__fp_nan>
 606:	11 24       	eor	r1, r1
 608:	0c 94 e8 02 	jmp	0x5d0	; 0x5d0 <__fp_szero>

0000060c <__mulsf3x>:
 60c:	0e 94 c5 02 	call	0x58a	; 0x58a <__fp_split3>
 610:	70 f3       	brcs	.-36     	; 0x5ee <__mulsf3+0x8>

00000612 <__mulsf3_pse>:
 612:	95 9f       	mul	r25, r21
 614:	c1 f3       	breq	.-16     	; 0x606 <__mulsf3+0x20>
 616:	95 0f       	add	r25, r21
 618:	50 e0       	ldi	r21, 0x00	; 0
 61a:	55 1f       	adc	r21, r21
 61c:	62 9f       	mul	r22, r18
 61e:	f0 01       	movw	r30, r0
 620:	72 9f       	mul	r23, r18
 622:	bb 27       	eor	r27, r27
 624:	f0 0d       	add	r31, r0
 626:	b1 1d       	adc	r27, r1
 628:	63 9f       	mul	r22, r19
 62a:	aa 27       	eor	r26, r26
 62c:	f0 0d       	add	r31, r0
 62e:	b1 1d       	adc	r27, r1
 630:	aa 1f       	adc	r26, r26
 632:	64 9f       	mul	r22, r20
 634:	66 27       	eor	r22, r22
 636:	b0 0d       	add	r27, r0
 638:	a1 1d       	adc	r26, r1
 63a:	66 1f       	adc	r22, r22
 63c:	82 9f       	mul	r24, r18
 63e:	22 27       	eor	r18, r18
 640:	b0 0d       	add	r27, r0
 642:	a1 1d       	adc	r26, r1
 644:	62 1f       	adc	r22, r18
 646:	73 9f       	mul	r23, r19
 648:	b0 0d       	add	r27, r0
 64a:	a1 1d       	adc	r26, r1
 64c:	62 1f       	adc	r22, r18
 64e:	83 9f       	mul	r24, r19
 650:	a0 0d       	add	r26, r0
 652:	61 1d       	adc	r22, r1
 654:	22 1f       	adc	r18, r18
 656:	74 9f       	mul	r23, r20
 658:	33 27       	eor	r19, r19
 65a:	a0 0d       	add	r26, r0
 65c:	61 1d       	adc	r22, r1
 65e:	23 1f       	adc	r18, r19
 660:	84 9f       	mul	r24, r20
 662:	60 0d       	add	r22, r0
 664:	21 1d       	adc	r18, r1
 666:	82 2f       	mov	r24, r18
 668:	76 2f       	mov	r23, r22
 66a:	6a 2f       	mov	r22, r26
 66c:	11 24       	eor	r1, r1
 66e:	9f 57       	subi	r25, 0x7F	; 127
 670:	50 40       	sbci	r21, 0x00	; 0
 672:	9a f0       	brmi	.+38     	; 0x69a <__mulsf3_pse+0x88>
 674:	f1 f0       	breq	.+60     	; 0x6b2 <__mulsf3_pse+0xa0>
 676:	88 23       	and	r24, r24
 678:	4a f0       	brmi	.+18     	; 0x68c <__mulsf3_pse+0x7a>
 67a:	ee 0f       	add	r30, r30
 67c:	ff 1f       	adc	r31, r31
 67e:	bb 1f       	adc	r27, r27
 680:	66 1f       	adc	r22, r22
 682:	77 1f       	adc	r23, r23
 684:	88 1f       	adc	r24, r24
 686:	91 50       	subi	r25, 0x01	; 1
 688:	50 40       	sbci	r21, 0x00	; 0
 68a:	a9 f7       	brne	.-22     	; 0x676 <__mulsf3_pse+0x64>
 68c:	9e 3f       	cpi	r25, 0xFE	; 254
 68e:	51 05       	cpc	r21, r1
 690:	80 f0       	brcs	.+32     	; 0x6b2 <__mulsf3_pse+0xa0>
 692:	0c 94 60 03 	jmp	0x6c0	; 0x6c0 <__fp_inf>
 696:	0c 94 e8 02 	jmp	0x5d0	; 0x5d0 <__fp_szero>
 69a:	5f 3f       	cpi	r21, 0xFF	; 255
 69c:	e4 f3       	brlt	.-8      	; 0x696 <__mulsf3_pse+0x84>
 69e:	98 3e       	cpi	r25, 0xE8	; 232
 6a0:	d4 f3       	brlt	.-12     	; 0x696 <__mulsf3_pse+0x84>
 6a2:	86 95       	lsr	r24
 6a4:	77 95       	ror	r23
 6a6:	67 95       	ror	r22
 6a8:	b7 95       	ror	r27
 6aa:	f7 95       	ror	r31
 6ac:	e7 95       	ror	r30
 6ae:	9f 5f       	subi	r25, 0xFF	; 255
 6b0:	c1 f7       	brne	.-16     	; 0x6a2 <__mulsf3_pse+0x90>
 6b2:	fe 2b       	or	r31, r30
 6b4:	88 0f       	add	r24, r24
 6b6:	91 1d       	adc	r25, r1
 6b8:	96 95       	lsr	r25
 6ba:	87 95       	ror	r24
 6bc:	97 f9       	bld	r25, 7
 6be:	08 95       	ret

000006c0 <__fp_inf>:
 6c0:	97 f9       	bld	r25, 7
 6c2:	9f 67       	ori	r25, 0x7F	; 127
 6c4:	80 e8       	ldi	r24, 0x80	; 128
 6c6:	70 e0       	ldi	r23, 0x00	; 0
 6c8:	60 e0       	ldi	r22, 0x00	; 0
 6ca:	08 95       	ret

000006cc <__fp_nan>:
 6cc:	9f ef       	ldi	r25, 0xFF	; 255
 6ce:	80 ec       	ldi	r24, 0xC0	; 192
 6d0:	08 95       	ret

000006d2 <__fp_pscA>:
 6d2:	00 24       	eor	r0, r0
 6d4:	0a 94       	dec	r0
 6d6:	16 16       	cp	r1, r22
 6d8:	17 06       	cpc	r1, r23
 6da:	18 06       	cpc	r1, r24
 6dc:	09 06       	cpc	r0, r25
 6de:	08 95       	ret

000006e0 <__fp_pscB>:
 6e0:	00 24       	eor	r0, r0
 6e2:	0a 94       	dec	r0
 6e4:	12 16       	cp	r1, r18
 6e6:	13 06       	cpc	r1, r19
 6e8:	14 06       	cpc	r1, r20
 6ea:	05 06       	cpc	r0, r21
 6ec:	08 95       	ret

000006ee <__fp_round>:
 6ee:	09 2e       	mov	r0, r25
 6f0:	03 94       	inc	r0
 6f2:	00 0c       	add	r0, r0
 6f4:	11 f4       	brne	.+4      	; 0x6fa <__fp_round+0xc>
 6f6:	88 23       	and	r24, r24
 6f8:	52 f0       	brmi	.+20     	; 0x70e <__fp_round+0x20>
 6fa:	bb 0f       	add	r27, r27
 6fc:	40 f4       	brcc	.+16     	; 0x70e <__fp_round+0x20>
 6fe:	bf 2b       	or	r27, r31
 700:	11 f4       	brne	.+4      	; 0x706 <__fp_round+0x18>
 702:	60 ff       	sbrs	r22, 0
 704:	04 c0       	rjmp	.+8      	; 0x70e <__fp_round+0x20>
 706:	6f 5f       	subi	r22, 0xFF	; 255
 708:	7f 4f       	sbci	r23, 0xFF	; 255
 70a:	8f 4f       	sbci	r24, 0xFF	; 255
 70c:	9f 4f       	sbci	r25, 0xFF	; 255
 70e:	08 95       	ret

00000710 <_exit>:
 710:	f8 94       	cli

00000712 <__stop_program>:
 712:	ff cf       	rjmp	.-2      	; 0x712 <__stop_program>
